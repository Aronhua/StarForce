// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_achievementtype.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_achievementtype.proto</summary>
  public static partial class XlsBeansAchievementtypeReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_achievementtype.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansAchievementtypeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch94bHNfYmVhbnNfYWNoaWV2ZW1lbnR0eXBlLnByb3RvEgpEMTEuUGJlYW5z",
            "IrwBCg9BY2hpZXZlbWVudFR5cGUSCgoCaWQYASABKA0SEQoJdHJpZ2dlcklk",
            "GAIgASgJEhAKCGdhbWVNb2RlGAMgASgJEg8KB2dhbWVNYXAYBCABKAkSEgoK",
            "bWFpbkNvbmRJZBgFIAEoCRIVCg1tYWluQ29uZFZhbHVlGAYgASgJEjwKC3Rh",
            "c2tTdWJDb25kGAcgAygLMicuRDExLlBiZWFucy5BY2hpZXZlbWVudFR5cGVf",
            "dGFza1N1YkNvbmQiQAobQWNoaWV2ZW1lbnRUeXBlX3Rhc2tTdWJDb25kEg4K",
            "BmNvbmRJZBgBIAEoCRIRCgljb25kVmFsdWUYAiABKAkiQwoVQWNoaWV2ZW1l",
            "bnRUeXBlX0FycmF5EioKBWl0ZW1zGAEgAygLMhsuRDExLlBiZWFucy5BY2hp",
            "ZXZlbWVudFR5cGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.AchievementType), global::D11.Pbeans.AchievementType.Parser, new[]{ "Id", "TriggerId", "GameMode", "GameMap", "MainCondId", "MainCondValue", "TaskSubCond" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.AchievementType_taskSubCond), global::D11.Pbeans.AchievementType_taskSubCond.Parser, new[]{ "CondId", "CondValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.AchievementType_Array), global::D11.Pbeans.AchievementType_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AchievementType : pb::IMessage<AchievementType> {
    private static readonly pb::MessageParser<AchievementType> _parser = new pb::MessageParser<AchievementType>(() => new AchievementType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AchievementType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansAchievementtypeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementType(AchievementType other) : this() {
      id_ = other.id_;
      triggerId_ = other.triggerId_;
      gameMode_ = other.gameMode_;
      gameMap_ = other.gameMap_;
      mainCondId_ = other.mainCondId_;
      mainCondValue_ = other.mainCondValue_;
      taskSubCond_ = other.taskSubCond_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementType Clone() {
      return new AchievementType(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 类型ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "triggerId" field.</summary>
    public const int TriggerIdFieldNumber = 2;
    private string triggerId_ = "";
    /// <summary>
    /// 检测条件关联事件 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TriggerId {
      get { return triggerId_; }
      set {
        triggerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameMode" field.</summary>
    public const int GameModeFieldNumber = 3;
    private string gameMode_ = "";
    /// <summary>
    /// 地图模式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameMode {
      get { return gameMode_; }
      set {
        gameMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameMap" field.</summary>
    public const int GameMapFieldNumber = 4;
    private string gameMap_ = "";
    /// <summary>
    /// 地图类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameMap {
      get { return gameMap_; }
      set {
        gameMap_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mainCondId" field.</summary>
    public const int MainCondIdFieldNumber = 5;
    private string mainCondId_ = "";
    /// <summary>
    /// 任务检测主条件 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainCondId {
      get { return mainCondId_; }
      set {
        mainCondId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mainCondValue" field.</summary>
    public const int MainCondValueFieldNumber = 6;
    private string mainCondValue_ = "";
    /// <summary>
    /// 任务检测参数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainCondValue {
      get { return mainCondValue_; }
      set {
        mainCondValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taskSubCond" field.</summary>
    public const int TaskSubCondFieldNumber = 7;
    private static readonly pb::FieldCodec<global::D11.Pbeans.AchievementType_taskSubCond> _repeated_taskSubCond_codec
        = pb::FieldCodec.ForMessage(58, global::D11.Pbeans.AchievementType_taskSubCond.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.AchievementType_taskSubCond> taskSubCond_ = new pbc::RepeatedField<global::D11.Pbeans.AchievementType_taskSubCond>();
    /// <summary>
    /// 任务检测条件 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.AchievementType_taskSubCond> TaskSubCond {
      get { return taskSubCond_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AchievementType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AchievementType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TriggerId != other.TriggerId) return false;
      if (GameMode != other.GameMode) return false;
      if (GameMap != other.GameMap) return false;
      if (MainCondId != other.MainCondId) return false;
      if (MainCondValue != other.MainCondValue) return false;
      if(!taskSubCond_.Equals(other.taskSubCond_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (TriggerId.Length != 0) hash ^= TriggerId.GetHashCode();
      if (GameMode.Length != 0) hash ^= GameMode.GetHashCode();
      if (GameMap.Length != 0) hash ^= GameMap.GetHashCode();
      if (MainCondId.Length != 0) hash ^= MainCondId.GetHashCode();
      if (MainCondValue.Length != 0) hash ^= MainCondValue.GetHashCode();
      hash ^= taskSubCond_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (TriggerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TriggerId);
      }
      if (GameMode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameMode);
      }
      if (GameMap.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GameMap);
      }
      if (MainCondId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MainCondId);
      }
      if (MainCondValue.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MainCondValue);
      }
      taskSubCond_.WriteTo(output, _repeated_taskSubCond_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (TriggerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TriggerId);
      }
      if (GameMode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameMode);
      }
      if (GameMap.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameMap);
      }
      if (MainCondId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainCondId);
      }
      if (MainCondValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainCondValue);
      }
      size += taskSubCond_.CalculateSize(_repeated_taskSubCond_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AchievementType other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.TriggerId.Length != 0) {
        TriggerId = other.TriggerId;
      }
      if (other.GameMode.Length != 0) {
        GameMode = other.GameMode;
      }
      if (other.GameMap.Length != 0) {
        GameMap = other.GameMap;
      }
      if (other.MainCondId.Length != 0) {
        MainCondId = other.MainCondId;
      }
      if (other.MainCondValue.Length != 0) {
        MainCondValue = other.MainCondValue;
      }
      taskSubCond_.Add(other.taskSubCond_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            TriggerId = input.ReadString();
            break;
          }
          case 26: {
            GameMode = input.ReadString();
            break;
          }
          case 34: {
            GameMap = input.ReadString();
            break;
          }
          case 42: {
            MainCondId = input.ReadString();
            break;
          }
          case 50: {
            MainCondValue = input.ReadString();
            break;
          }
          case 58: {
            taskSubCond_.AddEntriesFrom(input, _repeated_taskSubCond_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AchievementType_taskSubCond : pb::IMessage<AchievementType_taskSubCond> {
    private static readonly pb::MessageParser<AchievementType_taskSubCond> _parser = new pb::MessageParser<AchievementType_taskSubCond>(() => new AchievementType_taskSubCond());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AchievementType_taskSubCond> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansAchievementtypeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementType_taskSubCond() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementType_taskSubCond(AchievementType_taskSubCond other) : this() {
      condId_ = other.condId_;
      condValue_ = other.condValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementType_taskSubCond Clone() {
      return new AchievementType_taskSubCond(this);
    }

    /// <summary>Field number for the "condId" field.</summary>
    public const int CondIdFieldNumber = 1;
    private string condId_ = "";
    /// <summary>
    /// 任务检测条件 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CondId {
      get { return condId_; }
      set {
        condId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "condValue" field.</summary>
    public const int CondValueFieldNumber = 2;
    private string condValue_ = "";
    /// <summary>
    /// 任务检测参数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CondValue {
      get { return condValue_; }
      set {
        condValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AchievementType_taskSubCond);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AchievementType_taskSubCond other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CondId != other.CondId) return false;
      if (CondValue != other.CondValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CondId.Length != 0) hash ^= CondId.GetHashCode();
      if (CondValue.Length != 0) hash ^= CondValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CondId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CondId);
      }
      if (CondValue.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CondValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CondId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CondId);
      }
      if (CondValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CondValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AchievementType_taskSubCond other) {
      if (other == null) {
        return;
      }
      if (other.CondId.Length != 0) {
        CondId = other.CondId;
      }
      if (other.CondValue.Length != 0) {
        CondValue = other.CondValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CondId = input.ReadString();
            break;
          }
          case 18: {
            CondValue = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AchievementType_Array : pb::IMessage<AchievementType_Array> {
    private static readonly pb::MessageParser<AchievementType_Array> _parser = new pb::MessageParser<AchievementType_Array>(() => new AchievementType_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AchievementType_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansAchievementtypeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementType_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementType_Array(AchievementType_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementType_Array Clone() {
      return new AchievementType_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.AchievementType> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.AchievementType.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.AchievementType> items_ = new pbc::RepeatedField<global::D11.Pbeans.AchievementType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.AchievementType> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AchievementType_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AchievementType_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AchievementType_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
