// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_ballisticlistconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_ballisticlistconfig.proto</summary>
  public static partial class XlsBeansBallisticlistconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_ballisticlistconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansBallisticlistconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiN4bHNfYmVhbnNfYmFsbGlzdGljbGlzdGNvbmZpZy5wcm90bxIKRDExLlBi",
            "ZWFucyKEAgoTQmFsbGlzdGljTGlzdENvbmZpZxIKCgJpZBgBIAEoDRIVCg1C",
            "YWxsaXN0aWNUeXBlGAIgASgNEhIKCkNvbmZpZ05hbWUYAyABKAkSFQoNQmFs",
            "bGlzdGljTmFtZRgEIAEoCRIUCgxCYWxsaXN0aWNEZXMYBSABKAkSGQoRVWx0",
            "cmFsZExpbWl0Q291bnQYBiABKA0SFAoMTGRMaW1pdENvdW50GAcgASgNEhQK",
            "DEhkTGltaXRDb3VudBgIIAEoDRIWCg5MaW1pdEd1blR5cGVJRBgJIAMoDRIZ",
            "ChFTcGVjaWZpY0d1blR5cGVJRBgKIAMoDRIPCgdRdWFsaXR5GAsgASgNIksK",
            "GUJhbGxpc3RpY0xpc3RDb25maWdfQXJyYXkSLgoFaXRlbXMYASADKAsyHy5E",
            "MTEuUGJlYW5zLkJhbGxpc3RpY0xpc3RDb25maWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BallisticListConfig), global::D11.Pbeans.BallisticListConfig.Parser, new[]{ "Id", "BallisticType", "ConfigName", "BallisticName", "BallisticDes", "UltraldLimitCount", "LdLimitCount", "HdLimitCount", "LimitGunTypeID", "SpecificGunTypeID", "Quality" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BallisticListConfig_Array), global::D11.Pbeans.BallisticListConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BallisticListConfig : pb::IMessage<BallisticListConfig> {
    private static readonly pb::MessageParser<BallisticListConfig> _parser = new pb::MessageParser<BallisticListConfig>(() => new BallisticListConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BallisticListConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBallisticlistconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallisticListConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallisticListConfig(BallisticListConfig other) : this() {
      id_ = other.id_;
      ballisticType_ = other.ballisticType_;
      configName_ = other.configName_;
      ballisticName_ = other.ballisticName_;
      ballisticDes_ = other.ballisticDes_;
      ultraldLimitCount_ = other.ultraldLimitCount_;
      ldLimitCount_ = other.ldLimitCount_;
      hdLimitCount_ = other.hdLimitCount_;
      limitGunTypeID_ = other.limitGunTypeID_.Clone();
      specificGunTypeID_ = other.specificGunTypeID_.Clone();
      quality_ = other.quality_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallisticListConfig Clone() {
      return new BallisticListConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 词条id 1001（1000000开头弹幕词条；2000000开头数值词条） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "BallisticType" field.</summary>
    public const int BallisticTypeFieldNumber = 2;
    private uint ballisticType_;
    /// <summary>
    /// 弹道类型 对应程序Enum结构 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BallisticType {
      get { return ballisticType_; }
      set {
        ballisticType_ = value;
      }
    }

    /// <summary>Field number for the "ConfigName" field.</summary>
    public const int ConfigNameFieldNumber = 3;
    private string configName_ = "";
    /// <summary>
    /// 弹道配置表名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConfigName {
      get { return configName_; }
      set {
        configName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BallisticName" field.</summary>
    public const int BallisticNameFieldNumber = 4;
    private string ballisticName_ = "";
    /// <summary>
    /// 弹幕名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BallisticName {
      get { return ballisticName_; }
      set {
        ballisticName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BallisticDes" field.</summary>
    public const int BallisticDesFieldNumber = 5;
    private string ballisticDes_ = "";
    /// <summary>
    /// 词条内容说明 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BallisticDes {
      get { return ballisticDes_; }
      set {
        ballisticDes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UltraldLimitCount" field.</summary>
    public const int UltraldLimitCountFieldNumber = 6;
    private uint ultraldLimitCount_;
    /// <summary>
    /// 超低配下显示个数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UltraldLimitCount {
      get { return ultraldLimitCount_; }
      set {
        ultraldLimitCount_ = value;
      }
    }

    /// <summary>Field number for the "LdLimitCount" field.</summary>
    public const int LdLimitCountFieldNumber = 7;
    private uint ldLimitCount_;
    /// <summary>
    /// 低配下显示个数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LdLimitCount {
      get { return ldLimitCount_; }
      set {
        ldLimitCount_ = value;
      }
    }

    /// <summary>Field number for the "HdLimitCount" field.</summary>
    public const int HdLimitCountFieldNumber = 8;
    private uint hdLimitCount_;
    /// <summary>
    /// 高配 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HdLimitCount {
      get { return hdLimitCount_; }
      set {
        hdLimitCount_ = value;
      }
    }

    /// <summary>Field number for the "LimitGunTypeID" field.</summary>
    public const int LimitGunTypeIDFieldNumber = 9;
    private static readonly pb::FieldCodec<uint> _repeated_limitGunTypeID_codec
        = pb::FieldCodec.ForUInt32(74);
    private readonly pbc::RepeatedField<uint> limitGunTypeID_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 枪械种类限制 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> LimitGunTypeID {
      get { return limitGunTypeID_; }
    }

    /// <summary>Field number for the "SpecificGunTypeID" field.</summary>
    public const int SpecificGunTypeIDFieldNumber = 10;
    private static readonly pb::FieldCodec<uint> _repeated_specificGunTypeID_codec
        = pb::FieldCodec.ForUInt32(82);
    private readonly pbc::RepeatedField<uint> specificGunTypeID_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 特有词条枪械种类 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SpecificGunTypeID {
      get { return specificGunTypeID_; }
    }

    /// <summary>Field number for the "Quality" field.</summary>
    public const int QualityFieldNumber = 11;
    private uint quality_;
    /// <summary>
    /// 品质 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BallisticListConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BallisticListConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BallisticType != other.BallisticType) return false;
      if (ConfigName != other.ConfigName) return false;
      if (BallisticName != other.BallisticName) return false;
      if (BallisticDes != other.BallisticDes) return false;
      if (UltraldLimitCount != other.UltraldLimitCount) return false;
      if (LdLimitCount != other.LdLimitCount) return false;
      if (HdLimitCount != other.HdLimitCount) return false;
      if(!limitGunTypeID_.Equals(other.limitGunTypeID_)) return false;
      if(!specificGunTypeID_.Equals(other.specificGunTypeID_)) return false;
      if (Quality != other.Quality) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BallisticType != 0) hash ^= BallisticType.GetHashCode();
      if (ConfigName.Length != 0) hash ^= ConfigName.GetHashCode();
      if (BallisticName.Length != 0) hash ^= BallisticName.GetHashCode();
      if (BallisticDes.Length != 0) hash ^= BallisticDes.GetHashCode();
      if (UltraldLimitCount != 0) hash ^= UltraldLimitCount.GetHashCode();
      if (LdLimitCount != 0) hash ^= LdLimitCount.GetHashCode();
      if (HdLimitCount != 0) hash ^= HdLimitCount.GetHashCode();
      hash ^= limitGunTypeID_.GetHashCode();
      hash ^= specificGunTypeID_.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (BallisticType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BallisticType);
      }
      if (ConfigName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ConfigName);
      }
      if (BallisticName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BallisticName);
      }
      if (BallisticDes.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BallisticDes);
      }
      if (UltraldLimitCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(UltraldLimitCount);
      }
      if (LdLimitCount != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LdLimitCount);
      }
      if (HdLimitCount != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(HdLimitCount);
      }
      limitGunTypeID_.WriteTo(output, _repeated_limitGunTypeID_codec);
      specificGunTypeID_.WriteTo(output, _repeated_specificGunTypeID_codec);
      if (Quality != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Quality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (BallisticType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BallisticType);
      }
      if (ConfigName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfigName);
      }
      if (BallisticName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BallisticName);
      }
      if (BallisticDes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BallisticDes);
      }
      if (UltraldLimitCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UltraldLimitCount);
      }
      if (LdLimitCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LdLimitCount);
      }
      if (HdLimitCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HdLimitCount);
      }
      size += limitGunTypeID_.CalculateSize(_repeated_limitGunTypeID_codec);
      size += specificGunTypeID_.CalculateSize(_repeated_specificGunTypeID_codec);
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quality);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BallisticListConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BallisticType != 0) {
        BallisticType = other.BallisticType;
      }
      if (other.ConfigName.Length != 0) {
        ConfigName = other.ConfigName;
      }
      if (other.BallisticName.Length != 0) {
        BallisticName = other.BallisticName;
      }
      if (other.BallisticDes.Length != 0) {
        BallisticDes = other.BallisticDes;
      }
      if (other.UltraldLimitCount != 0) {
        UltraldLimitCount = other.UltraldLimitCount;
      }
      if (other.LdLimitCount != 0) {
        LdLimitCount = other.LdLimitCount;
      }
      if (other.HdLimitCount != 0) {
        HdLimitCount = other.HdLimitCount;
      }
      limitGunTypeID_.Add(other.limitGunTypeID_);
      specificGunTypeID_.Add(other.specificGunTypeID_);
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            BallisticType = input.ReadUInt32();
            break;
          }
          case 26: {
            ConfigName = input.ReadString();
            break;
          }
          case 34: {
            BallisticName = input.ReadString();
            break;
          }
          case 42: {
            BallisticDes = input.ReadString();
            break;
          }
          case 48: {
            UltraldLimitCount = input.ReadUInt32();
            break;
          }
          case 56: {
            LdLimitCount = input.ReadUInt32();
            break;
          }
          case 64: {
            HdLimitCount = input.ReadUInt32();
            break;
          }
          case 74:
          case 72: {
            limitGunTypeID_.AddEntriesFrom(input, _repeated_limitGunTypeID_codec);
            break;
          }
          case 82:
          case 80: {
            specificGunTypeID_.AddEntriesFrom(input, _repeated_specificGunTypeID_codec);
            break;
          }
          case 88: {
            Quality = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BallisticListConfig_Array : pb::IMessage<BallisticListConfig_Array> {
    private static readonly pb::MessageParser<BallisticListConfig_Array> _parser = new pb::MessageParser<BallisticListConfig_Array>(() => new BallisticListConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BallisticListConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBallisticlistconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallisticListConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallisticListConfig_Array(BallisticListConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallisticListConfig_Array Clone() {
      return new BallisticListConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.BallisticListConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.BallisticListConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.BallisticListConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.BallisticListConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.BallisticListConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BallisticListConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BallisticListConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BallisticListConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
