// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_battleeventconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_battleeventconfig.proto</summary>
  public static partial class XlsBeansBattleeventconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_battleeventconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansBattleeventconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiF4bHNfYmVhbnNfYmF0dGxlZXZlbnRjb25maWcucHJvdG8SCkQxMS5QYmVh",
            "bnMi7gEKEUJhdHRsZUV2ZW50Q29uZmlnEgoKAmlkGAEgASgNEhEKCUV2ZW50",
            "VHlwZRgCIAEoDRIWCg5DbGllbnRPclNlcnZlchgDIAEoDRIQCghJbnRWYWx1",
            "ZRgEIAMoBRISCgpGbG9hdFZhbHVlGAUgAygCEhEKCUJvb2xWYWx1ZRgGIAMo",
            "CBITCgtzdHJpbmdWYWx1ZRgHIAMoCRIQCghFZmZldGNDRBgIIAEoAhIPCgdB",
            "dWRpb0NEGAkgASgCEg8KB09mZnNldFgYCiABKAISDwoHT2Zmc2V0WRgLIAEo",
            "AhIPCgdPZmZzZXRaGAwgASgCIkcKF0JhdHRsZUV2ZW50Q29uZmlnX0FycmF5",
            "EiwKBWl0ZW1zGAEgAygLMh0uRDExLlBiZWFucy5CYXR0bGVFdmVudENvbmZp",
            "Z2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BattleEventConfig), global::D11.Pbeans.BattleEventConfig.Parser, new[]{ "Id", "EventType", "ClientOrServer", "IntValue", "FloatValue", "BoolValue", "StringValue", "EffetcCD", "AudioCD", "OffsetX", "OffsetY", "OffsetZ" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BattleEventConfig_Array), global::D11.Pbeans.BattleEventConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BattleEventConfig : pb::IMessage<BattleEventConfig> {
    private static readonly pb::MessageParser<BattleEventConfig> _parser = new pb::MessageParser<BattleEventConfig>(() => new BattleEventConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleEventConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBattleeventconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEventConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEventConfig(BattleEventConfig other) : this() {
      id_ = other.id_;
      eventType_ = other.eventType_;
      clientOrServer_ = other.clientOrServer_;
      intValue_ = other.intValue_.Clone();
      floatValue_ = other.floatValue_.Clone();
      boolValue_ = other.boolValue_.Clone();
      stringValue_ = other.stringValue_.Clone();
      effetcCD_ = other.effetcCD_;
      audioCD_ = other.audioCD_;
      offsetX_ = other.offsetX_;
      offsetY_ = other.offsetY_;
      offsetZ_ = other.offsetZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEventConfig Clone() {
      return new BattleEventConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 编号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "EventType" field.</summary>
    public const int EventTypeFieldNumber = 2;
    private uint eventType_;
    /// <summary>
    /// 事件类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "ClientOrServer" field.</summary>
    public const int ClientOrServerFieldNumber = 3;
    private uint clientOrServer_;
    /// <summary>
    /// 客户端/服务器指令 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClientOrServer {
      get { return clientOrServer_; }
      set {
        clientOrServer_ = value;
      }
    }

    /// <summary>Field number for the "IntValue" field.</summary>
    public const int IntValueFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_intValue_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> intValue_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 整型数据1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IntValue {
      get { return intValue_; }
    }

    /// <summary>Field number for the "FloatValue" field.</summary>
    public const int FloatValueFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_floatValue_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> floatValue_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 浮点数据1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> FloatValue {
      get { return floatValue_; }
    }

    /// <summary>Field number for the "BoolValue" field.</summary>
    public const int BoolValueFieldNumber = 6;
    private static readonly pb::FieldCodec<bool> _repeated_boolValue_codec
        = pb::FieldCodec.ForBool(50);
    private readonly pbc::RepeatedField<bool> boolValue_ = new pbc::RepeatedField<bool>();
    /// <summary>
    /// 布尔数据1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> BoolValue {
      get { return boolValue_; }
    }

    /// <summary>Field number for the "stringValue" field.</summary>
    public const int StringValueFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_stringValue_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> stringValue_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 字符串数据1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StringValue {
      get { return stringValue_; }
    }

    /// <summary>Field number for the "EffetcCD" field.</summary>
    public const int EffetcCDFieldNumber = 8;
    private float effetcCD_;
    /// <summary>
    /// 特效CD 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EffetcCD {
      get { return effetcCD_; }
      set {
        effetcCD_ = value;
      }
    }

    /// <summary>Field number for the "AudioCD" field.</summary>
    public const int AudioCDFieldNumber = 9;
    private float audioCD_;
    /// <summary>
    /// 音效CD 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AudioCD {
      get { return audioCD_; }
      set {
        audioCD_ = value;
      }
    }

    /// <summary>Field number for the "OffsetX" field.</summary>
    public const int OffsetXFieldNumber = 10;
    private float offsetX_;
    /// <summary>
    /// 偏移X 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetX {
      get { return offsetX_; }
      set {
        offsetX_ = value;
      }
    }

    /// <summary>Field number for the "OffsetY" field.</summary>
    public const int OffsetYFieldNumber = 11;
    private float offsetY_;
    /// <summary>
    /// 偏移Y 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetY {
      get { return offsetY_; }
      set {
        offsetY_ = value;
      }
    }

    /// <summary>Field number for the "OffsetZ" field.</summary>
    public const int OffsetZFieldNumber = 12;
    private float offsetZ_;
    /// <summary>
    /// 偏移Z 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetZ {
      get { return offsetZ_; }
      set {
        offsetZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleEventConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleEventConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (EventType != other.EventType) return false;
      if (ClientOrServer != other.ClientOrServer) return false;
      if(!intValue_.Equals(other.intValue_)) return false;
      if(!floatValue_.Equals(other.floatValue_)) return false;
      if(!boolValue_.Equals(other.boolValue_)) return false;
      if(!stringValue_.Equals(other.stringValue_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EffetcCD, other.EffetcCD)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AudioCD, other.AudioCD)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OffsetX, other.OffsetX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OffsetY, other.OffsetY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OffsetZ, other.OffsetZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (ClientOrServer != 0) hash ^= ClientOrServer.GetHashCode();
      hash ^= intValue_.GetHashCode();
      hash ^= floatValue_.GetHashCode();
      hash ^= boolValue_.GetHashCode();
      hash ^= stringValue_.GetHashCode();
      if (EffetcCD != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EffetcCD);
      if (AudioCD != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AudioCD);
      if (OffsetX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OffsetX);
      if (OffsetY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OffsetY);
      if (OffsetZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OffsetZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (EventType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(EventType);
      }
      if (ClientOrServer != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ClientOrServer);
      }
      intValue_.WriteTo(output, _repeated_intValue_codec);
      floatValue_.WriteTo(output, _repeated_floatValue_codec);
      boolValue_.WriteTo(output, _repeated_boolValue_codec);
      stringValue_.WriteTo(output, _repeated_stringValue_codec);
      if (EffetcCD != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(EffetcCD);
      }
      if (AudioCD != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(AudioCD);
      }
      if (OffsetX != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(OffsetX);
      }
      if (OffsetY != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(OffsetY);
      }
      if (OffsetZ != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(OffsetZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventType);
      }
      if (ClientOrServer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientOrServer);
      }
      size += intValue_.CalculateSize(_repeated_intValue_codec);
      size += floatValue_.CalculateSize(_repeated_floatValue_codec);
      size += boolValue_.CalculateSize(_repeated_boolValue_codec);
      size += stringValue_.CalculateSize(_repeated_stringValue_codec);
      if (EffetcCD != 0F) {
        size += 1 + 4;
      }
      if (AudioCD != 0F) {
        size += 1 + 4;
      }
      if (OffsetX != 0F) {
        size += 1 + 4;
      }
      if (OffsetY != 0F) {
        size += 1 + 4;
      }
      if (OffsetZ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleEventConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.ClientOrServer != 0) {
        ClientOrServer = other.ClientOrServer;
      }
      intValue_.Add(other.intValue_);
      floatValue_.Add(other.floatValue_);
      boolValue_.Add(other.boolValue_);
      stringValue_.Add(other.stringValue_);
      if (other.EffetcCD != 0F) {
        EffetcCD = other.EffetcCD;
      }
      if (other.AudioCD != 0F) {
        AudioCD = other.AudioCD;
      }
      if (other.OffsetX != 0F) {
        OffsetX = other.OffsetX;
      }
      if (other.OffsetY != 0F) {
        OffsetY = other.OffsetY;
      }
      if (other.OffsetZ != 0F) {
        OffsetZ = other.OffsetZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            EventType = input.ReadUInt32();
            break;
          }
          case 24: {
            ClientOrServer = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            intValue_.AddEntriesFrom(input, _repeated_intValue_codec);
            break;
          }
          case 42:
          case 45: {
            floatValue_.AddEntriesFrom(input, _repeated_floatValue_codec);
            break;
          }
          case 50:
          case 48: {
            boolValue_.AddEntriesFrom(input, _repeated_boolValue_codec);
            break;
          }
          case 58: {
            stringValue_.AddEntriesFrom(input, _repeated_stringValue_codec);
            break;
          }
          case 69: {
            EffetcCD = input.ReadFloat();
            break;
          }
          case 77: {
            AudioCD = input.ReadFloat();
            break;
          }
          case 85: {
            OffsetX = input.ReadFloat();
            break;
          }
          case 93: {
            OffsetY = input.ReadFloat();
            break;
          }
          case 101: {
            OffsetZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleEventConfig_Array : pb::IMessage<BattleEventConfig_Array> {
    private static readonly pb::MessageParser<BattleEventConfig_Array> _parser = new pb::MessageParser<BattleEventConfig_Array>(() => new BattleEventConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleEventConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBattleeventconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEventConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEventConfig_Array(BattleEventConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEventConfig_Array Clone() {
      return new BattleEventConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.BattleEventConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.BattleEventConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.BattleEventConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.BattleEventConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.BattleEventConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleEventConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleEventConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleEventConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
