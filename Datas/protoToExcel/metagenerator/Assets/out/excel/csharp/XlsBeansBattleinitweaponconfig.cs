// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_battleinitweaponconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_battleinitweaponconfig.proto</summary>
  public static partial class XlsBeansBattleinitweaponconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_battleinitweaponconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansBattleinitweaponconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZ4bHNfYmVhbnNfYmF0dGxlaW5pdHdlYXBvbmNvbmZpZy5wcm90bxIKRDEx",
            "LlBiZWFucyLyCAoWQmF0dGxlSW5pdFdlYXBvbkNvbmZpZxIKCgJpZBgBIAEo",
            "DRIYChByYW5kb21NYWluV2VhcG9uGAIgASgIEhcKD2N0TWFpbmRlZmF1bHRJ",
            "ZBgDIAEoDRIXCg9jdE1haW5pdGVtVHlwZXMYBCADKA0SFgoOY3RTdWJkZWZh",
            "dWx0SWQYBSABKA0SFgoOY3RTdWJpdGVtVHlwZXMYBiADKA0SGwoTY3RHcmVu",
            "YWRlc2RlZmF1bHRJZBgHIAEoDRIbChNjdEdyZW5hZGVzaXRlbVR5cGVzGAgg",
            "AygNEhwKFGN0Rmxhc2hCb21iZGVmYXVsdElkGAkgASgNEhwKFGN0Rmxhc2hC",
            "b21iaXRlbVR5cGVzGAogAygNEhwKFGN0U21va2VCb21iZGVmYXVsdElkGAsg",
            "ASgNEhwKFGN0U21va2VCb21iaXRlbVR5cGVzGAwgAygNEhsKE2N0QmFpdEJv",
            "bWJkZWZhdWx0SWQYDSABKA0SGwoTY3RCYWl0Qm9tYml0ZW1UeXBlcxgOIAMo",
            "DRIbChNjdEJ1cm5Cb21iZGVmYXVsdElkGA8gASgNEhsKE2N0QnVybkJvbWJp",
            "dGVtVHlwZXMYECADKA0SGAoQY3RBcm1vcmRlZmF1bHRJZBgRIAEoDRIYChBj",
            "dEFybW9yaXRlbVR5cGVzGBIgAygNEhgKEGN0UGxpZXJkZWZhdWx0SWQYEyAB",
            "KA0SGAoQY3RQbGllcml0ZW1UeXBlcxgUIAMoDRIWCg50TWFpbmRlZmF1bHRJ",
            "ZBgVIAEoDRIWCg50TWFpbml0ZW1UeXBlcxgWIAMoDRIVCg10U3ViZGVmYXVs",
            "dElkGBcgASgNEhUKDXRTdWJpdGVtVHlwZXMYGCADKA0SGgoSdEdyZW5hZGVz",
            "ZGVmYXVsdElkGBkgASgNEhoKEnRHcmVuYWRlc2l0ZW1UeXBlcxgaIAMoDRIb",
            "ChN0Rmxhc2hCb21iZGVmYXVsdElkGBsgASgNEhsKE3RGbGFzaEJvbWJpdGVt",
            "VHlwZXMYHCADKA0SGwoTdFNtb2tlQm9tYmRlZmF1bHRJZBgdIAEoDRIbChN0",
            "U21va2VCb21iaXRlbVR5cGVzGB4gAygNEhoKEnRCYWl0Qm9tYmRlZmF1bHRJ",
            "ZBgfIAEoDRIaChJ0QmFpdEJvbWJpdGVtVHlwZXMYICADKA0SGgoSdEJ1cm5C",
            "b21iZGVmYXVsdElkGCEgASgNEhoKEnRCdXJuQm9tYml0ZW1UeXBlcxgiIAMo",
            "DRIXCg90QXJtb3JkZWZhdWx0SWQYIyABKA0SFwoPdEFybW9yaXRlbVR5cGVz",
            "GCQgAygNEhcKD3RQbGllcmRlZmF1bHRJZBglIAEoDRIXCg90UGxpZXJpdGVt",
            "VHlwZXMYJiADKA0SGAoQY3RNZWxlZWRlZmF1bHRJZBgnIAEoDRIXCg90TWVs",
            "ZWVkZWZhdWx0SWQYKCABKA0SGAoQY3RNZWxlZUlzVXNlSW5pdBgpIAEoCBIX",
            "Cg90TWVsZWVJc1VzZUluaXQYKiABKAgiUQocQmF0dGxlSW5pdFdlYXBvbkNv",
            "bmZpZ19BcnJheRIxCgVpdGVtcxgBIAMoCzIiLkQxMS5QYmVhbnMuQmF0dGxl",
            "SW5pdFdlYXBvbkNvbmZpZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BattleInitWeaponConfig), global::D11.Pbeans.BattleInitWeaponConfig.Parser, new[]{ "Id", "RandomMainWeapon", "CtMaindefaultId", "CtMainitemTypes", "CtSubdefaultId", "CtSubitemTypes", "CtGrenadesdefaultId", "CtGrenadesitemTypes", "CtFlashBombdefaultId", "CtFlashBombitemTypes", "CtSmokeBombdefaultId", "CtSmokeBombitemTypes", "CtBaitBombdefaultId", "CtBaitBombitemTypes", "CtBurnBombdefaultId", "CtBurnBombitemTypes", "CtArmordefaultId", "CtArmoritemTypes", "CtPlierdefaultId", "CtPlieritemTypes", "TMaindefaultId", "TMainitemTypes", "TSubdefaultId", "TSubitemTypes", "TGrenadesdefaultId", "TGrenadesitemTypes", "TFlashBombdefaultId", "TFlashBombitemTypes", "TSmokeBombdefaultId", "TSmokeBombitemTypes", "TBaitBombdefaultId", "TBaitBombitemTypes", "TBurnBombdefaultId", "TBurnBombitemTypes", "TArmordefaultId", "TArmoritemTypes", "TPlierdefaultId", "TPlieritemTypes", "CtMeleedefaultId", "TMeleedefaultId", "CtMeleeIsUseInit", "TMeleeIsUseInit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BattleInitWeaponConfig_Array), global::D11.Pbeans.BattleInitWeaponConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BattleInitWeaponConfig : pb::IMessage<BattleInitWeaponConfig> {
    private static readonly pb::MessageParser<BattleInitWeaponConfig> _parser = new pb::MessageParser<BattleInitWeaponConfig>(() => new BattleInitWeaponConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleInitWeaponConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBattleinitweaponconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInitWeaponConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInitWeaponConfig(BattleInitWeaponConfig other) : this() {
      id_ = other.id_;
      randomMainWeapon_ = other.randomMainWeapon_;
      ctMaindefaultId_ = other.ctMaindefaultId_;
      ctMainitemTypes_ = other.ctMainitemTypes_.Clone();
      ctSubdefaultId_ = other.ctSubdefaultId_;
      ctSubitemTypes_ = other.ctSubitemTypes_.Clone();
      ctGrenadesdefaultId_ = other.ctGrenadesdefaultId_;
      ctGrenadesitemTypes_ = other.ctGrenadesitemTypes_.Clone();
      ctFlashBombdefaultId_ = other.ctFlashBombdefaultId_;
      ctFlashBombitemTypes_ = other.ctFlashBombitemTypes_.Clone();
      ctSmokeBombdefaultId_ = other.ctSmokeBombdefaultId_;
      ctSmokeBombitemTypes_ = other.ctSmokeBombitemTypes_.Clone();
      ctBaitBombdefaultId_ = other.ctBaitBombdefaultId_;
      ctBaitBombitemTypes_ = other.ctBaitBombitemTypes_.Clone();
      ctBurnBombdefaultId_ = other.ctBurnBombdefaultId_;
      ctBurnBombitemTypes_ = other.ctBurnBombitemTypes_.Clone();
      ctArmordefaultId_ = other.ctArmordefaultId_;
      ctArmoritemTypes_ = other.ctArmoritemTypes_.Clone();
      ctPlierdefaultId_ = other.ctPlierdefaultId_;
      ctPlieritemTypes_ = other.ctPlieritemTypes_.Clone();
      tMaindefaultId_ = other.tMaindefaultId_;
      tMainitemTypes_ = other.tMainitemTypes_.Clone();
      tSubdefaultId_ = other.tSubdefaultId_;
      tSubitemTypes_ = other.tSubitemTypes_.Clone();
      tGrenadesdefaultId_ = other.tGrenadesdefaultId_;
      tGrenadesitemTypes_ = other.tGrenadesitemTypes_.Clone();
      tFlashBombdefaultId_ = other.tFlashBombdefaultId_;
      tFlashBombitemTypes_ = other.tFlashBombitemTypes_.Clone();
      tSmokeBombdefaultId_ = other.tSmokeBombdefaultId_;
      tSmokeBombitemTypes_ = other.tSmokeBombitemTypes_.Clone();
      tBaitBombdefaultId_ = other.tBaitBombdefaultId_;
      tBaitBombitemTypes_ = other.tBaitBombitemTypes_.Clone();
      tBurnBombdefaultId_ = other.tBurnBombdefaultId_;
      tBurnBombitemTypes_ = other.tBurnBombitemTypes_.Clone();
      tArmordefaultId_ = other.tArmordefaultId_;
      tArmoritemTypes_ = other.tArmoritemTypes_.Clone();
      tPlierdefaultId_ = other.tPlierdefaultId_;
      tPlieritemTypes_ = other.tPlieritemTypes_.Clone();
      ctMeleedefaultId_ = other.ctMeleedefaultId_;
      tMeleedefaultId_ = other.tMeleedefaultId_;
      ctMeleeIsUseInit_ = other.ctMeleeIsUseInit_;
      tMeleeIsUseInit_ = other.tMeleeIsUseInit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInitWeaponConfig Clone() {
      return new BattleInitWeaponConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 地图玩法ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "randomMainWeapon" field.</summary>
    public const int RandomMainWeaponFieldNumber = 2;
    private bool randomMainWeapon_;
    /// <summary>
    /// 是否随机默认主武器 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RandomMainWeapon {
      get { return randomMainWeapon_; }
      set {
        randomMainWeapon_ = value;
      }
    }

    /// <summary>Field number for the "ctMaindefaultId" field.</summary>
    public const int CtMaindefaultIdFieldNumber = 3;
    private uint ctMaindefaultId_;
    /// <summary>
    /// CT主武器.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CtMaindefaultId {
      get { return ctMaindefaultId_; }
      set {
        ctMaindefaultId_ = value;
      }
    }

    /// <summary>Field number for the "ctMainitemTypes" field.</summary>
    public const int CtMainitemTypesFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_ctMainitemTypes_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> ctMainitemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// CT主武器.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CtMainitemTypes {
      get { return ctMainitemTypes_; }
    }

    /// <summary>Field number for the "ctSubdefaultId" field.</summary>
    public const int CtSubdefaultIdFieldNumber = 5;
    private uint ctSubdefaultId_;
    /// <summary>
    /// CT副武器.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CtSubdefaultId {
      get { return ctSubdefaultId_; }
      set {
        ctSubdefaultId_ = value;
      }
    }

    /// <summary>Field number for the "ctSubitemTypes" field.</summary>
    public const int CtSubitemTypesFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_ctSubitemTypes_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> ctSubitemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// CT副武器.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CtSubitemTypes {
      get { return ctSubitemTypes_; }
    }

    /// <summary>Field number for the "ctGrenadesdefaultId" field.</summary>
    public const int CtGrenadesdefaultIdFieldNumber = 7;
    private uint ctGrenadesdefaultId_;
    /// <summary>
    /// CT手雷.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CtGrenadesdefaultId {
      get { return ctGrenadesdefaultId_; }
      set {
        ctGrenadesdefaultId_ = value;
      }
    }

    /// <summary>Field number for the "ctGrenadesitemTypes" field.</summary>
    public const int CtGrenadesitemTypesFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_ctGrenadesitemTypes_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> ctGrenadesitemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// CT手雷.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CtGrenadesitemTypes {
      get { return ctGrenadesitemTypes_; }
    }

    /// <summary>Field number for the "ctFlashBombdefaultId" field.</summary>
    public const int CtFlashBombdefaultIdFieldNumber = 9;
    private uint ctFlashBombdefaultId_;
    /// <summary>
    /// CT闪光弹.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CtFlashBombdefaultId {
      get { return ctFlashBombdefaultId_; }
      set {
        ctFlashBombdefaultId_ = value;
      }
    }

    /// <summary>Field number for the "ctFlashBombitemTypes" field.</summary>
    public const int CtFlashBombitemTypesFieldNumber = 10;
    private static readonly pb::FieldCodec<uint> _repeated_ctFlashBombitemTypes_codec
        = pb::FieldCodec.ForUInt32(82);
    private readonly pbc::RepeatedField<uint> ctFlashBombitemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// CT闪光弹.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CtFlashBombitemTypes {
      get { return ctFlashBombitemTypes_; }
    }

    /// <summary>Field number for the "ctSmokeBombdefaultId" field.</summary>
    public const int CtSmokeBombdefaultIdFieldNumber = 11;
    private uint ctSmokeBombdefaultId_;
    /// <summary>
    /// CT烟雾弹.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CtSmokeBombdefaultId {
      get { return ctSmokeBombdefaultId_; }
      set {
        ctSmokeBombdefaultId_ = value;
      }
    }

    /// <summary>Field number for the "ctSmokeBombitemTypes" field.</summary>
    public const int CtSmokeBombitemTypesFieldNumber = 12;
    private static readonly pb::FieldCodec<uint> _repeated_ctSmokeBombitemTypes_codec
        = pb::FieldCodec.ForUInt32(98);
    private readonly pbc::RepeatedField<uint> ctSmokeBombitemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// CT烟雾弹.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CtSmokeBombitemTypes {
      get { return ctSmokeBombitemTypes_; }
    }

    /// <summary>Field number for the "ctBaitBombdefaultId" field.</summary>
    public const int CtBaitBombdefaultIdFieldNumber = 13;
    private uint ctBaitBombdefaultId_;
    /// <summary>
    /// CT诱饵弹.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CtBaitBombdefaultId {
      get { return ctBaitBombdefaultId_; }
      set {
        ctBaitBombdefaultId_ = value;
      }
    }

    /// <summary>Field number for the "ctBaitBombitemTypes" field.</summary>
    public const int CtBaitBombitemTypesFieldNumber = 14;
    private static readonly pb::FieldCodec<uint> _repeated_ctBaitBombitemTypes_codec
        = pb::FieldCodec.ForUInt32(114);
    private readonly pbc::RepeatedField<uint> ctBaitBombitemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// CT诱饵弹.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CtBaitBombitemTypes {
      get { return ctBaitBombitemTypes_; }
    }

    /// <summary>Field number for the "ctBurnBombdefaultId" field.</summary>
    public const int CtBurnBombdefaultIdFieldNumber = 15;
    private uint ctBurnBombdefaultId_;
    /// <summary>
    /// CT燃烧弹.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CtBurnBombdefaultId {
      get { return ctBurnBombdefaultId_; }
      set {
        ctBurnBombdefaultId_ = value;
      }
    }

    /// <summary>Field number for the "ctBurnBombitemTypes" field.</summary>
    public const int CtBurnBombitemTypesFieldNumber = 16;
    private static readonly pb::FieldCodec<uint> _repeated_ctBurnBombitemTypes_codec
        = pb::FieldCodec.ForUInt32(130);
    private readonly pbc::RepeatedField<uint> ctBurnBombitemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// CT燃烧弹.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CtBurnBombitemTypes {
      get { return ctBurnBombitemTypes_; }
    }

    /// <summary>Field number for the "ctArmordefaultId" field.</summary>
    public const int CtArmordefaultIdFieldNumber = 17;
    private uint ctArmordefaultId_;
    /// <summary>
    /// CT防弹衣.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CtArmordefaultId {
      get { return ctArmordefaultId_; }
      set {
        ctArmordefaultId_ = value;
      }
    }

    /// <summary>Field number for the "ctArmoritemTypes" field.</summary>
    public const int CtArmoritemTypesFieldNumber = 18;
    private static readonly pb::FieldCodec<uint> _repeated_ctArmoritemTypes_codec
        = pb::FieldCodec.ForUInt32(146);
    private readonly pbc::RepeatedField<uint> ctArmoritemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// CT防弹衣.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CtArmoritemTypes {
      get { return ctArmoritemTypes_; }
    }

    /// <summary>Field number for the "ctPlierdefaultId" field.</summary>
    public const int CtPlierdefaultIdFieldNumber = 19;
    private uint ctPlierdefaultId_;
    /// <summary>
    /// CT拆弹钳.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CtPlierdefaultId {
      get { return ctPlierdefaultId_; }
      set {
        ctPlierdefaultId_ = value;
      }
    }

    /// <summary>Field number for the "ctPlieritemTypes" field.</summary>
    public const int CtPlieritemTypesFieldNumber = 20;
    private static readonly pb::FieldCodec<uint> _repeated_ctPlieritemTypes_codec
        = pb::FieldCodec.ForUInt32(162);
    private readonly pbc::RepeatedField<uint> ctPlieritemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// CT拆弹钳.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CtPlieritemTypes {
      get { return ctPlieritemTypes_; }
    }

    /// <summary>Field number for the "tMaindefaultId" field.</summary>
    public const int TMaindefaultIdFieldNumber = 21;
    private uint tMaindefaultId_;
    /// <summary>
    /// T主武器.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TMaindefaultId {
      get { return tMaindefaultId_; }
      set {
        tMaindefaultId_ = value;
      }
    }

    /// <summary>Field number for the "tMainitemTypes" field.</summary>
    public const int TMainitemTypesFieldNumber = 22;
    private static readonly pb::FieldCodec<uint> _repeated_tMainitemTypes_codec
        = pb::FieldCodec.ForUInt32(178);
    private readonly pbc::RepeatedField<uint> tMainitemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// T主武器.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TMainitemTypes {
      get { return tMainitemTypes_; }
    }

    /// <summary>Field number for the "tSubdefaultId" field.</summary>
    public const int TSubdefaultIdFieldNumber = 23;
    private uint tSubdefaultId_;
    /// <summary>
    /// T副武器.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TSubdefaultId {
      get { return tSubdefaultId_; }
      set {
        tSubdefaultId_ = value;
      }
    }

    /// <summary>Field number for the "tSubitemTypes" field.</summary>
    public const int TSubitemTypesFieldNumber = 24;
    private static readonly pb::FieldCodec<uint> _repeated_tSubitemTypes_codec
        = pb::FieldCodec.ForUInt32(194);
    private readonly pbc::RepeatedField<uint> tSubitemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// T副武器.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TSubitemTypes {
      get { return tSubitemTypes_; }
    }

    /// <summary>Field number for the "tGrenadesdefaultId" field.</summary>
    public const int TGrenadesdefaultIdFieldNumber = 25;
    private uint tGrenadesdefaultId_;
    /// <summary>
    /// T手雷.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TGrenadesdefaultId {
      get { return tGrenadesdefaultId_; }
      set {
        tGrenadesdefaultId_ = value;
      }
    }

    /// <summary>Field number for the "tGrenadesitemTypes" field.</summary>
    public const int TGrenadesitemTypesFieldNumber = 26;
    private static readonly pb::FieldCodec<uint> _repeated_tGrenadesitemTypes_codec
        = pb::FieldCodec.ForUInt32(210);
    private readonly pbc::RepeatedField<uint> tGrenadesitemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// T手雷.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TGrenadesitemTypes {
      get { return tGrenadesitemTypes_; }
    }

    /// <summary>Field number for the "tFlashBombdefaultId" field.</summary>
    public const int TFlashBombdefaultIdFieldNumber = 27;
    private uint tFlashBombdefaultId_;
    /// <summary>
    /// T闪光弹.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TFlashBombdefaultId {
      get { return tFlashBombdefaultId_; }
      set {
        tFlashBombdefaultId_ = value;
      }
    }

    /// <summary>Field number for the "tFlashBombitemTypes" field.</summary>
    public const int TFlashBombitemTypesFieldNumber = 28;
    private static readonly pb::FieldCodec<uint> _repeated_tFlashBombitemTypes_codec
        = pb::FieldCodec.ForUInt32(226);
    private readonly pbc::RepeatedField<uint> tFlashBombitemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// T闪光弹.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TFlashBombitemTypes {
      get { return tFlashBombitemTypes_; }
    }

    /// <summary>Field number for the "tSmokeBombdefaultId" field.</summary>
    public const int TSmokeBombdefaultIdFieldNumber = 29;
    private uint tSmokeBombdefaultId_;
    /// <summary>
    /// T烟雾弹.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TSmokeBombdefaultId {
      get { return tSmokeBombdefaultId_; }
      set {
        tSmokeBombdefaultId_ = value;
      }
    }

    /// <summary>Field number for the "tSmokeBombitemTypes" field.</summary>
    public const int TSmokeBombitemTypesFieldNumber = 30;
    private static readonly pb::FieldCodec<uint> _repeated_tSmokeBombitemTypes_codec
        = pb::FieldCodec.ForUInt32(242);
    private readonly pbc::RepeatedField<uint> tSmokeBombitemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// T烟雾弹.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TSmokeBombitemTypes {
      get { return tSmokeBombitemTypes_; }
    }

    /// <summary>Field number for the "tBaitBombdefaultId" field.</summary>
    public const int TBaitBombdefaultIdFieldNumber = 31;
    private uint tBaitBombdefaultId_;
    /// <summary>
    /// T诱饵弹.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TBaitBombdefaultId {
      get { return tBaitBombdefaultId_; }
      set {
        tBaitBombdefaultId_ = value;
      }
    }

    /// <summary>Field number for the "tBaitBombitemTypes" field.</summary>
    public const int TBaitBombitemTypesFieldNumber = 32;
    private static readonly pb::FieldCodec<uint> _repeated_tBaitBombitemTypes_codec
        = pb::FieldCodec.ForUInt32(258);
    private readonly pbc::RepeatedField<uint> tBaitBombitemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// T诱饵弹.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TBaitBombitemTypes {
      get { return tBaitBombitemTypes_; }
    }

    /// <summary>Field number for the "tBurnBombdefaultId" field.</summary>
    public const int TBurnBombdefaultIdFieldNumber = 33;
    private uint tBurnBombdefaultId_;
    /// <summary>
    /// T燃烧弹.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TBurnBombdefaultId {
      get { return tBurnBombdefaultId_; }
      set {
        tBurnBombdefaultId_ = value;
      }
    }

    /// <summary>Field number for the "tBurnBombitemTypes" field.</summary>
    public const int TBurnBombitemTypesFieldNumber = 34;
    private static readonly pb::FieldCodec<uint> _repeated_tBurnBombitemTypes_codec
        = pb::FieldCodec.ForUInt32(274);
    private readonly pbc::RepeatedField<uint> tBurnBombitemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// T燃烧弹.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TBurnBombitemTypes {
      get { return tBurnBombitemTypes_; }
    }

    /// <summary>Field number for the "tArmordefaultId" field.</summary>
    public const int TArmordefaultIdFieldNumber = 35;
    private uint tArmordefaultId_;
    /// <summary>
    /// T防弹衣.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TArmordefaultId {
      get { return tArmordefaultId_; }
      set {
        tArmordefaultId_ = value;
      }
    }

    /// <summary>Field number for the "tArmoritemTypes" field.</summary>
    public const int TArmoritemTypesFieldNumber = 36;
    private static readonly pb::FieldCodec<uint> _repeated_tArmoritemTypes_codec
        = pb::FieldCodec.ForUInt32(290);
    private readonly pbc::RepeatedField<uint> tArmoritemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// T防弹衣.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TArmoritemTypes {
      get { return tArmoritemTypes_; }
    }

    /// <summary>Field number for the "tPlierdefaultId" field.</summary>
    public const int TPlierdefaultIdFieldNumber = 37;
    private uint tPlierdefaultId_;
    /// <summary>
    /// T拆弹钳.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TPlierdefaultId {
      get { return tPlierdefaultId_; }
      set {
        tPlierdefaultId_ = value;
      }
    }

    /// <summary>Field number for the "tPlieritemTypes" field.</summary>
    public const int TPlieritemTypesFieldNumber = 38;
    private static readonly pb::FieldCodec<uint> _repeated_tPlieritemTypes_codec
        = pb::FieldCodec.ForUInt32(306);
    private readonly pbc::RepeatedField<uint> tPlieritemTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// T拆弹钳.类型1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TPlieritemTypes {
      get { return tPlieritemTypes_; }
    }

    /// <summary>Field number for the "ctMeleedefaultId" field.</summary>
    public const int CtMeleedefaultIdFieldNumber = 39;
    private uint ctMeleedefaultId_;
    /// <summary>
    /// CT刀.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CtMeleedefaultId {
      get { return ctMeleedefaultId_; }
      set {
        ctMeleedefaultId_ = value;
      }
    }

    /// <summary>Field number for the "tMeleedefaultId" field.</summary>
    public const int TMeleedefaultIdFieldNumber = 40;
    private uint tMeleedefaultId_;
    /// <summary>
    /// T刀.默认ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TMeleedefaultId {
      get { return tMeleedefaultId_; }
      set {
        tMeleedefaultId_ = value;
      }
    }

    /// <summary>Field number for the "ctMeleeIsUseInit" field.</summary>
    public const int CtMeleeIsUseInitFieldNumber = 41;
    private bool ctMeleeIsUseInit_;
    /// <summary>
    /// CT刀是否使用默认配置(否则是使用局外带进武器) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CtMeleeIsUseInit {
      get { return ctMeleeIsUseInit_; }
      set {
        ctMeleeIsUseInit_ = value;
      }
    }

    /// <summary>Field number for the "tMeleeIsUseInit" field.</summary>
    public const int TMeleeIsUseInitFieldNumber = 42;
    private bool tMeleeIsUseInit_;
    /// <summary>
    /// T刀是否使用默认配置(否则是使用局外带进武器) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TMeleeIsUseInit {
      get { return tMeleeIsUseInit_; }
      set {
        tMeleeIsUseInit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleInitWeaponConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleInitWeaponConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (RandomMainWeapon != other.RandomMainWeapon) return false;
      if (CtMaindefaultId != other.CtMaindefaultId) return false;
      if(!ctMainitemTypes_.Equals(other.ctMainitemTypes_)) return false;
      if (CtSubdefaultId != other.CtSubdefaultId) return false;
      if(!ctSubitemTypes_.Equals(other.ctSubitemTypes_)) return false;
      if (CtGrenadesdefaultId != other.CtGrenadesdefaultId) return false;
      if(!ctGrenadesitemTypes_.Equals(other.ctGrenadesitemTypes_)) return false;
      if (CtFlashBombdefaultId != other.CtFlashBombdefaultId) return false;
      if(!ctFlashBombitemTypes_.Equals(other.ctFlashBombitemTypes_)) return false;
      if (CtSmokeBombdefaultId != other.CtSmokeBombdefaultId) return false;
      if(!ctSmokeBombitemTypes_.Equals(other.ctSmokeBombitemTypes_)) return false;
      if (CtBaitBombdefaultId != other.CtBaitBombdefaultId) return false;
      if(!ctBaitBombitemTypes_.Equals(other.ctBaitBombitemTypes_)) return false;
      if (CtBurnBombdefaultId != other.CtBurnBombdefaultId) return false;
      if(!ctBurnBombitemTypes_.Equals(other.ctBurnBombitemTypes_)) return false;
      if (CtArmordefaultId != other.CtArmordefaultId) return false;
      if(!ctArmoritemTypes_.Equals(other.ctArmoritemTypes_)) return false;
      if (CtPlierdefaultId != other.CtPlierdefaultId) return false;
      if(!ctPlieritemTypes_.Equals(other.ctPlieritemTypes_)) return false;
      if (TMaindefaultId != other.TMaindefaultId) return false;
      if(!tMainitemTypes_.Equals(other.tMainitemTypes_)) return false;
      if (TSubdefaultId != other.TSubdefaultId) return false;
      if(!tSubitemTypes_.Equals(other.tSubitemTypes_)) return false;
      if (TGrenadesdefaultId != other.TGrenadesdefaultId) return false;
      if(!tGrenadesitemTypes_.Equals(other.tGrenadesitemTypes_)) return false;
      if (TFlashBombdefaultId != other.TFlashBombdefaultId) return false;
      if(!tFlashBombitemTypes_.Equals(other.tFlashBombitemTypes_)) return false;
      if (TSmokeBombdefaultId != other.TSmokeBombdefaultId) return false;
      if(!tSmokeBombitemTypes_.Equals(other.tSmokeBombitemTypes_)) return false;
      if (TBaitBombdefaultId != other.TBaitBombdefaultId) return false;
      if(!tBaitBombitemTypes_.Equals(other.tBaitBombitemTypes_)) return false;
      if (TBurnBombdefaultId != other.TBurnBombdefaultId) return false;
      if(!tBurnBombitemTypes_.Equals(other.tBurnBombitemTypes_)) return false;
      if (TArmordefaultId != other.TArmordefaultId) return false;
      if(!tArmoritemTypes_.Equals(other.tArmoritemTypes_)) return false;
      if (TPlierdefaultId != other.TPlierdefaultId) return false;
      if(!tPlieritemTypes_.Equals(other.tPlieritemTypes_)) return false;
      if (CtMeleedefaultId != other.CtMeleedefaultId) return false;
      if (TMeleedefaultId != other.TMeleedefaultId) return false;
      if (CtMeleeIsUseInit != other.CtMeleeIsUseInit) return false;
      if (TMeleeIsUseInit != other.TMeleeIsUseInit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (RandomMainWeapon != false) hash ^= RandomMainWeapon.GetHashCode();
      if (CtMaindefaultId != 0) hash ^= CtMaindefaultId.GetHashCode();
      hash ^= ctMainitemTypes_.GetHashCode();
      if (CtSubdefaultId != 0) hash ^= CtSubdefaultId.GetHashCode();
      hash ^= ctSubitemTypes_.GetHashCode();
      if (CtGrenadesdefaultId != 0) hash ^= CtGrenadesdefaultId.GetHashCode();
      hash ^= ctGrenadesitemTypes_.GetHashCode();
      if (CtFlashBombdefaultId != 0) hash ^= CtFlashBombdefaultId.GetHashCode();
      hash ^= ctFlashBombitemTypes_.GetHashCode();
      if (CtSmokeBombdefaultId != 0) hash ^= CtSmokeBombdefaultId.GetHashCode();
      hash ^= ctSmokeBombitemTypes_.GetHashCode();
      if (CtBaitBombdefaultId != 0) hash ^= CtBaitBombdefaultId.GetHashCode();
      hash ^= ctBaitBombitemTypes_.GetHashCode();
      if (CtBurnBombdefaultId != 0) hash ^= CtBurnBombdefaultId.GetHashCode();
      hash ^= ctBurnBombitemTypes_.GetHashCode();
      if (CtArmordefaultId != 0) hash ^= CtArmordefaultId.GetHashCode();
      hash ^= ctArmoritemTypes_.GetHashCode();
      if (CtPlierdefaultId != 0) hash ^= CtPlierdefaultId.GetHashCode();
      hash ^= ctPlieritemTypes_.GetHashCode();
      if (TMaindefaultId != 0) hash ^= TMaindefaultId.GetHashCode();
      hash ^= tMainitemTypes_.GetHashCode();
      if (TSubdefaultId != 0) hash ^= TSubdefaultId.GetHashCode();
      hash ^= tSubitemTypes_.GetHashCode();
      if (TGrenadesdefaultId != 0) hash ^= TGrenadesdefaultId.GetHashCode();
      hash ^= tGrenadesitemTypes_.GetHashCode();
      if (TFlashBombdefaultId != 0) hash ^= TFlashBombdefaultId.GetHashCode();
      hash ^= tFlashBombitemTypes_.GetHashCode();
      if (TSmokeBombdefaultId != 0) hash ^= TSmokeBombdefaultId.GetHashCode();
      hash ^= tSmokeBombitemTypes_.GetHashCode();
      if (TBaitBombdefaultId != 0) hash ^= TBaitBombdefaultId.GetHashCode();
      hash ^= tBaitBombitemTypes_.GetHashCode();
      if (TBurnBombdefaultId != 0) hash ^= TBurnBombdefaultId.GetHashCode();
      hash ^= tBurnBombitemTypes_.GetHashCode();
      if (TArmordefaultId != 0) hash ^= TArmordefaultId.GetHashCode();
      hash ^= tArmoritemTypes_.GetHashCode();
      if (TPlierdefaultId != 0) hash ^= TPlierdefaultId.GetHashCode();
      hash ^= tPlieritemTypes_.GetHashCode();
      if (CtMeleedefaultId != 0) hash ^= CtMeleedefaultId.GetHashCode();
      if (TMeleedefaultId != 0) hash ^= TMeleedefaultId.GetHashCode();
      if (CtMeleeIsUseInit != false) hash ^= CtMeleeIsUseInit.GetHashCode();
      if (TMeleeIsUseInit != false) hash ^= TMeleeIsUseInit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (RandomMainWeapon != false) {
        output.WriteRawTag(16);
        output.WriteBool(RandomMainWeapon);
      }
      if (CtMaindefaultId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CtMaindefaultId);
      }
      ctMainitemTypes_.WriteTo(output, _repeated_ctMainitemTypes_codec);
      if (CtSubdefaultId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CtSubdefaultId);
      }
      ctSubitemTypes_.WriteTo(output, _repeated_ctSubitemTypes_codec);
      if (CtGrenadesdefaultId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(CtGrenadesdefaultId);
      }
      ctGrenadesitemTypes_.WriteTo(output, _repeated_ctGrenadesitemTypes_codec);
      if (CtFlashBombdefaultId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(CtFlashBombdefaultId);
      }
      ctFlashBombitemTypes_.WriteTo(output, _repeated_ctFlashBombitemTypes_codec);
      if (CtSmokeBombdefaultId != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(CtSmokeBombdefaultId);
      }
      ctSmokeBombitemTypes_.WriteTo(output, _repeated_ctSmokeBombitemTypes_codec);
      if (CtBaitBombdefaultId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(CtBaitBombdefaultId);
      }
      ctBaitBombitemTypes_.WriteTo(output, _repeated_ctBaitBombitemTypes_codec);
      if (CtBurnBombdefaultId != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(CtBurnBombdefaultId);
      }
      ctBurnBombitemTypes_.WriteTo(output, _repeated_ctBurnBombitemTypes_codec);
      if (CtArmordefaultId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(CtArmordefaultId);
      }
      ctArmoritemTypes_.WriteTo(output, _repeated_ctArmoritemTypes_codec);
      if (CtPlierdefaultId != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(CtPlierdefaultId);
      }
      ctPlieritemTypes_.WriteTo(output, _repeated_ctPlieritemTypes_codec);
      if (TMaindefaultId != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(TMaindefaultId);
      }
      tMainitemTypes_.WriteTo(output, _repeated_tMainitemTypes_codec);
      if (TSubdefaultId != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(TSubdefaultId);
      }
      tSubitemTypes_.WriteTo(output, _repeated_tSubitemTypes_codec);
      if (TGrenadesdefaultId != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(TGrenadesdefaultId);
      }
      tGrenadesitemTypes_.WriteTo(output, _repeated_tGrenadesitemTypes_codec);
      if (TFlashBombdefaultId != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(TFlashBombdefaultId);
      }
      tFlashBombitemTypes_.WriteTo(output, _repeated_tFlashBombitemTypes_codec);
      if (TSmokeBombdefaultId != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(TSmokeBombdefaultId);
      }
      tSmokeBombitemTypes_.WriteTo(output, _repeated_tSmokeBombitemTypes_codec);
      if (TBaitBombdefaultId != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(TBaitBombdefaultId);
      }
      tBaitBombitemTypes_.WriteTo(output, _repeated_tBaitBombitemTypes_codec);
      if (TBurnBombdefaultId != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(TBurnBombdefaultId);
      }
      tBurnBombitemTypes_.WriteTo(output, _repeated_tBurnBombitemTypes_codec);
      if (TArmordefaultId != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(TArmordefaultId);
      }
      tArmoritemTypes_.WriteTo(output, _repeated_tArmoritemTypes_codec);
      if (TPlierdefaultId != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(TPlierdefaultId);
      }
      tPlieritemTypes_.WriteTo(output, _repeated_tPlieritemTypes_codec);
      if (CtMeleedefaultId != 0) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(CtMeleedefaultId);
      }
      if (TMeleedefaultId != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(TMeleedefaultId);
      }
      if (CtMeleeIsUseInit != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(CtMeleeIsUseInit);
      }
      if (TMeleeIsUseInit != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(TMeleeIsUseInit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (RandomMainWeapon != false) {
        size += 1 + 1;
      }
      if (CtMaindefaultId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CtMaindefaultId);
      }
      size += ctMainitemTypes_.CalculateSize(_repeated_ctMainitemTypes_codec);
      if (CtSubdefaultId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CtSubdefaultId);
      }
      size += ctSubitemTypes_.CalculateSize(_repeated_ctSubitemTypes_codec);
      if (CtGrenadesdefaultId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CtGrenadesdefaultId);
      }
      size += ctGrenadesitemTypes_.CalculateSize(_repeated_ctGrenadesitemTypes_codec);
      if (CtFlashBombdefaultId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CtFlashBombdefaultId);
      }
      size += ctFlashBombitemTypes_.CalculateSize(_repeated_ctFlashBombitemTypes_codec);
      if (CtSmokeBombdefaultId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CtSmokeBombdefaultId);
      }
      size += ctSmokeBombitemTypes_.CalculateSize(_repeated_ctSmokeBombitemTypes_codec);
      if (CtBaitBombdefaultId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CtBaitBombdefaultId);
      }
      size += ctBaitBombitemTypes_.CalculateSize(_repeated_ctBaitBombitemTypes_codec);
      if (CtBurnBombdefaultId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CtBurnBombdefaultId);
      }
      size += ctBurnBombitemTypes_.CalculateSize(_repeated_ctBurnBombitemTypes_codec);
      if (CtArmordefaultId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CtArmordefaultId);
      }
      size += ctArmoritemTypes_.CalculateSize(_repeated_ctArmoritemTypes_codec);
      if (CtPlierdefaultId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CtPlierdefaultId);
      }
      size += ctPlieritemTypes_.CalculateSize(_repeated_ctPlieritemTypes_codec);
      if (TMaindefaultId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TMaindefaultId);
      }
      size += tMainitemTypes_.CalculateSize(_repeated_tMainitemTypes_codec);
      if (TSubdefaultId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TSubdefaultId);
      }
      size += tSubitemTypes_.CalculateSize(_repeated_tSubitemTypes_codec);
      if (TGrenadesdefaultId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TGrenadesdefaultId);
      }
      size += tGrenadesitemTypes_.CalculateSize(_repeated_tGrenadesitemTypes_codec);
      if (TFlashBombdefaultId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TFlashBombdefaultId);
      }
      size += tFlashBombitemTypes_.CalculateSize(_repeated_tFlashBombitemTypes_codec);
      if (TSmokeBombdefaultId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TSmokeBombdefaultId);
      }
      size += tSmokeBombitemTypes_.CalculateSize(_repeated_tSmokeBombitemTypes_codec);
      if (TBaitBombdefaultId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TBaitBombdefaultId);
      }
      size += tBaitBombitemTypes_.CalculateSize(_repeated_tBaitBombitemTypes_codec);
      if (TBurnBombdefaultId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TBurnBombdefaultId);
      }
      size += tBurnBombitemTypes_.CalculateSize(_repeated_tBurnBombitemTypes_codec);
      if (TArmordefaultId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TArmordefaultId);
      }
      size += tArmoritemTypes_.CalculateSize(_repeated_tArmoritemTypes_codec);
      if (TPlierdefaultId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TPlierdefaultId);
      }
      size += tPlieritemTypes_.CalculateSize(_repeated_tPlieritemTypes_codec);
      if (CtMeleedefaultId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CtMeleedefaultId);
      }
      if (TMeleedefaultId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TMeleedefaultId);
      }
      if (CtMeleeIsUseInit != false) {
        size += 2 + 1;
      }
      if (TMeleeIsUseInit != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleInitWeaponConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.RandomMainWeapon != false) {
        RandomMainWeapon = other.RandomMainWeapon;
      }
      if (other.CtMaindefaultId != 0) {
        CtMaindefaultId = other.CtMaindefaultId;
      }
      ctMainitemTypes_.Add(other.ctMainitemTypes_);
      if (other.CtSubdefaultId != 0) {
        CtSubdefaultId = other.CtSubdefaultId;
      }
      ctSubitemTypes_.Add(other.ctSubitemTypes_);
      if (other.CtGrenadesdefaultId != 0) {
        CtGrenadesdefaultId = other.CtGrenadesdefaultId;
      }
      ctGrenadesitemTypes_.Add(other.ctGrenadesitemTypes_);
      if (other.CtFlashBombdefaultId != 0) {
        CtFlashBombdefaultId = other.CtFlashBombdefaultId;
      }
      ctFlashBombitemTypes_.Add(other.ctFlashBombitemTypes_);
      if (other.CtSmokeBombdefaultId != 0) {
        CtSmokeBombdefaultId = other.CtSmokeBombdefaultId;
      }
      ctSmokeBombitemTypes_.Add(other.ctSmokeBombitemTypes_);
      if (other.CtBaitBombdefaultId != 0) {
        CtBaitBombdefaultId = other.CtBaitBombdefaultId;
      }
      ctBaitBombitemTypes_.Add(other.ctBaitBombitemTypes_);
      if (other.CtBurnBombdefaultId != 0) {
        CtBurnBombdefaultId = other.CtBurnBombdefaultId;
      }
      ctBurnBombitemTypes_.Add(other.ctBurnBombitemTypes_);
      if (other.CtArmordefaultId != 0) {
        CtArmordefaultId = other.CtArmordefaultId;
      }
      ctArmoritemTypes_.Add(other.ctArmoritemTypes_);
      if (other.CtPlierdefaultId != 0) {
        CtPlierdefaultId = other.CtPlierdefaultId;
      }
      ctPlieritemTypes_.Add(other.ctPlieritemTypes_);
      if (other.TMaindefaultId != 0) {
        TMaindefaultId = other.TMaindefaultId;
      }
      tMainitemTypes_.Add(other.tMainitemTypes_);
      if (other.TSubdefaultId != 0) {
        TSubdefaultId = other.TSubdefaultId;
      }
      tSubitemTypes_.Add(other.tSubitemTypes_);
      if (other.TGrenadesdefaultId != 0) {
        TGrenadesdefaultId = other.TGrenadesdefaultId;
      }
      tGrenadesitemTypes_.Add(other.tGrenadesitemTypes_);
      if (other.TFlashBombdefaultId != 0) {
        TFlashBombdefaultId = other.TFlashBombdefaultId;
      }
      tFlashBombitemTypes_.Add(other.tFlashBombitemTypes_);
      if (other.TSmokeBombdefaultId != 0) {
        TSmokeBombdefaultId = other.TSmokeBombdefaultId;
      }
      tSmokeBombitemTypes_.Add(other.tSmokeBombitemTypes_);
      if (other.TBaitBombdefaultId != 0) {
        TBaitBombdefaultId = other.TBaitBombdefaultId;
      }
      tBaitBombitemTypes_.Add(other.tBaitBombitemTypes_);
      if (other.TBurnBombdefaultId != 0) {
        TBurnBombdefaultId = other.TBurnBombdefaultId;
      }
      tBurnBombitemTypes_.Add(other.tBurnBombitemTypes_);
      if (other.TArmordefaultId != 0) {
        TArmordefaultId = other.TArmordefaultId;
      }
      tArmoritemTypes_.Add(other.tArmoritemTypes_);
      if (other.TPlierdefaultId != 0) {
        TPlierdefaultId = other.TPlierdefaultId;
      }
      tPlieritemTypes_.Add(other.tPlieritemTypes_);
      if (other.CtMeleedefaultId != 0) {
        CtMeleedefaultId = other.CtMeleedefaultId;
      }
      if (other.TMeleedefaultId != 0) {
        TMeleedefaultId = other.TMeleedefaultId;
      }
      if (other.CtMeleeIsUseInit != false) {
        CtMeleeIsUseInit = other.CtMeleeIsUseInit;
      }
      if (other.TMeleeIsUseInit != false) {
        TMeleeIsUseInit = other.TMeleeIsUseInit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            RandomMainWeapon = input.ReadBool();
            break;
          }
          case 24: {
            CtMaindefaultId = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            ctMainitemTypes_.AddEntriesFrom(input, _repeated_ctMainitemTypes_codec);
            break;
          }
          case 40: {
            CtSubdefaultId = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            ctSubitemTypes_.AddEntriesFrom(input, _repeated_ctSubitemTypes_codec);
            break;
          }
          case 56: {
            CtGrenadesdefaultId = input.ReadUInt32();
            break;
          }
          case 66:
          case 64: {
            ctGrenadesitemTypes_.AddEntriesFrom(input, _repeated_ctGrenadesitemTypes_codec);
            break;
          }
          case 72: {
            CtFlashBombdefaultId = input.ReadUInt32();
            break;
          }
          case 82:
          case 80: {
            ctFlashBombitemTypes_.AddEntriesFrom(input, _repeated_ctFlashBombitemTypes_codec);
            break;
          }
          case 88: {
            CtSmokeBombdefaultId = input.ReadUInt32();
            break;
          }
          case 98:
          case 96: {
            ctSmokeBombitemTypes_.AddEntriesFrom(input, _repeated_ctSmokeBombitemTypes_codec);
            break;
          }
          case 104: {
            CtBaitBombdefaultId = input.ReadUInt32();
            break;
          }
          case 114:
          case 112: {
            ctBaitBombitemTypes_.AddEntriesFrom(input, _repeated_ctBaitBombitemTypes_codec);
            break;
          }
          case 120: {
            CtBurnBombdefaultId = input.ReadUInt32();
            break;
          }
          case 130:
          case 128: {
            ctBurnBombitemTypes_.AddEntriesFrom(input, _repeated_ctBurnBombitemTypes_codec);
            break;
          }
          case 136: {
            CtArmordefaultId = input.ReadUInt32();
            break;
          }
          case 146:
          case 144: {
            ctArmoritemTypes_.AddEntriesFrom(input, _repeated_ctArmoritemTypes_codec);
            break;
          }
          case 152: {
            CtPlierdefaultId = input.ReadUInt32();
            break;
          }
          case 162:
          case 160: {
            ctPlieritemTypes_.AddEntriesFrom(input, _repeated_ctPlieritemTypes_codec);
            break;
          }
          case 168: {
            TMaindefaultId = input.ReadUInt32();
            break;
          }
          case 178:
          case 176: {
            tMainitemTypes_.AddEntriesFrom(input, _repeated_tMainitemTypes_codec);
            break;
          }
          case 184: {
            TSubdefaultId = input.ReadUInt32();
            break;
          }
          case 194:
          case 192: {
            tSubitemTypes_.AddEntriesFrom(input, _repeated_tSubitemTypes_codec);
            break;
          }
          case 200: {
            TGrenadesdefaultId = input.ReadUInt32();
            break;
          }
          case 210:
          case 208: {
            tGrenadesitemTypes_.AddEntriesFrom(input, _repeated_tGrenadesitemTypes_codec);
            break;
          }
          case 216: {
            TFlashBombdefaultId = input.ReadUInt32();
            break;
          }
          case 226:
          case 224: {
            tFlashBombitemTypes_.AddEntriesFrom(input, _repeated_tFlashBombitemTypes_codec);
            break;
          }
          case 232: {
            TSmokeBombdefaultId = input.ReadUInt32();
            break;
          }
          case 242:
          case 240: {
            tSmokeBombitemTypes_.AddEntriesFrom(input, _repeated_tSmokeBombitemTypes_codec);
            break;
          }
          case 248: {
            TBaitBombdefaultId = input.ReadUInt32();
            break;
          }
          case 258:
          case 256: {
            tBaitBombitemTypes_.AddEntriesFrom(input, _repeated_tBaitBombitemTypes_codec);
            break;
          }
          case 264: {
            TBurnBombdefaultId = input.ReadUInt32();
            break;
          }
          case 274:
          case 272: {
            tBurnBombitemTypes_.AddEntriesFrom(input, _repeated_tBurnBombitemTypes_codec);
            break;
          }
          case 280: {
            TArmordefaultId = input.ReadUInt32();
            break;
          }
          case 290:
          case 288: {
            tArmoritemTypes_.AddEntriesFrom(input, _repeated_tArmoritemTypes_codec);
            break;
          }
          case 296: {
            TPlierdefaultId = input.ReadUInt32();
            break;
          }
          case 306:
          case 304: {
            tPlieritemTypes_.AddEntriesFrom(input, _repeated_tPlieritemTypes_codec);
            break;
          }
          case 312: {
            CtMeleedefaultId = input.ReadUInt32();
            break;
          }
          case 320: {
            TMeleedefaultId = input.ReadUInt32();
            break;
          }
          case 328: {
            CtMeleeIsUseInit = input.ReadBool();
            break;
          }
          case 336: {
            TMeleeIsUseInit = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleInitWeaponConfig_Array : pb::IMessage<BattleInitWeaponConfig_Array> {
    private static readonly pb::MessageParser<BattleInitWeaponConfig_Array> _parser = new pb::MessageParser<BattleInitWeaponConfig_Array>(() => new BattleInitWeaponConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleInitWeaponConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBattleinitweaponconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInitWeaponConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInitWeaponConfig_Array(BattleInitWeaponConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInitWeaponConfig_Array Clone() {
      return new BattleInitWeaponConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.BattleInitWeaponConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.BattleInitWeaponConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.BattleInitWeaponConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.BattleInitWeaponConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.BattleInitWeaponConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleInitWeaponConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleInitWeaponConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleInitWeaponConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
