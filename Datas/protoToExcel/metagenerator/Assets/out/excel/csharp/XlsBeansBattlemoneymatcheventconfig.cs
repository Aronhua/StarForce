// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_battlemoneymatcheventconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_battlemoneymatcheventconfig.proto</summary>
  public static partial class XlsBeansBattlemoneymatcheventconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_battlemoneymatcheventconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansBattlemoneymatcheventconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cit4bHNfYmVhbnNfYmF0dGxlbW9uZXltYXRjaGV2ZW50Y29uZmlnLnByb3Rv",
            "EgpEMTEuUGJlYW5zIvsDChtCYXR0bGVNb25leU1hdGNoRXZlbnRDb25maWcS",
            "CgoCaWQYASABKA0SFAoMcHJlcGFyZU1vbmV5GAIgASgFEhAKCG1heE1vbmV5",
            "GAMgASgFEhEKCWluaXRNb25leRgEIAEoBRIVCg1kZWNpc2l2ZU1vbmV5GAUg",
            "ASgFEhcKD2luaXREZWZlYXRWYWx1ZRgGIAEoBRITCgtkZWZlYXRWYWx1ZRgH",
            "IAEoBRIXCg90ZWFtRGVmZWF0QXdhcmQYCCADKAUSFgoOdGVhbUNUV2luQXdh",
            "cmQYCSADKAUSFQoNdGVhbVRXaW5Bd2FyZBgKIAMoBRIXCg90ZWFtVFNldEM0",
            "QXdhcmQYCyABKAUSHAoUcGVyc29uQ1RVbnNldEM0QXdhcmQYDCABKAUSGQoR",
            "cGVyc29uVFNldEM0QXdhcmQYDSABKAUSIAoYcGVyc29uVERlZmVhdEFsaXZl",
            "UHVuaXNoGA4gASgIEh4KFnBlcnNvbktpbGxGcmllbmRQdW5pc2gYDyABKAUS",
            "HQoVcGVyc29uU3VpY2lkZUd1bkF3YXJkGBAgASgFEh8KF3BlcnNvblN1aWNp",
            "ZGVLbmlmZUF3YXJkGBEgASgFEhwKFHJlc3Bhd25SZWNvdmVyeU1vbmV5GBIg",
            "ASgFEhYKDmpvaW5Sb3VuZE1vbmV5GBMgAygFIlsKIUJhdHRsZU1vbmV5TWF0",
            "Y2hFdmVudENvbmZpZ19BcnJheRI2CgVpdGVtcxgBIAMoCzInLkQxMS5QYmVh",
            "bnMuQmF0dGxlTW9uZXlNYXRjaEV2ZW50Q29uZmlnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BattleMoneyMatchEventConfig), global::D11.Pbeans.BattleMoneyMatchEventConfig.Parser, new[]{ "Id", "PrepareMoney", "MaxMoney", "InitMoney", "DecisiveMoney", "InitDefeatValue", "DefeatValue", "TeamDefeatAward", "TeamCTWinAward", "TeamTWinAward", "TeamTSetC4Award", "PersonCTUnsetC4Award", "PersonTSetC4Award", "PersonTDefeatAlivePunish", "PersonKillFriendPunish", "PersonSuicideGunAward", "PersonSuicideKnifeAward", "RespawnRecoveryMoney", "JoinRoundMoney" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BattleMoneyMatchEventConfig_Array), global::D11.Pbeans.BattleMoneyMatchEventConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BattleMoneyMatchEventConfig : pb::IMessage<BattleMoneyMatchEventConfig> {
    private static readonly pb::MessageParser<BattleMoneyMatchEventConfig> _parser = new pb::MessageParser<BattleMoneyMatchEventConfig>(() => new BattleMoneyMatchEventConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleMoneyMatchEventConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBattlemoneymatcheventconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMoneyMatchEventConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMoneyMatchEventConfig(BattleMoneyMatchEventConfig other) : this() {
      id_ = other.id_;
      prepareMoney_ = other.prepareMoney_;
      maxMoney_ = other.maxMoney_;
      initMoney_ = other.initMoney_;
      decisiveMoney_ = other.decisiveMoney_;
      initDefeatValue_ = other.initDefeatValue_;
      defeatValue_ = other.defeatValue_;
      teamDefeatAward_ = other.teamDefeatAward_.Clone();
      teamCTWinAward_ = other.teamCTWinAward_.Clone();
      teamTWinAward_ = other.teamTWinAward_.Clone();
      teamTSetC4Award_ = other.teamTSetC4Award_;
      personCTUnsetC4Award_ = other.personCTUnsetC4Award_;
      personTSetC4Award_ = other.personTSetC4Award_;
      personTDefeatAlivePunish_ = other.personTDefeatAlivePunish_;
      personKillFriendPunish_ = other.personKillFriendPunish_;
      personSuicideGunAward_ = other.personSuicideGunAward_;
      personSuicideKnifeAward_ = other.personSuicideKnifeAward_;
      respawnRecoveryMoney_ = other.respawnRecoveryMoney_;
      joinRoundMoney_ = other.joinRoundMoney_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMoneyMatchEventConfig Clone() {
      return new BattleMoneyMatchEventConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 模式ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "prepareMoney" field.</summary>
    public const int PrepareMoneyFieldNumber = 2;
    private int prepareMoney_;
    /// <summary>
    /// 热身阶段初始经济 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrepareMoney {
      get { return prepareMoney_; }
      set {
        prepareMoney_ = value;
      }
    }

    /// <summary>Field number for the "maxMoney" field.</summary>
    public const int MaxMoneyFieldNumber = 3;
    private int maxMoney_;
    /// <summary>
    /// 最大经济 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxMoney {
      get { return maxMoney_; }
      set {
        maxMoney_ = value;
      }
    }

    /// <summary>Field number for the "initMoney" field.</summary>
    public const int InitMoneyFieldNumber = 4;
    private int initMoney_;
    /// <summary>
    /// 半场初始经济 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitMoney {
      get { return initMoney_; }
      set {
        initMoney_ = value;
      }
    }

    /// <summary>Field number for the "decisiveMoney" field.</summary>
    public const int DecisiveMoneyFieldNumber = 5;
    private int decisiveMoney_;
    /// <summary>
    /// 决胜局额外经济 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DecisiveMoney {
      get { return decisiveMoney_; }
      set {
        decisiveMoney_ = value;
      }
    }

    /// <summary>Field number for the "initDefeatValue" field.</summary>
    public const int InitDefeatValueFieldNumber = 6;
    private int initDefeatValue_;
    /// <summary>
    /// 战败补偿数初始值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitDefeatValue {
      get { return initDefeatValue_; }
      set {
        initDefeatValue_ = value;
      }
    }

    /// <summary>Field number for the "defeatValue" field.</summary>
    public const int DefeatValueFieldNumber = 7;
    private int defeatValue_;
    /// <summary>
    /// 战败补偿隐藏值最大值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefeatValue {
      get { return defeatValue_; }
      set {
        defeatValue_ = value;
      }
    }

    /// <summary>Field number for the "teamDefeatAward" field.</summary>
    public const int TeamDefeatAwardFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_teamDefeatAward_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> teamDefeatAward_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 战败补偿显示值0时的经济 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TeamDefeatAward {
      get { return teamDefeatAward_; }
    }

    /// <summary>Field number for the "teamCTWinAward" field.</summary>
    public const int TeamCTWinAwardFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_teamCTWinAward_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> teamCTWinAward_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// CT胜:全歼T 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TeamCTWinAward {
      get { return teamCTWinAward_; }
    }

    /// <summary>Field number for the "teamTWinAward" field.</summary>
    public const int TeamTWinAwardFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_teamTWinAward_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> teamTWinAward_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// T胜:全歼CT 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TeamTWinAward {
      get { return teamTWinAward_; }
    }

    /// <summary>Field number for the "teamTSetC4Award" field.</summary>
    public const int TeamTSetC4AwardFieldNumber = 11;
    private int teamTSetC4Award_;
    /// <summary>
    /// T失败时放弹额外团队奖励 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamTSetC4Award {
      get { return teamTSetC4Award_; }
      set {
        teamTSetC4Award_ = value;
      }
    }

    /// <summary>Field number for the "personCTUnsetC4Award" field.</summary>
    public const int PersonCTUnsetC4AwardFieldNumber = 12;
    private int personCTUnsetC4Award_;
    /// <summary>
    /// CT拆弹个人奖励 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PersonCTUnsetC4Award {
      get { return personCTUnsetC4Award_; }
      set {
        personCTUnsetC4Award_ = value;
      }
    }

    /// <summary>Field number for the "personTSetC4Award" field.</summary>
    public const int PersonTSetC4AwardFieldNumber = 13;
    private int personTSetC4Award_;
    /// <summary>
    /// T放弹个人奖励 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PersonTSetC4Award {
      get { return personTSetC4Award_; }
      set {
        personTSetC4Award_ = value;
      }
    }

    /// <summary>Field number for the "personTDefeatAlivePunish" field.</summary>
    public const int PersonTDefeatAlivePunishFieldNumber = 14;
    private bool personTDefeatAlivePunish_;
    /// <summary>
    /// T没下包存活者是否惩罚 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PersonTDefeatAlivePunish {
      get { return personTDefeatAlivePunish_; }
      set {
        personTDefeatAlivePunish_ = value;
      }
    }

    /// <summary>Field number for the "personKillFriendPunish" field.</summary>
    public const int PersonKillFriendPunishFieldNumber = 15;
    private int personKillFriendPunish_;
    /// <summary>
    /// 击杀队友惩罚 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PersonKillFriendPunish {
      get { return personKillFriendPunish_; }
      set {
        personKillFriendPunish_ = value;
      }
    }

    /// <summary>Field number for the "personSuicideGunAward" field.</summary>
    public const int PersonSuicideGunAwardFieldNumber = 16;
    private int personSuicideGunAward_;
    /// <summary>
    /// 自杀奖励最小值（收益者持枪时） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PersonSuicideGunAward {
      get { return personSuicideGunAward_; }
      set {
        personSuicideGunAward_ = value;
      }
    }

    /// <summary>Field number for the "personSuicideKnifeAward" field.</summary>
    public const int PersonSuicideKnifeAwardFieldNumber = 17;
    private int personSuicideKnifeAward_;
    /// <summary>
    /// 自杀奖励（收益者持刀时） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PersonSuicideKnifeAward {
      get { return personSuicideKnifeAward_; }
      set {
        personSuicideKnifeAward_ = value;
      }
    }

    /// <summary>Field number for the "respawnRecoveryMoney" field.</summary>
    public const int RespawnRecoveryMoneyFieldNumber = 18;
    private int respawnRecoveryMoney_;
    /// <summary>
    /// 复活初始经济(0表示不恢复) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RespawnRecoveryMoney {
      get { return respawnRecoveryMoney_; }
      set {
        respawnRecoveryMoney_ = value;
      }
    }

    /// <summary>Field number for the "joinRoundMoney" field.</summary>
    public const int JoinRoundMoneyFieldNumber = 19;
    private static readonly pb::FieldCodec<int> _repeated_joinRoundMoney_codec
        = pb::FieldCodec.ForInt32(154);
    private readonly pbc::RepeatedField<int> joinRoundMoney_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 第一回合加入额外经济 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> JoinRoundMoney {
      get { return joinRoundMoney_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleMoneyMatchEventConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleMoneyMatchEventConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PrepareMoney != other.PrepareMoney) return false;
      if (MaxMoney != other.MaxMoney) return false;
      if (InitMoney != other.InitMoney) return false;
      if (DecisiveMoney != other.DecisiveMoney) return false;
      if (InitDefeatValue != other.InitDefeatValue) return false;
      if (DefeatValue != other.DefeatValue) return false;
      if(!teamDefeatAward_.Equals(other.teamDefeatAward_)) return false;
      if(!teamCTWinAward_.Equals(other.teamCTWinAward_)) return false;
      if(!teamTWinAward_.Equals(other.teamTWinAward_)) return false;
      if (TeamTSetC4Award != other.TeamTSetC4Award) return false;
      if (PersonCTUnsetC4Award != other.PersonCTUnsetC4Award) return false;
      if (PersonTSetC4Award != other.PersonTSetC4Award) return false;
      if (PersonTDefeatAlivePunish != other.PersonTDefeatAlivePunish) return false;
      if (PersonKillFriendPunish != other.PersonKillFriendPunish) return false;
      if (PersonSuicideGunAward != other.PersonSuicideGunAward) return false;
      if (PersonSuicideKnifeAward != other.PersonSuicideKnifeAward) return false;
      if (RespawnRecoveryMoney != other.RespawnRecoveryMoney) return false;
      if(!joinRoundMoney_.Equals(other.joinRoundMoney_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (PrepareMoney != 0) hash ^= PrepareMoney.GetHashCode();
      if (MaxMoney != 0) hash ^= MaxMoney.GetHashCode();
      if (InitMoney != 0) hash ^= InitMoney.GetHashCode();
      if (DecisiveMoney != 0) hash ^= DecisiveMoney.GetHashCode();
      if (InitDefeatValue != 0) hash ^= InitDefeatValue.GetHashCode();
      if (DefeatValue != 0) hash ^= DefeatValue.GetHashCode();
      hash ^= teamDefeatAward_.GetHashCode();
      hash ^= teamCTWinAward_.GetHashCode();
      hash ^= teamTWinAward_.GetHashCode();
      if (TeamTSetC4Award != 0) hash ^= TeamTSetC4Award.GetHashCode();
      if (PersonCTUnsetC4Award != 0) hash ^= PersonCTUnsetC4Award.GetHashCode();
      if (PersonTSetC4Award != 0) hash ^= PersonTSetC4Award.GetHashCode();
      if (PersonTDefeatAlivePunish != false) hash ^= PersonTDefeatAlivePunish.GetHashCode();
      if (PersonKillFriendPunish != 0) hash ^= PersonKillFriendPunish.GetHashCode();
      if (PersonSuicideGunAward != 0) hash ^= PersonSuicideGunAward.GetHashCode();
      if (PersonSuicideKnifeAward != 0) hash ^= PersonSuicideKnifeAward.GetHashCode();
      if (RespawnRecoveryMoney != 0) hash ^= RespawnRecoveryMoney.GetHashCode();
      hash ^= joinRoundMoney_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (PrepareMoney != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PrepareMoney);
      }
      if (MaxMoney != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxMoney);
      }
      if (InitMoney != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InitMoney);
      }
      if (DecisiveMoney != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DecisiveMoney);
      }
      if (InitDefeatValue != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(InitDefeatValue);
      }
      if (DefeatValue != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DefeatValue);
      }
      teamDefeatAward_.WriteTo(output, _repeated_teamDefeatAward_codec);
      teamCTWinAward_.WriteTo(output, _repeated_teamCTWinAward_codec);
      teamTWinAward_.WriteTo(output, _repeated_teamTWinAward_codec);
      if (TeamTSetC4Award != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TeamTSetC4Award);
      }
      if (PersonCTUnsetC4Award != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PersonCTUnsetC4Award);
      }
      if (PersonTSetC4Award != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(PersonTSetC4Award);
      }
      if (PersonTDefeatAlivePunish != false) {
        output.WriteRawTag(112);
        output.WriteBool(PersonTDefeatAlivePunish);
      }
      if (PersonKillFriendPunish != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(PersonKillFriendPunish);
      }
      if (PersonSuicideGunAward != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(PersonSuicideGunAward);
      }
      if (PersonSuicideKnifeAward != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(PersonSuicideKnifeAward);
      }
      if (RespawnRecoveryMoney != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(RespawnRecoveryMoney);
      }
      joinRoundMoney_.WriteTo(output, _repeated_joinRoundMoney_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (PrepareMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrepareMoney);
      }
      if (MaxMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMoney);
      }
      if (InitMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitMoney);
      }
      if (DecisiveMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DecisiveMoney);
      }
      if (InitDefeatValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitDefeatValue);
      }
      if (DefeatValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefeatValue);
      }
      size += teamDefeatAward_.CalculateSize(_repeated_teamDefeatAward_codec);
      size += teamCTWinAward_.CalculateSize(_repeated_teamCTWinAward_codec);
      size += teamTWinAward_.CalculateSize(_repeated_teamTWinAward_codec);
      if (TeamTSetC4Award != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamTSetC4Award);
      }
      if (PersonCTUnsetC4Award != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PersonCTUnsetC4Award);
      }
      if (PersonTSetC4Award != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PersonTSetC4Award);
      }
      if (PersonTDefeatAlivePunish != false) {
        size += 1 + 1;
      }
      if (PersonKillFriendPunish != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PersonKillFriendPunish);
      }
      if (PersonSuicideGunAward != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PersonSuicideGunAward);
      }
      if (PersonSuicideKnifeAward != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PersonSuicideKnifeAward);
      }
      if (RespawnRecoveryMoney != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RespawnRecoveryMoney);
      }
      size += joinRoundMoney_.CalculateSize(_repeated_joinRoundMoney_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleMoneyMatchEventConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.PrepareMoney != 0) {
        PrepareMoney = other.PrepareMoney;
      }
      if (other.MaxMoney != 0) {
        MaxMoney = other.MaxMoney;
      }
      if (other.InitMoney != 0) {
        InitMoney = other.InitMoney;
      }
      if (other.DecisiveMoney != 0) {
        DecisiveMoney = other.DecisiveMoney;
      }
      if (other.InitDefeatValue != 0) {
        InitDefeatValue = other.InitDefeatValue;
      }
      if (other.DefeatValue != 0) {
        DefeatValue = other.DefeatValue;
      }
      teamDefeatAward_.Add(other.teamDefeatAward_);
      teamCTWinAward_.Add(other.teamCTWinAward_);
      teamTWinAward_.Add(other.teamTWinAward_);
      if (other.TeamTSetC4Award != 0) {
        TeamTSetC4Award = other.TeamTSetC4Award;
      }
      if (other.PersonCTUnsetC4Award != 0) {
        PersonCTUnsetC4Award = other.PersonCTUnsetC4Award;
      }
      if (other.PersonTSetC4Award != 0) {
        PersonTSetC4Award = other.PersonTSetC4Award;
      }
      if (other.PersonTDefeatAlivePunish != false) {
        PersonTDefeatAlivePunish = other.PersonTDefeatAlivePunish;
      }
      if (other.PersonKillFriendPunish != 0) {
        PersonKillFriendPunish = other.PersonKillFriendPunish;
      }
      if (other.PersonSuicideGunAward != 0) {
        PersonSuicideGunAward = other.PersonSuicideGunAward;
      }
      if (other.PersonSuicideKnifeAward != 0) {
        PersonSuicideKnifeAward = other.PersonSuicideKnifeAward;
      }
      if (other.RespawnRecoveryMoney != 0) {
        RespawnRecoveryMoney = other.RespawnRecoveryMoney;
      }
      joinRoundMoney_.Add(other.joinRoundMoney_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            PrepareMoney = input.ReadInt32();
            break;
          }
          case 24: {
            MaxMoney = input.ReadInt32();
            break;
          }
          case 32: {
            InitMoney = input.ReadInt32();
            break;
          }
          case 40: {
            DecisiveMoney = input.ReadInt32();
            break;
          }
          case 48: {
            InitDefeatValue = input.ReadInt32();
            break;
          }
          case 56: {
            DefeatValue = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            teamDefeatAward_.AddEntriesFrom(input, _repeated_teamDefeatAward_codec);
            break;
          }
          case 74:
          case 72: {
            teamCTWinAward_.AddEntriesFrom(input, _repeated_teamCTWinAward_codec);
            break;
          }
          case 82:
          case 80: {
            teamTWinAward_.AddEntriesFrom(input, _repeated_teamTWinAward_codec);
            break;
          }
          case 88: {
            TeamTSetC4Award = input.ReadInt32();
            break;
          }
          case 96: {
            PersonCTUnsetC4Award = input.ReadInt32();
            break;
          }
          case 104: {
            PersonTSetC4Award = input.ReadInt32();
            break;
          }
          case 112: {
            PersonTDefeatAlivePunish = input.ReadBool();
            break;
          }
          case 120: {
            PersonKillFriendPunish = input.ReadInt32();
            break;
          }
          case 128: {
            PersonSuicideGunAward = input.ReadInt32();
            break;
          }
          case 136: {
            PersonSuicideKnifeAward = input.ReadInt32();
            break;
          }
          case 144: {
            RespawnRecoveryMoney = input.ReadInt32();
            break;
          }
          case 154:
          case 152: {
            joinRoundMoney_.AddEntriesFrom(input, _repeated_joinRoundMoney_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleMoneyMatchEventConfig_Array : pb::IMessage<BattleMoneyMatchEventConfig_Array> {
    private static readonly pb::MessageParser<BattleMoneyMatchEventConfig_Array> _parser = new pb::MessageParser<BattleMoneyMatchEventConfig_Array>(() => new BattleMoneyMatchEventConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleMoneyMatchEventConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBattlemoneymatcheventconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMoneyMatchEventConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMoneyMatchEventConfig_Array(BattleMoneyMatchEventConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMoneyMatchEventConfig_Array Clone() {
      return new BattleMoneyMatchEventConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.BattleMoneyMatchEventConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.BattleMoneyMatchEventConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.BattleMoneyMatchEventConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.BattleMoneyMatchEventConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.BattleMoneyMatchEventConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleMoneyMatchEventConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleMoneyMatchEventConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleMoneyMatchEventConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
