// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_battlemoneyreward.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_battlemoneyreward.proto</summary>
  public static partial class XlsBeansBattlemoneyrewardReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_battlemoneyreward.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansBattlemoneyrewardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiF4bHNfYmVhbnNfYmF0dGxlbW9uZXlyZXdhcmQucHJvdG8SCkQxMS5QYmVh",
            "bnMiogMKEUJhdHRsZU1vbmV5UmV3YXJkEgoKAmlkGAEgASgNEhMKC0dNX1NE",
            "X01vbmV5GAIgASgFEhMKC0dNX0NBX01vbmV5GAMgASgFEhMKC0dNX0RNX1Nj",
            "b3JlGAQgASgFEhQKDEdNX1NCSF9TY29yZRgFIAEoBRIWCg5HTV9TTEdETV9T",
            "Y29yZRgGIAEoBRIWCg5HTV9TRFRETV9Nb25leRgHIAEoBRIWCg5HTV9TU1dT",
            "RF9Nb25leRgIIAEoBRIVCg1HTV9TSURNX1Njb3JlGAkgASgFEhYKDkdNX1NT",
            "UkRNX1Njb3JlGAogASgFEhUKDUdNX01BU0RfTW9uZXkYCyABKAUSFQoNR01f",
            "U1BTRF9Nb25leRgMIAEoBRIUCgxHTV9TRE1fU2NvcmUYDSABKAUSFwoPR01f",
            "UkFOS1NEX01vbmV5GA4gASgFEhIKCkdNX1ZfTW9uZXkYDyABKAUSFQoNR01f",
            "VEFOS19Nb25leRgQIAEoBRISCgpHTV9CX01vbmV5GBEgASgFEhkKEUdNX0RN",
            "X1NOSVBFX1Njb3JlGBIgASgFIkcKF0JhdHRsZU1vbmV5UmV3YXJkX0FycmF5",
            "EiwKBWl0ZW1zGAEgAygLMh0uRDExLlBiZWFucy5CYXR0bGVNb25leVJld2Fy",
            "ZGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BattleMoneyReward), global::D11.Pbeans.BattleMoneyReward.Parser, new[]{ "Id", "GMSDMoney", "GMCAMoney", "GMDMScore", "GMSBHScore", "GMSLGDMScore", "GMSDTDMMoney", "GMSSWSDMoney", "GMSIDMScore", "GMSSRDMScore", "GMMASDMoney", "GMSPSDMoney", "GMSDMScore", "GMRANKSDMoney", "GMVMoney", "GMTANKMoney", "GMBMoney", "GMDMSNIPEScore" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BattleMoneyReward_Array), global::D11.Pbeans.BattleMoneyReward_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BattleMoneyReward : pb::IMessage<BattleMoneyReward> {
    private static readonly pb::MessageParser<BattleMoneyReward> _parser = new pb::MessageParser<BattleMoneyReward>(() => new BattleMoneyReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleMoneyReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBattlemoneyrewardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMoneyReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMoneyReward(BattleMoneyReward other) : this() {
      id_ = other.id_;
      gMSDMoney_ = other.gMSDMoney_;
      gMCAMoney_ = other.gMCAMoney_;
      gMDMScore_ = other.gMDMScore_;
      gMSBHScore_ = other.gMSBHScore_;
      gMSLGDMScore_ = other.gMSLGDMScore_;
      gMSDTDMMoney_ = other.gMSDTDMMoney_;
      gMSSWSDMoney_ = other.gMSSWSDMoney_;
      gMSIDMScore_ = other.gMSIDMScore_;
      gMSSRDMScore_ = other.gMSSRDMScore_;
      gMMASDMoney_ = other.gMMASDMoney_;
      gMSPSDMoney_ = other.gMSPSDMoney_;
      gMSDMScore_ = other.gMSDMScore_;
      gMRANKSDMoney_ = other.gMRANKSDMoney_;
      gMVMoney_ = other.gMVMoney_;
      gMTANKMoney_ = other.gMTANKMoney_;
      gMBMoney_ = other.gMBMoney_;
      gMDMSNIPEScore_ = other.gMDMSNIPEScore_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMoneyReward Clone() {
      return new BattleMoneyReward(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 类型id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "GM_SD_Money" field.</summary>
    public const int GMSDMoneyFieldNumber = 2;
    private int gMSDMoney_;
    /// <summary>
    /// 1002爆破经济奖励 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMSDMoney {
      get { return gMSDMoney_; }
      set {
        gMSDMoney_ = value;
      }
    }

    /// <summary>Field number for the "GM_CA_Money" field.</summary>
    public const int GMCAMoneyFieldNumber = 3;
    private int gMCAMoney_;
    /// <summary>
    /// 1004道具爆破经济奖励 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMCAMoney {
      get { return gMCAMoney_; }
      set {
        gMCAMoney_ = value;
      }
    }

    /// <summary>Field number for the "GM_DM_Score" field.</summary>
    public const int GMDMScoreFieldNumber = 4;
    private int gMDMScore_;
    /// <summary>
    /// 1006死斗分数奖励 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMDMScore {
      get { return gMDMScore_; }
      set {
        gMDMScore_ = value;
      }
    }

    /// <summary>Field number for the "GM_SBH_Score" field.</summary>
    public const int GMSBHScoreFieldNumber = 5;
    private int gMSBHScore_;
    /// <summary>
    /// 1025巨人乱斗 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMSBHScore {
      get { return gMSBHScore_; }
      set {
        gMSBHScore_ = value;
      }
    }

    /// <summary>Field number for the "GM_SLGDM_Score" field.</summary>
    public const int GMSLGDMScoreFieldNumber = 6;
    private int gMSLGDMScore_;
    /// <summary>
    /// 1013低重力死斗奖励分数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMSLGDMScore {
      get { return gMSLGDMScore_; }
      set {
        gMSLGDMScore_ = value;
      }
    }

    /// <summary>Field number for the "GM_SDTDM_Money" field.</summary>
    public const int GMSDTDMMoneyFieldNumber = 7;
    private int gMSDTDMMoney_;
    /// <summary>
    /// 1020刀战团竞奖励金钱 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMSDTDMMoney {
      get { return gMSDTDMMoney_; }
      set {
        gMSDTDMMoney_ = value;
      }
    }

    /// <summary>Field number for the "GM_SSWSD_Money" field.</summary>
    public const int GMSSWSDMoneyFieldNumber = 8;
    private int gMSSWSDMoney_;
    /// <summary>
    /// 1014超级战士爆破 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMSSWSDMoney {
      get { return gMSSWSDMoney_; }
      set {
        gMSSWSDMoney_ = value;
      }
    }

    /// <summary>Field number for the "GM_SIDM_Score" field.</summary>
    public const int GMSIDMScoreFieldNumber = 9;
    private int gMSIDMScore_;
    /// <summary>
    /// 1021无限死斗分数奖励 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMSIDMScore {
      get { return gMSIDMScore_; }
      set {
        gMSIDMScore_ = value;
      }
    }

    /// <summary>Field number for the "GM_SSRDM_Score" field.</summary>
    public const int GMSSRDMScoreFieldNumber = 10;
    private int gMSSRDMScore_;
    /// <summary>
    /// 1022大杀器死斗分数奖励 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMSSRDMScore {
      get { return gMSSRDMScore_; }
      set {
        gMSSRDMScore_ = value;
      }
    }

    /// <summary>Field number for the "GM_MASD_Money" field.</summary>
    public const int GMMASDMoneyFieldNumber = 11;
    private int gMMASDMoney_;
    /// <summary>
    /// 1039歼灭模式经济奖励 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMMASDMoney {
      get { return gMMASDMoney_; }
      set {
        gMMASDMoney_ = value;
      }
    }

    /// <summary>Field number for the "GM_SPSD_Money" field.</summary>
    public const int GMSPSDMoneyFieldNumber = 12;
    private int gMSPSDMoney_;
    /// <summary>
    /// 1041手枪单点爆破经济奖励 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMSPSDMoney {
      get { return gMSPSDMoney_; }
      set {
        gMSPSDMoney_ = value;
      }
    }

    /// <summary>Field number for the "GM_SDM_Score" field.</summary>
    public const int GMSDMScoreFieldNumber = 13;
    private int gMSDMScore_;
    /// <summary>
    /// 1042工厂死斗分数奖励 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMSDMScore {
      get { return gMSDMScore_; }
      set {
        gMSDMScore_ = value;
      }
    }

    /// <summary>Field number for the "GM_RANKSD_Money" field.</summary>
    public const int GMRANKSDMoneyFieldNumber = 14;
    private int gMRANKSDMoney_;
    /// <summary>
    /// 1045排位爆破经济奖励 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMRANKSDMoney {
      get { return gMRANKSDMoney_; }
      set {
        gMRANKSDMoney_ = value;
      }
    }

    /// <summary>Field number for the "GM_V_Money" field.</summary>
    public const int GMVMoneyFieldNumber = 15;
    private int gMVMoney_;
    /// <summary>
    /// 1050V模式经济奖励 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMVMoney {
      get { return gMVMoney_; }
      set {
        gMVMoney_ = value;
      }
    }

    /// <summary>Field number for the "GM_TANK_Money" field.</summary>
    public const int GMTANKMoneyFieldNumber = 16;
    private int gMTANKMoney_;
    /// <summary>
    /// 1051坦克大战模式经济奖励 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMTANKMoney {
      get { return gMTANKMoney_; }
      set {
        gMTANKMoney_ = value;
      }
    }

    /// <summary>Field number for the "GM_B_Money" field.</summary>
    public const int GMBMoneyFieldNumber = 17;
    private int gMBMoney_;
    /// <summary>
    /// 1055B模式经济奖励 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMBMoney {
      get { return gMBMoney_; }
      set {
        gMBMoney_ = value;
      }
    }

    /// <summary>Field number for the "GM_DM_SNIPE_Score" field.</summary>
    public const int GMDMSNIPEScoreFieldNumber = 18;
    private int gMDMSNIPEScore_;
    /// <summary>
    /// 1058狙击死斗分数奖励 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GMDMSNIPEScore {
      get { return gMDMSNIPEScore_; }
      set {
        gMDMSNIPEScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleMoneyReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleMoneyReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (GMSDMoney != other.GMSDMoney) return false;
      if (GMCAMoney != other.GMCAMoney) return false;
      if (GMDMScore != other.GMDMScore) return false;
      if (GMSBHScore != other.GMSBHScore) return false;
      if (GMSLGDMScore != other.GMSLGDMScore) return false;
      if (GMSDTDMMoney != other.GMSDTDMMoney) return false;
      if (GMSSWSDMoney != other.GMSSWSDMoney) return false;
      if (GMSIDMScore != other.GMSIDMScore) return false;
      if (GMSSRDMScore != other.GMSSRDMScore) return false;
      if (GMMASDMoney != other.GMMASDMoney) return false;
      if (GMSPSDMoney != other.GMSPSDMoney) return false;
      if (GMSDMScore != other.GMSDMScore) return false;
      if (GMRANKSDMoney != other.GMRANKSDMoney) return false;
      if (GMVMoney != other.GMVMoney) return false;
      if (GMTANKMoney != other.GMTANKMoney) return false;
      if (GMBMoney != other.GMBMoney) return false;
      if (GMDMSNIPEScore != other.GMDMSNIPEScore) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (GMSDMoney != 0) hash ^= GMSDMoney.GetHashCode();
      if (GMCAMoney != 0) hash ^= GMCAMoney.GetHashCode();
      if (GMDMScore != 0) hash ^= GMDMScore.GetHashCode();
      if (GMSBHScore != 0) hash ^= GMSBHScore.GetHashCode();
      if (GMSLGDMScore != 0) hash ^= GMSLGDMScore.GetHashCode();
      if (GMSDTDMMoney != 0) hash ^= GMSDTDMMoney.GetHashCode();
      if (GMSSWSDMoney != 0) hash ^= GMSSWSDMoney.GetHashCode();
      if (GMSIDMScore != 0) hash ^= GMSIDMScore.GetHashCode();
      if (GMSSRDMScore != 0) hash ^= GMSSRDMScore.GetHashCode();
      if (GMMASDMoney != 0) hash ^= GMMASDMoney.GetHashCode();
      if (GMSPSDMoney != 0) hash ^= GMSPSDMoney.GetHashCode();
      if (GMSDMScore != 0) hash ^= GMSDMScore.GetHashCode();
      if (GMRANKSDMoney != 0) hash ^= GMRANKSDMoney.GetHashCode();
      if (GMVMoney != 0) hash ^= GMVMoney.GetHashCode();
      if (GMTANKMoney != 0) hash ^= GMTANKMoney.GetHashCode();
      if (GMBMoney != 0) hash ^= GMBMoney.GetHashCode();
      if (GMDMSNIPEScore != 0) hash ^= GMDMSNIPEScore.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (GMSDMoney != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GMSDMoney);
      }
      if (GMCAMoney != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GMCAMoney);
      }
      if (GMDMScore != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GMDMScore);
      }
      if (GMSBHScore != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GMSBHScore);
      }
      if (GMSLGDMScore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GMSLGDMScore);
      }
      if (GMSDTDMMoney != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GMSDTDMMoney);
      }
      if (GMSSWSDMoney != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GMSSWSDMoney);
      }
      if (GMSIDMScore != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GMSIDMScore);
      }
      if (GMSSRDMScore != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GMSSRDMScore);
      }
      if (GMMASDMoney != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(GMMASDMoney);
      }
      if (GMSPSDMoney != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(GMSPSDMoney);
      }
      if (GMSDMScore != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(GMSDMScore);
      }
      if (GMRANKSDMoney != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(GMRANKSDMoney);
      }
      if (GMVMoney != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(GMVMoney);
      }
      if (GMTANKMoney != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(GMTANKMoney);
      }
      if (GMBMoney != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(GMBMoney);
      }
      if (GMDMSNIPEScore != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(GMDMSNIPEScore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (GMSDMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GMSDMoney);
      }
      if (GMCAMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GMCAMoney);
      }
      if (GMDMScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GMDMScore);
      }
      if (GMSBHScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GMSBHScore);
      }
      if (GMSLGDMScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GMSLGDMScore);
      }
      if (GMSDTDMMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GMSDTDMMoney);
      }
      if (GMSSWSDMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GMSSWSDMoney);
      }
      if (GMSIDMScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GMSIDMScore);
      }
      if (GMSSRDMScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GMSSRDMScore);
      }
      if (GMMASDMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GMMASDMoney);
      }
      if (GMSPSDMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GMSPSDMoney);
      }
      if (GMSDMScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GMSDMScore);
      }
      if (GMRANKSDMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GMRANKSDMoney);
      }
      if (GMVMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GMVMoney);
      }
      if (GMTANKMoney != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GMTANKMoney);
      }
      if (GMBMoney != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GMBMoney);
      }
      if (GMDMSNIPEScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GMDMSNIPEScore);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleMoneyReward other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.GMSDMoney != 0) {
        GMSDMoney = other.GMSDMoney;
      }
      if (other.GMCAMoney != 0) {
        GMCAMoney = other.GMCAMoney;
      }
      if (other.GMDMScore != 0) {
        GMDMScore = other.GMDMScore;
      }
      if (other.GMSBHScore != 0) {
        GMSBHScore = other.GMSBHScore;
      }
      if (other.GMSLGDMScore != 0) {
        GMSLGDMScore = other.GMSLGDMScore;
      }
      if (other.GMSDTDMMoney != 0) {
        GMSDTDMMoney = other.GMSDTDMMoney;
      }
      if (other.GMSSWSDMoney != 0) {
        GMSSWSDMoney = other.GMSSWSDMoney;
      }
      if (other.GMSIDMScore != 0) {
        GMSIDMScore = other.GMSIDMScore;
      }
      if (other.GMSSRDMScore != 0) {
        GMSSRDMScore = other.GMSSRDMScore;
      }
      if (other.GMMASDMoney != 0) {
        GMMASDMoney = other.GMMASDMoney;
      }
      if (other.GMSPSDMoney != 0) {
        GMSPSDMoney = other.GMSPSDMoney;
      }
      if (other.GMSDMScore != 0) {
        GMSDMScore = other.GMSDMScore;
      }
      if (other.GMRANKSDMoney != 0) {
        GMRANKSDMoney = other.GMRANKSDMoney;
      }
      if (other.GMVMoney != 0) {
        GMVMoney = other.GMVMoney;
      }
      if (other.GMTANKMoney != 0) {
        GMTANKMoney = other.GMTANKMoney;
      }
      if (other.GMBMoney != 0) {
        GMBMoney = other.GMBMoney;
      }
      if (other.GMDMSNIPEScore != 0) {
        GMDMSNIPEScore = other.GMDMSNIPEScore;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            GMSDMoney = input.ReadInt32();
            break;
          }
          case 24: {
            GMCAMoney = input.ReadInt32();
            break;
          }
          case 32: {
            GMDMScore = input.ReadInt32();
            break;
          }
          case 40: {
            GMSBHScore = input.ReadInt32();
            break;
          }
          case 48: {
            GMSLGDMScore = input.ReadInt32();
            break;
          }
          case 56: {
            GMSDTDMMoney = input.ReadInt32();
            break;
          }
          case 64: {
            GMSSWSDMoney = input.ReadInt32();
            break;
          }
          case 72: {
            GMSIDMScore = input.ReadInt32();
            break;
          }
          case 80: {
            GMSSRDMScore = input.ReadInt32();
            break;
          }
          case 88: {
            GMMASDMoney = input.ReadInt32();
            break;
          }
          case 96: {
            GMSPSDMoney = input.ReadInt32();
            break;
          }
          case 104: {
            GMSDMScore = input.ReadInt32();
            break;
          }
          case 112: {
            GMRANKSDMoney = input.ReadInt32();
            break;
          }
          case 120: {
            GMVMoney = input.ReadInt32();
            break;
          }
          case 128: {
            GMTANKMoney = input.ReadInt32();
            break;
          }
          case 136: {
            GMBMoney = input.ReadInt32();
            break;
          }
          case 144: {
            GMDMSNIPEScore = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleMoneyReward_Array : pb::IMessage<BattleMoneyReward_Array> {
    private static readonly pb::MessageParser<BattleMoneyReward_Array> _parser = new pb::MessageParser<BattleMoneyReward_Array>(() => new BattleMoneyReward_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleMoneyReward_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBattlemoneyrewardReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMoneyReward_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMoneyReward_Array(BattleMoneyReward_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMoneyReward_Array Clone() {
      return new BattleMoneyReward_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.BattleMoneyReward> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.BattleMoneyReward.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.BattleMoneyReward> items_ = new pbc::RepeatedField<global::D11.Pbeans.BattleMoneyReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.BattleMoneyReward> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleMoneyReward_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleMoneyReward_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleMoneyReward_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
