// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_battlepropsconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_battlepropsconfig.proto</summary>
  public static partial class XlsBeansBattlepropsconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_battlepropsconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansBattlepropsconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiF4bHNfYmVhbnNfYmF0dGxlcHJvcHNjb25maWcucHJvdG8SCkQxMS5QYmVh",
            "bnMivQIKEUJhdHRsZVByb3BzQ29uZmlnEgoKAmlkGAEgASgNEgwKBG5hbWUY",
            "AiABKAkSEwoLQXR0cmlidXRlSWQYAyABKA0SFAoMQXR0cmlidXRlTnVtGAQg",
            "ASgCEhwKFFRlYW1NYXRlQXR0cmlidXRlTnVtGAUgASgCEhgKEEF1dG9QaWNr",
            "dXBFbmFibGUYBiABKA0SDgoGTWF4TnVtGAcgASgNEhIKClByZWZhYk5hbWUY",
            "CCABKAkSRgoPTnVtRGVzaWduUHJlZmFiGAkgAygLMi0uRDExLlBiZWFucy5C",
            "YXR0bGVQcm9wc0NvbmZpZ19OdW1EZXNpZ25QcmVmYWISEAoIRGVzY3JpYmUY",
            "CiABKAkSFAoMSXRlbVNwcml0ZUlkGAsgASgNEhcKD0F1dG9QaWNrdXBFdmVu",
            "dBgMIAEoCSJHCiFCYXR0bGVQcm9wc0NvbmZpZ19OdW1EZXNpZ25QcmVmYWIS",
            "DgoGbWluTnVtGAEgASgNEhIKCnByZWZhYk5hbWUYAiABKAkiRwoXQmF0dGxl",
            "UHJvcHNDb25maWdfQXJyYXkSLAoFaXRlbXMYASADKAsyHS5EMTEuUGJlYW5z",
            "LkJhdHRsZVByb3BzQ29uZmlnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BattlePropsConfig), global::D11.Pbeans.BattlePropsConfig.Parser, new[]{ "Id", "Name", "AttributeId", "AttributeNum", "TeamMateAttributeNum", "AutoPickupEnable", "MaxNum", "PrefabName", "NumDesignPrefab", "Describe", "ItemSpriteId", "AutoPickupEvent" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BattlePropsConfig_NumDesignPrefab), global::D11.Pbeans.BattlePropsConfig_NumDesignPrefab.Parser, new[]{ "MinNum", "PrefabName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BattlePropsConfig_Array), global::D11.Pbeans.BattlePropsConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BattlePropsConfig : pb::IMessage<BattlePropsConfig> {
    private static readonly pb::MessageParser<BattlePropsConfig> _parser = new pb::MessageParser<BattlePropsConfig>(() => new BattlePropsConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattlePropsConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBattlepropsconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePropsConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePropsConfig(BattlePropsConfig other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      attributeId_ = other.attributeId_;
      attributeNum_ = other.attributeNum_;
      teamMateAttributeNum_ = other.teamMateAttributeNum_;
      autoPickupEnable_ = other.autoPickupEnable_;
      maxNum_ = other.maxNum_;
      prefabName_ = other.prefabName_;
      numDesignPrefab_ = other.numDesignPrefab_.Clone();
      describe_ = other.describe_;
      itemSpriteId_ = other.itemSpriteId_;
      autoPickupEvent_ = other.autoPickupEvent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePropsConfig Clone() {
      return new BattlePropsConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 编号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 物品名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AttributeId" field.</summary>
    public const int AttributeIdFieldNumber = 3;
    private uint attributeId_;
    /// <summary>
    /// 属性id EBattlePickupProp） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttributeId {
      get { return attributeId_; }
      set {
        attributeId_ = value;
      }
    }

    /// <summary>Field number for the "AttributeNum" field.</summary>
    public const int AttributeNumFieldNumber = 4;
    private float attributeNum_;
    /// <summary>
    /// 数量(专属掉落物品 跟装备没啥关系) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttributeNum {
      get { return attributeNum_; }
      set {
        attributeNum_ = value;
      }
    }

    /// <summary>Field number for the "TeamMateAttributeNum" field.</summary>
    public const int TeamMateAttributeNumFieldNumber = 5;
    private float teamMateAttributeNum_;
    /// <summary>
    /// 队友分成数量(专属掉落物品 跟装备没啥关系) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TeamMateAttributeNum {
      get { return teamMateAttributeNum_; }
      set {
        teamMateAttributeNum_ = value;
      }
    }

    /// <summary>Field number for the "AutoPickupEnable" field.</summary>
    public const int AutoPickupEnableFieldNumber = 6;
    private uint autoPickupEnable_;
    /// <summary>
    /// 可自动拾取 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AutoPickupEnable {
      get { return autoPickupEnable_; }
      set {
        autoPickupEnable_ = value;
      }
    }

    /// <summary>Field number for the "MaxNum" field.</summary>
    public const int MaxNumFieldNumber = 7;
    private uint maxNum_;
    /// <summary>
    /// 一个能容纳的最大Num 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxNum {
      get { return maxNum_; }
      set {
        maxNum_ = value;
      }
    }

    /// <summary>Field number for the "PrefabName" field.</summary>
    public const int PrefabNameFieldNumber = 8;
    private string prefabName_ = "";
    /// <summary>
    /// 预制体 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrefabName {
      get { return prefabName_; }
      set {
        prefabName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NumDesignPrefab" field.</summary>
    public const int NumDesignPrefabFieldNumber = 9;
    private static readonly pb::FieldCodec<global::D11.Pbeans.BattlePropsConfig_NumDesignPrefab> _repeated_numDesignPrefab_codec
        = pb::FieldCodec.ForMessage(74, global::D11.Pbeans.BattlePropsConfig_NumDesignPrefab.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.BattlePropsConfig_NumDesignPrefab> numDesignPrefab_ = new pbc::RepeatedField<global::D11.Pbeans.BattlePropsConfig_NumDesignPrefab>();
    /// <summary>
    /// 最小数量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.BattlePropsConfig_NumDesignPrefab> NumDesignPrefab {
      get { return numDesignPrefab_; }
    }

    /// <summary>Field number for the "Describe" field.</summary>
    public const int DescribeFieldNumber = 10;
    private string describe_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Describe {
      get { return describe_; }
      set {
        describe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ItemSpriteId" field.</summary>
    public const int ItemSpriteIdFieldNumber = 11;
    private uint itemSpriteId_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemSpriteId {
      get { return itemSpriteId_; }
      set {
        itemSpriteId_ = value;
      }
    }

    /// <summary>Field number for the "AutoPickupEvent" field.</summary>
    public const int AutoPickupEventFieldNumber = 12;
    private string autoPickupEvent_ = "";
    /// <summary>
    /// 拾取音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AutoPickupEvent {
      get { return autoPickupEvent_; }
      set {
        autoPickupEvent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattlePropsConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattlePropsConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (AttributeId != other.AttributeId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttributeNum, other.AttributeNum)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TeamMateAttributeNum, other.TeamMateAttributeNum)) return false;
      if (AutoPickupEnable != other.AutoPickupEnable) return false;
      if (MaxNum != other.MaxNum) return false;
      if (PrefabName != other.PrefabName) return false;
      if(!numDesignPrefab_.Equals(other.numDesignPrefab_)) return false;
      if (Describe != other.Describe) return false;
      if (ItemSpriteId != other.ItemSpriteId) return false;
      if (AutoPickupEvent != other.AutoPickupEvent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AttributeId != 0) hash ^= AttributeId.GetHashCode();
      if (AttributeNum != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttributeNum);
      if (TeamMateAttributeNum != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TeamMateAttributeNum);
      if (AutoPickupEnable != 0) hash ^= AutoPickupEnable.GetHashCode();
      if (MaxNum != 0) hash ^= MaxNum.GetHashCode();
      if (PrefabName.Length != 0) hash ^= PrefabName.GetHashCode();
      hash ^= numDesignPrefab_.GetHashCode();
      if (Describe.Length != 0) hash ^= Describe.GetHashCode();
      if (ItemSpriteId != 0) hash ^= ItemSpriteId.GetHashCode();
      if (AutoPickupEvent.Length != 0) hash ^= AutoPickupEvent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (AttributeId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AttributeId);
      }
      if (AttributeNum != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(AttributeNum);
      }
      if (TeamMateAttributeNum != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(TeamMateAttributeNum);
      }
      if (AutoPickupEnable != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(AutoPickupEnable);
      }
      if (MaxNum != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MaxNum);
      }
      if (PrefabName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PrefabName);
      }
      numDesignPrefab_.WriteTo(output, _repeated_numDesignPrefab_codec);
      if (Describe.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Describe);
      }
      if (ItemSpriteId != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(ItemSpriteId);
      }
      if (AutoPickupEvent.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(AutoPickupEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AttributeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttributeId);
      }
      if (AttributeNum != 0F) {
        size += 1 + 4;
      }
      if (TeamMateAttributeNum != 0F) {
        size += 1 + 4;
      }
      if (AutoPickupEnable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AutoPickupEnable);
      }
      if (MaxNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNum);
      }
      if (PrefabName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrefabName);
      }
      size += numDesignPrefab_.CalculateSize(_repeated_numDesignPrefab_codec);
      if (Describe.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Describe);
      }
      if (ItemSpriteId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemSpriteId);
      }
      if (AutoPickupEvent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AutoPickupEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattlePropsConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AttributeId != 0) {
        AttributeId = other.AttributeId;
      }
      if (other.AttributeNum != 0F) {
        AttributeNum = other.AttributeNum;
      }
      if (other.TeamMateAttributeNum != 0F) {
        TeamMateAttributeNum = other.TeamMateAttributeNum;
      }
      if (other.AutoPickupEnable != 0) {
        AutoPickupEnable = other.AutoPickupEnable;
      }
      if (other.MaxNum != 0) {
        MaxNum = other.MaxNum;
      }
      if (other.PrefabName.Length != 0) {
        PrefabName = other.PrefabName;
      }
      numDesignPrefab_.Add(other.numDesignPrefab_);
      if (other.Describe.Length != 0) {
        Describe = other.Describe;
      }
      if (other.ItemSpriteId != 0) {
        ItemSpriteId = other.ItemSpriteId;
      }
      if (other.AutoPickupEvent.Length != 0) {
        AutoPickupEvent = other.AutoPickupEvent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            AttributeId = input.ReadUInt32();
            break;
          }
          case 37: {
            AttributeNum = input.ReadFloat();
            break;
          }
          case 45: {
            TeamMateAttributeNum = input.ReadFloat();
            break;
          }
          case 48: {
            AutoPickupEnable = input.ReadUInt32();
            break;
          }
          case 56: {
            MaxNum = input.ReadUInt32();
            break;
          }
          case 66: {
            PrefabName = input.ReadString();
            break;
          }
          case 74: {
            numDesignPrefab_.AddEntriesFrom(input, _repeated_numDesignPrefab_codec);
            break;
          }
          case 82: {
            Describe = input.ReadString();
            break;
          }
          case 88: {
            ItemSpriteId = input.ReadUInt32();
            break;
          }
          case 98: {
            AutoPickupEvent = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattlePropsConfig_NumDesignPrefab : pb::IMessage<BattlePropsConfig_NumDesignPrefab> {
    private static readonly pb::MessageParser<BattlePropsConfig_NumDesignPrefab> _parser = new pb::MessageParser<BattlePropsConfig_NumDesignPrefab>(() => new BattlePropsConfig_NumDesignPrefab());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattlePropsConfig_NumDesignPrefab> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBattlepropsconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePropsConfig_NumDesignPrefab() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePropsConfig_NumDesignPrefab(BattlePropsConfig_NumDesignPrefab other) : this() {
      minNum_ = other.minNum_;
      prefabName_ = other.prefabName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePropsConfig_NumDesignPrefab Clone() {
      return new BattlePropsConfig_NumDesignPrefab(this);
    }

    /// <summary>Field number for the "minNum" field.</summary>
    public const int MinNumFieldNumber = 1;
    private uint minNum_;
    /// <summary>
    /// 最小数量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinNum {
      get { return minNum_; }
      set {
        minNum_ = value;
      }
    }

    /// <summary>Field number for the "prefabName" field.</summary>
    public const int PrefabNameFieldNumber = 2;
    private string prefabName_ = "";
    /// <summary>
    /// 预制件 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrefabName {
      get { return prefabName_; }
      set {
        prefabName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattlePropsConfig_NumDesignPrefab);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattlePropsConfig_NumDesignPrefab other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinNum != other.MinNum) return false;
      if (PrefabName != other.PrefabName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinNum != 0) hash ^= MinNum.GetHashCode();
      if (PrefabName.Length != 0) hash ^= PrefabName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MinNum);
      }
      if (PrefabName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PrefabName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinNum);
      }
      if (PrefabName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrefabName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattlePropsConfig_NumDesignPrefab other) {
      if (other == null) {
        return;
      }
      if (other.MinNum != 0) {
        MinNum = other.MinNum;
      }
      if (other.PrefabName.Length != 0) {
        PrefabName = other.PrefabName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinNum = input.ReadUInt32();
            break;
          }
          case 18: {
            PrefabName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattlePropsConfig_Array : pb::IMessage<BattlePropsConfig_Array> {
    private static readonly pb::MessageParser<BattlePropsConfig_Array> _parser = new pb::MessageParser<BattlePropsConfig_Array>(() => new BattlePropsConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattlePropsConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBattlepropsconfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePropsConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePropsConfig_Array(BattlePropsConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePropsConfig_Array Clone() {
      return new BattlePropsConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.BattlePropsConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.BattlePropsConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.BattlePropsConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.BattlePropsConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.BattlePropsConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattlePropsConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattlePropsConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattlePropsConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
