// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_bigheadconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_bigheadconfig.proto</summary>
  public static partial class XlsBeansBigheadconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_bigheadconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansBigheadconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch14bHNfYmVhbnNfYmlnaGVhZGNvbmZpZy5wcm90bxIKRDExLlBiZWFucyLK",
            "AgoNQmlnSGVhZENvbmZpZxIKCgJpZBgBIAEoDRINCgV0aXRsZRgCIAEoCRIR",
            "Cglib2R5U2NhbGUYAyABKAISEQoJaGVhZFNjYWxlGAQgASgCEhoKEm1heE1v",
            "dmVTcGVlZEJ1ZmZJZBgFIAEoDRISCgpkYW1hZ2VSYXRlGAYgASgCEhUKDWNh",
            "cHN1bGVSYWRpdXMYByABKAISFQoNY2Fwc3VsZUhlaWdodBgIIAEoAhIWCg5j",
            "YXBzdWxlQ2VudGVyWRgJIAEoAhITCgttYXhIUEJ1ZmZJZBgKIAEoDRIQCgh3",
            "ZWFwb25JZBgLIAEoDRINCgVpc01heBgMIAEoCBINCgVncmFkZRgNIAEoDRIS",
            "CgpncmFkZUNvbG9yGA4gASgJEhQKDGdyYWRlVXBBdWRpbxgPIAEoCRITCgtn",
            "cmFkZVVwVGV4dBgQIAEoCSI/ChNCaWdIZWFkQ29uZmlnX0FycmF5EigKBWl0",
            "ZW1zGAEgAygLMhkuRDExLlBiZWFucy5CaWdIZWFkQ29uZmlnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BigHeadConfig), global::D11.Pbeans.BigHeadConfig.Parser, new[]{ "Id", "Title", "BodyScale", "HeadScale", "MaxMoveSpeedBuffId", "DamageRate", "CapsuleRadius", "CapsuleHeight", "CapsuleCenterY", "MaxHPBuffId", "WeaponId", "IsMax", "Grade", "GradeColor", "GradeUpAudio", "GradeUpText" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BigHeadConfig_Array), global::D11.Pbeans.BigHeadConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BigHeadConfig : pb::IMessage<BigHeadConfig> {
    private static readonly pb::MessageParser<BigHeadConfig> _parser = new pb::MessageParser<BigHeadConfig>(() => new BigHeadConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigHeadConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBigheadconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigHeadConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigHeadConfig(BigHeadConfig other) : this() {
      id_ = other.id_;
      title_ = other.title_;
      bodyScale_ = other.bodyScale_;
      headScale_ = other.headScale_;
      maxMoveSpeedBuffId_ = other.maxMoveSpeedBuffId_;
      damageRate_ = other.damageRate_;
      capsuleRadius_ = other.capsuleRadius_;
      capsuleHeight_ = other.capsuleHeight_;
      capsuleCenterY_ = other.capsuleCenterY_;
      maxHPBuffId_ = other.maxHPBuffId_;
      weaponId_ = other.weaponId_;
      isMax_ = other.isMax_;
      grade_ = other.grade_;
      gradeColor_ = other.gradeColor_;
      gradeUpAudio_ = other.gradeUpAudio_;
      gradeUpText_ = other.gradeUpText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigHeadConfig Clone() {
      return new BigHeadConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 击杀数/id共用 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    /// <summary>
    /// 称号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bodyScale" field.</summary>
    public const int BodyScaleFieldNumber = 3;
    private float bodyScale_;
    /// <summary>
    /// 身体大小缩放 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BodyScale {
      get { return bodyScale_; }
      set {
        bodyScale_ = value;
      }
    }

    /// <summary>Field number for the "headScale" field.</summary>
    public const int HeadScaleFieldNumber = 4;
    private float headScale_;
    /// <summary>
    /// 头大小缩放 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeadScale {
      get { return headScale_; }
      set {
        headScale_ = value;
      }
    }

    /// <summary>Field number for the "maxMoveSpeedBuffId" field.</summary>
    public const int MaxMoveSpeedBuffIdFieldNumber = 5;
    private uint maxMoveSpeedBuffId_;
    /// <summary>
    /// 最大移动速度BuffId0代表无变更 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxMoveSpeedBuffId {
      get { return maxMoveSpeedBuffId_; }
      set {
        maxMoveSpeedBuffId_ = value;
      }
    }

    /// <summary>Field number for the "damageRate" field.</summary>
    public const int DamageRateFieldNumber = 6;
    private float damageRate_;
    /// <summary>
    /// 伤害倍数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DamageRate {
      get { return damageRate_; }
      set {
        damageRate_ = value;
      }
    }

    /// <summary>Field number for the "capsuleRadius" field.</summary>
    public const int CapsuleRadiusFieldNumber = 7;
    private float capsuleRadius_;
    /// <summary>
    /// 受击胶囊体半径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CapsuleRadius {
      get { return capsuleRadius_; }
      set {
        capsuleRadius_ = value;
      }
    }

    /// <summary>Field number for the "capsuleHeight" field.</summary>
    public const int CapsuleHeightFieldNumber = 8;
    private float capsuleHeight_;
    /// <summary>
    /// 受击胶囊体高度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CapsuleHeight {
      get { return capsuleHeight_; }
      set {
        capsuleHeight_ = value;
      }
    }

    /// <summary>Field number for the "capsuleCenterY" field.</summary>
    public const int CapsuleCenterYFieldNumber = 9;
    private float capsuleCenterY_;
    /// <summary>
    /// 受击胶囊体中心高度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CapsuleCenterY {
      get { return capsuleCenterY_; }
      set {
        capsuleCenterY_ = value;
      }
    }

    /// <summary>Field number for the "maxHPBuffId" field.</summary>
    public const int MaxHPBuffIdFieldNumber = 10;
    private uint maxHPBuffId_;
    /// <summary>
    /// 增加的最大血量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxHPBuffId {
      get { return maxHPBuffId_; }
      set {
        maxHPBuffId_ = value;
      }
    }

    /// <summary>Field number for the "weaponId" field.</summary>
    public const int WeaponIdFieldNumber = 11;
    private uint weaponId_;
    /// <summary>
    /// 升级后的武器 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeaponId {
      get { return weaponId_; }
      set {
        weaponId_ = value;
      }
    }

    /// <summary>Field number for the "isMax" field.</summary>
    public const int IsMaxFieldNumber = 12;
    private bool isMax_;
    /// <summary>
    /// 是否是最大等级了 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMax {
      get { return isMax_; }
      set {
        isMax_ = value;
      }
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 13;
    private uint grade_;
    /// <summary>
    /// 等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "gradeColor" field.</summary>
    public const int GradeColorFieldNumber = 14;
    private string gradeColor_ = "";
    /// <summary>
    /// 等级颜色 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GradeColor {
      get { return gradeColor_; }
      set {
        gradeColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gradeUpAudio" field.</summary>
    public const int GradeUpAudioFieldNumber = 15;
    private string gradeUpAudio_ = "";
    /// <summary>
    /// 升级音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GradeUpAudio {
      get { return gradeUpAudio_; }
      set {
        gradeUpAudio_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gradeUpText" field.</summary>
    public const int GradeUpTextFieldNumber = 16;
    private string gradeUpText_ = "";
    /// <summary>
    /// 升级文本 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GradeUpText {
      get { return gradeUpText_; }
      set {
        gradeUpText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigHeadConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigHeadConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Title != other.Title) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BodyScale, other.BodyScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeadScale, other.HeadScale)) return false;
      if (MaxMoveSpeedBuffId != other.MaxMoveSpeedBuffId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamageRate, other.DamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CapsuleRadius, other.CapsuleRadius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CapsuleHeight, other.CapsuleHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CapsuleCenterY, other.CapsuleCenterY)) return false;
      if (MaxHPBuffId != other.MaxHPBuffId) return false;
      if (WeaponId != other.WeaponId) return false;
      if (IsMax != other.IsMax) return false;
      if (Grade != other.Grade) return false;
      if (GradeColor != other.GradeColor) return false;
      if (GradeUpAudio != other.GradeUpAudio) return false;
      if (GradeUpText != other.GradeUpText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (BodyScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BodyScale);
      if (HeadScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeadScale);
      if (MaxMoveSpeedBuffId != 0) hash ^= MaxMoveSpeedBuffId.GetHashCode();
      if (DamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamageRate);
      if (CapsuleRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CapsuleRadius);
      if (CapsuleHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CapsuleHeight);
      if (CapsuleCenterY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CapsuleCenterY);
      if (MaxHPBuffId != 0) hash ^= MaxHPBuffId.GetHashCode();
      if (WeaponId != 0) hash ^= WeaponId.GetHashCode();
      if (IsMax != false) hash ^= IsMax.GetHashCode();
      if (Grade != 0) hash ^= Grade.GetHashCode();
      if (GradeColor.Length != 0) hash ^= GradeColor.GetHashCode();
      if (GradeUpAudio.Length != 0) hash ^= GradeUpAudio.GetHashCode();
      if (GradeUpText.Length != 0) hash ^= GradeUpText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (BodyScale != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BodyScale);
      }
      if (HeadScale != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(HeadScale);
      }
      if (MaxMoveSpeedBuffId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MaxMoveSpeedBuffId);
      }
      if (DamageRate != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(DamageRate);
      }
      if (CapsuleRadius != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(CapsuleRadius);
      }
      if (CapsuleHeight != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(CapsuleHeight);
      }
      if (CapsuleCenterY != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(CapsuleCenterY);
      }
      if (MaxHPBuffId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(MaxHPBuffId);
      }
      if (WeaponId != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(WeaponId);
      }
      if (IsMax != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsMax);
      }
      if (Grade != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Grade);
      }
      if (GradeColor.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(GradeColor);
      }
      if (GradeUpAudio.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(GradeUpAudio);
      }
      if (GradeUpText.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(GradeUpText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (BodyScale != 0F) {
        size += 1 + 4;
      }
      if (HeadScale != 0F) {
        size += 1 + 4;
      }
      if (MaxMoveSpeedBuffId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxMoveSpeedBuffId);
      }
      if (DamageRate != 0F) {
        size += 1 + 4;
      }
      if (CapsuleRadius != 0F) {
        size += 1 + 4;
      }
      if (CapsuleHeight != 0F) {
        size += 1 + 4;
      }
      if (CapsuleCenterY != 0F) {
        size += 1 + 4;
      }
      if (MaxHPBuffId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxHPBuffId);
      }
      if (WeaponId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeaponId);
      }
      if (IsMax != false) {
        size += 1 + 1;
      }
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Grade);
      }
      if (GradeColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GradeColor);
      }
      if (GradeUpAudio.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GradeUpAudio);
      }
      if (GradeUpText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GradeUpText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigHeadConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.BodyScale != 0F) {
        BodyScale = other.BodyScale;
      }
      if (other.HeadScale != 0F) {
        HeadScale = other.HeadScale;
      }
      if (other.MaxMoveSpeedBuffId != 0) {
        MaxMoveSpeedBuffId = other.MaxMoveSpeedBuffId;
      }
      if (other.DamageRate != 0F) {
        DamageRate = other.DamageRate;
      }
      if (other.CapsuleRadius != 0F) {
        CapsuleRadius = other.CapsuleRadius;
      }
      if (other.CapsuleHeight != 0F) {
        CapsuleHeight = other.CapsuleHeight;
      }
      if (other.CapsuleCenterY != 0F) {
        CapsuleCenterY = other.CapsuleCenterY;
      }
      if (other.MaxHPBuffId != 0) {
        MaxHPBuffId = other.MaxHPBuffId;
      }
      if (other.WeaponId != 0) {
        WeaponId = other.WeaponId;
      }
      if (other.IsMax != false) {
        IsMax = other.IsMax;
      }
      if (other.Grade != 0) {
        Grade = other.Grade;
      }
      if (other.GradeColor.Length != 0) {
        GradeColor = other.GradeColor;
      }
      if (other.GradeUpAudio.Length != 0) {
        GradeUpAudio = other.GradeUpAudio;
      }
      if (other.GradeUpText.Length != 0) {
        GradeUpText = other.GradeUpText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 29: {
            BodyScale = input.ReadFloat();
            break;
          }
          case 37: {
            HeadScale = input.ReadFloat();
            break;
          }
          case 40: {
            MaxMoveSpeedBuffId = input.ReadUInt32();
            break;
          }
          case 53: {
            DamageRate = input.ReadFloat();
            break;
          }
          case 61: {
            CapsuleRadius = input.ReadFloat();
            break;
          }
          case 69: {
            CapsuleHeight = input.ReadFloat();
            break;
          }
          case 77: {
            CapsuleCenterY = input.ReadFloat();
            break;
          }
          case 80: {
            MaxHPBuffId = input.ReadUInt32();
            break;
          }
          case 88: {
            WeaponId = input.ReadUInt32();
            break;
          }
          case 96: {
            IsMax = input.ReadBool();
            break;
          }
          case 104: {
            Grade = input.ReadUInt32();
            break;
          }
          case 114: {
            GradeColor = input.ReadString();
            break;
          }
          case 122: {
            GradeUpAudio = input.ReadString();
            break;
          }
          case 130: {
            GradeUpText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BigHeadConfig_Array : pb::IMessage<BigHeadConfig_Array> {
    private static readonly pb::MessageParser<BigHeadConfig_Array> _parser = new pb::MessageParser<BigHeadConfig_Array>(() => new BigHeadConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigHeadConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBigheadconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigHeadConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigHeadConfig_Array(BigHeadConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigHeadConfig_Array Clone() {
      return new BigHeadConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.BigHeadConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.BigHeadConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.BigHeadConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.BigHeadConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.BigHeadConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigHeadConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigHeadConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigHeadConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
