// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_bossmonsterdata.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_bossmonsterdata.proto</summary>
  public static partial class XlsBeansBossmonsterdataReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_bossmonsterdata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansBossmonsterdataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch94bHNfYmVhbnNfYm9zc21vbnN0ZXJkYXRhLnByb3RvEgpEMTEuUGJlYW5z",
            "Is0CCg9Cb3NzTW9uc3RlckRhdGESCgoCaWQYASABKA0SEQoJTW9uc3Rlcklk",
            "GAIgASgNEg0KBUxldmVsGAMgASgNEgwKBFR5cGUYBCABKA0SHgoWQm9zc1By",
            "b3BlcnR5Q29uZmlnTmFtZRgFIAEoCRIjChtGaXJlUG9zaXRpb25IZWlnaHRE",
            "ZXZpYXRpb24YBiABKAISIgoaRmlyZVBvc2l0aW9uQW5nbGVEZXZpYXRpb24Y",
            "ByABKAISJQodRmlyZVBvc2l0aW9uRGlzdGFuY2VEZXZpYXRpb24YCCABKAIS",
            "HAoUU3RhdGVNYWNoaW5lVHlwZU5hbWUYCSABKAkSFwoPSW5zdGFudEhlYWRS",
            "YXRlGAogASgCEhcKD0luc3RhbnRCYWNrUmF0ZRgLIAEoAhIeChZBdHRhY2tE",
            "YW1hZ2VBcm1vclNjYWxlGAwgASgCIkMKFUJvc3NNb25zdGVyRGF0YV9BcnJh",
            "eRIqCgVpdGVtcxgBIAMoCzIbLkQxMS5QYmVhbnMuQm9zc01vbnN0ZXJEYXRh",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BossMonsterData), global::D11.Pbeans.BossMonsterData.Parser, new[]{ "Id", "MonsterId", "Level", "Type", "BossPropertyConfigName", "FirePositionHeightDeviation", "FirePositionAngleDeviation", "FirePositionDistanceDeviation", "StateMachineTypeName", "InstantHeadRate", "InstantBackRate", "AttackDamageArmorScale" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BossMonsterData_Array), global::D11.Pbeans.BossMonsterData_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BossMonsterData : pb::IMessage<BossMonsterData> {
    private static readonly pb::MessageParser<BossMonsterData> _parser = new pb::MessageParser<BossMonsterData>(() => new BossMonsterData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BossMonsterData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBossmonsterdataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BossMonsterData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BossMonsterData(BossMonsterData other) : this() {
      id_ = other.id_;
      monsterId_ = other.monsterId_;
      level_ = other.level_;
      type_ = other.type_;
      bossPropertyConfigName_ = other.bossPropertyConfigName_;
      firePositionHeightDeviation_ = other.firePositionHeightDeviation_;
      firePositionAngleDeviation_ = other.firePositionAngleDeviation_;
      firePositionDistanceDeviation_ = other.firePositionDistanceDeviation_;
      stateMachineTypeName_ = other.stateMachineTypeName_;
      instantHeadRate_ = other.instantHeadRate_;
      instantBackRate_ = other.instantBackRate_;
      attackDamageArmorScale_ = other.attackDamageArmorScale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BossMonsterData Clone() {
      return new BossMonsterData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// BossID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "MonsterId" field.</summary>
    public const int MonsterIdFieldNumber = 2;
    private uint monsterId_;
    /// <summary>
    /// MonsterData中的ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    /// <summary>
    /// 等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 4;
    private uint type_;
    /// <summary>
    /// Boss类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "BossPropertyConfigName" field.</summary>
    public const int BossPropertyConfigNameFieldNumber = 5;
    private string bossPropertyConfigName_ = "";
    /// <summary>
    /// BOSS属性表名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BossPropertyConfigName {
      get { return bossPropertyConfigName_; }
      set {
        bossPropertyConfigName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FirePositionHeightDeviation" field.</summary>
    public const int FirePositionHeightDeviationFieldNumber = 6;
    private float firePositionHeightDeviation_;
    /// <summary>
    /// 开火位置高度偏差 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FirePositionHeightDeviation {
      get { return firePositionHeightDeviation_; }
      set {
        firePositionHeightDeviation_ = value;
      }
    }

    /// <summary>Field number for the "FirePositionAngleDeviation" field.</summary>
    public const int FirePositionAngleDeviationFieldNumber = 7;
    private float firePositionAngleDeviation_;
    /// <summary>
    /// 开火位置角度偏差 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FirePositionAngleDeviation {
      get { return firePositionAngleDeviation_; }
      set {
        firePositionAngleDeviation_ = value;
      }
    }

    /// <summary>Field number for the "FirePositionDistanceDeviation" field.</summary>
    public const int FirePositionDistanceDeviationFieldNumber = 8;
    private float firePositionDistanceDeviation_;
    /// <summary>
    /// 开火位置距离偏差 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FirePositionDistanceDeviation {
      get { return firePositionDistanceDeviation_; }
      set {
        firePositionDistanceDeviation_ = value;
      }
    }

    /// <summary>Field number for the "StateMachineTypeName" field.</summary>
    public const int StateMachineTypeNameFieldNumber = 9;
    private string stateMachineTypeName_ = "";
    /// <summary>
    /// 动画状态机 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StateMachineTypeName {
      get { return stateMachineTypeName_; }
      set {
        stateMachineTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InstantHeadRate" field.</summary>
    public const int InstantHeadRateFieldNumber = 10;
    private float instantHeadRate_;
    /// <summary>
    /// 枪头部伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InstantHeadRate {
      get { return instantHeadRate_; }
      set {
        instantHeadRate_ = value;
      }
    }

    /// <summary>Field number for the "InstantBackRate" field.</summary>
    public const int InstantBackRateFieldNumber = 11;
    private float instantBackRate_;
    /// <summary>
    /// 枪背部伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InstantBackRate {
      get { return instantBackRate_; }
      set {
        instantBackRate_ = value;
      }
    }

    /// <summary>Field number for the "AttackDamageArmorScale" field.</summary>
    public const int AttackDamageArmorScaleFieldNumber = 12;
    private float attackDamageArmorScale_;
    /// <summary>
    /// 护甲穿透比例 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackDamageArmorScale {
      get { return attackDamageArmorScale_; }
      set {
        attackDamageArmorScale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BossMonsterData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BossMonsterData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MonsterId != other.MonsterId) return false;
      if (Level != other.Level) return false;
      if (Type != other.Type) return false;
      if (BossPropertyConfigName != other.BossPropertyConfigName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FirePositionHeightDeviation, other.FirePositionHeightDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FirePositionAngleDeviation, other.FirePositionAngleDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FirePositionDistanceDeviation, other.FirePositionDistanceDeviation)) return false;
      if (StateMachineTypeName != other.StateMachineTypeName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InstantHeadRate, other.InstantHeadRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InstantBackRate, other.InstantBackRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackDamageArmorScale, other.AttackDamageArmorScale)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (BossPropertyConfigName.Length != 0) hash ^= BossPropertyConfigName.GetHashCode();
      if (FirePositionHeightDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FirePositionHeightDeviation);
      if (FirePositionAngleDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FirePositionAngleDeviation);
      if (FirePositionDistanceDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FirePositionDistanceDeviation);
      if (StateMachineTypeName.Length != 0) hash ^= StateMachineTypeName.GetHashCode();
      if (InstantHeadRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InstantHeadRate);
      if (InstantBackRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InstantBackRate);
      if (AttackDamageArmorScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackDamageArmorScale);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MonsterId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Type);
      }
      if (BossPropertyConfigName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BossPropertyConfigName);
      }
      if (FirePositionHeightDeviation != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(FirePositionHeightDeviation);
      }
      if (FirePositionAngleDeviation != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(FirePositionAngleDeviation);
      }
      if (FirePositionDistanceDeviation != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(FirePositionDistanceDeviation);
      }
      if (StateMachineTypeName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(StateMachineTypeName);
      }
      if (InstantHeadRate != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(InstantHeadRate);
      }
      if (InstantBackRate != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(InstantBackRate);
      }
      if (AttackDamageArmorScale != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(AttackDamageArmorScale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonsterId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (BossPropertyConfigName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BossPropertyConfigName);
      }
      if (FirePositionHeightDeviation != 0F) {
        size += 1 + 4;
      }
      if (FirePositionAngleDeviation != 0F) {
        size += 1 + 4;
      }
      if (FirePositionDistanceDeviation != 0F) {
        size += 1 + 4;
      }
      if (StateMachineTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StateMachineTypeName);
      }
      if (InstantHeadRate != 0F) {
        size += 1 + 4;
      }
      if (InstantBackRate != 0F) {
        size += 1 + 4;
      }
      if (AttackDamageArmorScale != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BossMonsterData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.BossPropertyConfigName.Length != 0) {
        BossPropertyConfigName = other.BossPropertyConfigName;
      }
      if (other.FirePositionHeightDeviation != 0F) {
        FirePositionHeightDeviation = other.FirePositionHeightDeviation;
      }
      if (other.FirePositionAngleDeviation != 0F) {
        FirePositionAngleDeviation = other.FirePositionAngleDeviation;
      }
      if (other.FirePositionDistanceDeviation != 0F) {
        FirePositionDistanceDeviation = other.FirePositionDistanceDeviation;
      }
      if (other.StateMachineTypeName.Length != 0) {
        StateMachineTypeName = other.StateMachineTypeName;
      }
      if (other.InstantHeadRate != 0F) {
        InstantHeadRate = other.InstantHeadRate;
      }
      if (other.InstantBackRate != 0F) {
        InstantBackRate = other.InstantBackRate;
      }
      if (other.AttackDamageArmorScale != 0F) {
        AttackDamageArmorScale = other.AttackDamageArmorScale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            MonsterId = input.ReadUInt32();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            Type = input.ReadUInt32();
            break;
          }
          case 42: {
            BossPropertyConfigName = input.ReadString();
            break;
          }
          case 53: {
            FirePositionHeightDeviation = input.ReadFloat();
            break;
          }
          case 61: {
            FirePositionAngleDeviation = input.ReadFloat();
            break;
          }
          case 69: {
            FirePositionDistanceDeviation = input.ReadFloat();
            break;
          }
          case 74: {
            StateMachineTypeName = input.ReadString();
            break;
          }
          case 85: {
            InstantHeadRate = input.ReadFloat();
            break;
          }
          case 93: {
            InstantBackRate = input.ReadFloat();
            break;
          }
          case 101: {
            AttackDamageArmorScale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BossMonsterData_Array : pb::IMessage<BossMonsterData_Array> {
    private static readonly pb::MessageParser<BossMonsterData_Array> _parser = new pb::MessageParser<BossMonsterData_Array>(() => new BossMonsterData_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BossMonsterData_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBossmonsterdataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BossMonsterData_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BossMonsterData_Array(BossMonsterData_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BossMonsterData_Array Clone() {
      return new BossMonsterData_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.BossMonsterData> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.BossMonsterData.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.BossMonsterData> items_ = new pbc::RepeatedField<global::D11.Pbeans.BossMonsterData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.BossMonsterData> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BossMonsterData_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BossMonsterData_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BossMonsterData_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
