// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_botfireconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_botfireconfig.proto</summary>
  public static partial class XlsBeansBotfireconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_botfireconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansBotfireconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch14bHNfYmVhbnNfYm90ZmlyZWNvbmZpZy5wcm90bxIKRDExLlBiZWFucyLe",
            "AwoNQm90RmlyZUNvbmZpZxIKCgJpZBgBIAEoDRIUCgxEdXJhdGlvblRpbWUY",
            "AiABKAISHQoVRHVyYXRpb25UaW1lRGV2aWF0aW9uGAMgASgCEg8KB0NhZGVu",
            "Y2UYBCABKAISFAoMQ29vbGRvd25UaW1lGAUgASgCEh0KFUNvb2xkb3duVGlt",
            "ZURldmlhdGlvbhgGIAEoAhIUCgxGaXJlRGlzdGFuY2UYByABKA0SHQoVRmly",
            "ZURpc3RhbmNlRGV2aWF0aW9uGAggASgNEikKIUFpbUF0VGFyZ2V0SG9yaXpv",
            "bnRhbE1pbkRldmlhdGlvbhgJIAEoAhInCh9BaW1BdFRhcmdldFZlcnRpY2Fs",
            "TWluRGV2aWF0aW9uGAogASgCEikKIUFpbUF0VGFyZ2V0SG9yaXpvbnRhbE1h",
            "eERldmlhdGlvbhgLIAEoAhInCh9BaW1BdFRhcmdldFZlcnRpY2FsTWF4RGV2",
            "aWF0aW9uGAwgASgCEh8KF0RldmlhdGlvbkN1dERvd25QZXJjZW50GA0gASgC",
            "EhUKDUlubmVyUmluZ1JhdGUYDiABKAISGQoRQ3V0RG93bk1heFBlcmNlbnQY",
            "DyABKAISFgoORmx1Y3R1YXRlUGFyYW0YECABKAIiPwoTQm90RmlyZUNvbmZp",
            "Z19BcnJheRIoCgVpdGVtcxgBIAMoCzIZLkQxMS5QYmVhbnMuQm90RmlyZUNv",
            "bmZpZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BotFireConfig), global::D11.Pbeans.BotFireConfig.Parser, new[]{ "Id", "DurationTime", "DurationTimeDeviation", "Cadence", "CooldownTime", "CooldownTimeDeviation", "FireDistance", "FireDistanceDeviation", "AimAtTargetHorizontalMinDeviation", "AimAtTargetVerticalMinDeviation", "AimAtTargetHorizontalMaxDeviation", "AimAtTargetVerticalMaxDeviation", "DeviationCutDownPercent", "InnerRingRate", "CutDownMaxPercent", "FluctuateParam" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BotFireConfig_Array), global::D11.Pbeans.BotFireConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BotFireConfig : pb::IMessage<BotFireConfig> {
    private static readonly pb::MessageParser<BotFireConfig> _parser = new pb::MessageParser<BotFireConfig>(() => new BotFireConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BotFireConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBotfireconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotFireConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotFireConfig(BotFireConfig other) : this() {
      id_ = other.id_;
      durationTime_ = other.durationTime_;
      durationTimeDeviation_ = other.durationTimeDeviation_;
      cadence_ = other.cadence_;
      cooldownTime_ = other.cooldownTime_;
      cooldownTimeDeviation_ = other.cooldownTimeDeviation_;
      fireDistance_ = other.fireDistance_;
      fireDistanceDeviation_ = other.fireDistanceDeviation_;
      aimAtTargetHorizontalMinDeviation_ = other.aimAtTargetHorizontalMinDeviation_;
      aimAtTargetVerticalMinDeviation_ = other.aimAtTargetVerticalMinDeviation_;
      aimAtTargetHorizontalMaxDeviation_ = other.aimAtTargetHorizontalMaxDeviation_;
      aimAtTargetVerticalMaxDeviation_ = other.aimAtTargetVerticalMaxDeviation_;
      deviationCutDownPercent_ = other.deviationCutDownPercent_;
      innerRingRate_ = other.innerRingRate_;
      cutDownMaxPercent_ = other.cutDownMaxPercent_;
      fluctuateParam_ = other.fluctuateParam_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotFireConfig Clone() {
      return new BotFireConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "DurationTime" field.</summary>
    public const int DurationTimeFieldNumber = 2;
    private float durationTime_;
    /// <summary>
    /// 持续时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DurationTime {
      get { return durationTime_; }
      set {
        durationTime_ = value;
      }
    }

    /// <summary>Field number for the "DurationTimeDeviation" field.</summary>
    public const int DurationTimeDeviationFieldNumber = 3;
    private float durationTimeDeviation_;
    /// <summary>
    /// 持续时间偏差 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DurationTimeDeviation {
      get { return durationTimeDeviation_; }
      set {
        durationTimeDeviation_ = value;
      }
    }

    /// <summary>Field number for the "Cadence" field.</summary>
    public const int CadenceFieldNumber = 4;
    private float cadence_;
    /// <summary>
    /// 节奏 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Cadence {
      get { return cadence_; }
      set {
        cadence_ = value;
      }
    }

    /// <summary>Field number for the "CooldownTime" field.</summary>
    public const int CooldownTimeFieldNumber = 5;
    private float cooldownTime_;
    /// <summary>
    /// 冷却时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CooldownTime {
      get { return cooldownTime_; }
      set {
        cooldownTime_ = value;
      }
    }

    /// <summary>Field number for the "CooldownTimeDeviation" field.</summary>
    public const int CooldownTimeDeviationFieldNumber = 6;
    private float cooldownTimeDeviation_;
    /// <summary>
    /// 冷却时间偏差 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CooldownTimeDeviation {
      get { return cooldownTimeDeviation_; }
      set {
        cooldownTimeDeviation_ = value;
      }
    }

    /// <summary>Field number for the "FireDistance" field.</summary>
    public const int FireDistanceFieldNumber = 7;
    private uint fireDistance_;
    /// <summary>
    /// 开火距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FireDistance {
      get { return fireDistance_; }
      set {
        fireDistance_ = value;
      }
    }

    /// <summary>Field number for the "FireDistanceDeviation" field.</summary>
    public const int FireDistanceDeviationFieldNumber = 8;
    private uint fireDistanceDeviation_;
    /// <summary>
    /// 距离偏差 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FireDistanceDeviation {
      get { return fireDistanceDeviation_; }
      set {
        fireDistanceDeviation_ = value;
      }
    }

    /// <summary>Field number for the "AimAtTargetHorizontalMinDeviation" field.</summary>
    public const int AimAtTargetHorizontalMinDeviationFieldNumber = 9;
    private float aimAtTargetHorizontalMinDeviation_;
    /// <summary>
    /// 瞄准目标胸部水平方向的最小偏移 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AimAtTargetHorizontalMinDeviation {
      get { return aimAtTargetHorizontalMinDeviation_; }
      set {
        aimAtTargetHorizontalMinDeviation_ = value;
      }
    }

    /// <summary>Field number for the "AimAtTargetVerticalMinDeviation" field.</summary>
    public const int AimAtTargetVerticalMinDeviationFieldNumber = 10;
    private float aimAtTargetVerticalMinDeviation_;
    /// <summary>
    /// 瞄准目标胸部垂直方向的最小偏移 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AimAtTargetVerticalMinDeviation {
      get { return aimAtTargetVerticalMinDeviation_; }
      set {
        aimAtTargetVerticalMinDeviation_ = value;
      }
    }

    /// <summary>Field number for the "AimAtTargetHorizontalMaxDeviation" field.</summary>
    public const int AimAtTargetHorizontalMaxDeviationFieldNumber = 11;
    private float aimAtTargetHorizontalMaxDeviation_;
    /// <summary>
    /// 瞄准目标胸部水平方向的最大偏移 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AimAtTargetHorizontalMaxDeviation {
      get { return aimAtTargetHorizontalMaxDeviation_; }
      set {
        aimAtTargetHorizontalMaxDeviation_ = value;
      }
    }

    /// <summary>Field number for the "AimAtTargetVerticalMaxDeviation" field.</summary>
    public const int AimAtTargetVerticalMaxDeviationFieldNumber = 12;
    private float aimAtTargetVerticalMaxDeviation_;
    /// <summary>
    /// 瞄准目标胸部垂直方向的最大偏移 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AimAtTargetVerticalMaxDeviation {
      get { return aimAtTargetVerticalMaxDeviation_; }
      set {
        aimAtTargetVerticalMaxDeviation_ = value;
      }
    }

    /// <summary>Field number for the "DeviationCutDownPercent" field.</summary>
    public const int DeviationCutDownPercentFieldNumber = 13;
    private float deviationCutDownPercent_;
    /// <summary>
    /// 时间推移导致偏移角度削减百分比 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeviationCutDownPercent {
      get { return deviationCutDownPercent_; }
      set {
        deviationCutDownPercent_ = value;
      }
    }

    /// <summary>Field number for the "InnerRingRate" field.</summary>
    public const int InnerRingRateFieldNumber = 14;
    private float innerRingRate_;
    /// <summary>
    /// 内环百分比 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InnerRingRate {
      get { return innerRingRate_; }
      set {
        innerRingRate_ = value;
      }
    }

    /// <summary>Field number for the "CutDownMaxPercent" field.</summary>
    public const int CutDownMaxPercentFieldNumber = 15;
    private float cutDownMaxPercent_;
    /// <summary>
    /// 最大衰减 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CutDownMaxPercent {
      get { return cutDownMaxPercent_; }
      set {
        cutDownMaxPercent_ = value;
      }
    }

    /// <summary>Field number for the "FluctuateParam" field.</summary>
    public const int FluctuateParamFieldNumber = 16;
    private float fluctuateParam_;
    /// <summary>
    /// 波动参数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FluctuateParam {
      get { return fluctuateParam_; }
      set {
        fluctuateParam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BotFireConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BotFireConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DurationTime, other.DurationTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DurationTimeDeviation, other.DurationTimeDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cadence, other.Cadence)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CooldownTime, other.CooldownTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CooldownTimeDeviation, other.CooldownTimeDeviation)) return false;
      if (FireDistance != other.FireDistance) return false;
      if (FireDistanceDeviation != other.FireDistanceDeviation) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AimAtTargetHorizontalMinDeviation, other.AimAtTargetHorizontalMinDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AimAtTargetVerticalMinDeviation, other.AimAtTargetVerticalMinDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AimAtTargetHorizontalMaxDeviation, other.AimAtTargetHorizontalMaxDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AimAtTargetVerticalMaxDeviation, other.AimAtTargetVerticalMaxDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeviationCutDownPercent, other.DeviationCutDownPercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InnerRingRate, other.InnerRingRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CutDownMaxPercent, other.CutDownMaxPercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FluctuateParam, other.FluctuateParam)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (DurationTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DurationTime);
      if (DurationTimeDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DurationTimeDeviation);
      if (Cadence != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cadence);
      if (CooldownTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CooldownTime);
      if (CooldownTimeDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CooldownTimeDeviation);
      if (FireDistance != 0) hash ^= FireDistance.GetHashCode();
      if (FireDistanceDeviation != 0) hash ^= FireDistanceDeviation.GetHashCode();
      if (AimAtTargetHorizontalMinDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AimAtTargetHorizontalMinDeviation);
      if (AimAtTargetVerticalMinDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AimAtTargetVerticalMinDeviation);
      if (AimAtTargetHorizontalMaxDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AimAtTargetHorizontalMaxDeviation);
      if (AimAtTargetVerticalMaxDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AimAtTargetVerticalMaxDeviation);
      if (DeviationCutDownPercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeviationCutDownPercent);
      if (InnerRingRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InnerRingRate);
      if (CutDownMaxPercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CutDownMaxPercent);
      if (FluctuateParam != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FluctuateParam);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (DurationTime != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(DurationTime);
      }
      if (DurationTimeDeviation != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DurationTimeDeviation);
      }
      if (Cadence != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Cadence);
      }
      if (CooldownTime != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(CooldownTime);
      }
      if (CooldownTimeDeviation != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(CooldownTimeDeviation);
      }
      if (FireDistance != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(FireDistance);
      }
      if (FireDistanceDeviation != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(FireDistanceDeviation);
      }
      if (AimAtTargetHorizontalMinDeviation != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(AimAtTargetHorizontalMinDeviation);
      }
      if (AimAtTargetVerticalMinDeviation != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(AimAtTargetVerticalMinDeviation);
      }
      if (AimAtTargetHorizontalMaxDeviation != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(AimAtTargetHorizontalMaxDeviation);
      }
      if (AimAtTargetVerticalMaxDeviation != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(AimAtTargetVerticalMaxDeviation);
      }
      if (DeviationCutDownPercent != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(DeviationCutDownPercent);
      }
      if (InnerRingRate != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(InnerRingRate);
      }
      if (CutDownMaxPercent != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(CutDownMaxPercent);
      }
      if (FluctuateParam != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(FluctuateParam);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (DurationTime != 0F) {
        size += 1 + 4;
      }
      if (DurationTimeDeviation != 0F) {
        size += 1 + 4;
      }
      if (Cadence != 0F) {
        size += 1 + 4;
      }
      if (CooldownTime != 0F) {
        size += 1 + 4;
      }
      if (CooldownTimeDeviation != 0F) {
        size += 1 + 4;
      }
      if (FireDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FireDistance);
      }
      if (FireDistanceDeviation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FireDistanceDeviation);
      }
      if (AimAtTargetHorizontalMinDeviation != 0F) {
        size += 1 + 4;
      }
      if (AimAtTargetVerticalMinDeviation != 0F) {
        size += 1 + 4;
      }
      if (AimAtTargetHorizontalMaxDeviation != 0F) {
        size += 1 + 4;
      }
      if (AimAtTargetVerticalMaxDeviation != 0F) {
        size += 1 + 4;
      }
      if (DeviationCutDownPercent != 0F) {
        size += 1 + 4;
      }
      if (InnerRingRate != 0F) {
        size += 1 + 4;
      }
      if (CutDownMaxPercent != 0F) {
        size += 1 + 4;
      }
      if (FluctuateParam != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BotFireConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.DurationTime != 0F) {
        DurationTime = other.DurationTime;
      }
      if (other.DurationTimeDeviation != 0F) {
        DurationTimeDeviation = other.DurationTimeDeviation;
      }
      if (other.Cadence != 0F) {
        Cadence = other.Cadence;
      }
      if (other.CooldownTime != 0F) {
        CooldownTime = other.CooldownTime;
      }
      if (other.CooldownTimeDeviation != 0F) {
        CooldownTimeDeviation = other.CooldownTimeDeviation;
      }
      if (other.FireDistance != 0) {
        FireDistance = other.FireDistance;
      }
      if (other.FireDistanceDeviation != 0) {
        FireDistanceDeviation = other.FireDistanceDeviation;
      }
      if (other.AimAtTargetHorizontalMinDeviation != 0F) {
        AimAtTargetHorizontalMinDeviation = other.AimAtTargetHorizontalMinDeviation;
      }
      if (other.AimAtTargetVerticalMinDeviation != 0F) {
        AimAtTargetVerticalMinDeviation = other.AimAtTargetVerticalMinDeviation;
      }
      if (other.AimAtTargetHorizontalMaxDeviation != 0F) {
        AimAtTargetHorizontalMaxDeviation = other.AimAtTargetHorizontalMaxDeviation;
      }
      if (other.AimAtTargetVerticalMaxDeviation != 0F) {
        AimAtTargetVerticalMaxDeviation = other.AimAtTargetVerticalMaxDeviation;
      }
      if (other.DeviationCutDownPercent != 0F) {
        DeviationCutDownPercent = other.DeviationCutDownPercent;
      }
      if (other.InnerRingRate != 0F) {
        InnerRingRate = other.InnerRingRate;
      }
      if (other.CutDownMaxPercent != 0F) {
        CutDownMaxPercent = other.CutDownMaxPercent;
      }
      if (other.FluctuateParam != 0F) {
        FluctuateParam = other.FluctuateParam;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 21: {
            DurationTime = input.ReadFloat();
            break;
          }
          case 29: {
            DurationTimeDeviation = input.ReadFloat();
            break;
          }
          case 37: {
            Cadence = input.ReadFloat();
            break;
          }
          case 45: {
            CooldownTime = input.ReadFloat();
            break;
          }
          case 53: {
            CooldownTimeDeviation = input.ReadFloat();
            break;
          }
          case 56: {
            FireDistance = input.ReadUInt32();
            break;
          }
          case 64: {
            FireDistanceDeviation = input.ReadUInt32();
            break;
          }
          case 77: {
            AimAtTargetHorizontalMinDeviation = input.ReadFloat();
            break;
          }
          case 85: {
            AimAtTargetVerticalMinDeviation = input.ReadFloat();
            break;
          }
          case 93: {
            AimAtTargetHorizontalMaxDeviation = input.ReadFloat();
            break;
          }
          case 101: {
            AimAtTargetVerticalMaxDeviation = input.ReadFloat();
            break;
          }
          case 109: {
            DeviationCutDownPercent = input.ReadFloat();
            break;
          }
          case 117: {
            InnerRingRate = input.ReadFloat();
            break;
          }
          case 125: {
            CutDownMaxPercent = input.ReadFloat();
            break;
          }
          case 133: {
            FluctuateParam = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BotFireConfig_Array : pb::IMessage<BotFireConfig_Array> {
    private static readonly pb::MessageParser<BotFireConfig_Array> _parser = new pb::MessageParser<BotFireConfig_Array>(() => new BotFireConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BotFireConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBotfireconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotFireConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotFireConfig_Array(BotFireConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotFireConfig_Array Clone() {
      return new BotFireConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.BotFireConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.BotFireConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.BotFireConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.BotFireConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.BotFireConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BotFireConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BotFireConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BotFireConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
