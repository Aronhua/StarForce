// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_botpropertyconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_botpropertyconfig.proto</summary>
  public static partial class XlsBeansBotpropertyconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_botpropertyconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansBotpropertyconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiF4bHNfYmVhbnNfYm90cHJvcGVydHljb25maWcucHJvdG8SCkQxMS5QYmVh",
            "bnMimggKEUJvdFByb3BlcnR5Q29uZmlnEgoKAmlkGAEgASgNEhIKCk1lbW9y",
            "eVNwYW4YAiABKAISIwobVmlzaW9uUGVyY2VwdGlvblRhcmdldEFuZ2xlGAMg",
            "ASgNEiYKHlZpc2lvblBlcmNlcHRpb25UYXJnZXREaXN0YW5jZRgEIAEoDRIg",
            "ChhTZWxlY3RUYXJnZXRUaW1lSW50ZXJ2YWwYBSABKAISIQoZQ29sbGVjdERh",
            "bWVnZVRpbWVJbnRlcnZhbBgGIAEoAhIWCg5IZWFkU2hvdE9mZnNldBgHIAEo",
            "AhIaChJEZWNheURhbWFnZVBlcmNlbnQYCCABKAISHgoWUm90YXRpb25CZWZv",
            "cmVXYWl0VGltZRgJIAEoAhImCh5BbmdsZVRvQWltQXRUYXJnZXRDb250aW51",
            "ZVRpbWUYCiABKAISHAoURHluYW1pY1JvdGF0aW9uUG93ZXIYCyABKAISGgoS",
            "Tm9ybWFsRGVmZW5jZVJhdGlvGAwgASgCEhsKE1NwZWNpYWxEZWZlbmNlUmF0",
            "aW8YDSABKAISFwoPRGVmZW5jZUludGVydmFsGA4gASgCEhkKEU5vaXNlUnVu",
            "bmluZ1JhbmdlGA8gASgNEhwKFE5vaXNlUnVubmluZ0R1cmF0aW9uGBAgASgC",
            "EhYKDk5vaXNlSnVtcFJhbmdlGBEgASgNEhkKEU5vaXNlSnVtcER1cmF0aW9u",
            "GBIgASgCEhYKDk5vaXNlRmlyZVJhbmdlGBMgASgNEhkKEU5vaXNlRmlyZUR1",
            "cmF0aW9uGBQgASgCEhcKD05vaXNlVGhyb3dSYW5nZRgVIAEoDRIaChJOb2lz",
            "ZVRocm93RHVyYXRpb24YFiABKAISFwoPTm9pc2VTd29yZFJhbmdlGBcgASgN",
            "EhoKEk5vaXNlU3dvcmREdXJhdGlvbhgYIAEoAhIeChZDaGVja0hvbGRNZWxl",
            "ZUludGVydmFsGBkgASgCEhUKDUhvbGRNZWxlZVNwYW4YGiABKAISHgoWSG9s",
            "ZE1lbGVlU3BhbkRldmlhdGlvbhgbIAEoAhIaChJIb2xkTWVsZWVSYXRlUG93",
            "ZXIYHCABKAISGAoQU3RhbmRTaG9vdFdlaWdodBgdIAEoDRIZChFDcm91Y2hT",
            "aG9vdFdlaWdodBgeIAEoDRIYChBEb2RnZVNob290V2VpZ2h0GB8gASgNEhYK",
            "DkRvZGdlUG9pbnROdW1zGCAgASgNEhgKEERvZGdlTWluRGlzdGFuY2UYISAB",
            "KAISGAoQRG9kZ2VNYXhEaXN0YW5jZRgiIAEoAhIcChRPcGVyYXRvckNvbnRp",
            "bnVlVGltZRgjIAEoAhIXCg9TZWFyY2hQb2ludFJhdGUYJCABKAISGQoRRWFj",
            "aFNlYXJjaFBvaW50Q0QYJSABKAIiRwoXQm90UHJvcGVydHlDb25maWdfQXJy",
            "YXkSLAoFaXRlbXMYASADKAsyHS5EMTEuUGJlYW5zLkJvdFByb3BlcnR5Q29u",
            "ZmlnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BotPropertyConfig), global::D11.Pbeans.BotPropertyConfig.Parser, new[]{ "Id", "MemorySpan", "VisionPerceptionTargetAngle", "VisionPerceptionTargetDistance", "SelectTargetTimeInterval", "CollectDamegeTimeInterval", "HeadShotOffset", "DecayDamagePercent", "RotationBeforeWaitTime", "AngleToAimAtTargetContinueTime", "DynamicRotationPower", "NormalDefenceRatio", "SpecialDefenceRatio", "DefenceInterval", "NoiseRunningRange", "NoiseRunningDuration", "NoiseJumpRange", "NoiseJumpDuration", "NoiseFireRange", "NoiseFireDuration", "NoiseThrowRange", "NoiseThrowDuration", "NoiseSwordRange", "NoiseSwordDuration", "CheckHoldMeleeInterval", "HoldMeleeSpan", "HoldMeleeSpanDeviation", "HoldMeleeRatePower", "StandShootWeight", "CrouchShootWeight", "DodgeShootWeight", "DodgePointNums", "DodgeMinDistance", "DodgeMaxDistance", "OperatorContinueTime", "SearchPointRate", "EachSearchPointCD" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BotPropertyConfig_Array), global::D11.Pbeans.BotPropertyConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BotPropertyConfig : pb::IMessage<BotPropertyConfig> {
    private static readonly pb::MessageParser<BotPropertyConfig> _parser = new pb::MessageParser<BotPropertyConfig>(() => new BotPropertyConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BotPropertyConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBotpropertyconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotPropertyConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotPropertyConfig(BotPropertyConfig other) : this() {
      id_ = other.id_;
      memorySpan_ = other.memorySpan_;
      visionPerceptionTargetAngle_ = other.visionPerceptionTargetAngle_;
      visionPerceptionTargetDistance_ = other.visionPerceptionTargetDistance_;
      selectTargetTimeInterval_ = other.selectTargetTimeInterval_;
      collectDamegeTimeInterval_ = other.collectDamegeTimeInterval_;
      headShotOffset_ = other.headShotOffset_;
      decayDamagePercent_ = other.decayDamagePercent_;
      rotationBeforeWaitTime_ = other.rotationBeforeWaitTime_;
      angleToAimAtTargetContinueTime_ = other.angleToAimAtTargetContinueTime_;
      dynamicRotationPower_ = other.dynamicRotationPower_;
      normalDefenceRatio_ = other.normalDefenceRatio_;
      specialDefenceRatio_ = other.specialDefenceRatio_;
      defenceInterval_ = other.defenceInterval_;
      noiseRunningRange_ = other.noiseRunningRange_;
      noiseRunningDuration_ = other.noiseRunningDuration_;
      noiseJumpRange_ = other.noiseJumpRange_;
      noiseJumpDuration_ = other.noiseJumpDuration_;
      noiseFireRange_ = other.noiseFireRange_;
      noiseFireDuration_ = other.noiseFireDuration_;
      noiseThrowRange_ = other.noiseThrowRange_;
      noiseThrowDuration_ = other.noiseThrowDuration_;
      noiseSwordRange_ = other.noiseSwordRange_;
      noiseSwordDuration_ = other.noiseSwordDuration_;
      checkHoldMeleeInterval_ = other.checkHoldMeleeInterval_;
      holdMeleeSpan_ = other.holdMeleeSpan_;
      holdMeleeSpanDeviation_ = other.holdMeleeSpanDeviation_;
      holdMeleeRatePower_ = other.holdMeleeRatePower_;
      standShootWeight_ = other.standShootWeight_;
      crouchShootWeight_ = other.crouchShootWeight_;
      dodgeShootWeight_ = other.dodgeShootWeight_;
      dodgePointNums_ = other.dodgePointNums_;
      dodgeMinDistance_ = other.dodgeMinDistance_;
      dodgeMaxDistance_ = other.dodgeMaxDistance_;
      operatorContinueTime_ = other.operatorContinueTime_;
      searchPointRate_ = other.searchPointRate_;
      eachSearchPointCD_ = other.eachSearchPointCD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotPropertyConfig Clone() {
      return new BotPropertyConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// AI类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "MemorySpan" field.</summary>
    public const int MemorySpanFieldNumber = 2;
    private float memorySpan_;
    /// <summary>
    /// 感知记忆时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MemorySpan {
      get { return memorySpan_; }
      set {
        memorySpan_ = value;
      }
    }

    /// <summary>Field number for the "VisionPerceptionTargetAngle" field.</summary>
    public const int VisionPerceptionTargetAngleFieldNumber = 3;
    private uint visionPerceptionTargetAngle_;
    /// <summary>
    /// 视野感知目标的角度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VisionPerceptionTargetAngle {
      get { return visionPerceptionTargetAngle_; }
      set {
        visionPerceptionTargetAngle_ = value;
      }
    }

    /// <summary>Field number for the "VisionPerceptionTargetDistance" field.</summary>
    public const int VisionPerceptionTargetDistanceFieldNumber = 4;
    private uint visionPerceptionTargetDistance_;
    /// <summary>
    /// 视野感知目标的距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VisionPerceptionTargetDistance {
      get { return visionPerceptionTargetDistance_; }
      set {
        visionPerceptionTargetDistance_ = value;
      }
    }

    /// <summary>Field number for the "SelectTargetTimeInterval" field.</summary>
    public const int SelectTargetTimeIntervalFieldNumber = 5;
    private float selectTargetTimeInterval_;
    /// <summary>
    /// 选择目标的时间间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SelectTargetTimeInterval {
      get { return selectTargetTimeInterval_; }
      set {
        selectTargetTimeInterval_ = value;
      }
    }

    /// <summary>Field number for the "CollectDamegeTimeInterval" field.</summary>
    public const int CollectDamegeTimeIntervalFieldNumber = 6;
    private float collectDamegeTimeInterval_;
    /// <summary>
    /// 收集多少秒所受的伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CollectDamegeTimeInterval {
      get { return collectDamegeTimeInterval_; }
      set {
        collectDamegeTimeInterval_ = value;
      }
    }

    /// <summary>Field number for the "HeadShotOffset" field.</summary>
    public const int HeadShotOffsetFieldNumber = 7;
    private float headShotOffset_;
    /// <summary>
    /// 爆头线 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeadShotOffset {
      get { return headShotOffset_; }
      set {
        headShotOffset_ = value;
      }
    }

    /// <summary>Field number for the "DecayDamagePercent" field.</summary>
    public const int DecayDamagePercentFieldNumber = 8;
    private float decayDamagePercent_;
    /// <summary>
    /// 减免伤害百分比 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DecayDamagePercent {
      get { return decayDamagePercent_; }
      set {
        decayDamagePercent_ = value;
      }
    }

    /// <summary>Field number for the "RotationBeforeWaitTime" field.</summary>
    public const int RotationBeforeWaitTimeFieldNumber = 9;
    private float rotationBeforeWaitTime_;
    /// <summary>
    /// 旋转前的等待时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotationBeforeWaitTime {
      get { return rotationBeforeWaitTime_; }
      set {
        rotationBeforeWaitTime_ = value;
      }
    }

    /// <summary>Field number for the "AngleToAimAtTargetContinueTime" field.</summary>
    public const int AngleToAimAtTargetContinueTimeFieldNumber = 10;
    private float angleToAimAtTargetContinueTime_;
    /// <summary>
    /// 瞄准敌人时角度换算成时间的倍率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngleToAimAtTargetContinueTime {
      get { return angleToAimAtTargetContinueTime_; }
      set {
        angleToAimAtTargetContinueTime_ = value;
      }
    }

    /// <summary>Field number for the "DynamicRotationPower" field.</summary>
    public const int DynamicRotationPowerFieldNumber = 11;
    private float dynamicRotationPower_;
    /// <summary>
    /// 动态转向时的Power参数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DynamicRotationPower {
      get { return dynamicRotationPower_; }
      set {
        dynamicRotationPower_ = value;
      }
    }

    /// <summary>Field number for the "NormalDefenceRatio" field.</summary>
    public const int NormalDefenceRatioFieldNumber = 12;
    private float normalDefenceRatio_;
    /// <summary>
    /// 普通防守行为概率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NormalDefenceRatio {
      get { return normalDefenceRatio_; }
      set {
        normalDefenceRatio_ = value;
      }
    }

    /// <summary>Field number for the "SpecialDefenceRatio" field.</summary>
    public const int SpecialDefenceRatioFieldNumber = 13;
    private float specialDefenceRatio_;
    /// <summary>
    /// 特殊防守行为概率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpecialDefenceRatio {
      get { return specialDefenceRatio_; }
      set {
        specialDefenceRatio_ = value;
      }
    }

    /// <summary>Field number for the "DefenceInterval" field.</summary>
    public const int DefenceIntervalFieldNumber = 14;
    private float defenceInterval_;
    /// <summary>
    /// 防守行为间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefenceInterval {
      get { return defenceInterval_; }
      set {
        defenceInterval_ = value;
      }
    }

    /// <summary>Field number for the "NoiseRunningRange" field.</summary>
    public const int NoiseRunningRangeFieldNumber = 15;
    private uint noiseRunningRange_;
    /// <summary>
    /// 跑步声源范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoiseRunningRange {
      get { return noiseRunningRange_; }
      set {
        noiseRunningRange_ = value;
      }
    }

    /// <summary>Field number for the "NoiseRunningDuration" field.</summary>
    public const int NoiseRunningDurationFieldNumber = 16;
    private float noiseRunningDuration_;
    /// <summary>
    /// 跑步声源时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NoiseRunningDuration {
      get { return noiseRunningDuration_; }
      set {
        noiseRunningDuration_ = value;
      }
    }

    /// <summary>Field number for the "NoiseJumpRange" field.</summary>
    public const int NoiseJumpRangeFieldNumber = 17;
    private uint noiseJumpRange_;
    /// <summary>
    /// 跳跃声源范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoiseJumpRange {
      get { return noiseJumpRange_; }
      set {
        noiseJumpRange_ = value;
      }
    }

    /// <summary>Field number for the "NoiseJumpDuration" field.</summary>
    public const int NoiseJumpDurationFieldNumber = 18;
    private float noiseJumpDuration_;
    /// <summary>
    /// 跳跃声源时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NoiseJumpDuration {
      get { return noiseJumpDuration_; }
      set {
        noiseJumpDuration_ = value;
      }
    }

    /// <summary>Field number for the "NoiseFireRange" field.</summary>
    public const int NoiseFireRangeFieldNumber = 19;
    private uint noiseFireRange_;
    /// <summary>
    /// 开火声源范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoiseFireRange {
      get { return noiseFireRange_; }
      set {
        noiseFireRange_ = value;
      }
    }

    /// <summary>Field number for the "NoiseFireDuration" field.</summary>
    public const int NoiseFireDurationFieldNumber = 20;
    private float noiseFireDuration_;
    /// <summary>
    /// 开火声源时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NoiseFireDuration {
      get { return noiseFireDuration_; }
      set {
        noiseFireDuration_ = value;
      }
    }

    /// <summary>Field number for the "NoiseThrowRange" field.</summary>
    public const int NoiseThrowRangeFieldNumber = 21;
    private uint noiseThrowRange_;
    /// <summary>
    /// 投掷声源范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoiseThrowRange {
      get { return noiseThrowRange_; }
      set {
        noiseThrowRange_ = value;
      }
    }

    /// <summary>Field number for the "NoiseThrowDuration" field.</summary>
    public const int NoiseThrowDurationFieldNumber = 22;
    private float noiseThrowDuration_;
    /// <summary>
    /// 投掷声源时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NoiseThrowDuration {
      get { return noiseThrowDuration_; }
      set {
        noiseThrowDuration_ = value;
      }
    }

    /// <summary>Field number for the "NoiseSwordRange" field.</summary>
    public const int NoiseSwordRangeFieldNumber = 23;
    private uint noiseSwordRange_;
    /// <summary>
    /// 挥刀声源范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoiseSwordRange {
      get { return noiseSwordRange_; }
      set {
        noiseSwordRange_ = value;
      }
    }

    /// <summary>Field number for the "NoiseSwordDuration" field.</summary>
    public const int NoiseSwordDurationFieldNumber = 24;
    private float noiseSwordDuration_;
    /// <summary>
    /// 挥刀声源时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NoiseSwordDuration {
      get { return noiseSwordDuration_; }
      set {
        noiseSwordDuration_ = value;
      }
    }

    /// <summary>Field number for the "CheckHoldMeleeInterval" field.</summary>
    public const int CheckHoldMeleeIntervalFieldNumber = 25;
    private float checkHoldMeleeInterval_;
    /// <summary>
    /// 是否持刀检测间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CheckHoldMeleeInterval {
      get { return checkHoldMeleeInterval_; }
      set {
        checkHoldMeleeInterval_ = value;
      }
    }

    /// <summary>Field number for the "HoldMeleeSpan" field.</summary>
    public const int HoldMeleeSpanFieldNumber = 26;
    private float holdMeleeSpan_;
    /// <summary>
    /// 持刀时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HoldMeleeSpan {
      get { return holdMeleeSpan_; }
      set {
        holdMeleeSpan_ = value;
      }
    }

    /// <summary>Field number for the "HoldMeleeSpanDeviation" field.</summary>
    public const int HoldMeleeSpanDeviationFieldNumber = 27;
    private float holdMeleeSpanDeviation_;
    /// <summary>
    /// 持刀时长偏差 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HoldMeleeSpanDeviation {
      get { return holdMeleeSpanDeviation_; }
      set {
        holdMeleeSpanDeviation_ = value;
      }
    }

    /// <summary>Field number for the "HoldMeleeRatePower" field.</summary>
    public const int HoldMeleeRatePowerFieldNumber = 28;
    private float holdMeleeRatePower_;
    /// <summary>
    /// 持刀概率的Power参数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HoldMeleeRatePower {
      get { return holdMeleeRatePower_; }
      set {
        holdMeleeRatePower_ = value;
      }
    }

    /// <summary>Field number for the "StandShootWeight" field.</summary>
    public const int StandShootWeightFieldNumber = 29;
    private uint standShootWeight_;
    /// <summary>
    /// 站射权重 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StandShootWeight {
      get { return standShootWeight_; }
      set {
        standShootWeight_ = value;
      }
    }

    /// <summary>Field number for the "CrouchShootWeight" field.</summary>
    public const int CrouchShootWeightFieldNumber = 30;
    private uint crouchShootWeight_;
    /// <summary>
    /// 蹲射权重 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CrouchShootWeight {
      get { return crouchShootWeight_; }
      set {
        crouchShootWeight_ = value;
      }
    }

    /// <summary>Field number for the "DodgeShootWeight" field.</summary>
    public const int DodgeShootWeightFieldNumber = 31;
    private uint dodgeShootWeight_;
    /// <summary>
    /// 跑射权重 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DodgeShootWeight {
      get { return dodgeShootWeight_; }
      set {
        dodgeShootWeight_ = value;
      }
    }

    /// <summary>Field number for the "DodgePointNums" field.</summary>
    public const int DodgePointNumsFieldNumber = 32;
    private uint dodgePointNums_;
    /// <summary>
    /// 跑射点数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DodgePointNums {
      get { return dodgePointNums_; }
      set {
        dodgePointNums_ = value;
      }
    }

    /// <summary>Field number for the "DodgeMinDistance" field.</summary>
    public const int DodgeMinDistanceFieldNumber = 33;
    private float dodgeMinDistance_;
    /// <summary>
    /// 最小距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DodgeMinDistance {
      get { return dodgeMinDistance_; }
      set {
        dodgeMinDistance_ = value;
      }
    }

    /// <summary>Field number for the "DodgeMaxDistance" field.</summary>
    public const int DodgeMaxDistanceFieldNumber = 34;
    private float dodgeMaxDistance_;
    /// <summary>
    /// 最大距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DodgeMaxDistance {
      get { return dodgeMaxDistance_; }
      set {
        dodgeMaxDistance_ = value;
      }
    }

    /// <summary>Field number for the "OperatorContinueTime" field.</summary>
    public const int OperatorContinueTimeFieldNumber = 35;
    private float operatorContinueTime_;
    /// <summary>
    /// 攻击间隔操作持续市场(时间） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OperatorContinueTime {
      get { return operatorContinueTime_; }
      set {
        operatorContinueTime_ = value;
      }
    }

    /// <summary>Field number for the "SearchPointRate" field.</summary>
    public const int SearchPointRateFieldNumber = 36;
    private float searchPointRate_;
    /// <summary>
    /// 搜索点的概率（百分比） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SearchPointRate {
      get { return searchPointRate_; }
      set {
        searchPointRate_ = value;
      }
    }

    /// <summary>Field number for the "EachSearchPointCD" field.</summary>
    public const int EachSearchPointCDFieldNumber = 37;
    private float eachSearchPointCD_;
    /// <summary>
    /// 搜索点的CD（秒） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EachSearchPointCD {
      get { return eachSearchPointCD_; }
      set {
        eachSearchPointCD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BotPropertyConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BotPropertyConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MemorySpan, other.MemorySpan)) return false;
      if (VisionPerceptionTargetAngle != other.VisionPerceptionTargetAngle) return false;
      if (VisionPerceptionTargetDistance != other.VisionPerceptionTargetDistance) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SelectTargetTimeInterval, other.SelectTargetTimeInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CollectDamegeTimeInterval, other.CollectDamegeTimeInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeadShotOffset, other.HeadShotOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DecayDamagePercent, other.DecayDamagePercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotationBeforeWaitTime, other.RotationBeforeWaitTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngleToAimAtTargetContinueTime, other.AngleToAimAtTargetContinueTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DynamicRotationPower, other.DynamicRotationPower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NormalDefenceRatio, other.NormalDefenceRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpecialDefenceRatio, other.SpecialDefenceRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefenceInterval, other.DefenceInterval)) return false;
      if (NoiseRunningRange != other.NoiseRunningRange) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NoiseRunningDuration, other.NoiseRunningDuration)) return false;
      if (NoiseJumpRange != other.NoiseJumpRange) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NoiseJumpDuration, other.NoiseJumpDuration)) return false;
      if (NoiseFireRange != other.NoiseFireRange) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NoiseFireDuration, other.NoiseFireDuration)) return false;
      if (NoiseThrowRange != other.NoiseThrowRange) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NoiseThrowDuration, other.NoiseThrowDuration)) return false;
      if (NoiseSwordRange != other.NoiseSwordRange) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NoiseSwordDuration, other.NoiseSwordDuration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CheckHoldMeleeInterval, other.CheckHoldMeleeInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HoldMeleeSpan, other.HoldMeleeSpan)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HoldMeleeSpanDeviation, other.HoldMeleeSpanDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HoldMeleeRatePower, other.HoldMeleeRatePower)) return false;
      if (StandShootWeight != other.StandShootWeight) return false;
      if (CrouchShootWeight != other.CrouchShootWeight) return false;
      if (DodgeShootWeight != other.DodgeShootWeight) return false;
      if (DodgePointNums != other.DodgePointNums) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DodgeMinDistance, other.DodgeMinDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DodgeMaxDistance, other.DodgeMaxDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OperatorContinueTime, other.OperatorContinueTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SearchPointRate, other.SearchPointRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EachSearchPointCD, other.EachSearchPointCD)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (MemorySpan != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MemorySpan);
      if (VisionPerceptionTargetAngle != 0) hash ^= VisionPerceptionTargetAngle.GetHashCode();
      if (VisionPerceptionTargetDistance != 0) hash ^= VisionPerceptionTargetDistance.GetHashCode();
      if (SelectTargetTimeInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SelectTargetTimeInterval);
      if (CollectDamegeTimeInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CollectDamegeTimeInterval);
      if (HeadShotOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeadShotOffset);
      if (DecayDamagePercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DecayDamagePercent);
      if (RotationBeforeWaitTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotationBeforeWaitTime);
      if (AngleToAimAtTargetContinueTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngleToAimAtTargetContinueTime);
      if (DynamicRotationPower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DynamicRotationPower);
      if (NormalDefenceRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NormalDefenceRatio);
      if (SpecialDefenceRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpecialDefenceRatio);
      if (DefenceInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefenceInterval);
      if (NoiseRunningRange != 0) hash ^= NoiseRunningRange.GetHashCode();
      if (NoiseRunningDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NoiseRunningDuration);
      if (NoiseJumpRange != 0) hash ^= NoiseJumpRange.GetHashCode();
      if (NoiseJumpDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NoiseJumpDuration);
      if (NoiseFireRange != 0) hash ^= NoiseFireRange.GetHashCode();
      if (NoiseFireDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NoiseFireDuration);
      if (NoiseThrowRange != 0) hash ^= NoiseThrowRange.GetHashCode();
      if (NoiseThrowDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NoiseThrowDuration);
      if (NoiseSwordRange != 0) hash ^= NoiseSwordRange.GetHashCode();
      if (NoiseSwordDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NoiseSwordDuration);
      if (CheckHoldMeleeInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CheckHoldMeleeInterval);
      if (HoldMeleeSpan != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HoldMeleeSpan);
      if (HoldMeleeSpanDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HoldMeleeSpanDeviation);
      if (HoldMeleeRatePower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HoldMeleeRatePower);
      if (StandShootWeight != 0) hash ^= StandShootWeight.GetHashCode();
      if (CrouchShootWeight != 0) hash ^= CrouchShootWeight.GetHashCode();
      if (DodgeShootWeight != 0) hash ^= DodgeShootWeight.GetHashCode();
      if (DodgePointNums != 0) hash ^= DodgePointNums.GetHashCode();
      if (DodgeMinDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DodgeMinDistance);
      if (DodgeMaxDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DodgeMaxDistance);
      if (OperatorContinueTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OperatorContinueTime);
      if (SearchPointRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SearchPointRate);
      if (EachSearchPointCD != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EachSearchPointCD);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (MemorySpan != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MemorySpan);
      }
      if (VisionPerceptionTargetAngle != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(VisionPerceptionTargetAngle);
      }
      if (VisionPerceptionTargetDistance != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(VisionPerceptionTargetDistance);
      }
      if (SelectTargetTimeInterval != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SelectTargetTimeInterval);
      }
      if (CollectDamegeTimeInterval != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(CollectDamegeTimeInterval);
      }
      if (HeadShotOffset != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(HeadShotOffset);
      }
      if (DecayDamagePercent != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(DecayDamagePercent);
      }
      if (RotationBeforeWaitTime != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(RotationBeforeWaitTime);
      }
      if (AngleToAimAtTargetContinueTime != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(AngleToAimAtTargetContinueTime);
      }
      if (DynamicRotationPower != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(DynamicRotationPower);
      }
      if (NormalDefenceRatio != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(NormalDefenceRatio);
      }
      if (SpecialDefenceRatio != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(SpecialDefenceRatio);
      }
      if (DefenceInterval != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(DefenceInterval);
      }
      if (NoiseRunningRange != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(NoiseRunningRange);
      }
      if (NoiseRunningDuration != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(NoiseRunningDuration);
      }
      if (NoiseJumpRange != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(NoiseJumpRange);
      }
      if (NoiseJumpDuration != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(NoiseJumpDuration);
      }
      if (NoiseFireRange != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(NoiseFireRange);
      }
      if (NoiseFireDuration != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(NoiseFireDuration);
      }
      if (NoiseThrowRange != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(NoiseThrowRange);
      }
      if (NoiseThrowDuration != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(NoiseThrowDuration);
      }
      if (NoiseSwordRange != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(NoiseSwordRange);
      }
      if (NoiseSwordDuration != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(NoiseSwordDuration);
      }
      if (CheckHoldMeleeInterval != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(CheckHoldMeleeInterval);
      }
      if (HoldMeleeSpan != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(HoldMeleeSpan);
      }
      if (HoldMeleeSpanDeviation != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(HoldMeleeSpanDeviation);
      }
      if (HoldMeleeRatePower != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(HoldMeleeRatePower);
      }
      if (StandShootWeight != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(StandShootWeight);
      }
      if (CrouchShootWeight != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(CrouchShootWeight);
      }
      if (DodgeShootWeight != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(DodgeShootWeight);
      }
      if (DodgePointNums != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(DodgePointNums);
      }
      if (DodgeMinDistance != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(DodgeMinDistance);
      }
      if (DodgeMaxDistance != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(DodgeMaxDistance);
      }
      if (OperatorContinueTime != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(OperatorContinueTime);
      }
      if (SearchPointRate != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(SearchPointRate);
      }
      if (EachSearchPointCD != 0F) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(EachSearchPointCD);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (MemorySpan != 0F) {
        size += 1 + 4;
      }
      if (VisionPerceptionTargetAngle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VisionPerceptionTargetAngle);
      }
      if (VisionPerceptionTargetDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VisionPerceptionTargetDistance);
      }
      if (SelectTargetTimeInterval != 0F) {
        size += 1 + 4;
      }
      if (CollectDamegeTimeInterval != 0F) {
        size += 1 + 4;
      }
      if (HeadShotOffset != 0F) {
        size += 1 + 4;
      }
      if (DecayDamagePercent != 0F) {
        size += 1 + 4;
      }
      if (RotationBeforeWaitTime != 0F) {
        size += 1 + 4;
      }
      if (AngleToAimAtTargetContinueTime != 0F) {
        size += 1 + 4;
      }
      if (DynamicRotationPower != 0F) {
        size += 1 + 4;
      }
      if (NormalDefenceRatio != 0F) {
        size += 1 + 4;
      }
      if (SpecialDefenceRatio != 0F) {
        size += 1 + 4;
      }
      if (DefenceInterval != 0F) {
        size += 1 + 4;
      }
      if (NoiseRunningRange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NoiseRunningRange);
      }
      if (NoiseRunningDuration != 0F) {
        size += 2 + 4;
      }
      if (NoiseJumpRange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NoiseJumpRange);
      }
      if (NoiseJumpDuration != 0F) {
        size += 2 + 4;
      }
      if (NoiseFireRange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NoiseFireRange);
      }
      if (NoiseFireDuration != 0F) {
        size += 2 + 4;
      }
      if (NoiseThrowRange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NoiseThrowRange);
      }
      if (NoiseThrowDuration != 0F) {
        size += 2 + 4;
      }
      if (NoiseSwordRange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NoiseSwordRange);
      }
      if (NoiseSwordDuration != 0F) {
        size += 2 + 4;
      }
      if (CheckHoldMeleeInterval != 0F) {
        size += 2 + 4;
      }
      if (HoldMeleeSpan != 0F) {
        size += 2 + 4;
      }
      if (HoldMeleeSpanDeviation != 0F) {
        size += 2 + 4;
      }
      if (HoldMeleeRatePower != 0F) {
        size += 2 + 4;
      }
      if (StandShootWeight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StandShootWeight);
      }
      if (CrouchShootWeight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CrouchShootWeight);
      }
      if (DodgeShootWeight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DodgeShootWeight);
      }
      if (DodgePointNums != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DodgePointNums);
      }
      if (DodgeMinDistance != 0F) {
        size += 2 + 4;
      }
      if (DodgeMaxDistance != 0F) {
        size += 2 + 4;
      }
      if (OperatorContinueTime != 0F) {
        size += 2 + 4;
      }
      if (SearchPointRate != 0F) {
        size += 2 + 4;
      }
      if (EachSearchPointCD != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BotPropertyConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.MemorySpan != 0F) {
        MemorySpan = other.MemorySpan;
      }
      if (other.VisionPerceptionTargetAngle != 0) {
        VisionPerceptionTargetAngle = other.VisionPerceptionTargetAngle;
      }
      if (other.VisionPerceptionTargetDistance != 0) {
        VisionPerceptionTargetDistance = other.VisionPerceptionTargetDistance;
      }
      if (other.SelectTargetTimeInterval != 0F) {
        SelectTargetTimeInterval = other.SelectTargetTimeInterval;
      }
      if (other.CollectDamegeTimeInterval != 0F) {
        CollectDamegeTimeInterval = other.CollectDamegeTimeInterval;
      }
      if (other.HeadShotOffset != 0F) {
        HeadShotOffset = other.HeadShotOffset;
      }
      if (other.DecayDamagePercent != 0F) {
        DecayDamagePercent = other.DecayDamagePercent;
      }
      if (other.RotationBeforeWaitTime != 0F) {
        RotationBeforeWaitTime = other.RotationBeforeWaitTime;
      }
      if (other.AngleToAimAtTargetContinueTime != 0F) {
        AngleToAimAtTargetContinueTime = other.AngleToAimAtTargetContinueTime;
      }
      if (other.DynamicRotationPower != 0F) {
        DynamicRotationPower = other.DynamicRotationPower;
      }
      if (other.NormalDefenceRatio != 0F) {
        NormalDefenceRatio = other.NormalDefenceRatio;
      }
      if (other.SpecialDefenceRatio != 0F) {
        SpecialDefenceRatio = other.SpecialDefenceRatio;
      }
      if (other.DefenceInterval != 0F) {
        DefenceInterval = other.DefenceInterval;
      }
      if (other.NoiseRunningRange != 0) {
        NoiseRunningRange = other.NoiseRunningRange;
      }
      if (other.NoiseRunningDuration != 0F) {
        NoiseRunningDuration = other.NoiseRunningDuration;
      }
      if (other.NoiseJumpRange != 0) {
        NoiseJumpRange = other.NoiseJumpRange;
      }
      if (other.NoiseJumpDuration != 0F) {
        NoiseJumpDuration = other.NoiseJumpDuration;
      }
      if (other.NoiseFireRange != 0) {
        NoiseFireRange = other.NoiseFireRange;
      }
      if (other.NoiseFireDuration != 0F) {
        NoiseFireDuration = other.NoiseFireDuration;
      }
      if (other.NoiseThrowRange != 0) {
        NoiseThrowRange = other.NoiseThrowRange;
      }
      if (other.NoiseThrowDuration != 0F) {
        NoiseThrowDuration = other.NoiseThrowDuration;
      }
      if (other.NoiseSwordRange != 0) {
        NoiseSwordRange = other.NoiseSwordRange;
      }
      if (other.NoiseSwordDuration != 0F) {
        NoiseSwordDuration = other.NoiseSwordDuration;
      }
      if (other.CheckHoldMeleeInterval != 0F) {
        CheckHoldMeleeInterval = other.CheckHoldMeleeInterval;
      }
      if (other.HoldMeleeSpan != 0F) {
        HoldMeleeSpan = other.HoldMeleeSpan;
      }
      if (other.HoldMeleeSpanDeviation != 0F) {
        HoldMeleeSpanDeviation = other.HoldMeleeSpanDeviation;
      }
      if (other.HoldMeleeRatePower != 0F) {
        HoldMeleeRatePower = other.HoldMeleeRatePower;
      }
      if (other.StandShootWeight != 0) {
        StandShootWeight = other.StandShootWeight;
      }
      if (other.CrouchShootWeight != 0) {
        CrouchShootWeight = other.CrouchShootWeight;
      }
      if (other.DodgeShootWeight != 0) {
        DodgeShootWeight = other.DodgeShootWeight;
      }
      if (other.DodgePointNums != 0) {
        DodgePointNums = other.DodgePointNums;
      }
      if (other.DodgeMinDistance != 0F) {
        DodgeMinDistance = other.DodgeMinDistance;
      }
      if (other.DodgeMaxDistance != 0F) {
        DodgeMaxDistance = other.DodgeMaxDistance;
      }
      if (other.OperatorContinueTime != 0F) {
        OperatorContinueTime = other.OperatorContinueTime;
      }
      if (other.SearchPointRate != 0F) {
        SearchPointRate = other.SearchPointRate;
      }
      if (other.EachSearchPointCD != 0F) {
        EachSearchPointCD = other.EachSearchPointCD;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 21: {
            MemorySpan = input.ReadFloat();
            break;
          }
          case 24: {
            VisionPerceptionTargetAngle = input.ReadUInt32();
            break;
          }
          case 32: {
            VisionPerceptionTargetDistance = input.ReadUInt32();
            break;
          }
          case 45: {
            SelectTargetTimeInterval = input.ReadFloat();
            break;
          }
          case 53: {
            CollectDamegeTimeInterval = input.ReadFloat();
            break;
          }
          case 61: {
            HeadShotOffset = input.ReadFloat();
            break;
          }
          case 69: {
            DecayDamagePercent = input.ReadFloat();
            break;
          }
          case 77: {
            RotationBeforeWaitTime = input.ReadFloat();
            break;
          }
          case 85: {
            AngleToAimAtTargetContinueTime = input.ReadFloat();
            break;
          }
          case 93: {
            DynamicRotationPower = input.ReadFloat();
            break;
          }
          case 101: {
            NormalDefenceRatio = input.ReadFloat();
            break;
          }
          case 109: {
            SpecialDefenceRatio = input.ReadFloat();
            break;
          }
          case 117: {
            DefenceInterval = input.ReadFloat();
            break;
          }
          case 120: {
            NoiseRunningRange = input.ReadUInt32();
            break;
          }
          case 133: {
            NoiseRunningDuration = input.ReadFloat();
            break;
          }
          case 136: {
            NoiseJumpRange = input.ReadUInt32();
            break;
          }
          case 149: {
            NoiseJumpDuration = input.ReadFloat();
            break;
          }
          case 152: {
            NoiseFireRange = input.ReadUInt32();
            break;
          }
          case 165: {
            NoiseFireDuration = input.ReadFloat();
            break;
          }
          case 168: {
            NoiseThrowRange = input.ReadUInt32();
            break;
          }
          case 181: {
            NoiseThrowDuration = input.ReadFloat();
            break;
          }
          case 184: {
            NoiseSwordRange = input.ReadUInt32();
            break;
          }
          case 197: {
            NoiseSwordDuration = input.ReadFloat();
            break;
          }
          case 205: {
            CheckHoldMeleeInterval = input.ReadFloat();
            break;
          }
          case 213: {
            HoldMeleeSpan = input.ReadFloat();
            break;
          }
          case 221: {
            HoldMeleeSpanDeviation = input.ReadFloat();
            break;
          }
          case 229: {
            HoldMeleeRatePower = input.ReadFloat();
            break;
          }
          case 232: {
            StandShootWeight = input.ReadUInt32();
            break;
          }
          case 240: {
            CrouchShootWeight = input.ReadUInt32();
            break;
          }
          case 248: {
            DodgeShootWeight = input.ReadUInt32();
            break;
          }
          case 256: {
            DodgePointNums = input.ReadUInt32();
            break;
          }
          case 269: {
            DodgeMinDistance = input.ReadFloat();
            break;
          }
          case 277: {
            DodgeMaxDistance = input.ReadFloat();
            break;
          }
          case 285: {
            OperatorContinueTime = input.ReadFloat();
            break;
          }
          case 293: {
            SearchPointRate = input.ReadFloat();
            break;
          }
          case 301: {
            EachSearchPointCD = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BotPropertyConfig_Array : pb::IMessage<BotPropertyConfig_Array> {
    private static readonly pb::MessageParser<BotPropertyConfig_Array> _parser = new pb::MessageParser<BotPropertyConfig_Array>(() => new BotPropertyConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BotPropertyConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBotpropertyconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotPropertyConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotPropertyConfig_Array(BotPropertyConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BotPropertyConfig_Array Clone() {
      return new BotPropertyConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.BotPropertyConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.BotPropertyConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.BotPropertyConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.BotPropertyConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.BotPropertyConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BotPropertyConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BotPropertyConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BotPropertyConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
