// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_brpoisoncircleconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_brpoisoncircleconfig.proto</summary>
  public static partial class XlsBeansBrpoisoncircleconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_brpoisoncircleconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansBrpoisoncircleconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiR4bHNfYmVhbnNfYnJwb2lzb25jaXJjbGVjb25maWcucHJvdG8SCkQxMS5Q",
            "YmVhbnMinQIKFEJSUG9pc29uQ2lyY2xlQ29uZmlnEg4KBm1vZGVJZBgBIAEo",
            "DRIPCgdzY2VuZUlkGAIgASgNEg8KB3JvdW5kSWQYAyABKAUSDgoGcmFkaXVz",
            "GAQgASgCEhMKC2NyZWF0ZURlbGF5GAUgASgNEhAKCHN0YXlUaW1lGAYgASgN",
            "EhAKCG1vdmVUaW1lGAcgASgNEhsKE3B1bmlzaG1lbnRQYXJhbWV0ZXIYCCAB",
            "KAISGwoTcHVuaXNobWVudEZyZXF1ZW5jeRgJIAEoAhIYChBtYXhJbW1vdmFi",
            "bGVBcmVhGAogASgCEgwKBG1pblgYCyABKAUSDAoEbWF4WBgMIAEoBRIMCgRt",
            "aW5aGA0gASgFEgwKBG1heFoYDiABKAUiTQoaQlJQb2lzb25DaXJjbGVDb25m",
            "aWdfQXJyYXkSLwoFaXRlbXMYASADKAsyIC5EMTEuUGJlYW5zLkJSUG9pc29u",
            "Q2lyY2xlQ29uZmlnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BRPoisonCircleConfig), global::D11.Pbeans.BRPoisonCircleConfig.Parser, new[]{ "ModeId", "SceneId", "RoundId", "Radius", "CreateDelay", "StayTime", "MoveTime", "PunishmentParameter", "PunishmentFrequency", "MaxImmovableArea", "MinX", "MaxX", "MinZ", "MaxZ" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.BRPoisonCircleConfig_Array), global::D11.Pbeans.BRPoisonCircleConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BRPoisonCircleConfig : pb::IMessage<BRPoisonCircleConfig> {
    private static readonly pb::MessageParser<BRPoisonCircleConfig> _parser = new pb::MessageParser<BRPoisonCircleConfig>(() => new BRPoisonCircleConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BRPoisonCircleConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBrpoisoncircleconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRPoisonCircleConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRPoisonCircleConfig(BRPoisonCircleConfig other) : this() {
      modeId_ = other.modeId_;
      sceneId_ = other.sceneId_;
      roundId_ = other.roundId_;
      radius_ = other.radius_;
      createDelay_ = other.createDelay_;
      stayTime_ = other.stayTime_;
      moveTime_ = other.moveTime_;
      punishmentParameter_ = other.punishmentParameter_;
      punishmentFrequency_ = other.punishmentFrequency_;
      maxImmovableArea_ = other.maxImmovableArea_;
      minX_ = other.minX_;
      maxX_ = other.maxX_;
      minZ_ = other.minZ_;
      maxZ_ = other.maxZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRPoisonCircleConfig Clone() {
      return new BRPoisonCircleConfig(this);
    }

    /// <summary>Field number for the "modeId" field.</summary>
    public const int ModeIdFieldNumber = 1;
    private uint modeId_;
    /// <summary>
    /// 模式id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ModeId {
      get { return modeId_; }
      set {
        modeId_ = value;
      }
    }

    /// <summary>Field number for the "sceneId" field.</summary>
    public const int SceneIdFieldNumber = 2;
    private uint sceneId_;
    /// <summary>
    /// 场景id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "roundId" field.</summary>
    public const int RoundIdFieldNumber = 3;
    private int roundId_;
    /// <summary>
    /// 回合id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 4;
    private float radius_;
    /// <summary>
    /// 半径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "createDelay" field.</summary>
    public const int CreateDelayFieldNumber = 5;
    private uint createDelay_;
    /// <summary>
    /// 延时创建时间S 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateDelay {
      get { return createDelay_; }
      set {
        createDelay_ = value;
      }
    }

    /// <summary>Field number for the "stayTime" field.</summary>
    public const int StayTimeFieldNumber = 6;
    private uint stayTime_;
    /// <summary>
    /// 毒圈停留时间S 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StayTime {
      get { return stayTime_; }
      set {
        stayTime_ = value;
      }
    }

    /// <summary>Field number for the "moveTime" field.</summary>
    public const int MoveTimeFieldNumber = 7;
    private uint moveTime_;
    /// <summary>
    /// 缩圈时间S 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MoveTime {
      get { return moveTime_; }
      set {
        moveTime_ = value;
      }
    }

    /// <summary>Field number for the "punishmentParameter" field.</summary>
    public const int PunishmentParameterFieldNumber = 8;
    private float punishmentParameter_;
    /// <summary>
    /// 惩罚参数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunishmentParameter {
      get { return punishmentParameter_; }
      set {
        punishmentParameter_ = value;
      }
    }

    /// <summary>Field number for the "punishmentFrequency" field.</summary>
    public const int PunishmentFrequencyFieldNumber = 9;
    private float punishmentFrequency_;
    /// <summary>
    /// 惩罚参数频率S 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunishmentFrequency {
      get { return punishmentFrequency_; }
      set {
        punishmentFrequency_ = value;
      }
    }

    /// <summary>Field number for the "maxImmovableArea" field.</summary>
    public const int MaxImmovableAreaFieldNumber = 10;
    private float maxImmovableArea_;
    /// <summary>
    /// 不可移动区域最大占比 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxImmovableArea {
      get { return maxImmovableArea_; }
      set {
        maxImmovableArea_ = value;
      }
    }

    /// <summary>Field number for the "minX" field.</summary>
    public const int MinXFieldNumber = 11;
    private int minX_;
    /// <summary>
    /// 中心x范围下 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinX {
      get { return minX_; }
      set {
        minX_ = value;
      }
    }

    /// <summary>Field number for the "maxX" field.</summary>
    public const int MaxXFieldNumber = 12;
    private int maxX_;
    /// <summary>
    /// 中心x范围上 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxX {
      get { return maxX_; }
      set {
        maxX_ = value;
      }
    }

    /// <summary>Field number for the "minZ" field.</summary>
    public const int MinZFieldNumber = 13;
    private int minZ_;
    /// <summary>
    /// 中心y范围下 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinZ {
      get { return minZ_; }
      set {
        minZ_ = value;
      }
    }

    /// <summary>Field number for the "maxZ" field.</summary>
    public const int MaxZFieldNumber = 14;
    private int maxZ_;
    /// <summary>
    /// 中心y范围上 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxZ {
      get { return maxZ_; }
      set {
        maxZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BRPoisonCircleConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BRPoisonCircleConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModeId != other.ModeId) return false;
      if (SceneId != other.SceneId) return false;
      if (RoundId != other.RoundId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
      if (CreateDelay != other.CreateDelay) return false;
      if (StayTime != other.StayTime) return false;
      if (MoveTime != other.MoveTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunishmentParameter, other.PunishmentParameter)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunishmentFrequency, other.PunishmentFrequency)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxImmovableArea, other.MaxImmovableArea)) return false;
      if (MinX != other.MinX) return false;
      if (MaxX != other.MaxX) return false;
      if (MinZ != other.MinZ) return false;
      if (MaxZ != other.MaxZ) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModeId != 0) hash ^= ModeId.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (RoundId != 0) hash ^= RoundId.GetHashCode();
      if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
      if (CreateDelay != 0) hash ^= CreateDelay.GetHashCode();
      if (StayTime != 0) hash ^= StayTime.GetHashCode();
      if (MoveTime != 0) hash ^= MoveTime.GetHashCode();
      if (PunishmentParameter != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunishmentParameter);
      if (PunishmentFrequency != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunishmentFrequency);
      if (MaxImmovableArea != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxImmovableArea);
      if (MinX != 0) hash ^= MinX.GetHashCode();
      if (MaxX != 0) hash ^= MaxX.GetHashCode();
      if (MinZ != 0) hash ^= MinZ.GetHashCode();
      if (MaxZ != 0) hash ^= MaxZ.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ModeId);
      }
      if (SceneId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SceneId);
      }
      if (RoundId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoundId);
      }
      if (Radius != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Radius);
      }
      if (CreateDelay != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CreateDelay);
      }
      if (StayTime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(StayTime);
      }
      if (MoveTime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MoveTime);
      }
      if (PunishmentParameter != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(PunishmentParameter);
      }
      if (PunishmentFrequency != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(PunishmentFrequency);
      }
      if (MaxImmovableArea != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MaxImmovableArea);
      }
      if (MinX != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MinX);
      }
      if (MaxX != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MaxX);
      }
      if (MinZ != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MinZ);
      }
      if (MaxZ != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(MaxZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ModeId);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SceneId);
      }
      if (RoundId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundId);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (CreateDelay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateDelay);
      }
      if (StayTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StayTime);
      }
      if (MoveTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoveTime);
      }
      if (PunishmentParameter != 0F) {
        size += 1 + 4;
      }
      if (PunishmentFrequency != 0F) {
        size += 1 + 4;
      }
      if (MaxImmovableArea != 0F) {
        size += 1 + 4;
      }
      if (MinX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinX);
      }
      if (MaxX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxX);
      }
      if (MinZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinZ);
      }
      if (MaxZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxZ);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BRPoisonCircleConfig other) {
      if (other == null) {
        return;
      }
      if (other.ModeId != 0) {
        ModeId = other.ModeId;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.RoundId != 0) {
        RoundId = other.RoundId;
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      if (other.CreateDelay != 0) {
        CreateDelay = other.CreateDelay;
      }
      if (other.StayTime != 0) {
        StayTime = other.StayTime;
      }
      if (other.MoveTime != 0) {
        MoveTime = other.MoveTime;
      }
      if (other.PunishmentParameter != 0F) {
        PunishmentParameter = other.PunishmentParameter;
      }
      if (other.PunishmentFrequency != 0F) {
        PunishmentFrequency = other.PunishmentFrequency;
      }
      if (other.MaxImmovableArea != 0F) {
        MaxImmovableArea = other.MaxImmovableArea;
      }
      if (other.MinX != 0) {
        MinX = other.MinX;
      }
      if (other.MaxX != 0) {
        MaxX = other.MaxX;
      }
      if (other.MinZ != 0) {
        MinZ = other.MinZ;
      }
      if (other.MaxZ != 0) {
        MaxZ = other.MaxZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ModeId = input.ReadUInt32();
            break;
          }
          case 16: {
            SceneId = input.ReadUInt32();
            break;
          }
          case 24: {
            RoundId = input.ReadInt32();
            break;
          }
          case 37: {
            Radius = input.ReadFloat();
            break;
          }
          case 40: {
            CreateDelay = input.ReadUInt32();
            break;
          }
          case 48: {
            StayTime = input.ReadUInt32();
            break;
          }
          case 56: {
            MoveTime = input.ReadUInt32();
            break;
          }
          case 69: {
            PunishmentParameter = input.ReadFloat();
            break;
          }
          case 77: {
            PunishmentFrequency = input.ReadFloat();
            break;
          }
          case 85: {
            MaxImmovableArea = input.ReadFloat();
            break;
          }
          case 88: {
            MinX = input.ReadInt32();
            break;
          }
          case 96: {
            MaxX = input.ReadInt32();
            break;
          }
          case 104: {
            MinZ = input.ReadInt32();
            break;
          }
          case 112: {
            MaxZ = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BRPoisonCircleConfig_Array : pb::IMessage<BRPoisonCircleConfig_Array> {
    private static readonly pb::MessageParser<BRPoisonCircleConfig_Array> _parser = new pb::MessageParser<BRPoisonCircleConfig_Array>(() => new BRPoisonCircleConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BRPoisonCircleConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansBrpoisoncircleconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRPoisonCircleConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRPoisonCircleConfig_Array(BRPoisonCircleConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRPoisonCircleConfig_Array Clone() {
      return new BRPoisonCircleConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.BRPoisonCircleConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.BRPoisonCircleConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.BRPoisonCircleConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.BRPoisonCircleConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.BRPoisonCircleConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BRPoisonCircleConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BRPoisonCircleConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BRPoisonCircleConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
