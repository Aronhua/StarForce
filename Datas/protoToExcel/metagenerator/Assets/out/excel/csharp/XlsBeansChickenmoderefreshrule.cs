// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_chickenmoderefreshrule.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_chickenmoderefreshrule.proto</summary>
  public static partial class XlsBeansChickenmoderefreshruleReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_chickenmoderefreshrule.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansChickenmoderefreshruleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZ4bHNfYmVhbnNfY2hpY2tlbm1vZGVyZWZyZXNocnVsZS5wcm90bxIKRDEx",
            "LlBiZWFucyKUAQoWQ2hpY2tlbk1vZGVSZWZyZXNoUnVsZRIKCgJpZBgBIAEo",
            "DRIMCgROYW1lGAIgASgJEhQKDE1heFdhdmVDb3VudBgDIAEoDRIKCgJDRBgE",
            "IAEoDRIVCg1EZWZhdWx0V2F2ZUlEGAUgASgNEhMKC1dhdmVOdW1MaXN0GAYg",
            "AygNEhIKCldhdmVJRExpc3QYByADKA0iUQocQ2hpY2tlbk1vZGVSZWZyZXNo",
            "UnVsZV9BcnJheRIxCgVpdGVtcxgBIAMoCzIiLkQxMS5QYmVhbnMuQ2hpY2tl",
            "bk1vZGVSZWZyZXNoUnVsZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.ChickenModeRefreshRule), global::D11.Pbeans.ChickenModeRefreshRule.Parser, new[]{ "Id", "Name", "MaxWaveCount", "CD", "DefaultWaveID", "WaveNumList", "WaveIDList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.ChickenModeRefreshRule_Array), global::D11.Pbeans.ChickenModeRefreshRule_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ChickenModeRefreshRule : pb::IMessage<ChickenModeRefreshRule> {
    private static readonly pb::MessageParser<ChickenModeRefreshRule> _parser = new pb::MessageParser<ChickenModeRefreshRule>(() => new ChickenModeRefreshRule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChickenModeRefreshRule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansChickenmoderefreshruleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChickenModeRefreshRule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChickenModeRefreshRule(ChickenModeRefreshRule other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      maxWaveCount_ = other.maxWaveCount_;
      cD_ = other.cD_;
      defaultWaveID_ = other.defaultWaveID_;
      waveNumList_ = other.waveNumList_.Clone();
      waveIDList_ = other.waveIDList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChickenModeRefreshRule Clone() {
      return new ChickenModeRefreshRule(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaxWaveCount" field.</summary>
    public const int MaxWaveCountFieldNumber = 3;
    private uint maxWaveCount_;
    /// <summary>
    /// 最多刷多少波 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxWaveCount {
      get { return maxWaveCount_; }
      set {
        maxWaveCount_ = value;
      }
    }

    /// <summary>Field number for the "CD" field.</summary>
    public const int CDFieldNumber = 4;
    private uint cD_;
    /// <summary>
    /// 每隔多少秒刷一个波次 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CD {
      get { return cD_; }
      set {
        cD_ = value;
      }
    }

    /// <summary>Field number for the "DefaultWaveID" field.</summary>
    public const int DefaultWaveIDFieldNumber = 5;
    private uint defaultWaveID_;
    /// <summary>
    /// 默认波次id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefaultWaveID {
      get { return defaultWaveID_; }
      set {
        defaultWaveID_ = value;
      }
    }

    /// <summary>Field number for the "WaveNumList" field.</summary>
    public const int WaveNumListFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_waveNumList_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> waveNumList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 定制波次-1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> WaveNumList {
      get { return waveNumList_; }
    }

    /// <summary>Field number for the "WaveIDList" field.</summary>
    public const int WaveIDListFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_waveIDList_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> waveIDList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 波次数据id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> WaveIDList {
      get { return waveIDList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChickenModeRefreshRule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChickenModeRefreshRule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (MaxWaveCount != other.MaxWaveCount) return false;
      if (CD != other.CD) return false;
      if (DefaultWaveID != other.DefaultWaveID) return false;
      if(!waveNumList_.Equals(other.waveNumList_)) return false;
      if(!waveIDList_.Equals(other.waveIDList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MaxWaveCount != 0) hash ^= MaxWaveCount.GetHashCode();
      if (CD != 0) hash ^= CD.GetHashCode();
      if (DefaultWaveID != 0) hash ^= DefaultWaveID.GetHashCode();
      hash ^= waveNumList_.GetHashCode();
      hash ^= waveIDList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MaxWaveCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxWaveCount);
      }
      if (CD != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CD);
      }
      if (DefaultWaveID != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DefaultWaveID);
      }
      waveNumList_.WriteTo(output, _repeated_waveNumList_codec);
      waveIDList_.WriteTo(output, _repeated_waveIDList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MaxWaveCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxWaveCount);
      }
      if (CD != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CD);
      }
      if (DefaultWaveID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefaultWaveID);
      }
      size += waveNumList_.CalculateSize(_repeated_waveNumList_codec);
      size += waveIDList_.CalculateSize(_repeated_waveIDList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChickenModeRefreshRule other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MaxWaveCount != 0) {
        MaxWaveCount = other.MaxWaveCount;
      }
      if (other.CD != 0) {
        CD = other.CD;
      }
      if (other.DefaultWaveID != 0) {
        DefaultWaveID = other.DefaultWaveID;
      }
      waveNumList_.Add(other.waveNumList_);
      waveIDList_.Add(other.waveIDList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            MaxWaveCount = input.ReadUInt32();
            break;
          }
          case 32: {
            CD = input.ReadUInt32();
            break;
          }
          case 40: {
            DefaultWaveID = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            waveNumList_.AddEntriesFrom(input, _repeated_waveNumList_codec);
            break;
          }
          case 58:
          case 56: {
            waveIDList_.AddEntriesFrom(input, _repeated_waveIDList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChickenModeRefreshRule_Array : pb::IMessage<ChickenModeRefreshRule_Array> {
    private static readonly pb::MessageParser<ChickenModeRefreshRule_Array> _parser = new pb::MessageParser<ChickenModeRefreshRule_Array>(() => new ChickenModeRefreshRule_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChickenModeRefreshRule_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansChickenmoderefreshruleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChickenModeRefreshRule_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChickenModeRefreshRule_Array(ChickenModeRefreshRule_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChickenModeRefreshRule_Array Clone() {
      return new ChickenModeRefreshRule_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.ChickenModeRefreshRule> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.ChickenModeRefreshRule.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.ChickenModeRefreshRule> items_ = new pbc::RepeatedField<global::D11.Pbeans.ChickenModeRefreshRule>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.ChickenModeRefreshRule> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChickenModeRefreshRule_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChickenModeRefreshRule_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChickenModeRefreshRule_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
