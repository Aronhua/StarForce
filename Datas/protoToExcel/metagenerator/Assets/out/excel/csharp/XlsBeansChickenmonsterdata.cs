// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_chickenmonsterdata.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_chickenmonsterdata.proto</summary>
  public static partial class XlsBeansChickenmonsterdataReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_chickenmonsterdata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansChickenmonsterdataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJ4bHNfYmVhbnNfY2hpY2tlbm1vbnN0ZXJkYXRhLnByb3RvEgpEMTEuUGJl",
            "YW5zIpECChJDaGlja2VuTW9uc3RlckRhdGESCgoCaWQYASABKA0SDAoETmFt",
            "ZRgCIAEoCRIVCg1Nb25zdGVyRGF0YUlEGAMgASgNEg0KBUxldmVsGAQgASgN",
            "EhQKDENvbGxlY3RTY29yZRgFIAEoDRIYChBBZGRDaGlja2VuSURMaXN0GAYg",
            "AygNEhkKEUFuaW1hdG9yU3RhdGVOYW1lGAcgASgJEhYKDkRldGFpbEljb25N",
            "aW5pGAggASgJEhEKCURldGFpbFN0chgJIAEoCRIWCg5Tb3VuZERldGVjdERp",
            "cxgKIAEoDRIXCg9Tb3VuZERldGVjdFJhdGUYCyABKA0SFAoMUnVuU3BlZWRS",
            "YXRlGAwgASgCIkkKGENoaWNrZW5Nb25zdGVyRGF0YV9BcnJheRItCgVpdGVt",
            "cxgBIAMoCzIeLkQxMS5QYmVhbnMuQ2hpY2tlbk1vbnN0ZXJEYXRhYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.ChickenMonsterData), global::D11.Pbeans.ChickenMonsterData.Parser, new[]{ "Id", "Name", "MonsterDataID", "Level", "CollectScore", "AddChickenIDList", "AnimatorStateName", "DetailIconMini", "DetailStr", "SoundDetectDis", "SoundDetectRate", "RunSpeedRate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.ChickenMonsterData_Array), global::D11.Pbeans.ChickenMonsterData_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ChickenMonsterData : pb::IMessage<ChickenMonsterData> {
    private static readonly pb::MessageParser<ChickenMonsterData> _parser = new pb::MessageParser<ChickenMonsterData>(() => new ChickenMonsterData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChickenMonsterData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansChickenmonsterdataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChickenMonsterData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChickenMonsterData(ChickenMonsterData other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      monsterDataID_ = other.monsterDataID_;
      level_ = other.level_;
      collectScore_ = other.collectScore_;
      addChickenIDList_ = other.addChickenIDList_.Clone();
      animatorStateName_ = other.animatorStateName_;
      detailIconMini_ = other.detailIconMini_;
      detailStr_ = other.detailStr_;
      soundDetectDis_ = other.soundDetectDis_;
      soundDetectRate_ = other.soundDetectRate_;
      runSpeedRate_ = other.runSpeedRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChickenMonsterData Clone() {
      return new ChickenMonsterData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MonsterDataID" field.</summary>
    public const int MonsterDataIDFieldNumber = 3;
    private uint monsterDataID_;
    /// <summary>
    /// 通用Monster数据id，MonsterData表 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonsterDataID {
      get { return monsterDataID_; }
      set {
        monsterDataID_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 4;
    private uint level_;
    /// <summary>
    /// 等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "CollectScore" field.</summary>
    public const int CollectScoreFieldNumber = 5;
    private uint collectScore_;
    /// <summary>
    /// 逃跑扣分 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CollectScore {
      get { return collectScore_; }
      set {
        collectScore_ = value;
      }
    }

    /// <summary>Field number for the "AddChickenIDList" field.</summary>
    public const int AddChickenIDListFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_addChickenIDList_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> addChickenIDList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 击杀后给对方添加的鸡ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AddChickenIDList {
      get { return addChickenIDList_; }
    }

    /// <summary>Field number for the "AnimatorStateName" field.</summary>
    public const int AnimatorStateNameFieldNumber = 7;
    private string animatorStateName_ = "";
    /// <summary>
    /// 提示ui中的AnimatorState 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnimatorStateName {
      get { return animatorStateName_; }
      set {
        animatorStateName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DetailIconMini" field.</summary>
    public const int DetailIconMiniFieldNumber = 8;
    private string detailIconMini_ = "";
    /// <summary>
    /// 类型小图标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DetailIconMini {
      get { return detailIconMini_; }
      set {
        detailIconMini_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DetailStr" field.</summary>
    public const int DetailStrFieldNumber = 9;
    private string detailStr_ = "";
    /// <summary>
    /// 描述字符串 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DetailStr {
      get { return detailStr_; }
      set {
        detailStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SoundDetectDis" field.</summary>
    public const int SoundDetectDisFieldNumber = 10;
    private uint soundDetectDis_;
    /// <summary>
    /// 声音惊吓距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SoundDetectDis {
      get { return soundDetectDis_; }
      set {
        soundDetectDis_ = value;
      }
    }

    /// <summary>Field number for the "SoundDetectRate" field.</summary>
    public const int SoundDetectRateFieldNumber = 11;
    private uint soundDetectRate_;
    /// <summary>
    /// 声音惊吓响应率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SoundDetectRate {
      get { return soundDetectRate_; }
      set {
        soundDetectRate_ = value;
      }
    }

    /// <summary>Field number for the "RunSpeedRate" field.</summary>
    public const int RunSpeedRateFieldNumber = 12;
    private float runSpeedRate_;
    /// <summary>
    /// 逃跑速度倍数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RunSpeedRate {
      get { return runSpeedRate_; }
      set {
        runSpeedRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChickenMonsterData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChickenMonsterData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (MonsterDataID != other.MonsterDataID) return false;
      if (Level != other.Level) return false;
      if (CollectScore != other.CollectScore) return false;
      if(!addChickenIDList_.Equals(other.addChickenIDList_)) return false;
      if (AnimatorStateName != other.AnimatorStateName) return false;
      if (DetailIconMini != other.DetailIconMini) return false;
      if (DetailStr != other.DetailStr) return false;
      if (SoundDetectDis != other.SoundDetectDis) return false;
      if (SoundDetectRate != other.SoundDetectRate) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RunSpeedRate, other.RunSpeedRate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MonsterDataID != 0) hash ^= MonsterDataID.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (CollectScore != 0) hash ^= CollectScore.GetHashCode();
      hash ^= addChickenIDList_.GetHashCode();
      if (AnimatorStateName.Length != 0) hash ^= AnimatorStateName.GetHashCode();
      if (DetailIconMini.Length != 0) hash ^= DetailIconMini.GetHashCode();
      if (DetailStr.Length != 0) hash ^= DetailStr.GetHashCode();
      if (SoundDetectDis != 0) hash ^= SoundDetectDis.GetHashCode();
      if (SoundDetectRate != 0) hash ^= SoundDetectRate.GetHashCode();
      if (RunSpeedRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RunSpeedRate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MonsterDataID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MonsterDataID);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Level);
      }
      if (CollectScore != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CollectScore);
      }
      addChickenIDList_.WriteTo(output, _repeated_addChickenIDList_codec);
      if (AnimatorStateName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AnimatorStateName);
      }
      if (DetailIconMini.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DetailIconMini);
      }
      if (DetailStr.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DetailStr);
      }
      if (SoundDetectDis != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SoundDetectDis);
      }
      if (SoundDetectRate != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(SoundDetectRate);
      }
      if (RunSpeedRate != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(RunSpeedRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MonsterDataID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonsterDataID);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (CollectScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CollectScore);
      }
      size += addChickenIDList_.CalculateSize(_repeated_addChickenIDList_codec);
      if (AnimatorStateName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnimatorStateName);
      }
      if (DetailIconMini.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DetailIconMini);
      }
      if (DetailStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DetailStr);
      }
      if (SoundDetectDis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SoundDetectDis);
      }
      if (SoundDetectRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SoundDetectRate);
      }
      if (RunSpeedRate != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChickenMonsterData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MonsterDataID != 0) {
        MonsterDataID = other.MonsterDataID;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.CollectScore != 0) {
        CollectScore = other.CollectScore;
      }
      addChickenIDList_.Add(other.addChickenIDList_);
      if (other.AnimatorStateName.Length != 0) {
        AnimatorStateName = other.AnimatorStateName;
      }
      if (other.DetailIconMini.Length != 0) {
        DetailIconMini = other.DetailIconMini;
      }
      if (other.DetailStr.Length != 0) {
        DetailStr = other.DetailStr;
      }
      if (other.SoundDetectDis != 0) {
        SoundDetectDis = other.SoundDetectDis;
      }
      if (other.SoundDetectRate != 0) {
        SoundDetectRate = other.SoundDetectRate;
      }
      if (other.RunSpeedRate != 0F) {
        RunSpeedRate = other.RunSpeedRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            MonsterDataID = input.ReadUInt32();
            break;
          }
          case 32: {
            Level = input.ReadUInt32();
            break;
          }
          case 40: {
            CollectScore = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            addChickenIDList_.AddEntriesFrom(input, _repeated_addChickenIDList_codec);
            break;
          }
          case 58: {
            AnimatorStateName = input.ReadString();
            break;
          }
          case 66: {
            DetailIconMini = input.ReadString();
            break;
          }
          case 74: {
            DetailStr = input.ReadString();
            break;
          }
          case 80: {
            SoundDetectDis = input.ReadUInt32();
            break;
          }
          case 88: {
            SoundDetectRate = input.ReadUInt32();
            break;
          }
          case 101: {
            RunSpeedRate = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChickenMonsterData_Array : pb::IMessage<ChickenMonsterData_Array> {
    private static readonly pb::MessageParser<ChickenMonsterData_Array> _parser = new pb::MessageParser<ChickenMonsterData_Array>(() => new ChickenMonsterData_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChickenMonsterData_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansChickenmonsterdataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChickenMonsterData_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChickenMonsterData_Array(ChickenMonsterData_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChickenMonsterData_Array Clone() {
      return new ChickenMonsterData_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.ChickenMonsterData> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.ChickenMonsterData.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.ChickenMonsterData> items_ = new pbc::RepeatedField<global::D11.Pbeans.ChickenMonsterData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.ChickenMonsterData> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChickenMonsterData_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChickenMonsterData_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChickenMonsterData_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
