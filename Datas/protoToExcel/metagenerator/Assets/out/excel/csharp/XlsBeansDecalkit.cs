// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_decalkit.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_decalkit.proto</summary>
  public static partial class XlsBeansDecalkitReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_decalkit.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansDecalkitReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chh4bHNfYmVhbnNfZGVjYWxraXQucHJvdG8SCkQxMS5QYmVhbnMiuwMKCERl",
            "Y2FsS2l0EgoKAmlkGAEgASgNEhIKCmRlY2FsU3R5bGUYAiABKA0SDAoEbmFt",
            "ZRgDIAEoCRIZChFkZXNjcmlwdGlvblN0cmluZxgEIAEoCRIWCg5kZXNjcmlw",
            "dGlvblRhZxgFIAEoCRIQCgh3ZWFyQmlhcxgGIAEoAhIWCg51bndlYXJTdHJl",
            "bmd0aBgHIAEoAhIUCgx3ZWFyV2lkdGhNaW4YCCABKAISFAoMd2VhcldpZHRo",
            "TWF4GAkgASgCEhQKDHdlYXJSZW1hcE1pbhgKIAEoAhIUCgx3ZWFyUmVtYXBN",
            "aWQYCyABKAISFAoMd2VhclJlbWFwTWF4GAwgASgCEhIKCmVudm1hcFRpbnQY",
            "DSABKAkSEQoJY29sb3JUaW50GA4gASgJEhIKCmNvbG9yVGludDIYDyABKAkS",
            "EgoKY29sb3JUaW50MxgQIAEoCRISCgpjb2xvclRpbnQ0GBEgASgJEhMKC2Jh",
            "c2VUZXh0dXJlGBIgASgJEg4KBm5vcm1hbBgTIAEoCRIYChBIb2xvZ3JhbVNw",
            "ZWN0cnVtGBQgASgJEhQKDEhvbG9ncmFtTWFzaxgVIAEoCSI1Cg5EZWNhbEtp",
            "dF9BcnJheRIjCgVpdGVtcxgBIAMoCzIULkQxMS5QYmVhbnMuRGVjYWxLaXRi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.DecalKit), global::D11.Pbeans.DecalKit.Parser, new[]{ "Id", "DecalStyle", "Name", "DescriptionString", "DescriptionTag", "WearBias", "UnwearStrength", "WearWidthMin", "WearWidthMax", "WearRemapMin", "WearRemapMid", "WearRemapMax", "EnvmapTint", "ColorTint", "ColorTint2", "ColorTint3", "ColorTint4", "BaseTexture", "Normal", "HologramSpectrum", "HologramMask" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.DecalKit_Array), global::D11.Pbeans.DecalKit_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DecalKit : pb::IMessage<DecalKit> {
    private static readonly pb::MessageParser<DecalKit> _parser = new pb::MessageParser<DecalKit>(() => new DecalKit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecalKit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansDecalkitReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecalKit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecalKit(DecalKit other) : this() {
      id_ = other.id_;
      decalStyle_ = other.decalStyle_;
      name_ = other.name_;
      descriptionString_ = other.descriptionString_;
      descriptionTag_ = other.descriptionTag_;
      wearBias_ = other.wearBias_;
      unwearStrength_ = other.unwearStrength_;
      wearWidthMin_ = other.wearWidthMin_;
      wearWidthMax_ = other.wearWidthMax_;
      wearRemapMin_ = other.wearRemapMin_;
      wearRemapMid_ = other.wearRemapMid_;
      wearRemapMax_ = other.wearRemapMax_;
      envmapTint_ = other.envmapTint_;
      colorTint_ = other.colorTint_;
      colorTint2_ = other.colorTint2_;
      colorTint3_ = other.colorTint3_;
      colorTint4_ = other.colorTint4_;
      baseTexture_ = other.baseTexture_;
      normal_ = other.normal_;
      hologramSpectrum_ = other.hologramSpectrum_;
      hologramMask_ = other.hologramMask_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecalKit Clone() {
      return new DecalKit(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// DecalKit的id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "decalStyle" field.</summary>
    public const int DecalStyleFieldNumber = 2;
    private uint decalStyle_;
    /// <summary>
    /// 风格 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DecalStyle {
      get { return decalStyle_; }
      set {
        decalStyle_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// 贴图名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "descriptionString" field.</summary>
    public const int DescriptionStringFieldNumber = 4;
    private string descriptionString_ = "";
    /// <summary>
    /// 描述 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescriptionString {
      get { return descriptionString_; }
      set {
        descriptionString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "descriptionTag" field.</summary>
    public const int DescriptionTagFieldNumber = 5;
    private string descriptionTag_ = "";
    /// <summary>
    /// 描述标签 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescriptionTag {
      get { return descriptionTag_; }
      set {
        descriptionTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wearBias" field.</summary>
    public const int WearBiasFieldNumber = 6;
    private float wearBias_;
    /// <summary>
    /// 磨损值偏移 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WearBias {
      get { return wearBias_; }
      set {
        wearBias_ = value;
      }
    }

    /// <summary>Field number for the "unwearStrength" field.</summary>
    public const int UnwearStrengthFieldNumber = 7;
    private float unwearStrength_;
    /// <summary>
    /// 不被磨损的宽度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UnwearStrength {
      get { return unwearStrength_; }
      set {
        unwearStrength_ = value;
      }
    }

    /// <summary>Field number for the "wearWidthMin" field.</summary>
    public const int WearWidthMinFieldNumber = 8;
    private float wearWidthMin_;
    /// <summary>
    /// 最小磨损值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WearWidthMin {
      get { return wearWidthMin_; }
      set {
        wearWidthMin_ = value;
      }
    }

    /// <summary>Field number for the "wearWidthMax" field.</summary>
    public const int WearWidthMaxFieldNumber = 9;
    private float wearWidthMax_;
    /// <summary>
    /// 最大磨损值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WearWidthMax {
      get { return wearWidthMax_; }
      set {
        wearWidthMax_ = value;
      }
    }

    /// <summary>Field number for the "wearRemapMin" field.</summary>
    public const int WearRemapMinFieldNumber = 10;
    private float wearRemapMin_;
    /// <summary>
    /// 最小磨损映射值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WearRemapMin {
      get { return wearRemapMin_; }
      set {
        wearRemapMin_ = value;
      }
    }

    /// <summary>Field number for the "wearRemapMid" field.</summary>
    public const int WearRemapMidFieldNumber = 11;
    private float wearRemapMid_;
    /// <summary>
    /// 中间磨损映射值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WearRemapMid {
      get { return wearRemapMid_; }
      set {
        wearRemapMid_ = value;
      }
    }

    /// <summary>Field number for the "wearRemapMax" field.</summary>
    public const int WearRemapMaxFieldNumber = 12;
    private float wearRemapMax_;
    /// <summary>
    /// 最大磨损映射值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WearRemapMax {
      get { return wearRemapMax_; }
      set {
        wearRemapMax_ = value;
      }
    }

    /// <summary>Field number for the "envmapTint" field.</summary>
    public const int EnvmapTintFieldNumber = 13;
    private string envmapTint_ = "";
    /// <summary>
    /// 环境光颜色系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnvmapTint {
      get { return envmapTint_; }
      set {
        envmapTint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "colorTint" field.</summary>
    public const int ColorTintFieldNumber = 14;
    private string colorTint_ = "";
    /// <summary>
    /// 颜色0 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColorTint {
      get { return colorTint_; }
      set {
        colorTint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "colorTint2" field.</summary>
    public const int ColorTint2FieldNumber = 15;
    private string colorTint2_ = "";
    /// <summary>
    /// 颜色1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColorTint2 {
      get { return colorTint2_; }
      set {
        colorTint2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "colorTint3" field.</summary>
    public const int ColorTint3FieldNumber = 16;
    private string colorTint3_ = "";
    /// <summary>
    /// 颜色2 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColorTint3 {
      get { return colorTint3_; }
      set {
        colorTint3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "colorTint4" field.</summary>
    public const int ColorTint4FieldNumber = 17;
    private string colorTint4_ = "";
    /// <summary>
    /// 颜色3 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColorTint4 {
      get { return colorTint4_; }
      set {
        colorTint4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "baseTexture" field.</summary>
    public const int BaseTextureFieldNumber = 18;
    private string baseTexture_ = "";
    /// <summary>
    /// 贴图路径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseTexture {
      get { return baseTexture_; }
      set {
        baseTexture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "normal" field.</summary>
    public const int NormalFieldNumber = 19;
    private string normal_ = "";
    /// <summary>
    /// 法线名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Normal {
      get { return normal_; }
      set {
        normal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HologramSpectrum" field.</summary>
    public const int HologramSpectrumFieldNumber = 20;
    private string hologramSpectrum_ = "";
    /// <summary>
    /// 全息图,菲涅尔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HologramSpectrum {
      get { return hologramSpectrum_; }
      set {
        hologramSpectrum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HologramMask" field.</summary>
    public const int HologramMaskFieldNumber = 21;
    private string hologramMask_ = "";
    /// <summary>
    /// 全息遮罩贴图 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HologramMask {
      get { return hologramMask_; }
      set {
        hologramMask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecalKit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecalKit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DecalStyle != other.DecalStyle) return false;
      if (Name != other.Name) return false;
      if (DescriptionString != other.DescriptionString) return false;
      if (DescriptionTag != other.DescriptionTag) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WearBias, other.WearBias)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UnwearStrength, other.UnwearStrength)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WearWidthMin, other.WearWidthMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WearWidthMax, other.WearWidthMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WearRemapMin, other.WearRemapMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WearRemapMid, other.WearRemapMid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WearRemapMax, other.WearRemapMax)) return false;
      if (EnvmapTint != other.EnvmapTint) return false;
      if (ColorTint != other.ColorTint) return false;
      if (ColorTint2 != other.ColorTint2) return false;
      if (ColorTint3 != other.ColorTint3) return false;
      if (ColorTint4 != other.ColorTint4) return false;
      if (BaseTexture != other.BaseTexture) return false;
      if (Normal != other.Normal) return false;
      if (HologramSpectrum != other.HologramSpectrum) return false;
      if (HologramMask != other.HologramMask) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (DecalStyle != 0) hash ^= DecalStyle.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DescriptionString.Length != 0) hash ^= DescriptionString.GetHashCode();
      if (DescriptionTag.Length != 0) hash ^= DescriptionTag.GetHashCode();
      if (WearBias != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WearBias);
      if (UnwearStrength != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UnwearStrength);
      if (WearWidthMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WearWidthMin);
      if (WearWidthMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WearWidthMax);
      if (WearRemapMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WearRemapMin);
      if (WearRemapMid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WearRemapMid);
      if (WearRemapMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WearRemapMax);
      if (EnvmapTint.Length != 0) hash ^= EnvmapTint.GetHashCode();
      if (ColorTint.Length != 0) hash ^= ColorTint.GetHashCode();
      if (ColorTint2.Length != 0) hash ^= ColorTint2.GetHashCode();
      if (ColorTint3.Length != 0) hash ^= ColorTint3.GetHashCode();
      if (ColorTint4.Length != 0) hash ^= ColorTint4.GetHashCode();
      if (BaseTexture.Length != 0) hash ^= BaseTexture.GetHashCode();
      if (Normal.Length != 0) hash ^= Normal.GetHashCode();
      if (HologramSpectrum.Length != 0) hash ^= HologramSpectrum.GetHashCode();
      if (HologramMask.Length != 0) hash ^= HologramMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (DecalStyle != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DecalStyle);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (DescriptionString.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DescriptionString);
      }
      if (DescriptionTag.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DescriptionTag);
      }
      if (WearBias != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(WearBias);
      }
      if (UnwearStrength != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(UnwearStrength);
      }
      if (WearWidthMin != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(WearWidthMin);
      }
      if (WearWidthMax != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(WearWidthMax);
      }
      if (WearRemapMin != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(WearRemapMin);
      }
      if (WearRemapMid != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(WearRemapMid);
      }
      if (WearRemapMax != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(WearRemapMax);
      }
      if (EnvmapTint.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(EnvmapTint);
      }
      if (ColorTint.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ColorTint);
      }
      if (ColorTint2.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(ColorTint2);
      }
      if (ColorTint3.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ColorTint3);
      }
      if (ColorTint4.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ColorTint4);
      }
      if (BaseTexture.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(BaseTexture);
      }
      if (Normal.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Normal);
      }
      if (HologramSpectrum.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(HologramSpectrum);
      }
      if (HologramMask.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(HologramMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (DecalStyle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DecalStyle);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DescriptionString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescriptionString);
      }
      if (DescriptionTag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescriptionTag);
      }
      if (WearBias != 0F) {
        size += 1 + 4;
      }
      if (UnwearStrength != 0F) {
        size += 1 + 4;
      }
      if (WearWidthMin != 0F) {
        size += 1 + 4;
      }
      if (WearWidthMax != 0F) {
        size += 1 + 4;
      }
      if (WearRemapMin != 0F) {
        size += 1 + 4;
      }
      if (WearRemapMid != 0F) {
        size += 1 + 4;
      }
      if (WearRemapMax != 0F) {
        size += 1 + 4;
      }
      if (EnvmapTint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnvmapTint);
      }
      if (ColorTint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColorTint);
      }
      if (ColorTint2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColorTint2);
      }
      if (ColorTint3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ColorTint3);
      }
      if (ColorTint4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ColorTint4);
      }
      if (BaseTexture.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BaseTexture);
      }
      if (Normal.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Normal);
      }
      if (HologramSpectrum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HologramSpectrum);
      }
      if (HologramMask.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HologramMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecalKit other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.DecalStyle != 0) {
        DecalStyle = other.DecalStyle;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DescriptionString.Length != 0) {
        DescriptionString = other.DescriptionString;
      }
      if (other.DescriptionTag.Length != 0) {
        DescriptionTag = other.DescriptionTag;
      }
      if (other.WearBias != 0F) {
        WearBias = other.WearBias;
      }
      if (other.UnwearStrength != 0F) {
        UnwearStrength = other.UnwearStrength;
      }
      if (other.WearWidthMin != 0F) {
        WearWidthMin = other.WearWidthMin;
      }
      if (other.WearWidthMax != 0F) {
        WearWidthMax = other.WearWidthMax;
      }
      if (other.WearRemapMin != 0F) {
        WearRemapMin = other.WearRemapMin;
      }
      if (other.WearRemapMid != 0F) {
        WearRemapMid = other.WearRemapMid;
      }
      if (other.WearRemapMax != 0F) {
        WearRemapMax = other.WearRemapMax;
      }
      if (other.EnvmapTint.Length != 0) {
        EnvmapTint = other.EnvmapTint;
      }
      if (other.ColorTint.Length != 0) {
        ColorTint = other.ColorTint;
      }
      if (other.ColorTint2.Length != 0) {
        ColorTint2 = other.ColorTint2;
      }
      if (other.ColorTint3.Length != 0) {
        ColorTint3 = other.ColorTint3;
      }
      if (other.ColorTint4.Length != 0) {
        ColorTint4 = other.ColorTint4;
      }
      if (other.BaseTexture.Length != 0) {
        BaseTexture = other.BaseTexture;
      }
      if (other.Normal.Length != 0) {
        Normal = other.Normal;
      }
      if (other.HologramSpectrum.Length != 0) {
        HologramSpectrum = other.HologramSpectrum;
      }
      if (other.HologramMask.Length != 0) {
        HologramMask = other.HologramMask;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            DecalStyle = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            DescriptionString = input.ReadString();
            break;
          }
          case 42: {
            DescriptionTag = input.ReadString();
            break;
          }
          case 53: {
            WearBias = input.ReadFloat();
            break;
          }
          case 61: {
            UnwearStrength = input.ReadFloat();
            break;
          }
          case 69: {
            WearWidthMin = input.ReadFloat();
            break;
          }
          case 77: {
            WearWidthMax = input.ReadFloat();
            break;
          }
          case 85: {
            WearRemapMin = input.ReadFloat();
            break;
          }
          case 93: {
            WearRemapMid = input.ReadFloat();
            break;
          }
          case 101: {
            WearRemapMax = input.ReadFloat();
            break;
          }
          case 106: {
            EnvmapTint = input.ReadString();
            break;
          }
          case 114: {
            ColorTint = input.ReadString();
            break;
          }
          case 122: {
            ColorTint2 = input.ReadString();
            break;
          }
          case 130: {
            ColorTint3 = input.ReadString();
            break;
          }
          case 138: {
            ColorTint4 = input.ReadString();
            break;
          }
          case 146: {
            BaseTexture = input.ReadString();
            break;
          }
          case 154: {
            Normal = input.ReadString();
            break;
          }
          case 162: {
            HologramSpectrum = input.ReadString();
            break;
          }
          case 170: {
            HologramMask = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DecalKit_Array : pb::IMessage<DecalKit_Array> {
    private static readonly pb::MessageParser<DecalKit_Array> _parser = new pb::MessageParser<DecalKit_Array>(() => new DecalKit_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecalKit_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansDecalkitReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecalKit_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecalKit_Array(DecalKit_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecalKit_Array Clone() {
      return new DecalKit_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.DecalKit> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.DecalKit.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.DecalKit> items_ = new pbc::RepeatedField<global::D11.Pbeans.DecalKit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.DecalKit> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecalKit_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecalKit_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecalKit_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
