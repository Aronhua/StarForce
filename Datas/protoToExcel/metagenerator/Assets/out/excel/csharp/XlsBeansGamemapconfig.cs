// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_gamemapconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_gamemapconfig.proto</summary>
  public static partial class XlsBeansGamemapconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_gamemapconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansGamemapconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch14bHNfYmVhbnNfZ2FtZW1hcGNvbmZpZy5wcm90bxIKRDExLlBiZWFucyKG",
            "AwoNR2FtZU1hcENvbmZpZxIKCgJpZBgBIAEoDRIMCgRpZE1TGAIgASgNEhEK",
            "CWdhbWVMZXZlbBgDIAEoDRIMCgRuYW1lGAQgASgJEhMKC2Rpc3BsYXlUaW1l",
            "GAUgASgDEhAKCG9wZW5UaW1lGAYgASgDEhEKCWNsb3NlVGltZRgHIAEoAxIP",
            "Cgdzb3J0TnVtGAggASgNEg0KBXRhZ0lEGAkgASgNEhoKEnN1YlBhY2thZ2VT",
            "Y2VuZUJpdBgKIAEoDRISCgptYXBHcm91cElEGAsgASgNEhEKCXByZXZpZXdJ",
            "RBgMIAEoDRIVCg1sb2FkaW5nUGljTUJMGA0gASgNEhQKDGxvYWRpbmdQaWNR",
            "WBgOIAEoDRIWCg5sb2FkaW5nTWluaU1hcBgPIAEoDRIUCgxNYXBBU2l0ZVNo",
            "b3cYECABKAgSFAoMTWFwQlNpdGVTaG93GBEgASgIEhMKC21hdGNoV2VpZ2h0",
            "GBIgASgNEhcKD3VubG9ja1JhbmtMZXZlbBgTIAEoDSI/ChNHYW1lTWFwQ29u",
            "ZmlnX0FycmF5EigKBWl0ZW1zGAEgAygLMhkuRDExLlBiZWFucy5HYW1lTWFw",
            "Q29uZmlnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.GameMapConfig), global::D11.Pbeans.GameMapConfig.Parser, new[]{ "Id", "IdMS", "GameLevel", "Name", "DisplayTime", "OpenTime", "CloseTime", "SortNum", "TagID", "SubPackageSceneBit", "MapGroupID", "PreviewID", "LoadingPicMBL", "LoadingPicQX", "LoadingMiniMap", "MapASiteShow", "MapBSiteShow", "MatchWeight", "UnlockRankLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.GameMapConfig_Array), global::D11.Pbeans.GameMapConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GameMapConfig : pb::IMessage<GameMapConfig> {
    private static readonly pb::MessageParser<GameMapConfig> _parser = new pb::MessageParser<GameMapConfig>(() => new GameMapConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameMapConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansGamemapconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMapConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMapConfig(GameMapConfig other) : this() {
      id_ = other.id_;
      idMS_ = other.idMS_;
      gameLevel_ = other.gameLevel_;
      name_ = other.name_;
      displayTime_ = other.displayTime_;
      openTime_ = other.openTime_;
      closeTime_ = other.closeTime_;
      sortNum_ = other.sortNum_;
      tagID_ = other.tagID_;
      subPackageSceneBit_ = other.subPackageSceneBit_;
      mapGroupID_ = other.mapGroupID_;
      previewID_ = other.previewID_;
      loadingPicMBL_ = other.loadingPicMBL_;
      loadingPicQX_ = other.loadingPicQX_;
      loadingMiniMap_ = other.loadingMiniMap_;
      mapASiteShow_ = other.mapASiteShow_;
      mapBSiteShow_ = other.mapBSiteShow_;
      matchWeight_ = other.matchWeight_;
      unlockRankLevel_ = other.unlockRankLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMapConfig Clone() {
      return new GameMapConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 地图显示ID(局外规则) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "idMS" field.</summary>
    public const int IdMSFieldNumber = 2;
    private uint idMS_;
    /// <summary>
    /// 地图玩法ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IdMS {
      get { return idMS_; }
      set {
        idMS_ = value;
      }
    }

    /// <summary>Field number for the "gameLevel" field.</summary>
    public const int GameLevelFieldNumber = 3;
    private uint gameLevel_;
    /// <summary>
    /// 难度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameLevel {
      get { return gameLevel_; }
      set {
        gameLevel_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// 正式名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "displayTime" field.</summary>
    public const int DisplayTimeFieldNumber = 5;
    private long displayTime_;
    /// <summary>
    /// 预告时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DisplayTime {
      get { return displayTime_; }
      set {
        displayTime_ = value;
      }
    }

    /// <summary>Field number for the "openTime" field.</summary>
    public const int OpenTimeFieldNumber = 6;
    private long openTime_;
    /// <summary>
    /// 上架时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "closeTime" field.</summary>
    public const int CloseTimeFieldNumber = 7;
    private long closeTime_;
    /// <summary>
    /// 下架时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CloseTime {
      get { return closeTime_; }
      set {
        closeTime_ = value;
      }
    }

    /// <summary>Field number for the "sortNum" field.</summary>
    public const int SortNumFieldNumber = 8;
    private uint sortNum_;
    /// <summary>
    /// 排序（越小越靠前） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SortNum {
      get { return sortNum_; }
      set {
        sortNum_ = value;
      }
    }

    /// <summary>Field number for the "tagID" field.</summary>
    public const int TagIDFieldNumber = 9;
    private uint tagID_;
    /// <summary>
    /// 标签ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TagID {
      get { return tagID_; }
      set {
        tagID_ = value;
      }
    }

    /// <summary>Field number for the "subPackageSceneBit" field.</summary>
    public const int SubPackageSceneBitFieldNumber = 10;
    private uint subPackageSceneBit_;
    /// <summary>
    /// 分包场景位ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubPackageSceneBit {
      get { return subPackageSceneBit_; }
      set {
        subPackageSceneBit_ = value;
      }
    }

    /// <summary>Field number for the "mapGroupID" field.</summary>
    public const int MapGroupIDFieldNumber = 11;
    private uint mapGroupID_;
    /// <summary>
    /// 所属地图组id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapGroupID {
      get { return mapGroupID_; }
      set {
        mapGroupID_ = value;
      }
    }

    /// <summary>Field number for the "previewID" field.</summary>
    public const int PreviewIDFieldNumber = 12;
    private uint previewID_;
    /// <summary>
    /// 预览图ID（暂时没用） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PreviewID {
      get { return previewID_; }
      set {
        previewID_ = value;
      }
    }

    /// <summary>Field number for the "loadingPicMBL" field.</summary>
    public const int LoadingPicMBLFieldNumber = 13;
    private uint loadingPicMBL_;
    /// <summary>
    /// loading毛玻璃图ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoadingPicMBL {
      get { return loadingPicMBL_; }
      set {
        loadingPicMBL_ = value;
      }
    }

    /// <summary>Field number for the "loadingPicQX" field.</summary>
    public const int LoadingPicQXFieldNumber = 14;
    private uint loadingPicQX_;
    /// <summary>
    /// loading清晰图ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoadingPicQX {
      get { return loadingPicQX_; }
      set {
        loadingPicQX_ = value;
      }
    }

    /// <summary>Field number for the "loadingMiniMap" field.</summary>
    public const int LoadingMiniMapFieldNumber = 15;
    private uint loadingMiniMap_;
    /// <summary>
    /// loading小地图 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoadingMiniMap {
      get { return loadingMiniMap_; }
      set {
        loadingMiniMap_ = value;
      }
    }

    /// <summary>Field number for the "MapASiteShow" field.</summary>
    public const int MapASiteShowFieldNumber = 16;
    private bool mapASiteShow_;
    /// <summary>
    /// 小地图是否屏蔽A包点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MapASiteShow {
      get { return mapASiteShow_; }
      set {
        mapASiteShow_ = value;
      }
    }

    /// <summary>Field number for the "MapBSiteShow" field.</summary>
    public const int MapBSiteShowFieldNumber = 17;
    private bool mapBSiteShow_;
    /// <summary>
    /// 小地图是否屏蔽B包点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MapBSiteShow {
      get { return mapBSiteShow_; }
      set {
        mapBSiteShow_ = value;
      }
    }

    /// <summary>Field number for the "matchWeight" field.</summary>
    public const int MatchWeightFieldNumber = 18;
    private uint matchWeight_;
    /// <summary>
    /// 随机权重 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchWeight {
      get { return matchWeight_; }
      set {
        matchWeight_ = value;
      }
    }

    /// <summary>Field number for the "unlockRankLevel" field.</summary>
    public const int UnlockRankLevelFieldNumber = 19;
    private uint unlockRankLevel_;
    /// <summary>
    /// 开放最低段位 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnlockRankLevel {
      get { return unlockRankLevel_; }
      set {
        unlockRankLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameMapConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameMapConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IdMS != other.IdMS) return false;
      if (GameLevel != other.GameLevel) return false;
      if (Name != other.Name) return false;
      if (DisplayTime != other.DisplayTime) return false;
      if (OpenTime != other.OpenTime) return false;
      if (CloseTime != other.CloseTime) return false;
      if (SortNum != other.SortNum) return false;
      if (TagID != other.TagID) return false;
      if (SubPackageSceneBit != other.SubPackageSceneBit) return false;
      if (MapGroupID != other.MapGroupID) return false;
      if (PreviewID != other.PreviewID) return false;
      if (LoadingPicMBL != other.LoadingPicMBL) return false;
      if (LoadingPicQX != other.LoadingPicQX) return false;
      if (LoadingMiniMap != other.LoadingMiniMap) return false;
      if (MapASiteShow != other.MapASiteShow) return false;
      if (MapBSiteShow != other.MapBSiteShow) return false;
      if (MatchWeight != other.MatchWeight) return false;
      if (UnlockRankLevel != other.UnlockRankLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (IdMS != 0) hash ^= IdMS.GetHashCode();
      if (GameLevel != 0) hash ^= GameLevel.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayTime != 0L) hash ^= DisplayTime.GetHashCode();
      if (OpenTime != 0L) hash ^= OpenTime.GetHashCode();
      if (CloseTime != 0L) hash ^= CloseTime.GetHashCode();
      if (SortNum != 0) hash ^= SortNum.GetHashCode();
      if (TagID != 0) hash ^= TagID.GetHashCode();
      if (SubPackageSceneBit != 0) hash ^= SubPackageSceneBit.GetHashCode();
      if (MapGroupID != 0) hash ^= MapGroupID.GetHashCode();
      if (PreviewID != 0) hash ^= PreviewID.GetHashCode();
      if (LoadingPicMBL != 0) hash ^= LoadingPicMBL.GetHashCode();
      if (LoadingPicQX != 0) hash ^= LoadingPicQX.GetHashCode();
      if (LoadingMiniMap != 0) hash ^= LoadingMiniMap.GetHashCode();
      if (MapASiteShow != false) hash ^= MapASiteShow.GetHashCode();
      if (MapBSiteShow != false) hash ^= MapBSiteShow.GetHashCode();
      if (MatchWeight != 0) hash ^= MatchWeight.GetHashCode();
      if (UnlockRankLevel != 0) hash ^= UnlockRankLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (IdMS != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(IdMS);
      }
      if (GameLevel != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GameLevel);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (DisplayTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(DisplayTime);
      }
      if (OpenTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(OpenTime);
      }
      if (CloseTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CloseTime);
      }
      if (SortNum != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(SortNum);
      }
      if (TagID != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(TagID);
      }
      if (SubPackageSceneBit != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SubPackageSceneBit);
      }
      if (MapGroupID != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(MapGroupID);
      }
      if (PreviewID != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(PreviewID);
      }
      if (LoadingPicMBL != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(LoadingPicMBL);
      }
      if (LoadingPicQX != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(LoadingPicQX);
      }
      if (LoadingMiniMap != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(LoadingMiniMap);
      }
      if (MapASiteShow != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(MapASiteShow);
      }
      if (MapBSiteShow != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(MapBSiteShow);
      }
      if (MatchWeight != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(MatchWeight);
      }
      if (UnlockRankLevel != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(UnlockRankLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (IdMS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IdMS);
      }
      if (GameLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameLevel);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DisplayTime);
      }
      if (OpenTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpenTime);
      }
      if (CloseTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CloseTime);
      }
      if (SortNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SortNum);
      }
      if (TagID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TagID);
      }
      if (SubPackageSceneBit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubPackageSceneBit);
      }
      if (MapGroupID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapGroupID);
      }
      if (PreviewID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PreviewID);
      }
      if (LoadingPicMBL != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoadingPicMBL);
      }
      if (LoadingPicQX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoadingPicQX);
      }
      if (LoadingMiniMap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoadingMiniMap);
      }
      if (MapASiteShow != false) {
        size += 2 + 1;
      }
      if (MapBSiteShow != false) {
        size += 2 + 1;
      }
      if (MatchWeight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MatchWeight);
      }
      if (UnlockRankLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UnlockRankLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameMapConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.IdMS != 0) {
        IdMS = other.IdMS;
      }
      if (other.GameLevel != 0) {
        GameLevel = other.GameLevel;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayTime != 0L) {
        DisplayTime = other.DisplayTime;
      }
      if (other.OpenTime != 0L) {
        OpenTime = other.OpenTime;
      }
      if (other.CloseTime != 0L) {
        CloseTime = other.CloseTime;
      }
      if (other.SortNum != 0) {
        SortNum = other.SortNum;
      }
      if (other.TagID != 0) {
        TagID = other.TagID;
      }
      if (other.SubPackageSceneBit != 0) {
        SubPackageSceneBit = other.SubPackageSceneBit;
      }
      if (other.MapGroupID != 0) {
        MapGroupID = other.MapGroupID;
      }
      if (other.PreviewID != 0) {
        PreviewID = other.PreviewID;
      }
      if (other.LoadingPicMBL != 0) {
        LoadingPicMBL = other.LoadingPicMBL;
      }
      if (other.LoadingPicQX != 0) {
        LoadingPicQX = other.LoadingPicQX;
      }
      if (other.LoadingMiniMap != 0) {
        LoadingMiniMap = other.LoadingMiniMap;
      }
      if (other.MapASiteShow != false) {
        MapASiteShow = other.MapASiteShow;
      }
      if (other.MapBSiteShow != false) {
        MapBSiteShow = other.MapBSiteShow;
      }
      if (other.MatchWeight != 0) {
        MatchWeight = other.MatchWeight;
      }
      if (other.UnlockRankLevel != 0) {
        UnlockRankLevel = other.UnlockRankLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            IdMS = input.ReadUInt32();
            break;
          }
          case 24: {
            GameLevel = input.ReadUInt32();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            DisplayTime = input.ReadInt64();
            break;
          }
          case 48: {
            OpenTime = input.ReadInt64();
            break;
          }
          case 56: {
            CloseTime = input.ReadInt64();
            break;
          }
          case 64: {
            SortNum = input.ReadUInt32();
            break;
          }
          case 72: {
            TagID = input.ReadUInt32();
            break;
          }
          case 80: {
            SubPackageSceneBit = input.ReadUInt32();
            break;
          }
          case 88: {
            MapGroupID = input.ReadUInt32();
            break;
          }
          case 96: {
            PreviewID = input.ReadUInt32();
            break;
          }
          case 104: {
            LoadingPicMBL = input.ReadUInt32();
            break;
          }
          case 112: {
            LoadingPicQX = input.ReadUInt32();
            break;
          }
          case 120: {
            LoadingMiniMap = input.ReadUInt32();
            break;
          }
          case 128: {
            MapASiteShow = input.ReadBool();
            break;
          }
          case 136: {
            MapBSiteShow = input.ReadBool();
            break;
          }
          case 144: {
            MatchWeight = input.ReadUInt32();
            break;
          }
          case 152: {
            UnlockRankLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameMapConfig_Array : pb::IMessage<GameMapConfig_Array> {
    private static readonly pb::MessageParser<GameMapConfig_Array> _parser = new pb::MessageParser<GameMapConfig_Array>(() => new GameMapConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameMapConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansGamemapconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMapConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMapConfig_Array(GameMapConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMapConfig_Array Clone() {
      return new GameMapConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.GameMapConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.GameMapConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.GameMapConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.GameMapConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.GameMapConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameMapConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameMapConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameMapConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
