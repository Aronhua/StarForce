// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_gamemodebaseconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_gamemodebaseconfig.proto</summary>
  public static partial class XlsBeansGamemodebaseconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_gamemodebaseconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansGamemodebaseconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJ4bHNfYmVhbnNfZ2FtZW1vZGViYXNlY29uZmlnLnByb3RvEgpEMTEuUGJl",
            "YW5zIsUXChJHYW1lTW9kZUJhc2VDb25maWcSCgoCaWQYASABKA0SGgoSbnVt",
            "TWF0Y2hNYXhQbGF5ZXJzGAIgASgFEh8KF251bVN0YXJ0TWF0Y2hNaW5QbGF5",
            "ZXJzGAMgASgFEiEKGW51bURlZmVuZGVyQ2FtcE1pblBsYXllcnMYBCABKAUS",
            "IQoZbnVtQXR0YWNrZXJDYW1wTWluUGxheWVycxgFIAEoBRIYChBtYXRjaFBy",
            "ZXBhcmVTZWNzGAYgASgFEhYKDnByZVBhcmVFbmRUeXBlGAcgASgFEhIKCndh",
            "cm1VcFNlY3MYCCABKAUSFQoNd2FybVVwRW5kU2VjcxgJIAEoBRIYChByb3Vu",
            "ZFByZXBhcmVTZWNzGAogASgFEiUKHXJvdW5kUHJlcGFyZUdyYXlGaWx0ZXJT",
            "ZWNvbmRzGAsgASgFEhwKFGpvaW5NaWRXYXlFeHRlbmRTZWNzGAwgASgFEhwK",
            "FHJvdW5kUmVxSGVscEJ1eVRpbWVzGA0gASgNEhQKDHJvdW5kQnV5U2VjcxgO",
            "IAEoBRIYChByb3VuZEJ1eUNhcmRTZWNzGA8gASgFEhkKEWNhbkNoYW5nZVNo",
            "b3BDYW1wGBAgASgIEhEKCWNvc3RNb25leRgRIAEoCBIbChNyb3VuZEluUHJv",
            "Z3Jlc3NTZWNzGBIgASgFEhQKDGVuZFJvdW5kU2VjcxgTIAEoBRIUCgxzd2Fw",
            "Q2FtcFNlY3MYFCABKAUSFwoPc3dpdGNoU2NlbmVTZWNzGBUgASgFEhQKDGVu",
            "ZE1hdGNoU2VjcxgWIAEoBRIaChJlbmRNYXRjaFNob3dSZXN1bHQYFyABKAgS",
            "HAoUZW5kTWF0Y2hSZXN1bHRFZmZlY3QYGCABKA0SFgoObWF0Y2hUb3RhbFNl",
            "Y3MYGSABKAUSGQoRY29ubmVjdGlvbkFGS1RpbWUYGiABKAUSGQoRaGFuZ1Vw",
            "VGltZU91dFNlY3MYGyABKAUSDwoHV2luVHlwZRgcIAEoBRIWCg5udW1Ub3Rh",
            "bFJvdW5kcxgdIAEoBRITCgt0YXJnZXRTY29yZRgeIAEoBRIZChFtYXRjaENh",
            "bXBTY29yZVdheRgfIAEoBRIYChBCYXR0bGVMb2FkaW5nV2luGCAgASgJEg4K",
            "BmluaXRIUBghIAEoBRINCgVtYXhIUBgiIAEoBRIRCglIYWxmQXJtb3IYIyAB",
            "KAUSEQoJRnVsbEFybW9yGCQgASgFEhQKDG1heFNwZWVkUmF0ZRglIAEoAhIU",
            "CgxmcmljdGlvblJhdGUYJiABKAISFQoNaGVhZFNob290T25seRgnIAEoCBIT",
            "CgtncmF2aXR5UmF0ZRgoIAEoAhIRCglhdXRvQXJtb3IYKSABKAgSGgoSYWxs",
            "eUNvbGxpZGVyQWN0aXZlGCogASgIEhsKE2VuZW15Q29sbGlkZXJBY3RpdmUY",
            "KyABKAgSEwoLaG9zdGlsZU1vZGUYLCABKA0SGQoRY2hlY2tGcmllbmREYW1h",
            "Z2UYLSABKAgSHgoWZ3JlbmFkZXNDYW5Dcm9zc0ZyaWVuZBguIAEoCBIaChJk",
            "ZWFkTmVlZERyb3BXZWFwb24YLyABKAgSHAoUcHJvamVjdGlsZVRvdGFsTGlt",
            "aXQYMCABKAUSHQoVcHJvamVjdGlsZVBlcnNvbkxpbWl0GDEgASgFEhAKCGNh",
            "bldhdGNoGDIgASgIEhYKDm51bU1heE9ic2VydmVyGDMgASgFEhUKDWNhbldh",
            "dGNoRW5lbXkYNCABKAgSHgoWaGFzV2F0Y2hOZXV0cmFsQ2hhbm5lbBg1IAEo",
            "CBIcChR3YXRjaEVuZW15Q2FuT3V0bGluZRg2IAEoCBIeChZ3YXRjaEJhdHRs",
            "ZUNhblN3aXRjaEZUGDcgASgIEhcKD2RlYXRoQW5pU2Vjb25kcxg4IAEoAhIf",
            "ChdjYW1lcmFMb29rQXJvdW5kU2Vjb25kcxg5IAEoAhIZChFkZWF0aFNjZW5l",
            "U2Vjb25kcxg6IAEoAhIbChNyZW1pbmRLaWxsZXJTZWNvbmRzGDsgASgCEhgK",
            "EGRlYXRoQmFja1NlY29uZHMYPCABKAISGwoTbWluUmVwZWF0ZUtpbGxDb3Vu",
            "dBg9IAEoBRIbChNyZXBlYXRlS2lsbEludGVydmFsGD4gASgCEh0KFWRlYXRo",
            "UmVkRmlsdGVyU2Vjb25kcxg/IAEoAhIYChBpbnZpbmNpYmxlQnVmZklkGEAg",
            "ASgNEh0KFXJld2FyZFdlYXBvbkJlZ2luVGltZRhBIAEoAhIeChZyZXdhcmRX",
            "ZWFwb25SZXBlYXRUaW1lGEIgASgCEhwKFHJld2FyZFdlYXBvbkR1cmF0aW9u",
            "GEMgASgCEhYKDnJlc3Bhd25CdXlTZWNzGEQgASgFEiIKGnJlc3Bhd25Qb2lu",
            "dENoZWNrRGlzYXRhbmNlGEUgASgCEhoKEnJlc3Bhd25Qb2ludENkU2VjcxhG",
            "IAEoBRIYChBhd2FyZFdlYXBvblNjb3JlGEcgASgFEhQKDENsaXBNdWx0aXBs",
            "ZRhIIAEoBRIbChNDYXJyaWVkQ2xpcE11bHRpcGxlGEkgASgFEhMKC0Nsb3Nl",
            "UmVjb2lsGEogASgIEhMKC0Nsb3NlU3ByZWFkGEsgASgIEhYKDkluZmluaXRT",
            "dWJDbGlwGEwgASgIEhgKEHJhbmRvbU1haW5XZWFwb24YTSABKAgSFwoPU3dh",
            "cFRlYW1zRW5hYmxlGE4gASgIEhYKDlN3YXBUZWFtUm91bmRzGE8gASgFEhQK",
            "DERlZnVzZUM0VGltZRhQIAEoAhIWCg5EZXBsb3lCb21iVGltZRhRIAEoAhIZ",
            "ChFPblBsYW50QzRTaG93RmluZBhSIAEoCBIRCglzY29yZVR5cGUYUyABKAUS",
            "GAoQTWF4UmVjb25uZWN0VGltZRhUIAEoBRIQCghBSUVuYWJsZRhVIAEoCBIV",
            "Cg1DYW1wU2NvcmVSdWxlGFYgASgFEhoKElNwYXduRGlzY2FyZFdlYXBvbhhX",
            "IAEoCBIPCgdCYWxsTnVtGFggASgFEhUKDUF1dG9BaW1FbmFibGUYWSABKAgS",
            "FgoOQXV0b0ZpcmVFbmFibGUYWiABKA0SEAoIRmlyZUNvc3QYWyABKAgSEwoL",
            "R3JlbmFkZUNvc3QYXCABKAgSGwoTZGVhZE5lZWREcm9wR3JlbmFkZRhdIAEo",
            "CBIeChZOb3ZpY2VHdWlkZUNoZWNrRW5hYmxlGF4gASgIEhcKD0hhc1NraW5M",
            "YXN0S2lsbBhfIAEoCBIVCg1IYXNFbmVteVRpdGxlGGAgASgIEhYKDkhhc1Nv",
            "dW5kQXNzaXN0GGEgASgIEhIKCmNhblJhZ0RvbGwYYiABKAgSEAoIQ2FuU2xp",
            "ZGUYYyABKAgSEAoIQ2FuQ2xpbWIYZCABKAgSHwoXRGVsYXlUcmlnZ2VyV2F0",
            "Y2hCYXR0bGUYZSABKAgSFQoNSGFzVGl0bGVJbmRleBhmIAEoCBIVCg1Sb2d1",
            "ZUxpa2VCdWZmGGcgASgIEhoKElBsYXlNdXNpY0JveEVuYWJsZRhoIAEoCBIU",
            "CgxEeW5hbWljU2NlbmUYaSABKAgSHwoXRGlzY2FyZFdlYXBvbkluaXRpYXRp",
            "dmUYaiABKAgSHAoUUGlja1VwV2VhcG9uSWNvblNob3cYayABKAgSGgoSTWlu",
            "aU1hcFNvdW5kQXNzaXN0GGwgASgIEh8KF1RhY3RpY2FsQWN0aW9uUGFnZUlu",
            "ZGV4GG0gASgNEhkKEURhbWdlTnVtU2hvd0xldmVsGG4gASgFEhkKEUxhc3RS",
            "b3VuZEtpbGxSdWxlGG8gASgFEhAKCEhhc01vbmV5GHAgASgIEhQKDEhhc1Nj",
            "ZW5lUm9hbRhxIAEoCBIeChZQcmVwYXJlU2hvd0hlYWRHVUlUaW1lGHIgASgF",
            "EhwKFE1vdmVTb3VuZFRyaWdnZXJUSW1lGHMgASgCEhIKCkZyZWVXZWFwb24Y",
            "dCABKAgSFQoNV2VhcG9uQlJEZWNheRh1IAEoCBITCgtMaWtlR3JvdXBJZBh2",
            "IAEoBSJJChhHYW1lTW9kZUJhc2VDb25maWdfQXJyYXkSLQoFaXRlbXMYASAD",
            "KAsyHi5EMTEuUGJlYW5zLkdhbWVNb2RlQmFzZUNvbmZpZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.GameModeBaseConfig), global::D11.Pbeans.GameModeBaseConfig.Parser, new[]{ "Id", "NumMatchMaxPlayers", "NumStartMatchMinPlayers", "NumDefenderCampMinPlayers", "NumAttackerCampMinPlayers", "MatchPrepareSecs", "PrePareEndType", "WarmUpSecs", "WarmUpEndSecs", "RoundPrepareSecs", "RoundPrepareGrayFilterSeconds", "JoinMidWayExtendSecs", "RoundReqHelpBuyTimes", "RoundBuySecs", "RoundBuyCardSecs", "CanChangeShopCamp", "CostMoney", "RoundInProgressSecs", "EndRoundSecs", "SwapCampSecs", "SwitchSceneSecs", "EndMatchSecs", "EndMatchShowResult", "EndMatchResultEffect", "MatchTotalSecs", "ConnectionAFKTime", "HangUpTimeOutSecs", "WinType", "NumTotalRounds", "TargetScore", "MatchCampScoreWay", "BattleLoadingWin", "InitHP", "MaxHP", "HalfArmor", "FullArmor", "MaxSpeedRate", "FrictionRate", "HeadShootOnly", "GravityRate", "AutoArmor", "AllyColliderActive", "EnemyColliderActive", "HostileMode", "CheckFriendDamage", "GrenadesCanCrossFriend", "DeadNeedDropWeapon", "ProjectileTotalLimit", "ProjectilePersonLimit", "CanWatch", "NumMaxObserver", "CanWatchEnemy", "HasWatchNeutralChannel", "WatchEnemyCanOutline", "WatchBattleCanSwitchFT", "DeathAniSeconds", "CameraLookAroundSeconds", "DeathSceneSeconds", "RemindKillerSeconds", "DeathBackSeconds", "MinRepeateKillCount", "RepeateKillInterval", "DeathRedFilterSeconds", "InvincibleBuffId", "RewardWeaponBeginTime", "RewardWeaponRepeatTime", "RewardWeaponDuration", "RespawnBuySecs", "RespawnPointCheckDisatance", "RespawnPointCdSecs", "AwardWeaponScore", "ClipMultiple", "CarriedClipMultiple", "CloseRecoil", "CloseSpread", "InfinitSubClip", "RandomMainWeapon", "SwapTeamsEnable", "SwapTeamRounds", "DefuseC4Time", "DeployBombTime", "OnPlantC4ShowFind", "ScoreType", "MaxReconnectTime", "AIEnable", "CampScoreRule", "SpawnDiscardWeapon", "BallNum", "AutoAimEnable", "AutoFireEnable", "FireCost", "GrenadeCost", "DeadNeedDropGrenade", "NoviceGuideCheckEnable", "HasSkinLastKill", "HasEnemyTitle", "HasSoundAssist", "CanRagDoll", "CanSlide", "CanClimb", "DelayTriggerWatchBattle", "HasTitleIndex", "RogueLikeBuff", "PlayMusicBoxEnable", "DynamicScene", "DiscardWeaponInitiative", "PickUpWeaponIconShow", "MiniMapSoundAssist", "TacticalActionPageIndex", "DamgeNumShowLevel", "LastRoundKillRule", "HasMoney", "HasSceneRoam", "PrepareShowHeadGUITime", "MoveSoundTriggerTIme", "FreeWeapon", "WeaponBRDecay", "LikeGroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.GameModeBaseConfig_Array), global::D11.Pbeans.GameModeBaseConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GameModeBaseConfig : pb::IMessage<GameModeBaseConfig> {
    private static readonly pb::MessageParser<GameModeBaseConfig> _parser = new pb::MessageParser<GameModeBaseConfig>(() => new GameModeBaseConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameModeBaseConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansGamemodebaseconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeBaseConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeBaseConfig(GameModeBaseConfig other) : this() {
      id_ = other.id_;
      numMatchMaxPlayers_ = other.numMatchMaxPlayers_;
      numStartMatchMinPlayers_ = other.numStartMatchMinPlayers_;
      numDefenderCampMinPlayers_ = other.numDefenderCampMinPlayers_;
      numAttackerCampMinPlayers_ = other.numAttackerCampMinPlayers_;
      matchPrepareSecs_ = other.matchPrepareSecs_;
      prePareEndType_ = other.prePareEndType_;
      warmUpSecs_ = other.warmUpSecs_;
      warmUpEndSecs_ = other.warmUpEndSecs_;
      roundPrepareSecs_ = other.roundPrepareSecs_;
      roundPrepareGrayFilterSeconds_ = other.roundPrepareGrayFilterSeconds_;
      joinMidWayExtendSecs_ = other.joinMidWayExtendSecs_;
      roundReqHelpBuyTimes_ = other.roundReqHelpBuyTimes_;
      roundBuySecs_ = other.roundBuySecs_;
      roundBuyCardSecs_ = other.roundBuyCardSecs_;
      canChangeShopCamp_ = other.canChangeShopCamp_;
      costMoney_ = other.costMoney_;
      roundInProgressSecs_ = other.roundInProgressSecs_;
      endRoundSecs_ = other.endRoundSecs_;
      swapCampSecs_ = other.swapCampSecs_;
      switchSceneSecs_ = other.switchSceneSecs_;
      endMatchSecs_ = other.endMatchSecs_;
      endMatchShowResult_ = other.endMatchShowResult_;
      endMatchResultEffect_ = other.endMatchResultEffect_;
      matchTotalSecs_ = other.matchTotalSecs_;
      connectionAFKTime_ = other.connectionAFKTime_;
      hangUpTimeOutSecs_ = other.hangUpTimeOutSecs_;
      winType_ = other.winType_;
      numTotalRounds_ = other.numTotalRounds_;
      targetScore_ = other.targetScore_;
      matchCampScoreWay_ = other.matchCampScoreWay_;
      battleLoadingWin_ = other.battleLoadingWin_;
      initHP_ = other.initHP_;
      maxHP_ = other.maxHP_;
      halfArmor_ = other.halfArmor_;
      fullArmor_ = other.fullArmor_;
      maxSpeedRate_ = other.maxSpeedRate_;
      frictionRate_ = other.frictionRate_;
      headShootOnly_ = other.headShootOnly_;
      gravityRate_ = other.gravityRate_;
      autoArmor_ = other.autoArmor_;
      allyColliderActive_ = other.allyColliderActive_;
      enemyColliderActive_ = other.enemyColliderActive_;
      hostileMode_ = other.hostileMode_;
      checkFriendDamage_ = other.checkFriendDamage_;
      grenadesCanCrossFriend_ = other.grenadesCanCrossFriend_;
      deadNeedDropWeapon_ = other.deadNeedDropWeapon_;
      projectileTotalLimit_ = other.projectileTotalLimit_;
      projectilePersonLimit_ = other.projectilePersonLimit_;
      canWatch_ = other.canWatch_;
      numMaxObserver_ = other.numMaxObserver_;
      canWatchEnemy_ = other.canWatchEnemy_;
      hasWatchNeutralChannel_ = other.hasWatchNeutralChannel_;
      watchEnemyCanOutline_ = other.watchEnemyCanOutline_;
      watchBattleCanSwitchFT_ = other.watchBattleCanSwitchFT_;
      deathAniSeconds_ = other.deathAniSeconds_;
      cameraLookAroundSeconds_ = other.cameraLookAroundSeconds_;
      deathSceneSeconds_ = other.deathSceneSeconds_;
      remindKillerSeconds_ = other.remindKillerSeconds_;
      deathBackSeconds_ = other.deathBackSeconds_;
      minRepeateKillCount_ = other.minRepeateKillCount_;
      repeateKillInterval_ = other.repeateKillInterval_;
      deathRedFilterSeconds_ = other.deathRedFilterSeconds_;
      invincibleBuffId_ = other.invincibleBuffId_;
      rewardWeaponBeginTime_ = other.rewardWeaponBeginTime_;
      rewardWeaponRepeatTime_ = other.rewardWeaponRepeatTime_;
      rewardWeaponDuration_ = other.rewardWeaponDuration_;
      respawnBuySecs_ = other.respawnBuySecs_;
      respawnPointCheckDisatance_ = other.respawnPointCheckDisatance_;
      respawnPointCdSecs_ = other.respawnPointCdSecs_;
      awardWeaponScore_ = other.awardWeaponScore_;
      clipMultiple_ = other.clipMultiple_;
      carriedClipMultiple_ = other.carriedClipMultiple_;
      closeRecoil_ = other.closeRecoil_;
      closeSpread_ = other.closeSpread_;
      infinitSubClip_ = other.infinitSubClip_;
      randomMainWeapon_ = other.randomMainWeapon_;
      swapTeamsEnable_ = other.swapTeamsEnable_;
      swapTeamRounds_ = other.swapTeamRounds_;
      defuseC4Time_ = other.defuseC4Time_;
      deployBombTime_ = other.deployBombTime_;
      onPlantC4ShowFind_ = other.onPlantC4ShowFind_;
      scoreType_ = other.scoreType_;
      maxReconnectTime_ = other.maxReconnectTime_;
      aIEnable_ = other.aIEnable_;
      campScoreRule_ = other.campScoreRule_;
      spawnDiscardWeapon_ = other.spawnDiscardWeapon_;
      ballNum_ = other.ballNum_;
      autoAimEnable_ = other.autoAimEnable_;
      autoFireEnable_ = other.autoFireEnable_;
      fireCost_ = other.fireCost_;
      grenadeCost_ = other.grenadeCost_;
      deadNeedDropGrenade_ = other.deadNeedDropGrenade_;
      noviceGuideCheckEnable_ = other.noviceGuideCheckEnable_;
      hasSkinLastKill_ = other.hasSkinLastKill_;
      hasEnemyTitle_ = other.hasEnemyTitle_;
      hasSoundAssist_ = other.hasSoundAssist_;
      canRagDoll_ = other.canRagDoll_;
      canSlide_ = other.canSlide_;
      canClimb_ = other.canClimb_;
      delayTriggerWatchBattle_ = other.delayTriggerWatchBattle_;
      hasTitleIndex_ = other.hasTitleIndex_;
      rogueLikeBuff_ = other.rogueLikeBuff_;
      playMusicBoxEnable_ = other.playMusicBoxEnable_;
      dynamicScene_ = other.dynamicScene_;
      discardWeaponInitiative_ = other.discardWeaponInitiative_;
      pickUpWeaponIconShow_ = other.pickUpWeaponIconShow_;
      miniMapSoundAssist_ = other.miniMapSoundAssist_;
      tacticalActionPageIndex_ = other.tacticalActionPageIndex_;
      damgeNumShowLevel_ = other.damgeNumShowLevel_;
      lastRoundKillRule_ = other.lastRoundKillRule_;
      hasMoney_ = other.hasMoney_;
      hasSceneRoam_ = other.hasSceneRoam_;
      prepareShowHeadGUITime_ = other.prepareShowHeadGUITime_;
      moveSoundTriggerTIme_ = other.moveSoundTriggerTIme_;
      freeWeapon_ = other.freeWeapon_;
      weaponBRDecay_ = other.weaponBRDecay_;
      likeGroupId_ = other.likeGroupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeBaseConfig Clone() {
      return new GameModeBaseConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 模式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "numMatchMaxPlayers" field.</summary>
    public const int NumMatchMaxPlayersFieldNumber = 2;
    private int numMatchMaxPlayers_;
    /// <summary>
    /// 最大人数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumMatchMaxPlayers {
      get { return numMatchMaxPlayers_; }
      set {
        numMatchMaxPlayers_ = value;
      }
    }

    /// <summary>Field number for the "numStartMatchMinPlayers" field.</summary>
    public const int NumStartMatchMinPlayersFieldNumber = 3;
    private int numStartMatchMinPlayers_;
    /// <summary>
    /// 最少人数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumStartMatchMinPlayers {
      get { return numStartMatchMinPlayers_; }
      set {
        numStartMatchMinPlayers_ = value;
      }
    }

    /// <summary>Field number for the "numDefenderCampMinPlayers" field.</summary>
    public const int NumDefenderCampMinPlayersFieldNumber = 4;
    private int numDefenderCampMinPlayers_;
    /// <summary>
    /// 防守最少人数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumDefenderCampMinPlayers {
      get { return numDefenderCampMinPlayers_; }
      set {
        numDefenderCampMinPlayers_ = value;
      }
    }

    /// <summary>Field number for the "numAttackerCampMinPlayers" field.</summary>
    public const int NumAttackerCampMinPlayersFieldNumber = 5;
    private int numAttackerCampMinPlayers_;
    /// <summary>
    /// 进攻最少人数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumAttackerCampMinPlayers {
      get { return numAttackerCampMinPlayers_; }
      set {
        numAttackerCampMinPlayers_ = value;
      }
    }

    /// <summary>Field number for the "matchPrepareSecs" field.</summary>
    public const int MatchPrepareSecsFieldNumber = 6;
    private int matchPrepareSecs_;
    /// <summary>
    /// 等待玩家加入时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatchPrepareSecs {
      get { return matchPrepareSecs_; }
      set {
        matchPrepareSecs_ = value;
      }
    }

    /// <summary>Field number for the "prePareEndType" field.</summary>
    public const int PrePareEndTypeFieldNumber = 7;
    private int prePareEndType_;
    /// <summary>
    /// 结束等待阶段方式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrePareEndType {
      get { return prePareEndType_; }
      set {
        prePareEndType_ = value;
      }
    }

    /// <summary>Field number for the "warmUpSecs" field.</summary>
    public const int WarmUpSecsFieldNumber = 8;
    private int warmUpSecs_;
    /// <summary>
    /// 热身阶段时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WarmUpSecs {
      get { return warmUpSecs_; }
      set {
        warmUpSecs_ = value;
      }
    }

    /// <summary>Field number for the "warmUpEndSecs" field.</summary>
    public const int WarmUpEndSecsFieldNumber = 9;
    private int warmUpEndSecs_;
    /// <summary>
    /// 热身结束阶段时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WarmUpEndSecs {
      get { return warmUpEndSecs_; }
      set {
        warmUpEndSecs_ = value;
      }
    }

    /// <summary>Field number for the "roundPrepareSecs" field.</summary>
    public const int RoundPrepareSecsFieldNumber = 10;
    private int roundPrepareSecs_;
    /// <summary>
    /// 回合准备时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundPrepareSecs {
      get { return roundPrepareSecs_; }
      set {
        roundPrepareSecs_ = value;
      }
    }

    /// <summary>Field number for the "roundPrepareGrayFilterSeconds" field.</summary>
    public const int RoundPrepareGrayFilterSecondsFieldNumber = 11;
    private int roundPrepareGrayFilterSeconds_;
    /// <summary>
    /// 回合准备阶段禁止移动灰屏时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundPrepareGrayFilterSeconds {
      get { return roundPrepareGrayFilterSeconds_; }
      set {
        roundPrepareGrayFilterSeconds_ = value;
      }
    }

    /// <summary>Field number for the "joinMidWayExtendSecs" field.</summary>
    public const int JoinMidWayExtendSecsFieldNumber = 12;
    private int joinMidWayExtendSecs_;
    /// <summary>
    /// 中途加入延长时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JoinMidWayExtendSecs {
      get { return joinMidWayExtendSecs_; }
      set {
        joinMidWayExtendSecs_ = value;
      }
    }

    /// <summary>Field number for the "roundReqHelpBuyTimes" field.</summary>
    public const int RoundReqHelpBuyTimesFieldNumber = 13;
    private uint roundReqHelpBuyTimes_;
    /// <summary>
    /// 回合可求购次数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoundReqHelpBuyTimes {
      get { return roundReqHelpBuyTimes_; }
      set {
        roundReqHelpBuyTimes_ = value;
      }
    }

    /// <summary>Field number for the "roundBuySecs" field.</summary>
    public const int RoundBuySecsFieldNumber = 14;
    private int roundBuySecs_;
    /// <summary>
    /// 回合购买时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundBuySecs {
      get { return roundBuySecs_; }
      set {
        roundBuySecs_ = value;
      }
    }

    /// <summary>Field number for the "roundBuyCardSecs" field.</summary>
    public const int RoundBuyCardSecsFieldNumber = 15;
    private int roundBuyCardSecs_;
    /// <summary>
    /// 回合购买卡组时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundBuyCardSecs {
      get { return roundBuyCardSecs_; }
      set {
        roundBuyCardSecs_ = value;
      }
    }

    /// <summary>Field number for the "canChangeShopCamp" field.</summary>
    public const int CanChangeShopCampFieldNumber = 16;
    private bool canChangeShopCamp_;
    /// <summary>
    /// 是否可切换购买阵营 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanChangeShopCamp {
      get { return canChangeShopCamp_; }
      set {
        canChangeShopCamp_ = value;
      }
    }

    /// <summary>Field number for the "costMoney" field.</summary>
    public const int CostMoneyFieldNumber = 17;
    private bool costMoney_;
    /// <summary>
    /// 购买是否消耗金钱 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CostMoney {
      get { return costMoney_; }
      set {
        costMoney_ = value;
      }
    }

    /// <summary>Field number for the "roundInProgressSecs" field.</summary>
    public const int RoundInProgressSecsFieldNumber = 18;
    private int roundInProgressSecs_;
    /// <summary>
    /// 回合时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundInProgressSecs {
      get { return roundInProgressSecs_; }
      set {
        roundInProgressSecs_ = value;
      }
    }

    /// <summary>Field number for the "endRoundSecs" field.</summary>
    public const int EndRoundSecsFieldNumber = 19;
    private int endRoundSecs_;
    /// <summary>
    /// 回合结束阶段时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndRoundSecs {
      get { return endRoundSecs_; }
      set {
        endRoundSecs_ = value;
      }
    }

    /// <summary>Field number for the "swapCampSecs" field.</summary>
    public const int SwapCampSecsFieldNumber = 20;
    private int swapCampSecs_;
    /// <summary>
    /// 交换阵营阶段时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SwapCampSecs {
      get { return swapCampSecs_; }
      set {
        swapCampSecs_ = value;
      }
    }

    /// <summary>Field number for the "switchSceneSecs" field.</summary>
    public const int SwitchSceneSecsFieldNumber = 21;
    private int switchSceneSecs_;
    /// <summary>
    /// 切换场景时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SwitchSceneSecs {
      get { return switchSceneSecs_; }
      set {
        switchSceneSecs_ = value;
      }
    }

    /// <summary>Field number for the "endMatchSecs" field.</summary>
    public const int EndMatchSecsFieldNumber = 22;
    private int endMatchSecs_;
    /// <summary>
    /// 结束阶段时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndMatchSecs {
      get { return endMatchSecs_; }
      set {
        endMatchSecs_ = value;
      }
    }

    /// <summary>Field number for the "endMatchShowResult" field.</summary>
    public const int EndMatchShowResultFieldNumber = 23;
    private bool endMatchShowResult_;
    /// <summary>
    /// 结束阶段结算胜负 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EndMatchShowResult {
      get { return endMatchShowResult_; }
      set {
        endMatchShowResult_ = value;
      }
    }

    /// <summary>Field number for the "endMatchResultEffect" field.</summary>
    public const int EndMatchResultEffectFieldNumber = 24;
    private uint endMatchResultEffect_;
    /// <summary>
    /// 结算显示方式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndMatchResultEffect {
      get { return endMatchResultEffect_; }
      set {
        endMatchResultEffect_ = value;
      }
    }

    /// <summary>Field number for the "matchTotalSecs" field.</summary>
    public const int MatchTotalSecsFieldNumber = 25;
    private int matchTotalSecs_;
    /// <summary>
    /// 回合总时间限制 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatchTotalSecs {
      get { return matchTotalSecs_; }
      set {
        matchTotalSecs_ = value;
      }
    }

    /// <summary>Field number for the "connectionAFKTime" field.</summary>
    public const int ConnectionAFKTimeFieldNumber = 26;
    private int connectionAFKTime_;
    /// <summary>
    /// 局内无玩家结束单局时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConnectionAFKTime {
      get { return connectionAFKTime_; }
      set {
        connectionAFKTime_ = value;
      }
    }

    /// <summary>Field number for the "hangUpTimeOutSecs" field.</summary>
    public const int HangUpTimeOutSecsFieldNumber = 27;
    private int hangUpTimeOutSecs_;
    /// <summary>
    /// 局内玩家无击杀结束单局时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HangUpTimeOutSecs {
      get { return hangUpTimeOutSecs_; }
      set {
        hangUpTimeOutSecs_ = value;
      }
    }

    /// <summary>Field number for the "WinType" field.</summary>
    public const int WinTypeFieldNumber = 28;
    private int winType_;
    /// <summary>
    /// 胜利类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinType {
      get { return winType_; }
      set {
        winType_ = value;
      }
    }

    /// <summary>Field number for the "numTotalRounds" field.</summary>
    public const int NumTotalRoundsFieldNumber = 29;
    private int numTotalRounds_;
    /// <summary>
    /// 回合数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumTotalRounds {
      get { return numTotalRounds_; }
      set {
        numTotalRounds_ = value;
      }
    }

    /// <summary>Field number for the "targetScore" field.</summary>
    public const int TargetScoreFieldNumber = 30;
    private int targetScore_;
    /// <summary>
    /// 目标分数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetScore {
      get { return targetScore_; }
      set {
        targetScore_ = value;
      }
    }

    /// <summary>Field number for the "matchCampScoreWay" field.</summary>
    public const int MatchCampScoreWayFieldNumber = 31;
    private int matchCampScoreWay_;
    /// <summary>
    /// 得分方式（2：对手死亡得分，1：杀人得分，0回合得分） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatchCampScoreWay {
      get { return matchCampScoreWay_; }
      set {
        matchCampScoreWay_ = value;
      }
    }

    /// <summary>Field number for the "BattleLoadingWin" field.</summary>
    public const int BattleLoadingWinFieldNumber = 32;
    private string battleLoadingWin_ = "";
    /// <summary>
    /// loading胜利条件说明 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattleLoadingWin {
      get { return battleLoadingWin_; }
      set {
        battleLoadingWin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "initHP" field.</summary>
    public const int InitHPFieldNumber = 33;
    private int initHP_;
    /// <summary>
    /// 初始血量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitHP {
      get { return initHP_; }
      set {
        initHP_ = value;
      }
    }

    /// <summary>Field number for the "maxHP" field.</summary>
    public const int MaxHPFieldNumber = 34;
    private int maxHP_;
    /// <summary>
    /// 最大血量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHP {
      get { return maxHP_; }
      set {
        maxHP_ = value;
      }
    }

    /// <summary>Field number for the "HalfArmor" field.</summary>
    public const int HalfArmorFieldNumber = 35;
    private int halfArmor_;
    /// <summary>
    /// 半甲护甲值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HalfArmor {
      get { return halfArmor_; }
      set {
        halfArmor_ = value;
      }
    }

    /// <summary>Field number for the "FullArmor" field.</summary>
    public const int FullArmorFieldNumber = 36;
    private int fullArmor_;
    /// <summary>
    /// 全甲护甲值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FullArmor {
      get { return fullArmor_; }
      set {
        fullArmor_ = value;
      }
    }

    /// <summary>Field number for the "maxSpeedRate" field.</summary>
    public const int MaxSpeedRateFieldNumber = 37;
    private float maxSpeedRate_;
    /// <summary>
    ///  最大速度系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxSpeedRate {
      get { return maxSpeedRate_; }
      set {
        maxSpeedRate_ = value;
      }
    }

    /// <summary>Field number for the "frictionRate" field.</summary>
    public const int FrictionRateFieldNumber = 38;
    private float frictionRate_;
    /// <summary>
    ///  摩擦力倍数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FrictionRate {
      get { return frictionRate_; }
      set {
        frictionRate_ = value;
      }
    }

    /// <summary>Field number for the "headShootOnly" field.</summary>
    public const int HeadShootOnlyFieldNumber = 39;
    private bool headShootOnly_;
    /// <summary>
    /// 爆头唯一伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HeadShootOnly {
      get { return headShootOnly_; }
      set {
        headShootOnly_ = value;
      }
    }

    /// <summary>Field number for the "gravityRate" field.</summary>
    public const int GravityRateFieldNumber = 40;
    private float gravityRate_;
    /// <summary>
    /// 重力倍数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GravityRate {
      get { return gravityRate_; }
      set {
        gravityRate_ = value;
      }
    }

    /// <summary>Field number for the "autoArmor" field.</summary>
    public const int AutoArmorFieldNumber = 41;
    private bool autoArmor_;
    /// <summary>
    /// 自动起甲(客户端用) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoArmor {
      get { return autoArmor_; }
      set {
        autoArmor_ = value;
      }
    }

    /// <summary>Field number for the "allyColliderActive" field.</summary>
    public const int AllyColliderActiveFieldNumber = 42;
    private bool allyColliderActive_;
    /// <summary>
    /// 开启友方碰撞 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllyColliderActive {
      get { return allyColliderActive_; }
      set {
        allyColliderActive_ = value;
      }
    }

    /// <summary>Field number for the "enemyColliderActive" field.</summary>
    public const int EnemyColliderActiveFieldNumber = 43;
    private bool enemyColliderActive_;
    /// <summary>
    /// 开启敌方碰撞 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnemyColliderActive {
      get { return enemyColliderActive_; }
      set {
        enemyColliderActive_ = value;
      }
    }

    /// <summary>Field number for the "hostileMode" field.</summary>
    public const int HostileModeFieldNumber = 44;
    private uint hostileMode_;
    /// <summary>
    /// 敌对模式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HostileMode {
      get { return hostileMode_; }
      set {
        hostileMode_ = value;
      }
    }

    /// <summary>Field number for the "checkFriendDamage" field.</summary>
    public const int CheckFriendDamageFieldNumber = 45;
    private bool checkFriendDamage_;
    /// <summary>
    /// 是否检测队友伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CheckFriendDamage {
      get { return checkFriendDamage_; }
      set {
        checkFriendDamage_ = value;
      }
    }

    /// <summary>Field number for the "grenadesCanCrossFriend" field.</summary>
    public const int GrenadesCanCrossFriendFieldNumber = 46;
    private bool grenadesCanCrossFriend_;
    /// <summary>
    /// 雷是否可以穿过队友 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GrenadesCanCrossFriend {
      get { return grenadesCanCrossFriend_; }
      set {
        grenadesCanCrossFriend_ = value;
      }
    }

    /// <summary>Field number for the "deadNeedDropWeapon" field.</summary>
    public const int DeadNeedDropWeaponFieldNumber = 47;
    private bool deadNeedDropWeapon_;
    /// <summary>
    /// 死亡之后需要丢武器吗 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeadNeedDropWeapon {
      get { return deadNeedDropWeapon_; }
      set {
        deadNeedDropWeapon_ = value;
      }
    }

    /// <summary>Field number for the "projectileTotalLimit" field.</summary>
    public const int ProjectileTotalLimitFieldNumber = 48;
    private int projectileTotalLimit_;
    /// <summary>
    /// 所有玩家武器丢弃的总数量限制 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProjectileTotalLimit {
      get { return projectileTotalLimit_; }
      set {
        projectileTotalLimit_ = value;
      }
    }

    /// <summary>Field number for the "projectilePersonLimit" field.</summary>
    public const int ProjectilePersonLimitFieldNumber = 49;
    private int projectilePersonLimit_;
    /// <summary>
    /// 单个玩家武器丢弃的数量限制 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProjectilePersonLimit {
      get { return projectilePersonLimit_; }
      set {
        projectilePersonLimit_ = value;
      }
    }

    /// <summary>Field number for the "canWatch" field.</summary>
    public const int CanWatchFieldNumber = 50;
    private bool canWatch_;
    /// <summary>
    /// 是否可以死亡观战 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanWatch {
      get { return canWatch_; }
      set {
        canWatch_ = value;
      }
    }

    /// <summary>Field number for the "numMaxObserver" field.</summary>
    public const int NumMaxObserverFieldNumber = 51;
    private int numMaxObserver_;
    /// <summary>
    /// 最大ob观战人数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumMaxObserver {
      get { return numMaxObserver_; }
      set {
        numMaxObserver_ = value;
      }
    }

    /// <summary>Field number for the "canWatchEnemy" field.</summary>
    public const int CanWatchEnemyFieldNumber = 52;
    private bool canWatchEnemy_;
    /// <summary>
    /// 是否可以观战敌人 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanWatchEnemy {
      get { return canWatchEnemy_; }
      set {
        canWatchEnemy_ = value;
      }
    }

    /// <summary>Field number for the "hasWatchNeutralChannel" field.</summary>
    public const int HasWatchNeutralChannelFieldNumber = 53;
    private bool hasWatchNeutralChannel_;
    /// <summary>
    /// 是否有观战中立频道 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWatchNeutralChannel {
      get { return hasWatchNeutralChannel_; }
      set {
        hasWatchNeutralChannel_ = value;
      }
    }

    /// <summary>Field number for the "watchEnemyCanOutline" field.</summary>
    public const int WatchEnemyCanOutlineFieldNumber = 54;
    private bool watchEnemyCanOutline_;
    /// <summary>
    /// 观战时，敌人是否可以有描边 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WatchEnemyCanOutline {
      get { return watchEnemyCanOutline_; }
      set {
        watchEnemyCanOutline_ = value;
      }
    }

    /// <summary>Field number for the "watchBattleCanSwitchFT" field.</summary>
    public const int WatchBattleCanSwitchFTFieldNumber = 55;
    private bool watchBattleCanSwitchFT_;
    /// <summary>
    /// 观战时，能否切换TP和FP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WatchBattleCanSwitchFT {
      get { return watchBattleCanSwitchFT_; }
      set {
        watchBattleCanSwitchFT_ = value;
      }
    }

    /// <summary>Field number for the "deathAniSeconds" field.</summary>
    public const int DeathAniSecondsFieldNumber = 56;
    private float deathAniSeconds_;
    /// <summary>
    /// 死亡动作用时多少秒(人物动作) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeathAniSeconds {
      get { return deathAniSeconds_; }
      set {
        deathAniSeconds_ = value;
      }
    }

    /// <summary>Field number for the "cameraLookAroundSeconds" field.</summary>
    public const int CameraLookAroundSecondsFieldNumber = 57;
    private float cameraLookAroundSeconds_;
    /// <summary>
    /// 镜头旋转到敌人时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CameraLookAroundSeconds {
      get { return cameraLookAroundSeconds_; }
      set {
        cameraLookAroundSeconds_ = value;
      }
    }

    /// <summary>Field number for the "deathSceneSeconds" field.</summary>
    public const int DeathSceneSecondsFieldNumber = 58;
    private float deathSceneSeconds_;
    /// <summary>
    /// 镜头跟随敌人时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeathSceneSeconds {
      get { return deathSceneSeconds_; }
      set {
        deathSceneSeconds_ = value;
      }
    }

    /// <summary>Field number for the "remindKillerSeconds" field.</summary>
    public const int RemindKillerSecondsFieldNumber = 59;
    private float remindKillerSeconds_;
    /// <summary>
    /// 镜头保持不动时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RemindKillerSeconds {
      get { return remindKillerSeconds_; }
      set {
        remindKillerSeconds_ = value;
      }
    }

    /// <summary>Field number for the "deathBackSeconds" field.</summary>
    public const int DeathBackSecondsFieldNumber = 60;
    private float deathBackSeconds_;
    /// <summary>
    /// 死亡回放用时多少秒(击杀过程回放) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeathBackSeconds {
      get { return deathBackSeconds_; }
      set {
        deathBackSeconds_ = value;
      }
    }

    /// <summary>Field number for the "minRepeateKillCount" field.</summary>
    public const int MinRepeateKillCountFieldNumber = 61;
    private int minRepeateKillCount_;
    /// <summary>
    /// 最少的连续击杀起报数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinRepeateKillCount {
      get { return minRepeateKillCount_; }
      set {
        minRepeateKillCount_ = value;
      }
    }

    /// <summary>Field number for the "repeateKillInterval" field.</summary>
    public const int RepeateKillIntervalFieldNumber = 62;
    private float repeateKillInterval_;
    /// <summary>
    /// 连续击杀时间间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RepeateKillInterval {
      get { return repeateKillInterval_; }
      set {
        repeateKillInterval_ = value;
      }
    }

    /// <summary>Field number for the "deathRedFilterSeconds" field.</summary>
    public const int DeathRedFilterSecondsFieldNumber = 63;
    private float deathRedFilterSeconds_;
    /// <summary>
    /// 死亡后画面变红多少秒 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeathRedFilterSeconds {
      get { return deathRedFilterSeconds_; }
      set {
        deathRedFilterSeconds_ = value;
      }
    }

    /// <summary>Field number for the "invincibleBuffId" field.</summary>
    public const int InvincibleBuffIdFieldNumber = 64;
    private uint invincibleBuffId_;
    /// <summary>
    /// 无敌buffId 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InvincibleBuffId {
      get { return invincibleBuffId_; }
      set {
        invincibleBuffId_ = value;
      }
    }

    /// <summary>Field number for the "rewardWeaponBeginTime" field.</summary>
    public const int RewardWeaponBeginTimeFieldNumber = 65;
    private float rewardWeaponBeginTime_;
    /// <summary>
    /// 奖励武器初始推荐时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RewardWeaponBeginTime {
      get { return rewardWeaponBeginTime_; }
      set {
        rewardWeaponBeginTime_ = value;
      }
    }

    /// <summary>Field number for the "rewardWeaponRepeatTime" field.</summary>
    public const int RewardWeaponRepeatTimeFieldNumber = 66;
    private float rewardWeaponRepeatTime_;
    /// <summary>
    /// 奖励武器推荐刷新时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RewardWeaponRepeatTime {
      get { return rewardWeaponRepeatTime_; }
      set {
        rewardWeaponRepeatTime_ = value;
      }
    }

    /// <summary>Field number for the "rewardWeaponDuration" field.</summary>
    public const int RewardWeaponDurationFieldNumber = 67;
    private float rewardWeaponDuration_;
    /// <summary>
    /// 奖励武器推荐持续时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RewardWeaponDuration {
      get { return rewardWeaponDuration_; }
      set {
        rewardWeaponDuration_ = value;
      }
    }

    /// <summary>Field number for the "respawnBuySecs" field.</summary>
    public const int RespawnBuySecsFieldNumber = 68;
    private int respawnBuySecs_;
    /// <summary>
    /// 死斗复活购买时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RespawnBuySecs {
      get { return respawnBuySecs_; }
      set {
        respawnBuySecs_ = value;
      }
    }

    /// <summary>Field number for the "respawnPointCheckDisatance" field.</summary>
    public const int RespawnPointCheckDisatanceFieldNumber = 69;
    private float respawnPointCheckDisatance_;
    /// <summary>
    /// 复活检测范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RespawnPointCheckDisatance {
      get { return respawnPointCheckDisatance_; }
      set {
        respawnPointCheckDisatance_ = value;
      }
    }

    /// <summary>Field number for the "respawnPointCdSecs" field.</summary>
    public const int RespawnPointCdSecsFieldNumber = 70;
    private int respawnPointCdSecs_;
    /// <summary>
    /// 复活点CD 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RespawnPointCdSecs {
      get { return respawnPointCdSecs_; }
      set {
        respawnPointCdSecs_ = value;
      }
    }

    /// <summary>Field number for the "awardWeaponScore" field.</summary>
    public const int AwardWeaponScoreFieldNumber = 71;
    private int awardWeaponScore_;
    /// <summary>
    /// 奖励武器额外奖励积分 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AwardWeaponScore {
      get { return awardWeaponScore_; }
      set {
        awardWeaponScore_ = value;
      }
    }

    /// <summary>Field number for the "ClipMultiple" field.</summary>
    public const int ClipMultipleFieldNumber = 72;
    private int clipMultiple_;
    /// <summary>
    /// 主弹夹系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClipMultiple {
      get { return clipMultiple_; }
      set {
        clipMultiple_ = value;
      }
    }

    /// <summary>Field number for the "CarriedClipMultiple" field.</summary>
    public const int CarriedClipMultipleFieldNumber = 73;
    private int carriedClipMultiple_;
    /// <summary>
    /// 副弹夹系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CarriedClipMultiple {
      get { return carriedClipMultiple_; }
      set {
        carriedClipMultiple_ = value;
      }
    }

    /// <summary>Field number for the "CloseRecoil" field.</summary>
    public const int CloseRecoilFieldNumber = 74;
    private bool closeRecoil_;
    /// <summary>
    /// 关闭后坐力 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CloseRecoil {
      get { return closeRecoil_; }
      set {
        closeRecoil_ = value;
      }
    }

    /// <summary>Field number for the "CloseSpread" field.</summary>
    public const int CloseSpreadFieldNumber = 75;
    private bool closeSpread_;
    /// <summary>
    /// 关闭散发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CloseSpread {
      get { return closeSpread_; }
      set {
        closeSpread_ = value;
      }
    }

    /// <summary>Field number for the "InfinitSubClip" field.</summary>
    public const int InfinitSubClipFieldNumber = 76;
    private bool infinitSubClip_;
    /// <summary>
    /// 无限副弹夹 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InfinitSubClip {
      get { return infinitSubClip_; }
      set {
        infinitSubClip_ = value;
      }
    }

    /// <summary>Field number for the "randomMainWeapon" field.</summary>
    public const int RandomMainWeaponFieldNumber = 77;
    private bool randomMainWeapon_;
    /// <summary>
    /// 进入游戏时随机主武器开关 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RandomMainWeapon {
      get { return randomMainWeapon_; }
      set {
        randomMainWeapon_ = value;
      }
    }

    /// <summary>Field number for the "SwapTeamsEnable" field.</summary>
    public const int SwapTeamsEnableFieldNumber = 78;
    private bool swapTeamsEnable_;
    /// <summary>
    /// 交换阵营开关 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SwapTeamsEnable {
      get { return swapTeamsEnable_; }
      set {
        swapTeamsEnable_ = value;
      }
    }

    /// <summary>Field number for the "SwapTeamRounds" field.</summary>
    public const int SwapTeamRoundsFieldNumber = 79;
    private int swapTeamRounds_;
    /// <summary>
    /// 交换阵营回合数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SwapTeamRounds {
      get { return swapTeamRounds_; }
      set {
        swapTeamRounds_ = value;
      }
    }

    /// <summary>Field number for the "DefuseC4Time" field.</summary>
    public const int DefuseC4TimeFieldNumber = 80;
    private float defuseC4Time_;
    /// <summary>
    /// 拆弹时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefuseC4Time {
      get { return defuseC4Time_; }
      set {
        defuseC4Time_ = value;
      }
    }

    /// <summary>Field number for the "DeployBombTime" field.</summary>
    public const int DeployBombTimeFieldNumber = 81;
    private float deployBombTime_;
    /// <summary>
    /// 安装时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeployBombTime {
      get { return deployBombTime_; }
      set {
        deployBombTime_ = value;
      }
    }

    /// <summary>Field number for the "OnPlantC4ShowFind" field.</summary>
    public const int OnPlantC4ShowFindFieldNumber = 82;
    private bool onPlantC4ShowFind_;
    /// <summary>
    /// C4下包的时候警显示发现包点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnPlantC4ShowFind {
      get { return onPlantC4ShowFind_; }
      set {
        onPlantC4ShowFind_ = value;
      }
    }

    /// <summary>Field number for the "scoreType" field.</summary>
    public const int ScoreTypeFieldNumber = 83;
    private int scoreType_;
    /// <summary>
    /// 计分规则 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScoreType {
      get { return scoreType_; }
      set {
        scoreType_ = value;
      }
    }

    /// <summary>Field number for the "MaxReconnectTime" field.</summary>
    public const int MaxReconnectTimeFieldNumber = 84;
    private int maxReconnectTime_;
    /// <summary>
    /// 允许重连最大时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxReconnectTime {
      get { return maxReconnectTime_; }
      set {
        maxReconnectTime_ = value;
      }
    }

    /// <summary>Field number for the "AIEnable" field.</summary>
    public const int AIEnableFieldNumber = 85;
    private bool aIEnable_;
    /// <summary>
    /// AI开关 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AIEnable {
      get { return aIEnable_; }
      set {
        aIEnable_ = value;
      }
    }

    /// <summary>Field number for the "CampScoreRule" field.</summary>
    public const int CampScoreRuleFieldNumber = 86;
    private int campScoreRule_;
    /// <summary>
    /// 阵营积分规则 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CampScoreRule {
      get { return campScoreRule_; }
      set {
        campScoreRule_ = value;
      }
    }

    /// <summary>Field number for the "SpawnDiscardWeapon" field.</summary>
    public const int SpawnDiscardWeaponFieldNumber = 87;
    private bool spawnDiscardWeapon_;
    /// <summary>
    /// 生成丢弃的武器可捡拾物 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpawnDiscardWeapon {
      get { return spawnDiscardWeapon_; }
      set {
        spawnDiscardWeapon_ = value;
      }
    }

    /// <summary>Field number for the "BallNum" field.</summary>
    public const int BallNumFieldNumber = 88;
    private int ballNum_;
    /// <summary>
    /// 跟踪球数量（先暂存后面模式看是不是开新表） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BallNum {
      get { return ballNum_; }
      set {
        ballNum_ = value;
      }
    }

    /// <summary>Field number for the "AutoAimEnable" field.</summary>
    public const int AutoAimEnableFieldNumber = 89;
    private bool autoAimEnable_;
    /// <summary>
    /// 辅助瞄准是否生效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoAimEnable {
      get { return autoAimEnable_; }
      set {
        autoAimEnable_ = value;
      }
    }

    /// <summary>Field number for the "AutoFireEnable" field.</summary>
    public const int AutoFireEnableFieldNumber = 90;
    private uint autoFireEnable_;
    /// <summary>
    /// 是否能够自动开火(012分别为不可/可开/默认开) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AutoFireEnable {
      get { return autoFireEnable_; }
      set {
        autoFireEnable_ = value;
      }
    }

    /// <summary>Field number for the "FireCost" field.</summary>
    public const int FireCostFieldNumber = 91;
    private bool fireCost_;
    /// <summary>
    /// 开火是否消耗弹药 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FireCost {
      get { return fireCost_; }
      set {
        fireCost_ = value;
      }
    }

    /// <summary>Field number for the "GrenadeCost" field.</summary>
    public const int GrenadeCostFieldNumber = 92;
    private bool grenadeCost_;
    /// <summary>
    /// 投掷物是否消耗弹药 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GrenadeCost {
      get { return grenadeCost_; }
      set {
        grenadeCost_ = value;
      }
    }

    /// <summary>Field number for the "deadNeedDropGrenade" field.</summary>
    public const int DeadNeedDropGrenadeFieldNumber = 93;
    private bool deadNeedDropGrenade_;
    /// <summary>
    /// 死亡之后需要丢投掷物吗 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeadNeedDropGrenade {
      get { return deadNeedDropGrenade_; }
      set {
        deadNeedDropGrenade_ = value;
      }
    }

    /// <summary>Field number for the "NoviceGuideCheckEnable" field.</summary>
    public const int NoviceGuideCheckEnableFieldNumber = 94;
    private bool noviceGuideCheckEnable_;
    /// <summary>
    /// 新手引导检测开关 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoviceGuideCheckEnable {
      get { return noviceGuideCheckEnable_; }
      set {
        noviceGuideCheckEnable_ = value;
      }
    }

    /// <summary>Field number for the "HasSkinLastKill" field.</summary>
    public const int HasSkinLastKillFieldNumber = 95;
    private bool hasSkinLastKill_;
    /// <summary>
    /// 是否有皮肤枪击杀特效功能 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSkinLastKill {
      get { return hasSkinLastKill_; }
      set {
        hasSkinLastKill_ = value;
      }
    }

    /// <summary>Field number for the "HasEnemyTitle" field.</summary>
    public const int HasEnemyTitleFieldNumber = 96;
    private bool hasEnemyTitle_;
    /// <summary>
    /// 是否有准心瞄准敌人名字UI 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEnemyTitle {
      get { return hasEnemyTitle_; }
      set {
        hasEnemyTitle_ = value;
      }
    }

    /// <summary>Field number for the "HasSoundAssist" field.</summary>
    public const int HasSoundAssistFieldNumber = 97;
    private bool hasSoundAssist_;
    /// <summary>
    /// 开启声源可视化 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSoundAssist {
      get { return hasSoundAssist_; }
      set {
        hasSoundAssist_ = value;
      }
    }

    /// <summary>Field number for the "canRagDoll" field.</summary>
    public const int CanRagDollFieldNumber = 98;
    private bool canRagDoll_;
    /// <summary>
    /// 允许布娃娃 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanRagDoll {
      get { return canRagDoll_; }
      set {
        canRagDoll_ = value;
      }
    }

    /// <summary>Field number for the "CanSlide" field.</summary>
    public const int CanSlideFieldNumber = 99;
    private bool canSlide_;
    /// <summary>
    /// 允许滑铲 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanSlide {
      get { return canSlide_; }
      set {
        canSlide_ = value;
      }
    }

    /// <summary>Field number for the "CanClimb" field.</summary>
    public const int CanClimbFieldNumber = 100;
    private bool canClimb_;
    /// <summary>
    /// 允许攀爬 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanClimb {
      get { return canClimb_; }
      set {
        canClimb_ = value;
      }
    }

    /// <summary>Field number for the "DelayTriggerWatchBattle" field.</summary>
    public const int DelayTriggerWatchBattleFieldNumber = 101;
    private bool delayTriggerWatchBattle_;
    /// <summary>
    /// 延迟触发观战系统，如PVE复活选择 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DelayTriggerWatchBattle {
      get { return delayTriggerWatchBattle_; }
      set {
        delayTriggerWatchBattle_ = value;
      }
    }

    /// <summary>Field number for the "HasTitleIndex" field.</summary>
    public const int HasTitleIndexFieldNumber = 102;
    private bool hasTitleIndex_;
    /// <summary>
    /// 是否有队友编号UI 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTitleIndex {
      get { return hasTitleIndex_; }
      set {
        hasTitleIndex_ = value;
      }
    }

    /// <summary>Field number for the "RogueLikeBuff" field.</summary>
    public const int RogueLikeBuffFieldNumber = 103;
    private bool rogueLikeBuff_;
    /// <summary>
    /// RLBuff系统是否开启 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RogueLikeBuff {
      get { return rogueLikeBuff_; }
      set {
        rogueLikeBuff_ = value;
      }
    }

    /// <summary>Field number for the "PlayMusicBoxEnable" field.</summary>
    public const int PlayMusicBoxEnableFieldNumber = 104;
    private bool playMusicBoxEnable_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PlayMusicBoxEnable {
      get { return playMusicBoxEnable_; }
      set {
        playMusicBoxEnable_ = value;
      }
    }

    /// <summary>Field number for the "DynamicScene" field.</summary>
    public const int DynamicSceneFieldNumber = 105;
    private bool dynamicScene_;
    /// <summary>
    /// 动态加载场景模式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DynamicScene {
      get { return dynamicScene_; }
      set {
        dynamicScene_ = value;
      }
    }

    /// <summary>Field number for the "DiscardWeaponInitiative" field.</summary>
    public const int DiscardWeaponInitiativeFieldNumber = 106;
    private bool discardWeaponInitiative_;
    /// <summary>
    /// 主动丢弃武器 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DiscardWeaponInitiative {
      get { return discardWeaponInitiative_; }
      set {
        discardWeaponInitiative_ = value;
      }
    }

    /// <summary>Field number for the "PickUpWeaponIconShow" field.</summary>
    public const int PickUpWeaponIconShowFieldNumber = 107;
    private bool pickUpWeaponIconShow_;
    /// <summary>
    /// 武器失去物显示头顶图标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PickUpWeaponIconShow {
      get { return pickUpWeaponIconShow_; }
      set {
        pickUpWeaponIconShow_ = value;
      }
    }

    /// <summary>Field number for the "MiniMapSoundAssist" field.</summary>
    public const int MiniMapSoundAssistFieldNumber = 108;
    private bool miniMapSoundAssist_;
    /// <summary>
    /// 小地图的声源可视化 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MiniMapSoundAssist {
      get { return miniMapSoundAssist_; }
      set {
        miniMapSoundAssist_ = value;
      }
    }

    /// <summary>Field number for the "TacticalActionPageIndex" field.</summary>
    public const int TacticalActionPageIndexFieldNumber = 109;
    private uint tacticalActionPageIndex_;
    /// <summary>
    /// 战术标记模式页码下标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TacticalActionPageIndex {
      get { return tacticalActionPageIndex_; }
      set {
        tacticalActionPageIndex_ = value;
      }
    }

    /// <summary>Field number for the "DamgeNumShowLevel" field.</summary>
    public const int DamgeNumShowLevelFieldNumber = 110;
    private int damgeNumShowLevel_;
    /// <summary>
    /// 伤害数字表现等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamgeNumShowLevel {
      get { return damgeNumShowLevel_; }
      set {
        damgeNumShowLevel_ = value;
      }
    }

    /// <summary>Field number for the "LastRoundKillRule" field.</summary>
    public const int LastRoundKillRuleFieldNumber = 111;
    private int lastRoundKillRule_;
    /// <summary>
    /// 最后一击规则 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastRoundKillRule {
      get { return lastRoundKillRule_; }
      set {
        lastRoundKillRule_ = value;
      }
    }

    /// <summary>Field number for the "HasMoney" field.</summary>
    public const int HasMoneyFieldNumber = 112;
    private bool hasMoney_;
    /// <summary>
    /// 是否有金币 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMoney {
      get { return hasMoney_; }
      set {
        hasMoney_ = value;
      }
    }

    /// <summary>Field number for the "HasSceneRoam" field.</summary>
    public const int HasSceneRoamFieldNumber = 113;
    private bool hasSceneRoam_;
    /// <summary>
    /// 等待玩家阶段是否有开场场景漫游 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSceneRoam {
      get { return hasSceneRoam_; }
      set {
        hasSceneRoam_ = value;
      }
    }

    /// <summary>Field number for the "PrepareShowHeadGUITime" field.</summary>
    public const int PrepareShowHeadGUITimeFieldNumber = 114;
    private int prepareShowHeadGUITime_;
    /// <summary>
    /// 开局头顶GUI显示时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrepareShowHeadGUITime {
      get { return prepareShowHeadGUITime_; }
      set {
        prepareShowHeadGUITime_ = value;
      }
    }

    /// <summary>Field number for the "MoveSoundTriggerTIme" field.</summary>
    public const int MoveSoundTriggerTImeFieldNumber = 115;
    private float moveSoundTriggerTIme_;
    /// <summary>
    /// 移动多久才出现声音 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveSoundTriggerTIme {
      get { return moveSoundTriggerTIme_; }
      set {
        moveSoundTriggerTIme_ = value;
      }
    }

    /// <summary>Field number for the "FreeWeapon" field.</summary>
    public const int FreeWeaponFieldNumber = 116;
    private bool freeWeapon_;
    /// <summary>
    /// 武器使用BR双武器 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FreeWeapon {
      get { return freeWeapon_; }
      set {
        freeWeapon_ = value;
      }
    }

    /// <summary>Field number for the "WeaponBRDecay" field.</summary>
    public const int WeaponBRDecayFieldNumber = 117;
    private bool weaponBRDecay_;
    /// <summary>
    /// 武器使用特殊的衰减数据 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WeaponBRDecay {
      get { return weaponBRDecay_; }
      set {
        weaponBRDecay_ = value;
      }
    }

    /// <summary>Field number for the "LikeGroupId" field.</summary>
    public const int LikeGroupIdFieldNumber = 118;
    private int likeGroupId_;
    /// <summary>
    /// 点赞组ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LikeGroupId {
      get { return likeGroupId_; }
      set {
        likeGroupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameModeBaseConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameModeBaseConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (NumMatchMaxPlayers != other.NumMatchMaxPlayers) return false;
      if (NumStartMatchMinPlayers != other.NumStartMatchMinPlayers) return false;
      if (NumDefenderCampMinPlayers != other.NumDefenderCampMinPlayers) return false;
      if (NumAttackerCampMinPlayers != other.NumAttackerCampMinPlayers) return false;
      if (MatchPrepareSecs != other.MatchPrepareSecs) return false;
      if (PrePareEndType != other.PrePareEndType) return false;
      if (WarmUpSecs != other.WarmUpSecs) return false;
      if (WarmUpEndSecs != other.WarmUpEndSecs) return false;
      if (RoundPrepareSecs != other.RoundPrepareSecs) return false;
      if (RoundPrepareGrayFilterSeconds != other.RoundPrepareGrayFilterSeconds) return false;
      if (JoinMidWayExtendSecs != other.JoinMidWayExtendSecs) return false;
      if (RoundReqHelpBuyTimes != other.RoundReqHelpBuyTimes) return false;
      if (RoundBuySecs != other.RoundBuySecs) return false;
      if (RoundBuyCardSecs != other.RoundBuyCardSecs) return false;
      if (CanChangeShopCamp != other.CanChangeShopCamp) return false;
      if (CostMoney != other.CostMoney) return false;
      if (RoundInProgressSecs != other.RoundInProgressSecs) return false;
      if (EndRoundSecs != other.EndRoundSecs) return false;
      if (SwapCampSecs != other.SwapCampSecs) return false;
      if (SwitchSceneSecs != other.SwitchSceneSecs) return false;
      if (EndMatchSecs != other.EndMatchSecs) return false;
      if (EndMatchShowResult != other.EndMatchShowResult) return false;
      if (EndMatchResultEffect != other.EndMatchResultEffect) return false;
      if (MatchTotalSecs != other.MatchTotalSecs) return false;
      if (ConnectionAFKTime != other.ConnectionAFKTime) return false;
      if (HangUpTimeOutSecs != other.HangUpTimeOutSecs) return false;
      if (WinType != other.WinType) return false;
      if (NumTotalRounds != other.NumTotalRounds) return false;
      if (TargetScore != other.TargetScore) return false;
      if (MatchCampScoreWay != other.MatchCampScoreWay) return false;
      if (BattleLoadingWin != other.BattleLoadingWin) return false;
      if (InitHP != other.InitHP) return false;
      if (MaxHP != other.MaxHP) return false;
      if (HalfArmor != other.HalfArmor) return false;
      if (FullArmor != other.FullArmor) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSpeedRate, other.MaxSpeedRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FrictionRate, other.FrictionRate)) return false;
      if (HeadShootOnly != other.HeadShootOnly) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GravityRate, other.GravityRate)) return false;
      if (AutoArmor != other.AutoArmor) return false;
      if (AllyColliderActive != other.AllyColliderActive) return false;
      if (EnemyColliderActive != other.EnemyColliderActive) return false;
      if (HostileMode != other.HostileMode) return false;
      if (CheckFriendDamage != other.CheckFriendDamage) return false;
      if (GrenadesCanCrossFriend != other.GrenadesCanCrossFriend) return false;
      if (DeadNeedDropWeapon != other.DeadNeedDropWeapon) return false;
      if (ProjectileTotalLimit != other.ProjectileTotalLimit) return false;
      if (ProjectilePersonLimit != other.ProjectilePersonLimit) return false;
      if (CanWatch != other.CanWatch) return false;
      if (NumMaxObserver != other.NumMaxObserver) return false;
      if (CanWatchEnemy != other.CanWatchEnemy) return false;
      if (HasWatchNeutralChannel != other.HasWatchNeutralChannel) return false;
      if (WatchEnemyCanOutline != other.WatchEnemyCanOutline) return false;
      if (WatchBattleCanSwitchFT != other.WatchBattleCanSwitchFT) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeathAniSeconds, other.DeathAniSeconds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CameraLookAroundSeconds, other.CameraLookAroundSeconds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeathSceneSeconds, other.DeathSceneSeconds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RemindKillerSeconds, other.RemindKillerSeconds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeathBackSeconds, other.DeathBackSeconds)) return false;
      if (MinRepeateKillCount != other.MinRepeateKillCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RepeateKillInterval, other.RepeateKillInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeathRedFilterSeconds, other.DeathRedFilterSeconds)) return false;
      if (InvincibleBuffId != other.InvincibleBuffId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RewardWeaponBeginTime, other.RewardWeaponBeginTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RewardWeaponRepeatTime, other.RewardWeaponRepeatTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RewardWeaponDuration, other.RewardWeaponDuration)) return false;
      if (RespawnBuySecs != other.RespawnBuySecs) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RespawnPointCheckDisatance, other.RespawnPointCheckDisatance)) return false;
      if (RespawnPointCdSecs != other.RespawnPointCdSecs) return false;
      if (AwardWeaponScore != other.AwardWeaponScore) return false;
      if (ClipMultiple != other.ClipMultiple) return false;
      if (CarriedClipMultiple != other.CarriedClipMultiple) return false;
      if (CloseRecoil != other.CloseRecoil) return false;
      if (CloseSpread != other.CloseSpread) return false;
      if (InfinitSubClip != other.InfinitSubClip) return false;
      if (RandomMainWeapon != other.RandomMainWeapon) return false;
      if (SwapTeamsEnable != other.SwapTeamsEnable) return false;
      if (SwapTeamRounds != other.SwapTeamRounds) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefuseC4Time, other.DefuseC4Time)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeployBombTime, other.DeployBombTime)) return false;
      if (OnPlantC4ShowFind != other.OnPlantC4ShowFind) return false;
      if (ScoreType != other.ScoreType) return false;
      if (MaxReconnectTime != other.MaxReconnectTime) return false;
      if (AIEnable != other.AIEnable) return false;
      if (CampScoreRule != other.CampScoreRule) return false;
      if (SpawnDiscardWeapon != other.SpawnDiscardWeapon) return false;
      if (BallNum != other.BallNum) return false;
      if (AutoAimEnable != other.AutoAimEnable) return false;
      if (AutoFireEnable != other.AutoFireEnable) return false;
      if (FireCost != other.FireCost) return false;
      if (GrenadeCost != other.GrenadeCost) return false;
      if (DeadNeedDropGrenade != other.DeadNeedDropGrenade) return false;
      if (NoviceGuideCheckEnable != other.NoviceGuideCheckEnable) return false;
      if (HasSkinLastKill != other.HasSkinLastKill) return false;
      if (HasEnemyTitle != other.HasEnemyTitle) return false;
      if (HasSoundAssist != other.HasSoundAssist) return false;
      if (CanRagDoll != other.CanRagDoll) return false;
      if (CanSlide != other.CanSlide) return false;
      if (CanClimb != other.CanClimb) return false;
      if (DelayTriggerWatchBattle != other.DelayTriggerWatchBattle) return false;
      if (HasTitleIndex != other.HasTitleIndex) return false;
      if (RogueLikeBuff != other.RogueLikeBuff) return false;
      if (PlayMusicBoxEnable != other.PlayMusicBoxEnable) return false;
      if (DynamicScene != other.DynamicScene) return false;
      if (DiscardWeaponInitiative != other.DiscardWeaponInitiative) return false;
      if (PickUpWeaponIconShow != other.PickUpWeaponIconShow) return false;
      if (MiniMapSoundAssist != other.MiniMapSoundAssist) return false;
      if (TacticalActionPageIndex != other.TacticalActionPageIndex) return false;
      if (DamgeNumShowLevel != other.DamgeNumShowLevel) return false;
      if (LastRoundKillRule != other.LastRoundKillRule) return false;
      if (HasMoney != other.HasMoney) return false;
      if (HasSceneRoam != other.HasSceneRoam) return false;
      if (PrepareShowHeadGUITime != other.PrepareShowHeadGUITime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveSoundTriggerTIme, other.MoveSoundTriggerTIme)) return false;
      if (FreeWeapon != other.FreeWeapon) return false;
      if (WeaponBRDecay != other.WeaponBRDecay) return false;
      if (LikeGroupId != other.LikeGroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (NumMatchMaxPlayers != 0) hash ^= NumMatchMaxPlayers.GetHashCode();
      if (NumStartMatchMinPlayers != 0) hash ^= NumStartMatchMinPlayers.GetHashCode();
      if (NumDefenderCampMinPlayers != 0) hash ^= NumDefenderCampMinPlayers.GetHashCode();
      if (NumAttackerCampMinPlayers != 0) hash ^= NumAttackerCampMinPlayers.GetHashCode();
      if (MatchPrepareSecs != 0) hash ^= MatchPrepareSecs.GetHashCode();
      if (PrePareEndType != 0) hash ^= PrePareEndType.GetHashCode();
      if (WarmUpSecs != 0) hash ^= WarmUpSecs.GetHashCode();
      if (WarmUpEndSecs != 0) hash ^= WarmUpEndSecs.GetHashCode();
      if (RoundPrepareSecs != 0) hash ^= RoundPrepareSecs.GetHashCode();
      if (RoundPrepareGrayFilterSeconds != 0) hash ^= RoundPrepareGrayFilterSeconds.GetHashCode();
      if (JoinMidWayExtendSecs != 0) hash ^= JoinMidWayExtendSecs.GetHashCode();
      if (RoundReqHelpBuyTimes != 0) hash ^= RoundReqHelpBuyTimes.GetHashCode();
      if (RoundBuySecs != 0) hash ^= RoundBuySecs.GetHashCode();
      if (RoundBuyCardSecs != 0) hash ^= RoundBuyCardSecs.GetHashCode();
      if (CanChangeShopCamp != false) hash ^= CanChangeShopCamp.GetHashCode();
      if (CostMoney != false) hash ^= CostMoney.GetHashCode();
      if (RoundInProgressSecs != 0) hash ^= RoundInProgressSecs.GetHashCode();
      if (EndRoundSecs != 0) hash ^= EndRoundSecs.GetHashCode();
      if (SwapCampSecs != 0) hash ^= SwapCampSecs.GetHashCode();
      if (SwitchSceneSecs != 0) hash ^= SwitchSceneSecs.GetHashCode();
      if (EndMatchSecs != 0) hash ^= EndMatchSecs.GetHashCode();
      if (EndMatchShowResult != false) hash ^= EndMatchShowResult.GetHashCode();
      if (EndMatchResultEffect != 0) hash ^= EndMatchResultEffect.GetHashCode();
      if (MatchTotalSecs != 0) hash ^= MatchTotalSecs.GetHashCode();
      if (ConnectionAFKTime != 0) hash ^= ConnectionAFKTime.GetHashCode();
      if (HangUpTimeOutSecs != 0) hash ^= HangUpTimeOutSecs.GetHashCode();
      if (WinType != 0) hash ^= WinType.GetHashCode();
      if (NumTotalRounds != 0) hash ^= NumTotalRounds.GetHashCode();
      if (TargetScore != 0) hash ^= TargetScore.GetHashCode();
      if (MatchCampScoreWay != 0) hash ^= MatchCampScoreWay.GetHashCode();
      if (BattleLoadingWin.Length != 0) hash ^= BattleLoadingWin.GetHashCode();
      if (InitHP != 0) hash ^= InitHP.GetHashCode();
      if (MaxHP != 0) hash ^= MaxHP.GetHashCode();
      if (HalfArmor != 0) hash ^= HalfArmor.GetHashCode();
      if (FullArmor != 0) hash ^= FullArmor.GetHashCode();
      if (MaxSpeedRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSpeedRate);
      if (FrictionRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FrictionRate);
      if (HeadShootOnly != false) hash ^= HeadShootOnly.GetHashCode();
      if (GravityRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GravityRate);
      if (AutoArmor != false) hash ^= AutoArmor.GetHashCode();
      if (AllyColliderActive != false) hash ^= AllyColliderActive.GetHashCode();
      if (EnemyColliderActive != false) hash ^= EnemyColliderActive.GetHashCode();
      if (HostileMode != 0) hash ^= HostileMode.GetHashCode();
      if (CheckFriendDamage != false) hash ^= CheckFriendDamage.GetHashCode();
      if (GrenadesCanCrossFriend != false) hash ^= GrenadesCanCrossFriend.GetHashCode();
      if (DeadNeedDropWeapon != false) hash ^= DeadNeedDropWeapon.GetHashCode();
      if (ProjectileTotalLimit != 0) hash ^= ProjectileTotalLimit.GetHashCode();
      if (ProjectilePersonLimit != 0) hash ^= ProjectilePersonLimit.GetHashCode();
      if (CanWatch != false) hash ^= CanWatch.GetHashCode();
      if (NumMaxObserver != 0) hash ^= NumMaxObserver.GetHashCode();
      if (CanWatchEnemy != false) hash ^= CanWatchEnemy.GetHashCode();
      if (HasWatchNeutralChannel != false) hash ^= HasWatchNeutralChannel.GetHashCode();
      if (WatchEnemyCanOutline != false) hash ^= WatchEnemyCanOutline.GetHashCode();
      if (WatchBattleCanSwitchFT != false) hash ^= WatchBattleCanSwitchFT.GetHashCode();
      if (DeathAniSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeathAniSeconds);
      if (CameraLookAroundSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CameraLookAroundSeconds);
      if (DeathSceneSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeathSceneSeconds);
      if (RemindKillerSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RemindKillerSeconds);
      if (DeathBackSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeathBackSeconds);
      if (MinRepeateKillCount != 0) hash ^= MinRepeateKillCount.GetHashCode();
      if (RepeateKillInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RepeateKillInterval);
      if (DeathRedFilterSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeathRedFilterSeconds);
      if (InvincibleBuffId != 0) hash ^= InvincibleBuffId.GetHashCode();
      if (RewardWeaponBeginTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RewardWeaponBeginTime);
      if (RewardWeaponRepeatTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RewardWeaponRepeatTime);
      if (RewardWeaponDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RewardWeaponDuration);
      if (RespawnBuySecs != 0) hash ^= RespawnBuySecs.GetHashCode();
      if (RespawnPointCheckDisatance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RespawnPointCheckDisatance);
      if (RespawnPointCdSecs != 0) hash ^= RespawnPointCdSecs.GetHashCode();
      if (AwardWeaponScore != 0) hash ^= AwardWeaponScore.GetHashCode();
      if (ClipMultiple != 0) hash ^= ClipMultiple.GetHashCode();
      if (CarriedClipMultiple != 0) hash ^= CarriedClipMultiple.GetHashCode();
      if (CloseRecoil != false) hash ^= CloseRecoil.GetHashCode();
      if (CloseSpread != false) hash ^= CloseSpread.GetHashCode();
      if (InfinitSubClip != false) hash ^= InfinitSubClip.GetHashCode();
      if (RandomMainWeapon != false) hash ^= RandomMainWeapon.GetHashCode();
      if (SwapTeamsEnable != false) hash ^= SwapTeamsEnable.GetHashCode();
      if (SwapTeamRounds != 0) hash ^= SwapTeamRounds.GetHashCode();
      if (DefuseC4Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefuseC4Time);
      if (DeployBombTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeployBombTime);
      if (OnPlantC4ShowFind != false) hash ^= OnPlantC4ShowFind.GetHashCode();
      if (ScoreType != 0) hash ^= ScoreType.GetHashCode();
      if (MaxReconnectTime != 0) hash ^= MaxReconnectTime.GetHashCode();
      if (AIEnable != false) hash ^= AIEnable.GetHashCode();
      if (CampScoreRule != 0) hash ^= CampScoreRule.GetHashCode();
      if (SpawnDiscardWeapon != false) hash ^= SpawnDiscardWeapon.GetHashCode();
      if (BallNum != 0) hash ^= BallNum.GetHashCode();
      if (AutoAimEnable != false) hash ^= AutoAimEnable.GetHashCode();
      if (AutoFireEnable != 0) hash ^= AutoFireEnable.GetHashCode();
      if (FireCost != false) hash ^= FireCost.GetHashCode();
      if (GrenadeCost != false) hash ^= GrenadeCost.GetHashCode();
      if (DeadNeedDropGrenade != false) hash ^= DeadNeedDropGrenade.GetHashCode();
      if (NoviceGuideCheckEnable != false) hash ^= NoviceGuideCheckEnable.GetHashCode();
      if (HasSkinLastKill != false) hash ^= HasSkinLastKill.GetHashCode();
      if (HasEnemyTitle != false) hash ^= HasEnemyTitle.GetHashCode();
      if (HasSoundAssist != false) hash ^= HasSoundAssist.GetHashCode();
      if (CanRagDoll != false) hash ^= CanRagDoll.GetHashCode();
      if (CanSlide != false) hash ^= CanSlide.GetHashCode();
      if (CanClimb != false) hash ^= CanClimb.GetHashCode();
      if (DelayTriggerWatchBattle != false) hash ^= DelayTriggerWatchBattle.GetHashCode();
      if (HasTitleIndex != false) hash ^= HasTitleIndex.GetHashCode();
      if (RogueLikeBuff != false) hash ^= RogueLikeBuff.GetHashCode();
      if (PlayMusicBoxEnable != false) hash ^= PlayMusicBoxEnable.GetHashCode();
      if (DynamicScene != false) hash ^= DynamicScene.GetHashCode();
      if (DiscardWeaponInitiative != false) hash ^= DiscardWeaponInitiative.GetHashCode();
      if (PickUpWeaponIconShow != false) hash ^= PickUpWeaponIconShow.GetHashCode();
      if (MiniMapSoundAssist != false) hash ^= MiniMapSoundAssist.GetHashCode();
      if (TacticalActionPageIndex != 0) hash ^= TacticalActionPageIndex.GetHashCode();
      if (DamgeNumShowLevel != 0) hash ^= DamgeNumShowLevel.GetHashCode();
      if (LastRoundKillRule != 0) hash ^= LastRoundKillRule.GetHashCode();
      if (HasMoney != false) hash ^= HasMoney.GetHashCode();
      if (HasSceneRoam != false) hash ^= HasSceneRoam.GetHashCode();
      if (PrepareShowHeadGUITime != 0) hash ^= PrepareShowHeadGUITime.GetHashCode();
      if (MoveSoundTriggerTIme != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveSoundTriggerTIme);
      if (FreeWeapon != false) hash ^= FreeWeapon.GetHashCode();
      if (WeaponBRDecay != false) hash ^= WeaponBRDecay.GetHashCode();
      if (LikeGroupId != 0) hash ^= LikeGroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (NumMatchMaxPlayers != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumMatchMaxPlayers);
      }
      if (NumStartMatchMinPlayers != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumStartMatchMinPlayers);
      }
      if (NumDefenderCampMinPlayers != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NumDefenderCampMinPlayers);
      }
      if (NumAttackerCampMinPlayers != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NumAttackerCampMinPlayers);
      }
      if (MatchPrepareSecs != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MatchPrepareSecs);
      }
      if (PrePareEndType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PrePareEndType);
      }
      if (WarmUpSecs != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(WarmUpSecs);
      }
      if (WarmUpEndSecs != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(WarmUpEndSecs);
      }
      if (RoundPrepareSecs != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RoundPrepareSecs);
      }
      if (RoundPrepareGrayFilterSeconds != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RoundPrepareGrayFilterSeconds);
      }
      if (JoinMidWayExtendSecs != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(JoinMidWayExtendSecs);
      }
      if (RoundReqHelpBuyTimes != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(RoundReqHelpBuyTimes);
      }
      if (RoundBuySecs != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RoundBuySecs);
      }
      if (RoundBuyCardSecs != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(RoundBuyCardSecs);
      }
      if (CanChangeShopCamp != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(CanChangeShopCamp);
      }
      if (CostMoney != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(CostMoney);
      }
      if (RoundInProgressSecs != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(RoundInProgressSecs);
      }
      if (EndRoundSecs != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(EndRoundSecs);
      }
      if (SwapCampSecs != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SwapCampSecs);
      }
      if (SwitchSceneSecs != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(SwitchSceneSecs);
      }
      if (EndMatchSecs != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(EndMatchSecs);
      }
      if (EndMatchShowResult != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(EndMatchShowResult);
      }
      if (EndMatchResultEffect != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(EndMatchResultEffect);
      }
      if (MatchTotalSecs != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(MatchTotalSecs);
      }
      if (ConnectionAFKTime != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(ConnectionAFKTime);
      }
      if (HangUpTimeOutSecs != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(HangUpTimeOutSecs);
      }
      if (WinType != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(WinType);
      }
      if (NumTotalRounds != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(NumTotalRounds);
      }
      if (TargetScore != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(TargetScore);
      }
      if (MatchCampScoreWay != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(MatchCampScoreWay);
      }
      if (BattleLoadingWin.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(BattleLoadingWin);
      }
      if (InitHP != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(InitHP);
      }
      if (MaxHP != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(MaxHP);
      }
      if (HalfArmor != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(HalfArmor);
      }
      if (FullArmor != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(FullArmor);
      }
      if (MaxSpeedRate != 0F) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(MaxSpeedRate);
      }
      if (FrictionRate != 0F) {
        output.WriteRawTag(181, 2);
        output.WriteFloat(FrictionRate);
      }
      if (HeadShootOnly != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(HeadShootOnly);
      }
      if (GravityRate != 0F) {
        output.WriteRawTag(197, 2);
        output.WriteFloat(GravityRate);
      }
      if (AutoArmor != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(AutoArmor);
      }
      if (AllyColliderActive != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(AllyColliderActive);
      }
      if (EnemyColliderActive != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(EnemyColliderActive);
      }
      if (HostileMode != 0) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(HostileMode);
      }
      if (CheckFriendDamage != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(CheckFriendDamage);
      }
      if (GrenadesCanCrossFriend != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(GrenadesCanCrossFriend);
      }
      if (DeadNeedDropWeapon != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(DeadNeedDropWeapon);
      }
      if (ProjectileTotalLimit != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(ProjectileTotalLimit);
      }
      if (ProjectilePersonLimit != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(ProjectilePersonLimit);
      }
      if (CanWatch != false) {
        output.WriteRawTag(144, 3);
        output.WriteBool(CanWatch);
      }
      if (NumMaxObserver != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(NumMaxObserver);
      }
      if (CanWatchEnemy != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(CanWatchEnemy);
      }
      if (HasWatchNeutralChannel != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(HasWatchNeutralChannel);
      }
      if (WatchEnemyCanOutline != false) {
        output.WriteRawTag(176, 3);
        output.WriteBool(WatchEnemyCanOutline);
      }
      if (WatchBattleCanSwitchFT != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(WatchBattleCanSwitchFT);
      }
      if (DeathAniSeconds != 0F) {
        output.WriteRawTag(197, 3);
        output.WriteFloat(DeathAniSeconds);
      }
      if (CameraLookAroundSeconds != 0F) {
        output.WriteRawTag(205, 3);
        output.WriteFloat(CameraLookAroundSeconds);
      }
      if (DeathSceneSeconds != 0F) {
        output.WriteRawTag(213, 3);
        output.WriteFloat(DeathSceneSeconds);
      }
      if (RemindKillerSeconds != 0F) {
        output.WriteRawTag(221, 3);
        output.WriteFloat(RemindKillerSeconds);
      }
      if (DeathBackSeconds != 0F) {
        output.WriteRawTag(229, 3);
        output.WriteFloat(DeathBackSeconds);
      }
      if (MinRepeateKillCount != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(MinRepeateKillCount);
      }
      if (RepeateKillInterval != 0F) {
        output.WriteRawTag(245, 3);
        output.WriteFloat(RepeateKillInterval);
      }
      if (DeathRedFilterSeconds != 0F) {
        output.WriteRawTag(253, 3);
        output.WriteFloat(DeathRedFilterSeconds);
      }
      if (InvincibleBuffId != 0) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(InvincibleBuffId);
      }
      if (RewardWeaponBeginTime != 0F) {
        output.WriteRawTag(141, 4);
        output.WriteFloat(RewardWeaponBeginTime);
      }
      if (RewardWeaponRepeatTime != 0F) {
        output.WriteRawTag(149, 4);
        output.WriteFloat(RewardWeaponRepeatTime);
      }
      if (RewardWeaponDuration != 0F) {
        output.WriteRawTag(157, 4);
        output.WriteFloat(RewardWeaponDuration);
      }
      if (RespawnBuySecs != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(RespawnBuySecs);
      }
      if (RespawnPointCheckDisatance != 0F) {
        output.WriteRawTag(173, 4);
        output.WriteFloat(RespawnPointCheckDisatance);
      }
      if (RespawnPointCdSecs != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(RespawnPointCdSecs);
      }
      if (AwardWeaponScore != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(AwardWeaponScore);
      }
      if (ClipMultiple != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(ClipMultiple);
      }
      if (CarriedClipMultiple != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(CarriedClipMultiple);
      }
      if (CloseRecoil != false) {
        output.WriteRawTag(208, 4);
        output.WriteBool(CloseRecoil);
      }
      if (CloseSpread != false) {
        output.WriteRawTag(216, 4);
        output.WriteBool(CloseSpread);
      }
      if (InfinitSubClip != false) {
        output.WriteRawTag(224, 4);
        output.WriteBool(InfinitSubClip);
      }
      if (RandomMainWeapon != false) {
        output.WriteRawTag(232, 4);
        output.WriteBool(RandomMainWeapon);
      }
      if (SwapTeamsEnable != false) {
        output.WriteRawTag(240, 4);
        output.WriteBool(SwapTeamsEnable);
      }
      if (SwapTeamRounds != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(SwapTeamRounds);
      }
      if (DefuseC4Time != 0F) {
        output.WriteRawTag(133, 5);
        output.WriteFloat(DefuseC4Time);
      }
      if (DeployBombTime != 0F) {
        output.WriteRawTag(141, 5);
        output.WriteFloat(DeployBombTime);
      }
      if (OnPlantC4ShowFind != false) {
        output.WriteRawTag(144, 5);
        output.WriteBool(OnPlantC4ShowFind);
      }
      if (ScoreType != 0) {
        output.WriteRawTag(152, 5);
        output.WriteInt32(ScoreType);
      }
      if (MaxReconnectTime != 0) {
        output.WriteRawTag(160, 5);
        output.WriteInt32(MaxReconnectTime);
      }
      if (AIEnable != false) {
        output.WriteRawTag(168, 5);
        output.WriteBool(AIEnable);
      }
      if (CampScoreRule != 0) {
        output.WriteRawTag(176, 5);
        output.WriteInt32(CampScoreRule);
      }
      if (SpawnDiscardWeapon != false) {
        output.WriteRawTag(184, 5);
        output.WriteBool(SpawnDiscardWeapon);
      }
      if (BallNum != 0) {
        output.WriteRawTag(192, 5);
        output.WriteInt32(BallNum);
      }
      if (AutoAimEnable != false) {
        output.WriteRawTag(200, 5);
        output.WriteBool(AutoAimEnable);
      }
      if (AutoFireEnable != 0) {
        output.WriteRawTag(208, 5);
        output.WriteUInt32(AutoFireEnable);
      }
      if (FireCost != false) {
        output.WriteRawTag(216, 5);
        output.WriteBool(FireCost);
      }
      if (GrenadeCost != false) {
        output.WriteRawTag(224, 5);
        output.WriteBool(GrenadeCost);
      }
      if (DeadNeedDropGrenade != false) {
        output.WriteRawTag(232, 5);
        output.WriteBool(DeadNeedDropGrenade);
      }
      if (NoviceGuideCheckEnable != false) {
        output.WriteRawTag(240, 5);
        output.WriteBool(NoviceGuideCheckEnable);
      }
      if (HasSkinLastKill != false) {
        output.WriteRawTag(248, 5);
        output.WriteBool(HasSkinLastKill);
      }
      if (HasEnemyTitle != false) {
        output.WriteRawTag(128, 6);
        output.WriteBool(HasEnemyTitle);
      }
      if (HasSoundAssist != false) {
        output.WriteRawTag(136, 6);
        output.WriteBool(HasSoundAssist);
      }
      if (CanRagDoll != false) {
        output.WriteRawTag(144, 6);
        output.WriteBool(CanRagDoll);
      }
      if (CanSlide != false) {
        output.WriteRawTag(152, 6);
        output.WriteBool(CanSlide);
      }
      if (CanClimb != false) {
        output.WriteRawTag(160, 6);
        output.WriteBool(CanClimb);
      }
      if (DelayTriggerWatchBattle != false) {
        output.WriteRawTag(168, 6);
        output.WriteBool(DelayTriggerWatchBattle);
      }
      if (HasTitleIndex != false) {
        output.WriteRawTag(176, 6);
        output.WriteBool(HasTitleIndex);
      }
      if (RogueLikeBuff != false) {
        output.WriteRawTag(184, 6);
        output.WriteBool(RogueLikeBuff);
      }
      if (PlayMusicBoxEnable != false) {
        output.WriteRawTag(192, 6);
        output.WriteBool(PlayMusicBoxEnable);
      }
      if (DynamicScene != false) {
        output.WriteRawTag(200, 6);
        output.WriteBool(DynamicScene);
      }
      if (DiscardWeaponInitiative != false) {
        output.WriteRawTag(208, 6);
        output.WriteBool(DiscardWeaponInitiative);
      }
      if (PickUpWeaponIconShow != false) {
        output.WriteRawTag(216, 6);
        output.WriteBool(PickUpWeaponIconShow);
      }
      if (MiniMapSoundAssist != false) {
        output.WriteRawTag(224, 6);
        output.WriteBool(MiniMapSoundAssist);
      }
      if (TacticalActionPageIndex != 0) {
        output.WriteRawTag(232, 6);
        output.WriteUInt32(TacticalActionPageIndex);
      }
      if (DamgeNumShowLevel != 0) {
        output.WriteRawTag(240, 6);
        output.WriteInt32(DamgeNumShowLevel);
      }
      if (LastRoundKillRule != 0) {
        output.WriteRawTag(248, 6);
        output.WriteInt32(LastRoundKillRule);
      }
      if (HasMoney != false) {
        output.WriteRawTag(128, 7);
        output.WriteBool(HasMoney);
      }
      if (HasSceneRoam != false) {
        output.WriteRawTag(136, 7);
        output.WriteBool(HasSceneRoam);
      }
      if (PrepareShowHeadGUITime != 0) {
        output.WriteRawTag(144, 7);
        output.WriteInt32(PrepareShowHeadGUITime);
      }
      if (MoveSoundTriggerTIme != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(MoveSoundTriggerTIme);
      }
      if (FreeWeapon != false) {
        output.WriteRawTag(160, 7);
        output.WriteBool(FreeWeapon);
      }
      if (WeaponBRDecay != false) {
        output.WriteRawTag(168, 7);
        output.WriteBool(WeaponBRDecay);
      }
      if (LikeGroupId != 0) {
        output.WriteRawTag(176, 7);
        output.WriteInt32(LikeGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (NumMatchMaxPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumMatchMaxPlayers);
      }
      if (NumStartMatchMinPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumStartMatchMinPlayers);
      }
      if (NumDefenderCampMinPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumDefenderCampMinPlayers);
      }
      if (NumAttackerCampMinPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumAttackerCampMinPlayers);
      }
      if (MatchPrepareSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatchPrepareSecs);
      }
      if (PrePareEndType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrePareEndType);
      }
      if (WarmUpSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarmUpSecs);
      }
      if (WarmUpEndSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarmUpEndSecs);
      }
      if (RoundPrepareSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundPrepareSecs);
      }
      if (RoundPrepareGrayFilterSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundPrepareGrayFilterSeconds);
      }
      if (JoinMidWayExtendSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinMidWayExtendSecs);
      }
      if (RoundReqHelpBuyTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoundReqHelpBuyTimes);
      }
      if (RoundBuySecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundBuySecs);
      }
      if (RoundBuyCardSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundBuyCardSecs);
      }
      if (CanChangeShopCamp != false) {
        size += 2 + 1;
      }
      if (CostMoney != false) {
        size += 2 + 1;
      }
      if (RoundInProgressSecs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RoundInProgressSecs);
      }
      if (EndRoundSecs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EndRoundSecs);
      }
      if (SwapCampSecs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SwapCampSecs);
      }
      if (SwitchSceneSecs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SwitchSceneSecs);
      }
      if (EndMatchSecs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EndMatchSecs);
      }
      if (EndMatchShowResult != false) {
        size += 2 + 1;
      }
      if (EndMatchResultEffect != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EndMatchResultEffect);
      }
      if (MatchTotalSecs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MatchTotalSecs);
      }
      if (ConnectionAFKTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ConnectionAFKTime);
      }
      if (HangUpTimeOutSecs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HangUpTimeOutSecs);
      }
      if (WinType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WinType);
      }
      if (NumTotalRounds != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumTotalRounds);
      }
      if (TargetScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetScore);
      }
      if (MatchCampScoreWay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MatchCampScoreWay);
      }
      if (BattleLoadingWin.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BattleLoadingWin);
      }
      if (InitHP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InitHP);
      }
      if (MaxHP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxHP);
      }
      if (HalfArmor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HalfArmor);
      }
      if (FullArmor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FullArmor);
      }
      if (MaxSpeedRate != 0F) {
        size += 2 + 4;
      }
      if (FrictionRate != 0F) {
        size += 2 + 4;
      }
      if (HeadShootOnly != false) {
        size += 2 + 1;
      }
      if (GravityRate != 0F) {
        size += 2 + 4;
      }
      if (AutoArmor != false) {
        size += 2 + 1;
      }
      if (AllyColliderActive != false) {
        size += 2 + 1;
      }
      if (EnemyColliderActive != false) {
        size += 2 + 1;
      }
      if (HostileMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HostileMode);
      }
      if (CheckFriendDamage != false) {
        size += 2 + 1;
      }
      if (GrenadesCanCrossFriend != false) {
        size += 2 + 1;
      }
      if (DeadNeedDropWeapon != false) {
        size += 2 + 1;
      }
      if (ProjectileTotalLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProjectileTotalLimit);
      }
      if (ProjectilePersonLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProjectilePersonLimit);
      }
      if (CanWatch != false) {
        size += 2 + 1;
      }
      if (NumMaxObserver != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumMaxObserver);
      }
      if (CanWatchEnemy != false) {
        size += 2 + 1;
      }
      if (HasWatchNeutralChannel != false) {
        size += 2 + 1;
      }
      if (WatchEnemyCanOutline != false) {
        size += 2 + 1;
      }
      if (WatchBattleCanSwitchFT != false) {
        size += 2 + 1;
      }
      if (DeathAniSeconds != 0F) {
        size += 2 + 4;
      }
      if (CameraLookAroundSeconds != 0F) {
        size += 2 + 4;
      }
      if (DeathSceneSeconds != 0F) {
        size += 2 + 4;
      }
      if (RemindKillerSeconds != 0F) {
        size += 2 + 4;
      }
      if (DeathBackSeconds != 0F) {
        size += 2 + 4;
      }
      if (MinRepeateKillCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinRepeateKillCount);
      }
      if (RepeateKillInterval != 0F) {
        size += 2 + 4;
      }
      if (DeathRedFilterSeconds != 0F) {
        size += 2 + 4;
      }
      if (InvincibleBuffId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(InvincibleBuffId);
      }
      if (RewardWeaponBeginTime != 0F) {
        size += 2 + 4;
      }
      if (RewardWeaponRepeatTime != 0F) {
        size += 2 + 4;
      }
      if (RewardWeaponDuration != 0F) {
        size += 2 + 4;
      }
      if (RespawnBuySecs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RespawnBuySecs);
      }
      if (RespawnPointCheckDisatance != 0F) {
        size += 2 + 4;
      }
      if (RespawnPointCdSecs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RespawnPointCdSecs);
      }
      if (AwardWeaponScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AwardWeaponScore);
      }
      if (ClipMultiple != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ClipMultiple);
      }
      if (CarriedClipMultiple != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CarriedClipMultiple);
      }
      if (CloseRecoil != false) {
        size += 2 + 1;
      }
      if (CloseSpread != false) {
        size += 2 + 1;
      }
      if (InfinitSubClip != false) {
        size += 2 + 1;
      }
      if (RandomMainWeapon != false) {
        size += 2 + 1;
      }
      if (SwapTeamsEnable != false) {
        size += 2 + 1;
      }
      if (SwapTeamRounds != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SwapTeamRounds);
      }
      if (DefuseC4Time != 0F) {
        size += 2 + 4;
      }
      if (DeployBombTime != 0F) {
        size += 2 + 4;
      }
      if (OnPlantC4ShowFind != false) {
        size += 2 + 1;
      }
      if (ScoreType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ScoreType);
      }
      if (MaxReconnectTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxReconnectTime);
      }
      if (AIEnable != false) {
        size += 2 + 1;
      }
      if (CampScoreRule != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CampScoreRule);
      }
      if (SpawnDiscardWeapon != false) {
        size += 2 + 1;
      }
      if (BallNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BallNum);
      }
      if (AutoAimEnable != false) {
        size += 2 + 1;
      }
      if (AutoFireEnable != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AutoFireEnable);
      }
      if (FireCost != false) {
        size += 2 + 1;
      }
      if (GrenadeCost != false) {
        size += 2 + 1;
      }
      if (DeadNeedDropGrenade != false) {
        size += 2 + 1;
      }
      if (NoviceGuideCheckEnable != false) {
        size += 2 + 1;
      }
      if (HasSkinLastKill != false) {
        size += 2 + 1;
      }
      if (HasEnemyTitle != false) {
        size += 2 + 1;
      }
      if (HasSoundAssist != false) {
        size += 2 + 1;
      }
      if (CanRagDoll != false) {
        size += 2 + 1;
      }
      if (CanSlide != false) {
        size += 2 + 1;
      }
      if (CanClimb != false) {
        size += 2 + 1;
      }
      if (DelayTriggerWatchBattle != false) {
        size += 2 + 1;
      }
      if (HasTitleIndex != false) {
        size += 2 + 1;
      }
      if (RogueLikeBuff != false) {
        size += 2 + 1;
      }
      if (PlayMusicBoxEnable != false) {
        size += 2 + 1;
      }
      if (DynamicScene != false) {
        size += 2 + 1;
      }
      if (DiscardWeaponInitiative != false) {
        size += 2 + 1;
      }
      if (PickUpWeaponIconShow != false) {
        size += 2 + 1;
      }
      if (MiniMapSoundAssist != false) {
        size += 2 + 1;
      }
      if (TacticalActionPageIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TacticalActionPageIndex);
      }
      if (DamgeNumShowLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DamgeNumShowLevel);
      }
      if (LastRoundKillRule != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LastRoundKillRule);
      }
      if (HasMoney != false) {
        size += 2 + 1;
      }
      if (HasSceneRoam != false) {
        size += 2 + 1;
      }
      if (PrepareShowHeadGUITime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrepareShowHeadGUITime);
      }
      if (MoveSoundTriggerTIme != 0F) {
        size += 2 + 4;
      }
      if (FreeWeapon != false) {
        size += 2 + 1;
      }
      if (WeaponBRDecay != false) {
        size += 2 + 1;
      }
      if (LikeGroupId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LikeGroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameModeBaseConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.NumMatchMaxPlayers != 0) {
        NumMatchMaxPlayers = other.NumMatchMaxPlayers;
      }
      if (other.NumStartMatchMinPlayers != 0) {
        NumStartMatchMinPlayers = other.NumStartMatchMinPlayers;
      }
      if (other.NumDefenderCampMinPlayers != 0) {
        NumDefenderCampMinPlayers = other.NumDefenderCampMinPlayers;
      }
      if (other.NumAttackerCampMinPlayers != 0) {
        NumAttackerCampMinPlayers = other.NumAttackerCampMinPlayers;
      }
      if (other.MatchPrepareSecs != 0) {
        MatchPrepareSecs = other.MatchPrepareSecs;
      }
      if (other.PrePareEndType != 0) {
        PrePareEndType = other.PrePareEndType;
      }
      if (other.WarmUpSecs != 0) {
        WarmUpSecs = other.WarmUpSecs;
      }
      if (other.WarmUpEndSecs != 0) {
        WarmUpEndSecs = other.WarmUpEndSecs;
      }
      if (other.RoundPrepareSecs != 0) {
        RoundPrepareSecs = other.RoundPrepareSecs;
      }
      if (other.RoundPrepareGrayFilterSeconds != 0) {
        RoundPrepareGrayFilterSeconds = other.RoundPrepareGrayFilterSeconds;
      }
      if (other.JoinMidWayExtendSecs != 0) {
        JoinMidWayExtendSecs = other.JoinMidWayExtendSecs;
      }
      if (other.RoundReqHelpBuyTimes != 0) {
        RoundReqHelpBuyTimes = other.RoundReqHelpBuyTimes;
      }
      if (other.RoundBuySecs != 0) {
        RoundBuySecs = other.RoundBuySecs;
      }
      if (other.RoundBuyCardSecs != 0) {
        RoundBuyCardSecs = other.RoundBuyCardSecs;
      }
      if (other.CanChangeShopCamp != false) {
        CanChangeShopCamp = other.CanChangeShopCamp;
      }
      if (other.CostMoney != false) {
        CostMoney = other.CostMoney;
      }
      if (other.RoundInProgressSecs != 0) {
        RoundInProgressSecs = other.RoundInProgressSecs;
      }
      if (other.EndRoundSecs != 0) {
        EndRoundSecs = other.EndRoundSecs;
      }
      if (other.SwapCampSecs != 0) {
        SwapCampSecs = other.SwapCampSecs;
      }
      if (other.SwitchSceneSecs != 0) {
        SwitchSceneSecs = other.SwitchSceneSecs;
      }
      if (other.EndMatchSecs != 0) {
        EndMatchSecs = other.EndMatchSecs;
      }
      if (other.EndMatchShowResult != false) {
        EndMatchShowResult = other.EndMatchShowResult;
      }
      if (other.EndMatchResultEffect != 0) {
        EndMatchResultEffect = other.EndMatchResultEffect;
      }
      if (other.MatchTotalSecs != 0) {
        MatchTotalSecs = other.MatchTotalSecs;
      }
      if (other.ConnectionAFKTime != 0) {
        ConnectionAFKTime = other.ConnectionAFKTime;
      }
      if (other.HangUpTimeOutSecs != 0) {
        HangUpTimeOutSecs = other.HangUpTimeOutSecs;
      }
      if (other.WinType != 0) {
        WinType = other.WinType;
      }
      if (other.NumTotalRounds != 0) {
        NumTotalRounds = other.NumTotalRounds;
      }
      if (other.TargetScore != 0) {
        TargetScore = other.TargetScore;
      }
      if (other.MatchCampScoreWay != 0) {
        MatchCampScoreWay = other.MatchCampScoreWay;
      }
      if (other.BattleLoadingWin.Length != 0) {
        BattleLoadingWin = other.BattleLoadingWin;
      }
      if (other.InitHP != 0) {
        InitHP = other.InitHP;
      }
      if (other.MaxHP != 0) {
        MaxHP = other.MaxHP;
      }
      if (other.HalfArmor != 0) {
        HalfArmor = other.HalfArmor;
      }
      if (other.FullArmor != 0) {
        FullArmor = other.FullArmor;
      }
      if (other.MaxSpeedRate != 0F) {
        MaxSpeedRate = other.MaxSpeedRate;
      }
      if (other.FrictionRate != 0F) {
        FrictionRate = other.FrictionRate;
      }
      if (other.HeadShootOnly != false) {
        HeadShootOnly = other.HeadShootOnly;
      }
      if (other.GravityRate != 0F) {
        GravityRate = other.GravityRate;
      }
      if (other.AutoArmor != false) {
        AutoArmor = other.AutoArmor;
      }
      if (other.AllyColliderActive != false) {
        AllyColliderActive = other.AllyColliderActive;
      }
      if (other.EnemyColliderActive != false) {
        EnemyColliderActive = other.EnemyColliderActive;
      }
      if (other.HostileMode != 0) {
        HostileMode = other.HostileMode;
      }
      if (other.CheckFriendDamage != false) {
        CheckFriendDamage = other.CheckFriendDamage;
      }
      if (other.GrenadesCanCrossFriend != false) {
        GrenadesCanCrossFriend = other.GrenadesCanCrossFriend;
      }
      if (other.DeadNeedDropWeapon != false) {
        DeadNeedDropWeapon = other.DeadNeedDropWeapon;
      }
      if (other.ProjectileTotalLimit != 0) {
        ProjectileTotalLimit = other.ProjectileTotalLimit;
      }
      if (other.ProjectilePersonLimit != 0) {
        ProjectilePersonLimit = other.ProjectilePersonLimit;
      }
      if (other.CanWatch != false) {
        CanWatch = other.CanWatch;
      }
      if (other.NumMaxObserver != 0) {
        NumMaxObserver = other.NumMaxObserver;
      }
      if (other.CanWatchEnemy != false) {
        CanWatchEnemy = other.CanWatchEnemy;
      }
      if (other.HasWatchNeutralChannel != false) {
        HasWatchNeutralChannel = other.HasWatchNeutralChannel;
      }
      if (other.WatchEnemyCanOutline != false) {
        WatchEnemyCanOutline = other.WatchEnemyCanOutline;
      }
      if (other.WatchBattleCanSwitchFT != false) {
        WatchBattleCanSwitchFT = other.WatchBattleCanSwitchFT;
      }
      if (other.DeathAniSeconds != 0F) {
        DeathAniSeconds = other.DeathAniSeconds;
      }
      if (other.CameraLookAroundSeconds != 0F) {
        CameraLookAroundSeconds = other.CameraLookAroundSeconds;
      }
      if (other.DeathSceneSeconds != 0F) {
        DeathSceneSeconds = other.DeathSceneSeconds;
      }
      if (other.RemindKillerSeconds != 0F) {
        RemindKillerSeconds = other.RemindKillerSeconds;
      }
      if (other.DeathBackSeconds != 0F) {
        DeathBackSeconds = other.DeathBackSeconds;
      }
      if (other.MinRepeateKillCount != 0) {
        MinRepeateKillCount = other.MinRepeateKillCount;
      }
      if (other.RepeateKillInterval != 0F) {
        RepeateKillInterval = other.RepeateKillInterval;
      }
      if (other.DeathRedFilterSeconds != 0F) {
        DeathRedFilterSeconds = other.DeathRedFilterSeconds;
      }
      if (other.InvincibleBuffId != 0) {
        InvincibleBuffId = other.InvincibleBuffId;
      }
      if (other.RewardWeaponBeginTime != 0F) {
        RewardWeaponBeginTime = other.RewardWeaponBeginTime;
      }
      if (other.RewardWeaponRepeatTime != 0F) {
        RewardWeaponRepeatTime = other.RewardWeaponRepeatTime;
      }
      if (other.RewardWeaponDuration != 0F) {
        RewardWeaponDuration = other.RewardWeaponDuration;
      }
      if (other.RespawnBuySecs != 0) {
        RespawnBuySecs = other.RespawnBuySecs;
      }
      if (other.RespawnPointCheckDisatance != 0F) {
        RespawnPointCheckDisatance = other.RespawnPointCheckDisatance;
      }
      if (other.RespawnPointCdSecs != 0) {
        RespawnPointCdSecs = other.RespawnPointCdSecs;
      }
      if (other.AwardWeaponScore != 0) {
        AwardWeaponScore = other.AwardWeaponScore;
      }
      if (other.ClipMultiple != 0) {
        ClipMultiple = other.ClipMultiple;
      }
      if (other.CarriedClipMultiple != 0) {
        CarriedClipMultiple = other.CarriedClipMultiple;
      }
      if (other.CloseRecoil != false) {
        CloseRecoil = other.CloseRecoil;
      }
      if (other.CloseSpread != false) {
        CloseSpread = other.CloseSpread;
      }
      if (other.InfinitSubClip != false) {
        InfinitSubClip = other.InfinitSubClip;
      }
      if (other.RandomMainWeapon != false) {
        RandomMainWeapon = other.RandomMainWeapon;
      }
      if (other.SwapTeamsEnable != false) {
        SwapTeamsEnable = other.SwapTeamsEnable;
      }
      if (other.SwapTeamRounds != 0) {
        SwapTeamRounds = other.SwapTeamRounds;
      }
      if (other.DefuseC4Time != 0F) {
        DefuseC4Time = other.DefuseC4Time;
      }
      if (other.DeployBombTime != 0F) {
        DeployBombTime = other.DeployBombTime;
      }
      if (other.OnPlantC4ShowFind != false) {
        OnPlantC4ShowFind = other.OnPlantC4ShowFind;
      }
      if (other.ScoreType != 0) {
        ScoreType = other.ScoreType;
      }
      if (other.MaxReconnectTime != 0) {
        MaxReconnectTime = other.MaxReconnectTime;
      }
      if (other.AIEnable != false) {
        AIEnable = other.AIEnable;
      }
      if (other.CampScoreRule != 0) {
        CampScoreRule = other.CampScoreRule;
      }
      if (other.SpawnDiscardWeapon != false) {
        SpawnDiscardWeapon = other.SpawnDiscardWeapon;
      }
      if (other.BallNum != 0) {
        BallNum = other.BallNum;
      }
      if (other.AutoAimEnable != false) {
        AutoAimEnable = other.AutoAimEnable;
      }
      if (other.AutoFireEnable != 0) {
        AutoFireEnable = other.AutoFireEnable;
      }
      if (other.FireCost != false) {
        FireCost = other.FireCost;
      }
      if (other.GrenadeCost != false) {
        GrenadeCost = other.GrenadeCost;
      }
      if (other.DeadNeedDropGrenade != false) {
        DeadNeedDropGrenade = other.DeadNeedDropGrenade;
      }
      if (other.NoviceGuideCheckEnable != false) {
        NoviceGuideCheckEnable = other.NoviceGuideCheckEnable;
      }
      if (other.HasSkinLastKill != false) {
        HasSkinLastKill = other.HasSkinLastKill;
      }
      if (other.HasEnemyTitle != false) {
        HasEnemyTitle = other.HasEnemyTitle;
      }
      if (other.HasSoundAssist != false) {
        HasSoundAssist = other.HasSoundAssist;
      }
      if (other.CanRagDoll != false) {
        CanRagDoll = other.CanRagDoll;
      }
      if (other.CanSlide != false) {
        CanSlide = other.CanSlide;
      }
      if (other.CanClimb != false) {
        CanClimb = other.CanClimb;
      }
      if (other.DelayTriggerWatchBattle != false) {
        DelayTriggerWatchBattle = other.DelayTriggerWatchBattle;
      }
      if (other.HasTitleIndex != false) {
        HasTitleIndex = other.HasTitleIndex;
      }
      if (other.RogueLikeBuff != false) {
        RogueLikeBuff = other.RogueLikeBuff;
      }
      if (other.PlayMusicBoxEnable != false) {
        PlayMusicBoxEnable = other.PlayMusicBoxEnable;
      }
      if (other.DynamicScene != false) {
        DynamicScene = other.DynamicScene;
      }
      if (other.DiscardWeaponInitiative != false) {
        DiscardWeaponInitiative = other.DiscardWeaponInitiative;
      }
      if (other.PickUpWeaponIconShow != false) {
        PickUpWeaponIconShow = other.PickUpWeaponIconShow;
      }
      if (other.MiniMapSoundAssist != false) {
        MiniMapSoundAssist = other.MiniMapSoundAssist;
      }
      if (other.TacticalActionPageIndex != 0) {
        TacticalActionPageIndex = other.TacticalActionPageIndex;
      }
      if (other.DamgeNumShowLevel != 0) {
        DamgeNumShowLevel = other.DamgeNumShowLevel;
      }
      if (other.LastRoundKillRule != 0) {
        LastRoundKillRule = other.LastRoundKillRule;
      }
      if (other.HasMoney != false) {
        HasMoney = other.HasMoney;
      }
      if (other.HasSceneRoam != false) {
        HasSceneRoam = other.HasSceneRoam;
      }
      if (other.PrepareShowHeadGUITime != 0) {
        PrepareShowHeadGUITime = other.PrepareShowHeadGUITime;
      }
      if (other.MoveSoundTriggerTIme != 0F) {
        MoveSoundTriggerTIme = other.MoveSoundTriggerTIme;
      }
      if (other.FreeWeapon != false) {
        FreeWeapon = other.FreeWeapon;
      }
      if (other.WeaponBRDecay != false) {
        WeaponBRDecay = other.WeaponBRDecay;
      }
      if (other.LikeGroupId != 0) {
        LikeGroupId = other.LikeGroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            NumMatchMaxPlayers = input.ReadInt32();
            break;
          }
          case 24: {
            NumStartMatchMinPlayers = input.ReadInt32();
            break;
          }
          case 32: {
            NumDefenderCampMinPlayers = input.ReadInt32();
            break;
          }
          case 40: {
            NumAttackerCampMinPlayers = input.ReadInt32();
            break;
          }
          case 48: {
            MatchPrepareSecs = input.ReadInt32();
            break;
          }
          case 56: {
            PrePareEndType = input.ReadInt32();
            break;
          }
          case 64: {
            WarmUpSecs = input.ReadInt32();
            break;
          }
          case 72: {
            WarmUpEndSecs = input.ReadInt32();
            break;
          }
          case 80: {
            RoundPrepareSecs = input.ReadInt32();
            break;
          }
          case 88: {
            RoundPrepareGrayFilterSeconds = input.ReadInt32();
            break;
          }
          case 96: {
            JoinMidWayExtendSecs = input.ReadInt32();
            break;
          }
          case 104: {
            RoundReqHelpBuyTimes = input.ReadUInt32();
            break;
          }
          case 112: {
            RoundBuySecs = input.ReadInt32();
            break;
          }
          case 120: {
            RoundBuyCardSecs = input.ReadInt32();
            break;
          }
          case 128: {
            CanChangeShopCamp = input.ReadBool();
            break;
          }
          case 136: {
            CostMoney = input.ReadBool();
            break;
          }
          case 144: {
            RoundInProgressSecs = input.ReadInt32();
            break;
          }
          case 152: {
            EndRoundSecs = input.ReadInt32();
            break;
          }
          case 160: {
            SwapCampSecs = input.ReadInt32();
            break;
          }
          case 168: {
            SwitchSceneSecs = input.ReadInt32();
            break;
          }
          case 176: {
            EndMatchSecs = input.ReadInt32();
            break;
          }
          case 184: {
            EndMatchShowResult = input.ReadBool();
            break;
          }
          case 192: {
            EndMatchResultEffect = input.ReadUInt32();
            break;
          }
          case 200: {
            MatchTotalSecs = input.ReadInt32();
            break;
          }
          case 208: {
            ConnectionAFKTime = input.ReadInt32();
            break;
          }
          case 216: {
            HangUpTimeOutSecs = input.ReadInt32();
            break;
          }
          case 224: {
            WinType = input.ReadInt32();
            break;
          }
          case 232: {
            NumTotalRounds = input.ReadInt32();
            break;
          }
          case 240: {
            TargetScore = input.ReadInt32();
            break;
          }
          case 248: {
            MatchCampScoreWay = input.ReadInt32();
            break;
          }
          case 258: {
            BattleLoadingWin = input.ReadString();
            break;
          }
          case 264: {
            InitHP = input.ReadInt32();
            break;
          }
          case 272: {
            MaxHP = input.ReadInt32();
            break;
          }
          case 280: {
            HalfArmor = input.ReadInt32();
            break;
          }
          case 288: {
            FullArmor = input.ReadInt32();
            break;
          }
          case 301: {
            MaxSpeedRate = input.ReadFloat();
            break;
          }
          case 309: {
            FrictionRate = input.ReadFloat();
            break;
          }
          case 312: {
            HeadShootOnly = input.ReadBool();
            break;
          }
          case 325: {
            GravityRate = input.ReadFloat();
            break;
          }
          case 328: {
            AutoArmor = input.ReadBool();
            break;
          }
          case 336: {
            AllyColliderActive = input.ReadBool();
            break;
          }
          case 344: {
            EnemyColliderActive = input.ReadBool();
            break;
          }
          case 352: {
            HostileMode = input.ReadUInt32();
            break;
          }
          case 360: {
            CheckFriendDamage = input.ReadBool();
            break;
          }
          case 368: {
            GrenadesCanCrossFriend = input.ReadBool();
            break;
          }
          case 376: {
            DeadNeedDropWeapon = input.ReadBool();
            break;
          }
          case 384: {
            ProjectileTotalLimit = input.ReadInt32();
            break;
          }
          case 392: {
            ProjectilePersonLimit = input.ReadInt32();
            break;
          }
          case 400: {
            CanWatch = input.ReadBool();
            break;
          }
          case 408: {
            NumMaxObserver = input.ReadInt32();
            break;
          }
          case 416: {
            CanWatchEnemy = input.ReadBool();
            break;
          }
          case 424: {
            HasWatchNeutralChannel = input.ReadBool();
            break;
          }
          case 432: {
            WatchEnemyCanOutline = input.ReadBool();
            break;
          }
          case 440: {
            WatchBattleCanSwitchFT = input.ReadBool();
            break;
          }
          case 453: {
            DeathAniSeconds = input.ReadFloat();
            break;
          }
          case 461: {
            CameraLookAroundSeconds = input.ReadFloat();
            break;
          }
          case 469: {
            DeathSceneSeconds = input.ReadFloat();
            break;
          }
          case 477: {
            RemindKillerSeconds = input.ReadFloat();
            break;
          }
          case 485: {
            DeathBackSeconds = input.ReadFloat();
            break;
          }
          case 488: {
            MinRepeateKillCount = input.ReadInt32();
            break;
          }
          case 501: {
            RepeateKillInterval = input.ReadFloat();
            break;
          }
          case 509: {
            DeathRedFilterSeconds = input.ReadFloat();
            break;
          }
          case 512: {
            InvincibleBuffId = input.ReadUInt32();
            break;
          }
          case 525: {
            RewardWeaponBeginTime = input.ReadFloat();
            break;
          }
          case 533: {
            RewardWeaponRepeatTime = input.ReadFloat();
            break;
          }
          case 541: {
            RewardWeaponDuration = input.ReadFloat();
            break;
          }
          case 544: {
            RespawnBuySecs = input.ReadInt32();
            break;
          }
          case 557: {
            RespawnPointCheckDisatance = input.ReadFloat();
            break;
          }
          case 560: {
            RespawnPointCdSecs = input.ReadInt32();
            break;
          }
          case 568: {
            AwardWeaponScore = input.ReadInt32();
            break;
          }
          case 576: {
            ClipMultiple = input.ReadInt32();
            break;
          }
          case 584: {
            CarriedClipMultiple = input.ReadInt32();
            break;
          }
          case 592: {
            CloseRecoil = input.ReadBool();
            break;
          }
          case 600: {
            CloseSpread = input.ReadBool();
            break;
          }
          case 608: {
            InfinitSubClip = input.ReadBool();
            break;
          }
          case 616: {
            RandomMainWeapon = input.ReadBool();
            break;
          }
          case 624: {
            SwapTeamsEnable = input.ReadBool();
            break;
          }
          case 632: {
            SwapTeamRounds = input.ReadInt32();
            break;
          }
          case 645: {
            DefuseC4Time = input.ReadFloat();
            break;
          }
          case 653: {
            DeployBombTime = input.ReadFloat();
            break;
          }
          case 656: {
            OnPlantC4ShowFind = input.ReadBool();
            break;
          }
          case 664: {
            ScoreType = input.ReadInt32();
            break;
          }
          case 672: {
            MaxReconnectTime = input.ReadInt32();
            break;
          }
          case 680: {
            AIEnable = input.ReadBool();
            break;
          }
          case 688: {
            CampScoreRule = input.ReadInt32();
            break;
          }
          case 696: {
            SpawnDiscardWeapon = input.ReadBool();
            break;
          }
          case 704: {
            BallNum = input.ReadInt32();
            break;
          }
          case 712: {
            AutoAimEnable = input.ReadBool();
            break;
          }
          case 720: {
            AutoFireEnable = input.ReadUInt32();
            break;
          }
          case 728: {
            FireCost = input.ReadBool();
            break;
          }
          case 736: {
            GrenadeCost = input.ReadBool();
            break;
          }
          case 744: {
            DeadNeedDropGrenade = input.ReadBool();
            break;
          }
          case 752: {
            NoviceGuideCheckEnable = input.ReadBool();
            break;
          }
          case 760: {
            HasSkinLastKill = input.ReadBool();
            break;
          }
          case 768: {
            HasEnemyTitle = input.ReadBool();
            break;
          }
          case 776: {
            HasSoundAssist = input.ReadBool();
            break;
          }
          case 784: {
            CanRagDoll = input.ReadBool();
            break;
          }
          case 792: {
            CanSlide = input.ReadBool();
            break;
          }
          case 800: {
            CanClimb = input.ReadBool();
            break;
          }
          case 808: {
            DelayTriggerWatchBattle = input.ReadBool();
            break;
          }
          case 816: {
            HasTitleIndex = input.ReadBool();
            break;
          }
          case 824: {
            RogueLikeBuff = input.ReadBool();
            break;
          }
          case 832: {
            PlayMusicBoxEnable = input.ReadBool();
            break;
          }
          case 840: {
            DynamicScene = input.ReadBool();
            break;
          }
          case 848: {
            DiscardWeaponInitiative = input.ReadBool();
            break;
          }
          case 856: {
            PickUpWeaponIconShow = input.ReadBool();
            break;
          }
          case 864: {
            MiniMapSoundAssist = input.ReadBool();
            break;
          }
          case 872: {
            TacticalActionPageIndex = input.ReadUInt32();
            break;
          }
          case 880: {
            DamgeNumShowLevel = input.ReadInt32();
            break;
          }
          case 888: {
            LastRoundKillRule = input.ReadInt32();
            break;
          }
          case 896: {
            HasMoney = input.ReadBool();
            break;
          }
          case 904: {
            HasSceneRoam = input.ReadBool();
            break;
          }
          case 912: {
            PrepareShowHeadGUITime = input.ReadInt32();
            break;
          }
          case 925: {
            MoveSoundTriggerTIme = input.ReadFloat();
            break;
          }
          case 928: {
            FreeWeapon = input.ReadBool();
            break;
          }
          case 936: {
            WeaponBRDecay = input.ReadBool();
            break;
          }
          case 944: {
            LikeGroupId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameModeBaseConfig_Array : pb::IMessage<GameModeBaseConfig_Array> {
    private static readonly pb::MessageParser<GameModeBaseConfig_Array> _parser = new pb::MessageParser<GameModeBaseConfig_Array>(() => new GameModeBaseConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameModeBaseConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansGamemodebaseconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeBaseConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeBaseConfig_Array(GameModeBaseConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeBaseConfig_Array Clone() {
      return new GameModeBaseConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.GameModeBaseConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.GameModeBaseConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.GameModeBaseConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.GameModeBaseConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.GameModeBaseConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameModeBaseConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameModeBaseConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameModeBaseConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
