// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_gamemodeconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_gamemodeconfig.proto</summary>
  public static partial class XlsBeansGamemodeconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_gamemodeconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansGamemodeconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch54bHNfYmVhbnNfZ2FtZW1vZGVjb25maWcucHJvdG8SCkQxMS5QYmVhbnMi",
            "lgYKDkdhbWVNb2RlQ29uZmlnEgoKAmlkGAEgASgNEgwKBG5hbWUYAiABKAkS",
            "EAoIbWFpblR5cGUYAyABKA0SDwoHc29ydE51bRgEIAEoDRIRCgl1bmxvY2tM",
            "dmwYBSABKA0SGAoQZmlyc3REaXNwbGF5VGltZRgGIAEoAxIVCg1maXJzdE9w",
            "ZW5UaW1lGAcgASgDEhAKCG9wZW5UeXBlGAggASgNEhMKC2Zhc3RKb2luTWFw",
            "GAkgASgNEhYKDmluUm9vbUdhbWVKb2luGAogASgNEhAKCHNob3dUeXBlGAsg",
            "ASgJEhAKCG1vZGVTdGF0GAwgASgNEhIKCndlYXBvblN0YXQYDSABKA0SEAoI",
            "dHJha1N0YXQYDiABKA0SEAoIc2F2ZVN0YXQYDyABKA0SGQoRYmF0dGxlUmVj",
            "b3JkTGFiZWwYECABKAkSFQoNdGVhbU1heFBlcnNvbhgRIAEoDRIdChVtYXhP",
            "ZmZsaW5lQ29ubmVjdFRpbWUYEiABKA0SEQoJbWluUGVyc29uGBMgASgNEhEK",
            "CW1heFBlcnNvbhgUIAEoDRIVCg1tYXhDYW1wUGVyc29uGBUgASgNEhYKDm1h",
            "dGNoQ2FtcENvdW50GBYgASgNEjUKCGNhbXBJbmZvGBcgAygLMiMuRDExLlBi",
            "ZWFucy5HYW1lTW9kZUNvbmZpZ19jYW1wSW5mbxISCgptb2RlQmdQYXRoGBgg",
            "ASgJEhQKDG1pbkNhbXBDb3VudBgZIAEoDRITCgtwcmlKb2luQ2FtcBgaIAEo",
            "CRIOCgZpY29uSWQYGyABKA0SEQoJaWNvbk1hcElkGBwgASgNEhAKCG1vZGVE",
            "ZXNjGB0gASgJEhQKDGxvYWRpbmdUeXBlcxgeIAEoDRITCgtsb2FkaW5nRGVz",
            "YxgfIAMoCRIRCgl2b2ljZUNoYXQYICABKA0SFQoNZGVhZFZvaWNlQ2hhdBgh",
            "IAEoDRITCgt3aW5SYXRlU3RhdBgiIAEoDRIWCg5za2lsbENvc3RMaW1pdBgj",
            "IAEoDRIVCg1wcmVDbGVhck1vZGVzGCQgAygNIi0KF0dhbWVNb2RlQ29uZmln",
            "X2NhbXBJbmZvEhIKCmNhbXBQZXJzb24YASABKA0iQQoUR2FtZU1vZGVDb25m",
            "aWdfQXJyYXkSKQoFaXRlbXMYASADKAsyGi5EMTEuUGJlYW5zLkdhbWVNb2Rl",
            "Q29uZmlnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.GameModeConfig), global::D11.Pbeans.GameModeConfig.Parser, new[]{ "Id", "Name", "MainType", "SortNum", "UnlockLvl", "FirstDisplayTime", "FirstOpenTime", "OpenType", "FastJoinMap", "InRoomGameJoin", "ShowType", "ModeStat", "WeaponStat", "TrakStat", "SaveStat", "BattleRecordLabel", "TeamMaxPerson", "MaxOfflineConnectTime", "MinPerson", "MaxPerson", "MaxCampPerson", "MatchCampCount", "CampInfo", "ModeBgPath", "MinCampCount", "PriJoinCamp", "IconId", "IconMapId", "ModeDesc", "LoadingTypes", "LoadingDesc", "VoiceChat", "DeadVoiceChat", "WinRateStat", "SkillCostLimit", "PreClearModes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.GameModeConfig_campInfo), global::D11.Pbeans.GameModeConfig_campInfo.Parser, new[]{ "CampPerson" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.GameModeConfig_Array), global::D11.Pbeans.GameModeConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GameModeConfig : pb::IMessage<GameModeConfig> {
    private static readonly pb::MessageParser<GameModeConfig> _parser = new pb::MessageParser<GameModeConfig>(() => new GameModeConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameModeConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansGamemodeconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeConfig(GameModeConfig other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      mainType_ = other.mainType_;
      sortNum_ = other.sortNum_;
      unlockLvl_ = other.unlockLvl_;
      firstDisplayTime_ = other.firstDisplayTime_;
      firstOpenTime_ = other.firstOpenTime_;
      openType_ = other.openType_;
      fastJoinMap_ = other.fastJoinMap_;
      inRoomGameJoin_ = other.inRoomGameJoin_;
      showType_ = other.showType_;
      modeStat_ = other.modeStat_;
      weaponStat_ = other.weaponStat_;
      trakStat_ = other.trakStat_;
      saveStat_ = other.saveStat_;
      battleRecordLabel_ = other.battleRecordLabel_;
      teamMaxPerson_ = other.teamMaxPerson_;
      maxOfflineConnectTime_ = other.maxOfflineConnectTime_;
      minPerson_ = other.minPerson_;
      maxPerson_ = other.maxPerson_;
      maxCampPerson_ = other.maxCampPerson_;
      matchCampCount_ = other.matchCampCount_;
      campInfo_ = other.campInfo_.Clone();
      modeBgPath_ = other.modeBgPath_;
      minCampCount_ = other.minCampCount_;
      priJoinCamp_ = other.priJoinCamp_;
      iconId_ = other.iconId_;
      iconMapId_ = other.iconMapId_;
      modeDesc_ = other.modeDesc_;
      loadingTypes_ = other.loadingTypes_;
      loadingDesc_ = other.loadingDesc_.Clone();
      voiceChat_ = other.voiceChat_;
      deadVoiceChat_ = other.deadVoiceChat_;
      winRateStat_ = other.winRateStat_;
      skillCostLimit_ = other.skillCostLimit_;
      preClearModes_ = other.preClearModes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeConfig Clone() {
      return new GameModeConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 模式ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 正式名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mainType" field.</summary>
    public const int MainTypeFieldNumber = 3;
    private uint mainType_;
    /// <summary>
    /// 入口类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MainType {
      get { return mainType_; }
      set {
        mainType_ = value;
      }
    }

    /// <summary>Field number for the "sortNum" field.</summary>
    public const int SortNumFieldNumber = 4;
    private uint sortNum_;
    /// <summary>
    /// 排序值(正序) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SortNum {
      get { return sortNum_; }
      set {
        sortNum_ = value;
      }
    }

    /// <summary>Field number for the "unlockLvl" field.</summary>
    public const int UnlockLvlFieldNumber = 5;
    private uint unlockLvl_;
    /// <summary>
    /// 最低级数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnlockLvl {
      get { return unlockLvl_; }
      set {
        unlockLvl_ = value;
      }
    }

    /// <summary>Field number for the "firstDisplayTime" field.</summary>
    public const int FirstDisplayTimeFieldNumber = 6;
    private long firstDisplayTime_;
    /// <summary>
    /// 首次预告时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FirstDisplayTime {
      get { return firstDisplayTime_; }
      set {
        firstDisplayTime_ = value;
      }
    }

    /// <summary>Field number for the "firstOpenTime" field.</summary>
    public const int FirstOpenTimeFieldNumber = 7;
    private long firstOpenTime_;
    /// <summary>
    /// 首次上架时间(2000-01-01 10:00:00) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FirstOpenTime {
      get { return firstOpenTime_; }
      set {
        firstOpenTime_ = value;
      }
    }

    /// <summary>Field number for the "openType" field.</summary>
    public const int OpenTypeFieldNumber = 8;
    private uint openType_;
    /// <summary>
    /// 上架策略 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenType {
      get { return openType_; }
      set {
        openType_ = value;
      }
    }

    /// <summary>Field number for the "fastJoinMap" field.</summary>
    public const int FastJoinMapFieldNumber = 9;
    private uint fastJoinMap_;
    /// <summary>
    /// 快速加入默认地图 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FastJoinMap {
      get { return fastJoinMap_; }
      set {
        fastJoinMap_ = value;
      }
    }

    /// <summary>Field number for the "inRoomGameJoin" field.</summary>
    public const int InRoomGameJoinFieldNumber = 10;
    private uint inRoomGameJoin_;
    /// <summary>
    /// 是否可以中途加入(1=>可只配房间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InRoomGameJoin {
      get { return inRoomGameJoin_; }
      set {
        inRoomGameJoin_ = value;
      }
    }

    /// <summary>Field number for the "showType" field.</summary>
    public const int ShowTypeFieldNumber = 11;
    private string showType_ = "";
    /// <summary>
    /// 模式英文代号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShowType {
      get { return showType_; }
      set {
        showType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modeStat" field.</summary>
    public const int ModeStatFieldNumber = 12;
    private uint modeStat_;
    /// <summary>
    /// 模式数据是否计入模式展示数据统计 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ModeStat {
      get { return modeStat_; }
      set {
        modeStat_ = value;
      }
    }

    /// <summary>Field number for the "weaponStat" field.</summary>
    public const int WeaponStatFieldNumber = 13;
    private uint weaponStat_;
    /// <summary>
    /// 武器数据是否计入局内数据统计 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeaponStat {
      get { return weaponStat_; }
      set {
        weaponStat_ = value;
      }
    }

    /// <summary>Field number for the "trakStat" field.</summary>
    public const int TrakStatFieldNumber = 14;
    private uint trakStat_;
    /// <summary>
    /// 击杀是否计入暗金统计 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TrakStat {
      get { return trakStat_; }
      set {
        trakStat_ = value;
      }
    }

    /// <summary>Field number for the "saveStat" field.</summary>
    public const int SaveStatFieldNumber = 15;
    private uint saveStat_;
    /// <summary>
    /// 是否保存战绩 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SaveStat {
      get { return saveStat_; }
      set {
        saveStat_ = value;
      }
    }

    /// <summary>Field number for the "battleRecordLabel" field.</summary>
    public const int BattleRecordLabelFieldNumber = 16;
    private string battleRecordLabel_ = "";
    /// <summary>
    /// 对战战绩中页签（配置了的模式才会展示在对战战绩页签中） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattleRecordLabel {
      get { return battleRecordLabel_; }
      set {
        battleRecordLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamMaxPerson" field.</summary>
    public const int TeamMaxPersonFieldNumber = 17;
    private uint teamMaxPerson_;
    /// <summary>
    /// 匹配队伍最大人数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamMaxPerson {
      get { return teamMaxPerson_; }
      set {
        teamMaxPerson_ = value;
      }
    }

    /// <summary>Field number for the "maxOfflineConnectTime" field.</summary>
    public const int MaxOfflineConnectTimeFieldNumber = 18;
    private uint maxOfflineConnectTime_;
    /// <summary>
    /// 房间/队伍踢人最大时间（超过对应时间服务器主动踢出） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxOfflineConnectTime {
      get { return maxOfflineConnectTime_; }
      set {
        maxOfflineConnectTime_ = value;
      }
    }

    /// <summary>Field number for the "minPerson" field.</summary>
    public const int MinPersonFieldNumber = 19;
    private uint minPerson_;
    /// <summary>
    /// 最小人数[匹配模式不用配置，匹配有单独的配置] 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinPerson {
      get { return minPerson_; }
      set {
        minPerson_ = value;
      }
    }

    /// <summary>Field number for the "maxPerson" field.</summary>
    public const int MaxPersonFieldNumber = 20;
    private uint maxPerson_;
    /// <summary>
    /// 单局最大人数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxPerson {
      get { return maxPerson_; }
      set {
        maxPerson_ = value;
      }
    }

    /// <summary>Field number for the "maxCampPerson" field.</summary>
    public const int MaxCampPersonFieldNumber = 21;
    private uint maxCampPerson_;
    /// <summary>
    /// 阵营最大人数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxCampPerson {
      get { return maxCampPerson_; }
      set {
        maxCampPerson_ = value;
      }
    }

    /// <summary>Field number for the "matchCampCount" field.</summary>
    public const int MatchCampCountFieldNumber = 22;
    private uint matchCampCount_;
    /// <summary>
    /// 匹配阵营数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchCampCount {
      get { return matchCampCount_; }
      set {
        matchCampCount_ = value;
      }
    }

    /// <summary>Field number for the "campInfo" field.</summary>
    public const int CampInfoFieldNumber = 23;
    private static readonly pb::FieldCodec<global::D11.Pbeans.GameModeConfig_campInfo> _repeated_campInfo_codec
        = pb::FieldCodec.ForMessage(186, global::D11.Pbeans.GameModeConfig_campInfo.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.GameModeConfig_campInfo> campInfo_ = new pbc::RepeatedField<global::D11.Pbeans.GameModeConfig_campInfo>();
    /// <summary>
    /// CT阵营人数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.GameModeConfig_campInfo> CampInfo {
      get { return campInfo_; }
    }

    /// <summary>Field number for the "modeBgPath" field.</summary>
    public const int ModeBgPathFieldNumber = 24;
    private string modeBgPath_ = "";
    /// <summary>
    /// 模式大背景全路径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModeBgPath {
      get { return modeBgPath_; }
      set {
        modeBgPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minCampCount" field.</summary>
    public const int MinCampCountFieldNumber = 25;
    private uint minCampCount_;
    /// <summary>
    /// 开局最小阵营数量(房间使用，匹配可以不配) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinCampCount {
      get { return minCampCount_; }
      set {
        minCampCount_ = value;
      }
    }

    /// <summary>Field number for the "priJoinCamp" field.</summary>
    public const int PriJoinCampFieldNumber = 26;
    private string priJoinCamp_ = "";
    /// <summary>
    /// 加入房间的阵营选择（max:优先选择人多阵营加入，min/不配:优先选择人少阵营 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PriJoinCamp {
      get { return priJoinCamp_; }
      set {
        priJoinCamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iconId" field.</summary>
    public const int IconIdFieldNumber = 27;
    private uint iconId_;
    /// <summary>
    /// 模式菜单图标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IconId {
      get { return iconId_; }
      set {
        iconId_ = value;
      }
    }

    /// <summary>Field number for the "iconMapId" field.</summary>
    public const int IconMapIdFieldNumber = 28;
    private uint iconMapId_;
    /// <summary>
    /// 模式展示地图 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IconMapId {
      get { return iconMapId_; }
      set {
        iconMapId_ = value;
      }
    }

    /// <summary>Field number for the "modeDesc" field.</summary>
    public const int ModeDescFieldNumber = 29;
    private string modeDesc_ = "";
    /// <summary>
    /// 模式说明 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModeDesc {
      get { return modeDesc_; }
      set {
        modeDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loadingTypes" field.</summary>
    public const int LoadingTypesFieldNumber = 30;
    private uint loadingTypes_;
    /// <summary>
    /// loading样式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoadingTypes {
      get { return loadingTypes_; }
      set {
        loadingTypes_ = value;
      }
    }

    /// <summary>Field number for the "loadingDesc" field.</summary>
    public const int LoadingDescFieldNumber = 31;
    private static readonly pb::FieldCodec<string> _repeated_loadingDesc_codec
        = pb::FieldCodec.ForString(250);
    private readonly pbc::RepeatedField<string> loadingDesc_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// loading模式说明1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LoadingDesc {
      get { return loadingDesc_; }
    }

    /// <summary>Field number for the "voiceChat" field.</summary>
    public const int VoiceChatFieldNumber = 32;
    private uint voiceChat_;
    /// <summary>
    /// 是否打开局内语音 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VoiceChat {
      get { return voiceChat_; }
      set {
        voiceChat_ = value;
      }
    }

    /// <summary>Field number for the "deadVoiceChat" field.</summary>
    public const int DeadVoiceChatFieldNumber = 33;
    private uint deadVoiceChat_;
    /// <summary>
    /// 是否打开死亡语音 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeadVoiceChat {
      get { return deadVoiceChat_; }
      set {
        deadVoiceChat_ = value;
      }
    }

    /// <summary>Field number for the "winRateStat" field.</summary>
    public const int WinRateStatFieldNumber = 34;
    private uint winRateStat_;
    /// <summary>
    /// 是否计入胜率统计 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WinRateStat {
      get { return winRateStat_; }
      set {
        winRateStat_ = value;
      }
    }

    /// <summary>Field number for the "skillCostLimit" field.</summary>
    public const int SkillCostLimitFieldNumber = 35;
    private uint skillCostLimit_;
    /// <summary>
    /// 模式技能点数上限 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillCostLimit {
      get { return skillCostLimit_; }
      set {
        skillCostLimit_ = value;
      }
    }

    /// <summary>Field number for the "preClearModes" field.</summary>
    public const int PreClearModesFieldNumber = 36;
    private static readonly pb::FieldCodec<uint> _repeated_preClearModes_codec
        = pb::FieldCodec.ForUInt32(290);
    private readonly pbc::RepeatedField<uint> preClearModes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 前置通关模式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PreClearModes {
      get { return preClearModes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameModeConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameModeConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (MainType != other.MainType) return false;
      if (SortNum != other.SortNum) return false;
      if (UnlockLvl != other.UnlockLvl) return false;
      if (FirstDisplayTime != other.FirstDisplayTime) return false;
      if (FirstOpenTime != other.FirstOpenTime) return false;
      if (OpenType != other.OpenType) return false;
      if (FastJoinMap != other.FastJoinMap) return false;
      if (InRoomGameJoin != other.InRoomGameJoin) return false;
      if (ShowType != other.ShowType) return false;
      if (ModeStat != other.ModeStat) return false;
      if (WeaponStat != other.WeaponStat) return false;
      if (TrakStat != other.TrakStat) return false;
      if (SaveStat != other.SaveStat) return false;
      if (BattleRecordLabel != other.BattleRecordLabel) return false;
      if (TeamMaxPerson != other.TeamMaxPerson) return false;
      if (MaxOfflineConnectTime != other.MaxOfflineConnectTime) return false;
      if (MinPerson != other.MinPerson) return false;
      if (MaxPerson != other.MaxPerson) return false;
      if (MaxCampPerson != other.MaxCampPerson) return false;
      if (MatchCampCount != other.MatchCampCount) return false;
      if(!campInfo_.Equals(other.campInfo_)) return false;
      if (ModeBgPath != other.ModeBgPath) return false;
      if (MinCampCount != other.MinCampCount) return false;
      if (PriJoinCamp != other.PriJoinCamp) return false;
      if (IconId != other.IconId) return false;
      if (IconMapId != other.IconMapId) return false;
      if (ModeDesc != other.ModeDesc) return false;
      if (LoadingTypes != other.LoadingTypes) return false;
      if(!loadingDesc_.Equals(other.loadingDesc_)) return false;
      if (VoiceChat != other.VoiceChat) return false;
      if (DeadVoiceChat != other.DeadVoiceChat) return false;
      if (WinRateStat != other.WinRateStat) return false;
      if (SkillCostLimit != other.SkillCostLimit) return false;
      if(!preClearModes_.Equals(other.preClearModes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MainType != 0) hash ^= MainType.GetHashCode();
      if (SortNum != 0) hash ^= SortNum.GetHashCode();
      if (UnlockLvl != 0) hash ^= UnlockLvl.GetHashCode();
      if (FirstDisplayTime != 0L) hash ^= FirstDisplayTime.GetHashCode();
      if (FirstOpenTime != 0L) hash ^= FirstOpenTime.GetHashCode();
      if (OpenType != 0) hash ^= OpenType.GetHashCode();
      if (FastJoinMap != 0) hash ^= FastJoinMap.GetHashCode();
      if (InRoomGameJoin != 0) hash ^= InRoomGameJoin.GetHashCode();
      if (ShowType.Length != 0) hash ^= ShowType.GetHashCode();
      if (ModeStat != 0) hash ^= ModeStat.GetHashCode();
      if (WeaponStat != 0) hash ^= WeaponStat.GetHashCode();
      if (TrakStat != 0) hash ^= TrakStat.GetHashCode();
      if (SaveStat != 0) hash ^= SaveStat.GetHashCode();
      if (BattleRecordLabel.Length != 0) hash ^= BattleRecordLabel.GetHashCode();
      if (TeamMaxPerson != 0) hash ^= TeamMaxPerson.GetHashCode();
      if (MaxOfflineConnectTime != 0) hash ^= MaxOfflineConnectTime.GetHashCode();
      if (MinPerson != 0) hash ^= MinPerson.GetHashCode();
      if (MaxPerson != 0) hash ^= MaxPerson.GetHashCode();
      if (MaxCampPerson != 0) hash ^= MaxCampPerson.GetHashCode();
      if (MatchCampCount != 0) hash ^= MatchCampCount.GetHashCode();
      hash ^= campInfo_.GetHashCode();
      if (ModeBgPath.Length != 0) hash ^= ModeBgPath.GetHashCode();
      if (MinCampCount != 0) hash ^= MinCampCount.GetHashCode();
      if (PriJoinCamp.Length != 0) hash ^= PriJoinCamp.GetHashCode();
      if (IconId != 0) hash ^= IconId.GetHashCode();
      if (IconMapId != 0) hash ^= IconMapId.GetHashCode();
      if (ModeDesc.Length != 0) hash ^= ModeDesc.GetHashCode();
      if (LoadingTypes != 0) hash ^= LoadingTypes.GetHashCode();
      hash ^= loadingDesc_.GetHashCode();
      if (VoiceChat != 0) hash ^= VoiceChat.GetHashCode();
      if (DeadVoiceChat != 0) hash ^= DeadVoiceChat.GetHashCode();
      if (WinRateStat != 0) hash ^= WinRateStat.GetHashCode();
      if (SkillCostLimit != 0) hash ^= SkillCostLimit.GetHashCode();
      hash ^= preClearModes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MainType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MainType);
      }
      if (SortNum != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SortNum);
      }
      if (UnlockLvl != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(UnlockLvl);
      }
      if (FirstDisplayTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(FirstDisplayTime);
      }
      if (FirstOpenTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(FirstOpenTime);
      }
      if (OpenType != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(OpenType);
      }
      if (FastJoinMap != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(FastJoinMap);
      }
      if (InRoomGameJoin != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(InRoomGameJoin);
      }
      if (ShowType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ShowType);
      }
      if (ModeStat != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(ModeStat);
      }
      if (WeaponStat != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(WeaponStat);
      }
      if (TrakStat != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(TrakStat);
      }
      if (SaveStat != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(SaveStat);
      }
      if (BattleRecordLabel.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(BattleRecordLabel);
      }
      if (TeamMaxPerson != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(TeamMaxPerson);
      }
      if (MaxOfflineConnectTime != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(MaxOfflineConnectTime);
      }
      if (MinPerson != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(MinPerson);
      }
      if (MaxPerson != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(MaxPerson);
      }
      if (MaxCampPerson != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(MaxCampPerson);
      }
      if (MatchCampCount != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(MatchCampCount);
      }
      campInfo_.WriteTo(output, _repeated_campInfo_codec);
      if (ModeBgPath.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(ModeBgPath);
      }
      if (MinCampCount != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(MinCampCount);
      }
      if (PriJoinCamp.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(PriJoinCamp);
      }
      if (IconId != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(IconId);
      }
      if (IconMapId != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(IconMapId);
      }
      if (ModeDesc.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(ModeDesc);
      }
      if (LoadingTypes != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(LoadingTypes);
      }
      loadingDesc_.WriteTo(output, _repeated_loadingDesc_codec);
      if (VoiceChat != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(VoiceChat);
      }
      if (DeadVoiceChat != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(DeadVoiceChat);
      }
      if (WinRateStat != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(WinRateStat);
      }
      if (SkillCostLimit != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(SkillCostLimit);
      }
      preClearModes_.WriteTo(output, _repeated_preClearModes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MainType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MainType);
      }
      if (SortNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SortNum);
      }
      if (UnlockLvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnlockLvl);
      }
      if (FirstDisplayTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FirstDisplayTime);
      }
      if (FirstOpenTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FirstOpenTime);
      }
      if (OpenType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenType);
      }
      if (FastJoinMap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FastJoinMap);
      }
      if (InRoomGameJoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InRoomGameJoin);
      }
      if (ShowType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowType);
      }
      if (ModeStat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ModeStat);
      }
      if (WeaponStat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeaponStat);
      }
      if (TrakStat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TrakStat);
      }
      if (SaveStat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SaveStat);
      }
      if (BattleRecordLabel.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BattleRecordLabel);
      }
      if (TeamMaxPerson != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TeamMaxPerson);
      }
      if (MaxOfflineConnectTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxOfflineConnectTime);
      }
      if (MinPerson != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MinPerson);
      }
      if (MaxPerson != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxPerson);
      }
      if (MaxCampPerson != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxCampPerson);
      }
      if (MatchCampCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MatchCampCount);
      }
      size += campInfo_.CalculateSize(_repeated_campInfo_codec);
      if (ModeBgPath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModeBgPath);
      }
      if (MinCampCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MinCampCount);
      }
      if (PriJoinCamp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PriJoinCamp);
      }
      if (IconId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IconId);
      }
      if (IconMapId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IconMapId);
      }
      if (ModeDesc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModeDesc);
      }
      if (LoadingTypes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LoadingTypes);
      }
      size += loadingDesc_.CalculateSize(_repeated_loadingDesc_codec);
      if (VoiceChat != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(VoiceChat);
      }
      if (DeadVoiceChat != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DeadVoiceChat);
      }
      if (WinRateStat != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WinRateStat);
      }
      if (SkillCostLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SkillCostLimit);
      }
      size += preClearModes_.CalculateSize(_repeated_preClearModes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameModeConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MainType != 0) {
        MainType = other.MainType;
      }
      if (other.SortNum != 0) {
        SortNum = other.SortNum;
      }
      if (other.UnlockLvl != 0) {
        UnlockLvl = other.UnlockLvl;
      }
      if (other.FirstDisplayTime != 0L) {
        FirstDisplayTime = other.FirstDisplayTime;
      }
      if (other.FirstOpenTime != 0L) {
        FirstOpenTime = other.FirstOpenTime;
      }
      if (other.OpenType != 0) {
        OpenType = other.OpenType;
      }
      if (other.FastJoinMap != 0) {
        FastJoinMap = other.FastJoinMap;
      }
      if (other.InRoomGameJoin != 0) {
        InRoomGameJoin = other.InRoomGameJoin;
      }
      if (other.ShowType.Length != 0) {
        ShowType = other.ShowType;
      }
      if (other.ModeStat != 0) {
        ModeStat = other.ModeStat;
      }
      if (other.WeaponStat != 0) {
        WeaponStat = other.WeaponStat;
      }
      if (other.TrakStat != 0) {
        TrakStat = other.TrakStat;
      }
      if (other.SaveStat != 0) {
        SaveStat = other.SaveStat;
      }
      if (other.BattleRecordLabel.Length != 0) {
        BattleRecordLabel = other.BattleRecordLabel;
      }
      if (other.TeamMaxPerson != 0) {
        TeamMaxPerson = other.TeamMaxPerson;
      }
      if (other.MaxOfflineConnectTime != 0) {
        MaxOfflineConnectTime = other.MaxOfflineConnectTime;
      }
      if (other.MinPerson != 0) {
        MinPerson = other.MinPerson;
      }
      if (other.MaxPerson != 0) {
        MaxPerson = other.MaxPerson;
      }
      if (other.MaxCampPerson != 0) {
        MaxCampPerson = other.MaxCampPerson;
      }
      if (other.MatchCampCount != 0) {
        MatchCampCount = other.MatchCampCount;
      }
      campInfo_.Add(other.campInfo_);
      if (other.ModeBgPath.Length != 0) {
        ModeBgPath = other.ModeBgPath;
      }
      if (other.MinCampCount != 0) {
        MinCampCount = other.MinCampCount;
      }
      if (other.PriJoinCamp.Length != 0) {
        PriJoinCamp = other.PriJoinCamp;
      }
      if (other.IconId != 0) {
        IconId = other.IconId;
      }
      if (other.IconMapId != 0) {
        IconMapId = other.IconMapId;
      }
      if (other.ModeDesc.Length != 0) {
        ModeDesc = other.ModeDesc;
      }
      if (other.LoadingTypes != 0) {
        LoadingTypes = other.LoadingTypes;
      }
      loadingDesc_.Add(other.loadingDesc_);
      if (other.VoiceChat != 0) {
        VoiceChat = other.VoiceChat;
      }
      if (other.DeadVoiceChat != 0) {
        DeadVoiceChat = other.DeadVoiceChat;
      }
      if (other.WinRateStat != 0) {
        WinRateStat = other.WinRateStat;
      }
      if (other.SkillCostLimit != 0) {
        SkillCostLimit = other.SkillCostLimit;
      }
      preClearModes_.Add(other.preClearModes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            MainType = input.ReadUInt32();
            break;
          }
          case 32: {
            SortNum = input.ReadUInt32();
            break;
          }
          case 40: {
            UnlockLvl = input.ReadUInt32();
            break;
          }
          case 48: {
            FirstDisplayTime = input.ReadInt64();
            break;
          }
          case 56: {
            FirstOpenTime = input.ReadInt64();
            break;
          }
          case 64: {
            OpenType = input.ReadUInt32();
            break;
          }
          case 72: {
            FastJoinMap = input.ReadUInt32();
            break;
          }
          case 80: {
            InRoomGameJoin = input.ReadUInt32();
            break;
          }
          case 90: {
            ShowType = input.ReadString();
            break;
          }
          case 96: {
            ModeStat = input.ReadUInt32();
            break;
          }
          case 104: {
            WeaponStat = input.ReadUInt32();
            break;
          }
          case 112: {
            TrakStat = input.ReadUInt32();
            break;
          }
          case 120: {
            SaveStat = input.ReadUInt32();
            break;
          }
          case 130: {
            BattleRecordLabel = input.ReadString();
            break;
          }
          case 136: {
            TeamMaxPerson = input.ReadUInt32();
            break;
          }
          case 144: {
            MaxOfflineConnectTime = input.ReadUInt32();
            break;
          }
          case 152: {
            MinPerson = input.ReadUInt32();
            break;
          }
          case 160: {
            MaxPerson = input.ReadUInt32();
            break;
          }
          case 168: {
            MaxCampPerson = input.ReadUInt32();
            break;
          }
          case 176: {
            MatchCampCount = input.ReadUInt32();
            break;
          }
          case 186: {
            campInfo_.AddEntriesFrom(input, _repeated_campInfo_codec);
            break;
          }
          case 194: {
            ModeBgPath = input.ReadString();
            break;
          }
          case 200: {
            MinCampCount = input.ReadUInt32();
            break;
          }
          case 210: {
            PriJoinCamp = input.ReadString();
            break;
          }
          case 216: {
            IconId = input.ReadUInt32();
            break;
          }
          case 224: {
            IconMapId = input.ReadUInt32();
            break;
          }
          case 234: {
            ModeDesc = input.ReadString();
            break;
          }
          case 240: {
            LoadingTypes = input.ReadUInt32();
            break;
          }
          case 250: {
            loadingDesc_.AddEntriesFrom(input, _repeated_loadingDesc_codec);
            break;
          }
          case 256: {
            VoiceChat = input.ReadUInt32();
            break;
          }
          case 264: {
            DeadVoiceChat = input.ReadUInt32();
            break;
          }
          case 272: {
            WinRateStat = input.ReadUInt32();
            break;
          }
          case 280: {
            SkillCostLimit = input.ReadUInt32();
            break;
          }
          case 290:
          case 288: {
            preClearModes_.AddEntriesFrom(input, _repeated_preClearModes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameModeConfig_campInfo : pb::IMessage<GameModeConfig_campInfo> {
    private static readonly pb::MessageParser<GameModeConfig_campInfo> _parser = new pb::MessageParser<GameModeConfig_campInfo>(() => new GameModeConfig_campInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameModeConfig_campInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansGamemodeconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeConfig_campInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeConfig_campInfo(GameModeConfig_campInfo other) : this() {
      campPerson_ = other.campPerson_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeConfig_campInfo Clone() {
      return new GameModeConfig_campInfo(this);
    }

    /// <summary>Field number for the "campPerson" field.</summary>
    public const int CampPersonFieldNumber = 1;
    private uint campPerson_;
    /// <summary>
    /// CT阵营人数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CampPerson {
      get { return campPerson_; }
      set {
        campPerson_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameModeConfig_campInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameModeConfig_campInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CampPerson != other.CampPerson) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CampPerson != 0) hash ^= CampPerson.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CampPerson != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CampPerson);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CampPerson != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CampPerson);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameModeConfig_campInfo other) {
      if (other == null) {
        return;
      }
      if (other.CampPerson != 0) {
        CampPerson = other.CampPerson;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CampPerson = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameModeConfig_Array : pb::IMessage<GameModeConfig_Array> {
    private static readonly pb::MessageParser<GameModeConfig_Array> _parser = new pb::MessageParser<GameModeConfig_Array>(() => new GameModeConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameModeConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansGamemodeconfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeConfig_Array(GameModeConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeConfig_Array Clone() {
      return new GameModeConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.GameModeConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.GameModeConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.GameModeConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.GameModeConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.GameModeConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameModeConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameModeConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameModeConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
