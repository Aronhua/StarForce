// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_gamemodedamagerateconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_gamemodedamagerateconfig.proto</summary>
  public static partial class XlsBeansGamemodedamagerateconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_gamemodedamagerateconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansGamemodedamagerateconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cih4bHNfYmVhbnNfZ2FtZW1vZGVkYW1hZ2VyYXRlY29uZmlnLnByb3RvEgpE",
            "MTEuUGJlYW5zIvYCChhHYW1lTW9kZURhbWFnZVJhdGVDb25maWcSCgoCaWQY",
            "ASABKAkSDgoGbW9kZUlkGAIgASgNEhcKD2VudGl0eUFyY2hldHlwZRgDIAEo",
            "DRIcChR3ZWFwb25EYW1hZ2VSYXRlU2VsZhgEIAEoAhIeChZ3ZWFwb25EYW1h",
            "Z2VSYXRlRnJpZW5kGAUgASgCEh8KF3dlYXBvbkRhbWFnZVJhdGVOZXV0cmFs",
            "GAYgASgCEh0KFXdlYXBvbkRhbWFnZVJhdGVFbmVteRgHIAEoAhIgChhwcm9q",
            "ZWN0aWxlRGFtYWdlUmF0ZVNlbGYYCCABKAISIgoacHJvamVjdGlsZURhbWFn",
            "ZVJhdGVGcmllbmQYCSABKAISIwobcHJvamVjdGlsZURhbWFnZVJhdGVOZXV0",
            "cmFsGAogASgCEiEKGXByb2plY3RpbGVEYW1hZ2VSYXRlRW5lbXkYCyABKAIS",
            "GQoRYmlnSGVhZERhbWFnZVJhdGUYDCABKAIiVQoeR2FtZU1vZGVEYW1hZ2VS",
            "YXRlQ29uZmlnX0FycmF5EjMKBWl0ZW1zGAEgAygLMiQuRDExLlBiZWFucy5H",
            "YW1lTW9kZURhbWFnZVJhdGVDb25maWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.GameModeDamageRateConfig), global::D11.Pbeans.GameModeDamageRateConfig.Parser, new[]{ "Id", "ModeId", "EntityArchetype", "WeaponDamageRateSelf", "WeaponDamageRateFriend", "WeaponDamageRateNeutral", "WeaponDamageRateEnemy", "ProjectileDamageRateSelf", "ProjectileDamageRateFriend", "ProjectileDamageRateNeutral", "ProjectileDamageRateEnemy", "BigHeadDamageRate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.GameModeDamageRateConfig_Array), global::D11.Pbeans.GameModeDamageRateConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GameModeDamageRateConfig : pb::IMessage<GameModeDamageRateConfig> {
    private static readonly pb::MessageParser<GameModeDamageRateConfig> _parser = new pb::MessageParser<GameModeDamageRateConfig>(() => new GameModeDamageRateConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameModeDamageRateConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansGamemodedamagerateconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeDamageRateConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeDamageRateConfig(GameModeDamageRateConfig other) : this() {
      id_ = other.id_;
      modeId_ = other.modeId_;
      entityArchetype_ = other.entityArchetype_;
      weaponDamageRateSelf_ = other.weaponDamageRateSelf_;
      weaponDamageRateFriend_ = other.weaponDamageRateFriend_;
      weaponDamageRateNeutral_ = other.weaponDamageRateNeutral_;
      weaponDamageRateEnemy_ = other.weaponDamageRateEnemy_;
      projectileDamageRateSelf_ = other.projectileDamageRateSelf_;
      projectileDamageRateFriend_ = other.projectileDamageRateFriend_;
      projectileDamageRateNeutral_ = other.projectileDamageRateNeutral_;
      projectileDamageRateEnemy_ = other.projectileDamageRateEnemy_;
      bigHeadDamageRate_ = other.bigHeadDamageRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeDamageRateConfig Clone() {
      return new GameModeDamageRateConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// 查询id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modeId" field.</summary>
    public const int ModeIdFieldNumber = 2;
    private uint modeId_;
    /// <summary>
    /// 模式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ModeId {
      get { return modeId_; }
      set {
        modeId_ = value;
      }
    }

    /// <summary>Field number for the "entityArchetype" field.</summary>
    public const int EntityArchetypeFieldNumber = 3;
    private uint entityArchetype_;
    /// <summary>
    /// 实体类型EEntityArchetype字段0：默认[必须配置]2：玩家13：交互物15：怪物 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntityArchetype {
      get { return entityArchetype_; }
      set {
        entityArchetype_ = value;
      }
    }

    /// <summary>Field number for the "weaponDamageRateSelf" field.</summary>
    public const int WeaponDamageRateSelfFieldNumber = 4;
    private float weaponDamageRateSelf_;
    /// <summary>
    /// 刀枪自伤系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeaponDamageRateSelf {
      get { return weaponDamageRateSelf_; }
      set {
        weaponDamageRateSelf_ = value;
      }
    }

    /// <summary>Field number for the "weaponDamageRateFriend" field.</summary>
    public const int WeaponDamageRateFriendFieldNumber = 5;
    private float weaponDamageRateFriend_;
    /// <summary>
    /// 刀枪友伤系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeaponDamageRateFriend {
      get { return weaponDamageRateFriend_; }
      set {
        weaponDamageRateFriend_ = value;
      }
    }

    /// <summary>Field number for the "weaponDamageRateNeutral" field.</summary>
    public const int WeaponDamageRateNeutralFieldNumber = 6;
    private float weaponDamageRateNeutral_;
    /// <summary>
    /// 刀枪中立系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeaponDamageRateNeutral {
      get { return weaponDamageRateNeutral_; }
      set {
        weaponDamageRateNeutral_ = value;
      }
    }

    /// <summary>Field number for the "weaponDamageRateEnemy" field.</summary>
    public const int WeaponDamageRateEnemyFieldNumber = 7;
    private float weaponDamageRateEnemy_;
    /// <summary>
    /// 刀枪敌伤系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeaponDamageRateEnemy {
      get { return weaponDamageRateEnemy_; }
      set {
        weaponDamageRateEnemy_ = value;
      }
    }

    /// <summary>Field number for the "projectileDamageRateSelf" field.</summary>
    public const int ProjectileDamageRateSelfFieldNumber = 8;
    private float projectileDamageRateSelf_;
    /// <summary>
    /// 投掷物自伤系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ProjectileDamageRateSelf {
      get { return projectileDamageRateSelf_; }
      set {
        projectileDamageRateSelf_ = value;
      }
    }

    /// <summary>Field number for the "projectileDamageRateFriend" field.</summary>
    public const int ProjectileDamageRateFriendFieldNumber = 9;
    private float projectileDamageRateFriend_;
    /// <summary>
    /// 投掷物友伤系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ProjectileDamageRateFriend {
      get { return projectileDamageRateFriend_; }
      set {
        projectileDamageRateFriend_ = value;
      }
    }

    /// <summary>Field number for the "projectileDamageRateNeutral" field.</summary>
    public const int ProjectileDamageRateNeutralFieldNumber = 10;
    private float projectileDamageRateNeutral_;
    /// <summary>
    /// 投掷物中立系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ProjectileDamageRateNeutral {
      get { return projectileDamageRateNeutral_; }
      set {
        projectileDamageRateNeutral_ = value;
      }
    }

    /// <summary>Field number for the "projectileDamageRateEnemy" field.</summary>
    public const int ProjectileDamageRateEnemyFieldNumber = 11;
    private float projectileDamageRateEnemy_;
    /// <summary>
    /// 投掷物敌伤系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ProjectileDamageRateEnemy {
      get { return projectileDamageRateEnemy_; }
      set {
        projectileDamageRateEnemy_ = value;
      }
    }

    /// <summary>Field number for the "bigHeadDamageRate" field.</summary>
    public const int BigHeadDamageRateFieldNumber = 12;
    private float bigHeadDamageRate_;
    /// <summary>
    /// 大头阶段枪械敌伤系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BigHeadDamageRate {
      get { return bigHeadDamageRate_; }
      set {
        bigHeadDamageRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameModeDamageRateConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameModeDamageRateConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ModeId != other.ModeId) return false;
      if (EntityArchetype != other.EntityArchetype) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WeaponDamageRateSelf, other.WeaponDamageRateSelf)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WeaponDamageRateFriend, other.WeaponDamageRateFriend)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WeaponDamageRateNeutral, other.WeaponDamageRateNeutral)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WeaponDamageRateEnemy, other.WeaponDamageRateEnemy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ProjectileDamageRateSelf, other.ProjectileDamageRateSelf)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ProjectileDamageRateFriend, other.ProjectileDamageRateFriend)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ProjectileDamageRateNeutral, other.ProjectileDamageRateNeutral)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ProjectileDamageRateEnemy, other.ProjectileDamageRateEnemy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BigHeadDamageRate, other.BigHeadDamageRate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ModeId != 0) hash ^= ModeId.GetHashCode();
      if (EntityArchetype != 0) hash ^= EntityArchetype.GetHashCode();
      if (WeaponDamageRateSelf != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WeaponDamageRateSelf);
      if (WeaponDamageRateFriend != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WeaponDamageRateFriend);
      if (WeaponDamageRateNeutral != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WeaponDamageRateNeutral);
      if (WeaponDamageRateEnemy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WeaponDamageRateEnemy);
      if (ProjectileDamageRateSelf != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ProjectileDamageRateSelf);
      if (ProjectileDamageRateFriend != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ProjectileDamageRateFriend);
      if (ProjectileDamageRateNeutral != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ProjectileDamageRateNeutral);
      if (ProjectileDamageRateEnemy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ProjectileDamageRateEnemy);
      if (BigHeadDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BigHeadDamageRate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ModeId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ModeId);
      }
      if (EntityArchetype != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EntityArchetype);
      }
      if (WeaponDamageRateSelf != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(WeaponDamageRateSelf);
      }
      if (WeaponDamageRateFriend != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(WeaponDamageRateFriend);
      }
      if (WeaponDamageRateNeutral != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(WeaponDamageRateNeutral);
      }
      if (WeaponDamageRateEnemy != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(WeaponDamageRateEnemy);
      }
      if (ProjectileDamageRateSelf != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ProjectileDamageRateSelf);
      }
      if (ProjectileDamageRateFriend != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(ProjectileDamageRateFriend);
      }
      if (ProjectileDamageRateNeutral != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(ProjectileDamageRateNeutral);
      }
      if (ProjectileDamageRateEnemy != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(ProjectileDamageRateEnemy);
      }
      if (BigHeadDamageRate != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(BigHeadDamageRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ModeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ModeId);
      }
      if (EntityArchetype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntityArchetype);
      }
      if (WeaponDamageRateSelf != 0F) {
        size += 1 + 4;
      }
      if (WeaponDamageRateFriend != 0F) {
        size += 1 + 4;
      }
      if (WeaponDamageRateNeutral != 0F) {
        size += 1 + 4;
      }
      if (WeaponDamageRateEnemy != 0F) {
        size += 1 + 4;
      }
      if (ProjectileDamageRateSelf != 0F) {
        size += 1 + 4;
      }
      if (ProjectileDamageRateFriend != 0F) {
        size += 1 + 4;
      }
      if (ProjectileDamageRateNeutral != 0F) {
        size += 1 + 4;
      }
      if (ProjectileDamageRateEnemy != 0F) {
        size += 1 + 4;
      }
      if (BigHeadDamageRate != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameModeDamageRateConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ModeId != 0) {
        ModeId = other.ModeId;
      }
      if (other.EntityArchetype != 0) {
        EntityArchetype = other.EntityArchetype;
      }
      if (other.WeaponDamageRateSelf != 0F) {
        WeaponDamageRateSelf = other.WeaponDamageRateSelf;
      }
      if (other.WeaponDamageRateFriend != 0F) {
        WeaponDamageRateFriend = other.WeaponDamageRateFriend;
      }
      if (other.WeaponDamageRateNeutral != 0F) {
        WeaponDamageRateNeutral = other.WeaponDamageRateNeutral;
      }
      if (other.WeaponDamageRateEnemy != 0F) {
        WeaponDamageRateEnemy = other.WeaponDamageRateEnemy;
      }
      if (other.ProjectileDamageRateSelf != 0F) {
        ProjectileDamageRateSelf = other.ProjectileDamageRateSelf;
      }
      if (other.ProjectileDamageRateFriend != 0F) {
        ProjectileDamageRateFriend = other.ProjectileDamageRateFriend;
      }
      if (other.ProjectileDamageRateNeutral != 0F) {
        ProjectileDamageRateNeutral = other.ProjectileDamageRateNeutral;
      }
      if (other.ProjectileDamageRateEnemy != 0F) {
        ProjectileDamageRateEnemy = other.ProjectileDamageRateEnemy;
      }
      if (other.BigHeadDamageRate != 0F) {
        BigHeadDamageRate = other.BigHeadDamageRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            ModeId = input.ReadUInt32();
            break;
          }
          case 24: {
            EntityArchetype = input.ReadUInt32();
            break;
          }
          case 37: {
            WeaponDamageRateSelf = input.ReadFloat();
            break;
          }
          case 45: {
            WeaponDamageRateFriend = input.ReadFloat();
            break;
          }
          case 53: {
            WeaponDamageRateNeutral = input.ReadFloat();
            break;
          }
          case 61: {
            WeaponDamageRateEnemy = input.ReadFloat();
            break;
          }
          case 69: {
            ProjectileDamageRateSelf = input.ReadFloat();
            break;
          }
          case 77: {
            ProjectileDamageRateFriend = input.ReadFloat();
            break;
          }
          case 85: {
            ProjectileDamageRateNeutral = input.ReadFloat();
            break;
          }
          case 93: {
            ProjectileDamageRateEnemy = input.ReadFloat();
            break;
          }
          case 101: {
            BigHeadDamageRate = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameModeDamageRateConfig_Array : pb::IMessage<GameModeDamageRateConfig_Array> {
    private static readonly pb::MessageParser<GameModeDamageRateConfig_Array> _parser = new pb::MessageParser<GameModeDamageRateConfig_Array>(() => new GameModeDamageRateConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameModeDamageRateConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansGamemodedamagerateconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeDamageRateConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeDamageRateConfig_Array(GameModeDamageRateConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeDamageRateConfig_Array Clone() {
      return new GameModeDamageRateConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.GameModeDamageRateConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.GameModeDamageRateConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.GameModeDamageRateConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.GameModeDamageRateConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.GameModeDamageRateConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameModeDamageRateConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameModeDamageRateConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameModeDamageRateConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
