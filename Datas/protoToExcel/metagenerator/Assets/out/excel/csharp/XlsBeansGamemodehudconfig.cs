// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_gamemodehudconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_gamemodehudconfig.proto</summary>
  public static partial class XlsBeansGamemodehudconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_gamemodehudconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansGamemodehudconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiF4bHNfYmVhbnNfZ2FtZW1vZGVodWRjb25maWcucHJvdG8SCkQxMS5QYmVh",
            "bnMilQMKEUdhbWVNb2RlSHVkQ29uZmlnEgoKAmlkGAEgASgNEhQKDE1hcEdo",
            "b3N0VHlwZRgCIAEoBRIYChBNYXBTaG93QWxsUGxheWVyGAMgASgIEgwKBEJv",
            "bWIYBCABKAgSFQoNU2hvd0JvbWJDYXJyeRgFIAEoCBIXCg9UaXRsZVNob3dB",
            "QlNpdGUYBiABKAgSGwoTVGl0bGVPbmx5U2hvd0M0U2l0ZRgHIAEoCBIZChFP",
            "ZmZBU2l0ZVRpdGxlU2hvdxgIIAEoCBIZChFPZmZCU2l0ZVRpdGxlU2hvdxgJ",
            "IAEoCBIUCgxDYW5UaW1lV2F0Y2gYCiABKAgSFAoMQ2FuSGVhZFdhdGNoGAsg",
            "ASgIEhQKDEhhc1JlY29tbWVuZBgMIAEoCBIYChBUaXRsZVNob3dUb3BSYW5r",
            "GA0gASgIEhUKDUNhbk9wZW5Wb2x1bWUYDiABKAgSFAoMQ2FuT3BlblZvaWNl",
            "GA8gASgIEhMKC0Nhbk9wZW5DaGF0GBAgASgIEhUKDVNjb3JlUmFua01vZGUY",
            "ESABKA0iRwoXR2FtZU1vZGVIdWRDb25maWdfQXJyYXkSLAoFaXRlbXMYASAD",
            "KAsyHS5EMTEuUGJlYW5zLkdhbWVNb2RlSHVkQ29uZmlnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.GameModeHudConfig), global::D11.Pbeans.GameModeHudConfig.Parser, new[]{ "Id", "MapGhostType", "MapShowAllPlayer", "Bomb", "ShowBombCarry", "TitleShowABSite", "TitleOnlyShowC4Site", "OffASiteTitleShow", "OffBSiteTitleShow", "CanTimeWatch", "CanHeadWatch", "HasRecommend", "TitleShowTopRank", "CanOpenVolume", "CanOpenVoice", "CanOpenChat", "ScoreRankMode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.GameModeHudConfig_Array), global::D11.Pbeans.GameModeHudConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GameModeHudConfig : pb::IMessage<GameModeHudConfig> {
    private static readonly pb::MessageParser<GameModeHudConfig> _parser = new pb::MessageParser<GameModeHudConfig>(() => new GameModeHudConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameModeHudConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansGamemodehudconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeHudConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeHudConfig(GameModeHudConfig other) : this() {
      id_ = other.id_;
      mapGhostType_ = other.mapGhostType_;
      mapShowAllPlayer_ = other.mapShowAllPlayer_;
      bomb_ = other.bomb_;
      showBombCarry_ = other.showBombCarry_;
      titleShowABSite_ = other.titleShowABSite_;
      titleOnlyShowC4Site_ = other.titleOnlyShowC4Site_;
      offASiteTitleShow_ = other.offASiteTitleShow_;
      offBSiteTitleShow_ = other.offBSiteTitleShow_;
      canTimeWatch_ = other.canTimeWatch_;
      canHeadWatch_ = other.canHeadWatch_;
      hasRecommend_ = other.hasRecommend_;
      titleShowTopRank_ = other.titleShowTopRank_;
      canOpenVolume_ = other.canOpenVolume_;
      canOpenVoice_ = other.canOpenVoice_;
      canOpenChat_ = other.canOpenChat_;
      scoreRankMode_ = other.scoreRankMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeHudConfig Clone() {
      return new GameModeHudConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 模式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "MapGhostType" field.</summary>
    public const int MapGhostTypeFieldNumber = 2;
    private int mapGhostType_;
    /// <summary>
    /// 未被发现是否显示 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapGhostType {
      get { return mapGhostType_; }
      set {
        mapGhostType_ = value;
      }
    }

    /// <summary>Field number for the "MapShowAllPlayer" field.</summary>
    public const int MapShowAllPlayerFieldNumber = 3;
    private bool mapShowAllPlayer_;
    /// <summary>
    /// 地图显示所有头像 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MapShowAllPlayer {
      get { return mapShowAllPlayer_; }
      set {
        mapShowAllPlayer_ = value;
      }
    }

    /// <summary>Field number for the "Bomb" field.</summary>
    public const int BombFieldNumber = 4;
    private bool bomb_;
    /// <summary>
    /// 是否显示爆破相关 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bomb {
      get { return bomb_; }
      set {
        bomb_ = value;
      }
    }

    /// <summary>Field number for the "ShowBombCarry" field.</summary>
    public const int ShowBombCarryFieldNumber = 5;
    private bool showBombCarry_;
    /// <summary>
    /// 是否显示C4携带者 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowBombCarry {
      get { return showBombCarry_; }
      set {
        showBombCarry_ = value;
      }
    }

    /// <summary>Field number for the "TitleShowABSite" field.</summary>
    public const int TitleShowABSiteFieldNumber = 6;
    private bool titleShowABSite_;
    /// <summary>
    /// 是否AB包点浮标提示 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TitleShowABSite {
      get { return titleShowABSite_; }
      set {
        titleShowABSite_ = value;
      }
    }

    /// <summary>Field number for the "TitleOnlyShowC4Site" field.</summary>
    public const int TitleOnlyShowC4SiteFieldNumber = 7;
    private bool titleOnlyShowC4Site_;
    /// <summary>
    /// 包点浮标仅提示C4所在的点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TitleOnlyShowC4Site {
      get { return titleOnlyShowC4Site_; }
      set {
        titleOnlyShowC4Site_ = value;
      }
    }

    /// <summary>Field number for the "OffASiteTitleShow" field.</summary>
    public const int OffASiteTitleShowFieldNumber = 8;
    private bool offASiteTitleShow_;
    /// <summary>
    /// 包点浮标是否屏蔽A包点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OffASiteTitleShow {
      get { return offASiteTitleShow_; }
      set {
        offASiteTitleShow_ = value;
      }
    }

    /// <summary>Field number for the "OffBSiteTitleShow" field.</summary>
    public const int OffBSiteTitleShowFieldNumber = 9;
    private bool offBSiteTitleShow_;
    /// <summary>
    /// 包点浮标是否屏蔽B包点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OffBSiteTitleShow {
      get { return offBSiteTitleShow_; }
      set {
        offBSiteTitleShow_ = value;
      }
    }

    /// <summary>Field number for the "CanTimeWatch" field.</summary>
    public const int CanTimeWatchFieldNumber = 10;
    private bool canTimeWatch_;
    /// <summary>
    /// 是否观战显示时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanTimeWatch {
      get { return canTimeWatch_; }
      set {
        canTimeWatch_ = value;
      }
    }

    /// <summary>Field number for the "CanHeadWatch" field.</summary>
    public const int CanHeadWatchFieldNumber = 11;
    private bool canHeadWatch_;
    /// <summary>
    /// 是否观战显示头像 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanHeadWatch {
      get { return canHeadWatch_; }
      set {
        canHeadWatch_ = value;
      }
    }

    /// <summary>Field number for the "HasRecommend" field.</summary>
    public const int HasRecommendFieldNumber = 12;
    private bool hasRecommend_;
    /// <summary>
    /// 是否推荐购买 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecommend {
      get { return hasRecommend_; }
      set {
        hasRecommend_ = value;
      }
    }

    /// <summary>Field number for the "TitleShowTopRank" field.</summary>
    public const int TitleShowTopRankFieldNumber = 13;
    private bool titleShowTopRank_;
    /// <summary>
    /// 头顶UI显示前三标记 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TitleShowTopRank {
      get { return titleShowTopRank_; }
      set {
        titleShowTopRank_ = value;
      }
    }

    /// <summary>Field number for the "CanOpenVolume" field.</summary>
    public const int CanOpenVolumeFieldNumber = 14;
    private bool canOpenVolume_;
    /// <summary>
    /// 是否能打开麦克风 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanOpenVolume {
      get { return canOpenVolume_; }
      set {
        canOpenVolume_ = value;
      }
    }

    /// <summary>Field number for the "CanOpenVoice" field.</summary>
    public const int CanOpenVoiceFieldNumber = 15;
    private bool canOpenVoice_;
    /// <summary>
    /// 是否能打开扬声器 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanOpenVoice {
      get { return canOpenVoice_; }
      set {
        canOpenVoice_ = value;
      }
    }

    /// <summary>Field number for the "CanOpenChat" field.</summary>
    public const int CanOpenChatFieldNumber = 16;
    private bool canOpenChat_;
    /// <summary>
    /// 是否能打开聊天界面 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanOpenChat {
      get { return canOpenChat_; }
      set {
        canOpenChat_ = value;
      }
    }

    /// <summary>Field number for the "ScoreRankMode" field.</summary>
    public const int ScoreRankModeFieldNumber = 17;
    private uint scoreRankMode_;
    /// <summary>
    /// 计分版模式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScoreRankMode {
      get { return scoreRankMode_; }
      set {
        scoreRankMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameModeHudConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameModeHudConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MapGhostType != other.MapGhostType) return false;
      if (MapShowAllPlayer != other.MapShowAllPlayer) return false;
      if (Bomb != other.Bomb) return false;
      if (ShowBombCarry != other.ShowBombCarry) return false;
      if (TitleShowABSite != other.TitleShowABSite) return false;
      if (TitleOnlyShowC4Site != other.TitleOnlyShowC4Site) return false;
      if (OffASiteTitleShow != other.OffASiteTitleShow) return false;
      if (OffBSiteTitleShow != other.OffBSiteTitleShow) return false;
      if (CanTimeWatch != other.CanTimeWatch) return false;
      if (CanHeadWatch != other.CanHeadWatch) return false;
      if (HasRecommend != other.HasRecommend) return false;
      if (TitleShowTopRank != other.TitleShowTopRank) return false;
      if (CanOpenVolume != other.CanOpenVolume) return false;
      if (CanOpenVoice != other.CanOpenVoice) return false;
      if (CanOpenChat != other.CanOpenChat) return false;
      if (ScoreRankMode != other.ScoreRankMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (MapGhostType != 0) hash ^= MapGhostType.GetHashCode();
      if (MapShowAllPlayer != false) hash ^= MapShowAllPlayer.GetHashCode();
      if (Bomb != false) hash ^= Bomb.GetHashCode();
      if (ShowBombCarry != false) hash ^= ShowBombCarry.GetHashCode();
      if (TitleShowABSite != false) hash ^= TitleShowABSite.GetHashCode();
      if (TitleOnlyShowC4Site != false) hash ^= TitleOnlyShowC4Site.GetHashCode();
      if (OffASiteTitleShow != false) hash ^= OffASiteTitleShow.GetHashCode();
      if (OffBSiteTitleShow != false) hash ^= OffBSiteTitleShow.GetHashCode();
      if (CanTimeWatch != false) hash ^= CanTimeWatch.GetHashCode();
      if (CanHeadWatch != false) hash ^= CanHeadWatch.GetHashCode();
      if (HasRecommend != false) hash ^= HasRecommend.GetHashCode();
      if (TitleShowTopRank != false) hash ^= TitleShowTopRank.GetHashCode();
      if (CanOpenVolume != false) hash ^= CanOpenVolume.GetHashCode();
      if (CanOpenVoice != false) hash ^= CanOpenVoice.GetHashCode();
      if (CanOpenChat != false) hash ^= CanOpenChat.GetHashCode();
      if (ScoreRankMode != 0) hash ^= ScoreRankMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (MapGhostType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapGhostType);
      }
      if (MapShowAllPlayer != false) {
        output.WriteRawTag(24);
        output.WriteBool(MapShowAllPlayer);
      }
      if (Bomb != false) {
        output.WriteRawTag(32);
        output.WriteBool(Bomb);
      }
      if (ShowBombCarry != false) {
        output.WriteRawTag(40);
        output.WriteBool(ShowBombCarry);
      }
      if (TitleShowABSite != false) {
        output.WriteRawTag(48);
        output.WriteBool(TitleShowABSite);
      }
      if (TitleOnlyShowC4Site != false) {
        output.WriteRawTag(56);
        output.WriteBool(TitleOnlyShowC4Site);
      }
      if (OffASiteTitleShow != false) {
        output.WriteRawTag(64);
        output.WriteBool(OffASiteTitleShow);
      }
      if (OffBSiteTitleShow != false) {
        output.WriteRawTag(72);
        output.WriteBool(OffBSiteTitleShow);
      }
      if (CanTimeWatch != false) {
        output.WriteRawTag(80);
        output.WriteBool(CanTimeWatch);
      }
      if (CanHeadWatch != false) {
        output.WriteRawTag(88);
        output.WriteBool(CanHeadWatch);
      }
      if (HasRecommend != false) {
        output.WriteRawTag(96);
        output.WriteBool(HasRecommend);
      }
      if (TitleShowTopRank != false) {
        output.WriteRawTag(104);
        output.WriteBool(TitleShowTopRank);
      }
      if (CanOpenVolume != false) {
        output.WriteRawTag(112);
        output.WriteBool(CanOpenVolume);
      }
      if (CanOpenVoice != false) {
        output.WriteRawTag(120);
        output.WriteBool(CanOpenVoice);
      }
      if (CanOpenChat != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(CanOpenChat);
      }
      if (ScoreRankMode != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(ScoreRankMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (MapGhostType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapGhostType);
      }
      if (MapShowAllPlayer != false) {
        size += 1 + 1;
      }
      if (Bomb != false) {
        size += 1 + 1;
      }
      if (ShowBombCarry != false) {
        size += 1 + 1;
      }
      if (TitleShowABSite != false) {
        size += 1 + 1;
      }
      if (TitleOnlyShowC4Site != false) {
        size += 1 + 1;
      }
      if (OffASiteTitleShow != false) {
        size += 1 + 1;
      }
      if (OffBSiteTitleShow != false) {
        size += 1 + 1;
      }
      if (CanTimeWatch != false) {
        size += 1 + 1;
      }
      if (CanHeadWatch != false) {
        size += 1 + 1;
      }
      if (HasRecommend != false) {
        size += 1 + 1;
      }
      if (TitleShowTopRank != false) {
        size += 1 + 1;
      }
      if (CanOpenVolume != false) {
        size += 1 + 1;
      }
      if (CanOpenVoice != false) {
        size += 1 + 1;
      }
      if (CanOpenChat != false) {
        size += 2 + 1;
      }
      if (ScoreRankMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ScoreRankMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameModeHudConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.MapGhostType != 0) {
        MapGhostType = other.MapGhostType;
      }
      if (other.MapShowAllPlayer != false) {
        MapShowAllPlayer = other.MapShowAllPlayer;
      }
      if (other.Bomb != false) {
        Bomb = other.Bomb;
      }
      if (other.ShowBombCarry != false) {
        ShowBombCarry = other.ShowBombCarry;
      }
      if (other.TitleShowABSite != false) {
        TitleShowABSite = other.TitleShowABSite;
      }
      if (other.TitleOnlyShowC4Site != false) {
        TitleOnlyShowC4Site = other.TitleOnlyShowC4Site;
      }
      if (other.OffASiteTitleShow != false) {
        OffASiteTitleShow = other.OffASiteTitleShow;
      }
      if (other.OffBSiteTitleShow != false) {
        OffBSiteTitleShow = other.OffBSiteTitleShow;
      }
      if (other.CanTimeWatch != false) {
        CanTimeWatch = other.CanTimeWatch;
      }
      if (other.CanHeadWatch != false) {
        CanHeadWatch = other.CanHeadWatch;
      }
      if (other.HasRecommend != false) {
        HasRecommend = other.HasRecommend;
      }
      if (other.TitleShowTopRank != false) {
        TitleShowTopRank = other.TitleShowTopRank;
      }
      if (other.CanOpenVolume != false) {
        CanOpenVolume = other.CanOpenVolume;
      }
      if (other.CanOpenVoice != false) {
        CanOpenVoice = other.CanOpenVoice;
      }
      if (other.CanOpenChat != false) {
        CanOpenChat = other.CanOpenChat;
      }
      if (other.ScoreRankMode != 0) {
        ScoreRankMode = other.ScoreRankMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            MapGhostType = input.ReadInt32();
            break;
          }
          case 24: {
            MapShowAllPlayer = input.ReadBool();
            break;
          }
          case 32: {
            Bomb = input.ReadBool();
            break;
          }
          case 40: {
            ShowBombCarry = input.ReadBool();
            break;
          }
          case 48: {
            TitleShowABSite = input.ReadBool();
            break;
          }
          case 56: {
            TitleOnlyShowC4Site = input.ReadBool();
            break;
          }
          case 64: {
            OffASiteTitleShow = input.ReadBool();
            break;
          }
          case 72: {
            OffBSiteTitleShow = input.ReadBool();
            break;
          }
          case 80: {
            CanTimeWatch = input.ReadBool();
            break;
          }
          case 88: {
            CanHeadWatch = input.ReadBool();
            break;
          }
          case 96: {
            HasRecommend = input.ReadBool();
            break;
          }
          case 104: {
            TitleShowTopRank = input.ReadBool();
            break;
          }
          case 112: {
            CanOpenVolume = input.ReadBool();
            break;
          }
          case 120: {
            CanOpenVoice = input.ReadBool();
            break;
          }
          case 128: {
            CanOpenChat = input.ReadBool();
            break;
          }
          case 136: {
            ScoreRankMode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameModeHudConfig_Array : pb::IMessage<GameModeHudConfig_Array> {
    private static readonly pb::MessageParser<GameModeHudConfig_Array> _parser = new pb::MessageParser<GameModeHudConfig_Array>(() => new GameModeHudConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameModeHudConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansGamemodehudconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeHudConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeHudConfig_Array(GameModeHudConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeHudConfig_Array Clone() {
      return new GameModeHudConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.GameModeHudConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.GameModeHudConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.GameModeHudConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.GameModeHudConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.GameModeHudConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameModeHudConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameModeHudConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameModeHudConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
