// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_gamemodelifeconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_gamemodelifeconfig.proto</summary>
  public static partial class XlsBeansGamemodelifeconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_gamemodelifeconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansGamemodelifeconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJ4bHNfYmVhbnNfZ2FtZW1vZGVsaWZlY29uZmlnLnByb3RvEgpEMTEuUGJl",
            "YW5zIosCChJHYW1lTW9kZUxpZmVDb25maWcSCgoCaWQYASABKA0SEwoLcmVz",
            "cGF3blR5cGUYAiABKAUSGgoScmVzcGF3bkNsZWFyV2VhcG9uGAMgASgIEhMK",
            "C3Jlc3Bhd25Nc2VjGAQgASgNEhgKEFRSZXNwYXduSW5pdE1zZWMYBSABKA0S",
            "GQoRQ1RSZXNwYXduSW5pdE1zZWMYBiABKA0SHAoUVFJlc3Bhd25JbmNyZWFz",
            "ZU1zZWMYByABKA0SHQoVQ1RSZXNwYXduSW5jcmVhc2VNc2VjGAggASgNEhcK",
            "D1RSZXNwYXduTWF4TXNlYxgJIAEoDRIYChBDVFJlc3Bhd25NYXhNc2VjGAog",
            "ASgNIkkKGEdhbWVNb2RlTGlmZUNvbmZpZ19BcnJheRItCgVpdGVtcxgBIAMo",
            "CzIeLkQxMS5QYmVhbnMuR2FtZU1vZGVMaWZlQ29uZmlnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.GameModeLifeConfig), global::D11.Pbeans.GameModeLifeConfig.Parser, new[]{ "Id", "RespawnType", "RespawnClearWeapon", "RespawnMsec", "TRespawnInitMsec", "CTRespawnInitMsec", "TRespawnIncreaseMsec", "CTRespawnIncreaseMsec", "TRespawnMaxMsec", "CTRespawnMaxMsec" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.GameModeLifeConfig_Array), global::D11.Pbeans.GameModeLifeConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GameModeLifeConfig : pb::IMessage<GameModeLifeConfig> {
    private static readonly pb::MessageParser<GameModeLifeConfig> _parser = new pb::MessageParser<GameModeLifeConfig>(() => new GameModeLifeConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameModeLifeConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansGamemodelifeconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeLifeConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeLifeConfig(GameModeLifeConfig other) : this() {
      id_ = other.id_;
      respawnType_ = other.respawnType_;
      respawnClearWeapon_ = other.respawnClearWeapon_;
      respawnMsec_ = other.respawnMsec_;
      tRespawnInitMsec_ = other.tRespawnInitMsec_;
      cTRespawnInitMsec_ = other.cTRespawnInitMsec_;
      tRespawnIncreaseMsec_ = other.tRespawnIncreaseMsec_;
      cTRespawnIncreaseMsec_ = other.cTRespawnIncreaseMsec_;
      tRespawnMaxMsec_ = other.tRespawnMaxMsec_;
      cTRespawnMaxMsec_ = other.cTRespawnMaxMsec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeLifeConfig Clone() {
      return new GameModeLifeConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 模式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "respawnType" field.</summary>
    public const int RespawnTypeFieldNumber = 2;
    private int respawnType_;
    /// <summary>
    /// 出生方式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RespawnType {
      get { return respawnType_; }
      set {
        respawnType_ = value;
      }
    }

    /// <summary>Field number for the "respawnClearWeapon" field.</summary>
    public const int RespawnClearWeaponFieldNumber = 3;
    private bool respawnClearWeapon_;
    /// <summary>
    /// 重置武器 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RespawnClearWeapon {
      get { return respawnClearWeapon_; }
      set {
        respawnClearWeapon_ = value;
      }
    }

    /// <summary>Field number for the "respawnMsec" field.</summary>
    public const int RespawnMsecFieldNumber = 4;
    private uint respawnMsec_;
    /// <summary>
    /// 多少毫秒后复活 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RespawnMsec {
      get { return respawnMsec_; }
      set {
        respawnMsec_ = value;
      }
    }

    /// <summary>Field number for the "TRespawnInitMsec" field.</summary>
    public const int TRespawnInitMsecFieldNumber = 5;
    private uint tRespawnInitMsec_;
    /// <summary>
    /// T初始复活时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TRespawnInitMsec {
      get { return tRespawnInitMsec_; }
      set {
        tRespawnInitMsec_ = value;
      }
    }

    /// <summary>Field number for the "CTRespawnInitMsec" field.</summary>
    public const int CTRespawnInitMsecFieldNumber = 6;
    private uint cTRespawnInitMsec_;
    /// <summary>
    /// CT初始复活时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CTRespawnInitMsec {
      get { return cTRespawnInitMsec_; }
      set {
        cTRespawnInitMsec_ = value;
      }
    }

    /// <summary>Field number for the "TRespawnIncreaseMsec" field.</summary>
    public const int TRespawnIncreaseMsecFieldNumber = 7;
    private uint tRespawnIncreaseMsec_;
    /// <summary>
    /// T每次复活增加时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TRespawnIncreaseMsec {
      get { return tRespawnIncreaseMsec_; }
      set {
        tRespawnIncreaseMsec_ = value;
      }
    }

    /// <summary>Field number for the "CTRespawnIncreaseMsec" field.</summary>
    public const int CTRespawnIncreaseMsecFieldNumber = 8;
    private uint cTRespawnIncreaseMsec_;
    /// <summary>
    /// CT每次复活增加时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CTRespawnIncreaseMsec {
      get { return cTRespawnIncreaseMsec_; }
      set {
        cTRespawnIncreaseMsec_ = value;
      }
    }

    /// <summary>Field number for the "TRespawnMaxMsec" field.</summary>
    public const int TRespawnMaxMsecFieldNumber = 9;
    private uint tRespawnMaxMsec_;
    /// <summary>
    /// T最大复活时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TRespawnMaxMsec {
      get { return tRespawnMaxMsec_; }
      set {
        tRespawnMaxMsec_ = value;
      }
    }

    /// <summary>Field number for the "CTRespawnMaxMsec" field.</summary>
    public const int CTRespawnMaxMsecFieldNumber = 10;
    private uint cTRespawnMaxMsec_;
    /// <summary>
    /// CT最大复活时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CTRespawnMaxMsec {
      get { return cTRespawnMaxMsec_; }
      set {
        cTRespawnMaxMsec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameModeLifeConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameModeLifeConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (RespawnType != other.RespawnType) return false;
      if (RespawnClearWeapon != other.RespawnClearWeapon) return false;
      if (RespawnMsec != other.RespawnMsec) return false;
      if (TRespawnInitMsec != other.TRespawnInitMsec) return false;
      if (CTRespawnInitMsec != other.CTRespawnInitMsec) return false;
      if (TRespawnIncreaseMsec != other.TRespawnIncreaseMsec) return false;
      if (CTRespawnIncreaseMsec != other.CTRespawnIncreaseMsec) return false;
      if (TRespawnMaxMsec != other.TRespawnMaxMsec) return false;
      if (CTRespawnMaxMsec != other.CTRespawnMaxMsec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (RespawnType != 0) hash ^= RespawnType.GetHashCode();
      if (RespawnClearWeapon != false) hash ^= RespawnClearWeapon.GetHashCode();
      if (RespawnMsec != 0) hash ^= RespawnMsec.GetHashCode();
      if (TRespawnInitMsec != 0) hash ^= TRespawnInitMsec.GetHashCode();
      if (CTRespawnInitMsec != 0) hash ^= CTRespawnInitMsec.GetHashCode();
      if (TRespawnIncreaseMsec != 0) hash ^= TRespawnIncreaseMsec.GetHashCode();
      if (CTRespawnIncreaseMsec != 0) hash ^= CTRespawnIncreaseMsec.GetHashCode();
      if (TRespawnMaxMsec != 0) hash ^= TRespawnMaxMsec.GetHashCode();
      if (CTRespawnMaxMsec != 0) hash ^= CTRespawnMaxMsec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (RespawnType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RespawnType);
      }
      if (RespawnClearWeapon != false) {
        output.WriteRawTag(24);
        output.WriteBool(RespawnClearWeapon);
      }
      if (RespawnMsec != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(RespawnMsec);
      }
      if (TRespawnInitMsec != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TRespawnInitMsec);
      }
      if (CTRespawnInitMsec != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CTRespawnInitMsec);
      }
      if (TRespawnIncreaseMsec != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TRespawnIncreaseMsec);
      }
      if (CTRespawnIncreaseMsec != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(CTRespawnIncreaseMsec);
      }
      if (TRespawnMaxMsec != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(TRespawnMaxMsec);
      }
      if (CTRespawnMaxMsec != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(CTRespawnMaxMsec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (RespawnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RespawnType);
      }
      if (RespawnClearWeapon != false) {
        size += 1 + 1;
      }
      if (RespawnMsec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RespawnMsec);
      }
      if (TRespawnInitMsec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TRespawnInitMsec);
      }
      if (CTRespawnInitMsec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CTRespawnInitMsec);
      }
      if (TRespawnIncreaseMsec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TRespawnIncreaseMsec);
      }
      if (CTRespawnIncreaseMsec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CTRespawnIncreaseMsec);
      }
      if (TRespawnMaxMsec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TRespawnMaxMsec);
      }
      if (CTRespawnMaxMsec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CTRespawnMaxMsec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameModeLifeConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.RespawnType != 0) {
        RespawnType = other.RespawnType;
      }
      if (other.RespawnClearWeapon != false) {
        RespawnClearWeapon = other.RespawnClearWeapon;
      }
      if (other.RespawnMsec != 0) {
        RespawnMsec = other.RespawnMsec;
      }
      if (other.TRespawnInitMsec != 0) {
        TRespawnInitMsec = other.TRespawnInitMsec;
      }
      if (other.CTRespawnInitMsec != 0) {
        CTRespawnInitMsec = other.CTRespawnInitMsec;
      }
      if (other.TRespawnIncreaseMsec != 0) {
        TRespawnIncreaseMsec = other.TRespawnIncreaseMsec;
      }
      if (other.CTRespawnIncreaseMsec != 0) {
        CTRespawnIncreaseMsec = other.CTRespawnIncreaseMsec;
      }
      if (other.TRespawnMaxMsec != 0) {
        TRespawnMaxMsec = other.TRespawnMaxMsec;
      }
      if (other.CTRespawnMaxMsec != 0) {
        CTRespawnMaxMsec = other.CTRespawnMaxMsec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            RespawnType = input.ReadInt32();
            break;
          }
          case 24: {
            RespawnClearWeapon = input.ReadBool();
            break;
          }
          case 32: {
            RespawnMsec = input.ReadUInt32();
            break;
          }
          case 40: {
            TRespawnInitMsec = input.ReadUInt32();
            break;
          }
          case 48: {
            CTRespawnInitMsec = input.ReadUInt32();
            break;
          }
          case 56: {
            TRespawnIncreaseMsec = input.ReadUInt32();
            break;
          }
          case 64: {
            CTRespawnIncreaseMsec = input.ReadUInt32();
            break;
          }
          case 72: {
            TRespawnMaxMsec = input.ReadUInt32();
            break;
          }
          case 80: {
            CTRespawnMaxMsec = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameModeLifeConfig_Array : pb::IMessage<GameModeLifeConfig_Array> {
    private static readonly pb::MessageParser<GameModeLifeConfig_Array> _parser = new pb::MessageParser<GameModeLifeConfig_Array>(() => new GameModeLifeConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameModeLifeConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansGamemodelifeconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeLifeConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeLifeConfig_Array(GameModeLifeConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameModeLifeConfig_Array Clone() {
      return new GameModeLifeConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.GameModeLifeConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.GameModeLifeConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.GameModeLifeConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.GameModeLifeConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.GameModeLifeConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameModeLifeConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameModeLifeConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameModeLifeConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
