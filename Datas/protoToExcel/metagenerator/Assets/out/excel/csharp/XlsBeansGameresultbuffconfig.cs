// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_gameresultbuffconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_gameresultbuffconfig.proto</summary>
  public static partial class XlsBeansGameresultbuffconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_gameresultbuffconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansGameresultbuffconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiR4bHNfYmVhbnNfZ2FtZXJlc3VsdGJ1ZmZjb25maWcucHJvdG8SCkQxMS5Q",
            "YmVhbnMiswIKFEdhbWVSZXN1bHRCdWZmQ29uZmlnEgoKAmlkGAEgASgNEgwK",
            "BG5hbWUYAiABKAkSEAoIdGVhbU5hbWUYAyABKAkSEAoIaWNvblR5cGUYBCAB",
            "KA0SDgoGaXRlbWlkGAUgASgNEg4KBmljb25JZBgGIAEoDRIUCgxzaG93U2Vx",
            "dWVuY2UYByABKA0SEAoIYnVmZlR5cGUYCCABKA0SEgoKZWZmZWN0VHlwZRgJ",
            "IAEoDRIUCgxhZGRpdGlvbkNvbmQYCiABKA0SEwoLbW9kZVR5cGVMc3QYCyAD",
            "KA0SEgoKbW9kZVJlbW92ZRgMIAMoDRIOCgZhdHRySWQYDSABKA0SDQoFdmFs",
            "dWUYDiABKA0SDwoHYWRkVHlwZRgPIAEoDRISCgpleHBpcmVUaW1lGBAgASgN",
            "Ik0KGkdhbWVSZXN1bHRCdWZmQ29uZmlnX0FycmF5Ei8KBWl0ZW1zGAEgAygL",
            "MiAuRDExLlBiZWFucy5HYW1lUmVzdWx0QnVmZkNvbmZpZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.GameResultBuffConfig), global::D11.Pbeans.GameResultBuffConfig.Parser, new[]{ "Id", "Name", "TeamName", "IconType", "Itemid", "IconId", "ShowSequence", "BuffType", "EffectType", "AdditionCond", "ModeTypeLst", "ModeRemove", "AttrId", "Value", "AddType", "ExpireTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.GameResultBuffConfig_Array), global::D11.Pbeans.GameResultBuffConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GameResultBuffConfig : pb::IMessage<GameResultBuffConfig> {
    private static readonly pb::MessageParser<GameResultBuffConfig> _parser = new pb::MessageParser<GameResultBuffConfig>(() => new GameResultBuffConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameResultBuffConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansGameresultbuffconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResultBuffConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResultBuffConfig(GameResultBuffConfig other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      teamName_ = other.teamName_;
      iconType_ = other.iconType_;
      itemid_ = other.itemid_;
      iconId_ = other.iconId_;
      showSequence_ = other.showSequence_;
      buffType_ = other.buffType_;
      effectType_ = other.effectType_;
      additionCond_ = other.additionCond_;
      modeTypeLst_ = other.modeTypeLst_.Clone();
      modeRemove_ = other.modeRemove_.Clone();
      attrId_ = other.attrId_;
      value_ = other.value_;
      addType_ = other.addType_;
      expireTime_ = other.expireTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResultBuffConfig Clone() {
      return new GameResultBuffConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// buffid 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// buff名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamName" field.</summary>
    public const int TeamNameFieldNumber = 3;
    private string teamName_ = "";
    /// <summary>
    /// 队伍buff名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamName {
      get { return teamName_; }
      set {
        teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iconType" field.</summary>
    public const int IconTypeFieldNumber = 4;
    private uint iconType_;
    /// <summary>
    /// 图标显示类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IconType {
      get { return iconType_; }
      set {
        iconType_ = value;
      }
    }

    /// <summary>Field number for the "itemid" field.</summary>
    public const int ItemidFieldNumber = 5;
    private uint itemid_;
    /// <summary>
    /// 道具ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Itemid {
      get { return itemid_; }
      set {
        itemid_ = value;
      }
    }

    /// <summary>Field number for the "iconId" field.</summary>
    public const int IconIdFieldNumber = 6;
    private uint iconId_;
    /// <summary>
    /// 图标ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IconId {
      get { return iconId_; }
      set {
        iconId_ = value;
      }
    }

    /// <summary>Field number for the "showSequence" field.</summary>
    public const int ShowSequenceFieldNumber = 7;
    private uint showSequence_;
    /// <summary>
    /// 显示顺序 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShowSequence {
      get { return showSequence_; }
      set {
        showSequence_ = value;
      }
    }

    /// <summary>Field number for the "buffType" field.</summary>
    public const int BuffTypeFieldNumber = 8;
    private uint buffType_;
    /// <summary>
    /// buff类型(同类型会冲突) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuffType {
      get { return buffType_; }
      set {
        buffType_ = value;
      }
    }

    /// <summary>Field number for the "effectType" field.</summary>
    public const int EffectTypeFieldNumber = 9;
    private uint effectType_;
    /// <summary>
    /// 生效类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EffectType {
      get { return effectType_; }
      set {
        effectType_ = value;
      }
    }

    /// <summary>Field number for the "additionCond" field.</summary>
    public const int AdditionCondFieldNumber = 10;
    private uint additionCond_;
    /// <summary>
    /// 生效条件 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AdditionCond {
      get { return additionCond_; }
      set {
        additionCond_ = value;
      }
    }

    /// <summary>Field number for the "modeTypeLst" field.</summary>
    public const int ModeTypeLstFieldNumber = 11;
    private static readonly pb::FieldCodec<uint> _repeated_modeTypeLst_codec
        = pb::FieldCodec.ForUInt32(90);
    private readonly pbc::RepeatedField<uint> modeTypeLst_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 包含的模式类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ModeTypeLst {
      get { return modeTypeLst_; }
    }

    /// <summary>Field number for the "modeRemove" field.</summary>
    public const int ModeRemoveFieldNumber = 12;
    private static readonly pb::FieldCodec<uint> _repeated_modeRemove_codec
        = pb::FieldCodec.ForUInt32(98);
    private readonly pbc::RepeatedField<uint> modeRemove_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 不生效的具体模式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ModeRemove {
      get { return modeRemove_; }
    }

    /// <summary>Field number for the "attrId" field.</summary>
    public const int AttrIdFieldNumber = 13;
    private uint attrId_;
    /// <summary>
    /// 加成属性id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttrId {
      get { return attrId_; }
      set {
        attrId_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 14;
    private uint value_;
    /// <summary>
    /// 加成比例（万分之） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "addType" field.</summary>
    public const int AddTypeFieldNumber = 15;
    private uint addType_;
    /// <summary>
    /// 加成方式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AddType {
      get { return addType_; }
      set {
        addType_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 16;
    private uint expireTime_;
    /// <summary>
    /// 有效时间（秒） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameResultBuffConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameResultBuffConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (TeamName != other.TeamName) return false;
      if (IconType != other.IconType) return false;
      if (Itemid != other.Itemid) return false;
      if (IconId != other.IconId) return false;
      if (ShowSequence != other.ShowSequence) return false;
      if (BuffType != other.BuffType) return false;
      if (EffectType != other.EffectType) return false;
      if (AdditionCond != other.AdditionCond) return false;
      if(!modeTypeLst_.Equals(other.modeTypeLst_)) return false;
      if(!modeRemove_.Equals(other.modeRemove_)) return false;
      if (AttrId != other.AttrId) return false;
      if (Value != other.Value) return false;
      if (AddType != other.AddType) return false;
      if (ExpireTime != other.ExpireTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (TeamName.Length != 0) hash ^= TeamName.GetHashCode();
      if (IconType != 0) hash ^= IconType.GetHashCode();
      if (Itemid != 0) hash ^= Itemid.GetHashCode();
      if (IconId != 0) hash ^= IconId.GetHashCode();
      if (ShowSequence != 0) hash ^= ShowSequence.GetHashCode();
      if (BuffType != 0) hash ^= BuffType.GetHashCode();
      if (EffectType != 0) hash ^= EffectType.GetHashCode();
      if (AdditionCond != 0) hash ^= AdditionCond.GetHashCode();
      hash ^= modeTypeLst_.GetHashCode();
      hash ^= modeRemove_.GetHashCode();
      if (AttrId != 0) hash ^= AttrId.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (AddType != 0) hash ^= AddType.GetHashCode();
      if (ExpireTime != 0) hash ^= ExpireTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (TeamName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TeamName);
      }
      if (IconType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(IconType);
      }
      if (Itemid != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Itemid);
      }
      if (IconId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(IconId);
      }
      if (ShowSequence != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ShowSequence);
      }
      if (BuffType != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(BuffType);
      }
      if (EffectType != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(EffectType);
      }
      if (AdditionCond != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(AdditionCond);
      }
      modeTypeLst_.WriteTo(output, _repeated_modeTypeLst_codec);
      modeRemove_.WriteTo(output, _repeated_modeRemove_codec);
      if (AttrId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(AttrId);
      }
      if (Value != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Value);
      }
      if (AddType != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(AddType);
      }
      if (ExpireTime != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(ExpireTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TeamName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamName);
      }
      if (IconType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IconType);
      }
      if (Itemid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemid);
      }
      if (IconId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IconId);
      }
      if (ShowSequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShowSequence);
      }
      if (BuffType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuffType);
      }
      if (EffectType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EffectType);
      }
      if (AdditionCond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AdditionCond);
      }
      size += modeTypeLst_.CalculateSize(_repeated_modeTypeLst_codec);
      size += modeRemove_.CalculateSize(_repeated_modeRemove_codec);
      if (AttrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttrId);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (AddType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddType);
      }
      if (ExpireTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameResultBuffConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.TeamName.Length != 0) {
        TeamName = other.TeamName;
      }
      if (other.IconType != 0) {
        IconType = other.IconType;
      }
      if (other.Itemid != 0) {
        Itemid = other.Itemid;
      }
      if (other.IconId != 0) {
        IconId = other.IconId;
      }
      if (other.ShowSequence != 0) {
        ShowSequence = other.ShowSequence;
      }
      if (other.BuffType != 0) {
        BuffType = other.BuffType;
      }
      if (other.EffectType != 0) {
        EffectType = other.EffectType;
      }
      if (other.AdditionCond != 0) {
        AdditionCond = other.AdditionCond;
      }
      modeTypeLst_.Add(other.modeTypeLst_);
      modeRemove_.Add(other.modeRemove_);
      if (other.AttrId != 0) {
        AttrId = other.AttrId;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.AddType != 0) {
        AddType = other.AddType;
      }
      if (other.ExpireTime != 0) {
        ExpireTime = other.ExpireTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            TeamName = input.ReadString();
            break;
          }
          case 32: {
            IconType = input.ReadUInt32();
            break;
          }
          case 40: {
            Itemid = input.ReadUInt32();
            break;
          }
          case 48: {
            IconId = input.ReadUInt32();
            break;
          }
          case 56: {
            ShowSequence = input.ReadUInt32();
            break;
          }
          case 64: {
            BuffType = input.ReadUInt32();
            break;
          }
          case 72: {
            EffectType = input.ReadUInt32();
            break;
          }
          case 80: {
            AdditionCond = input.ReadUInt32();
            break;
          }
          case 90:
          case 88: {
            modeTypeLst_.AddEntriesFrom(input, _repeated_modeTypeLst_codec);
            break;
          }
          case 98:
          case 96: {
            modeRemove_.AddEntriesFrom(input, _repeated_modeRemove_codec);
            break;
          }
          case 104: {
            AttrId = input.ReadUInt32();
            break;
          }
          case 112: {
            Value = input.ReadUInt32();
            break;
          }
          case 120: {
            AddType = input.ReadUInt32();
            break;
          }
          case 128: {
            ExpireTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameResultBuffConfig_Array : pb::IMessage<GameResultBuffConfig_Array> {
    private static readonly pb::MessageParser<GameResultBuffConfig_Array> _parser = new pb::MessageParser<GameResultBuffConfig_Array>(() => new GameResultBuffConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameResultBuffConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansGameresultbuffconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResultBuffConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResultBuffConfig_Array(GameResultBuffConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResultBuffConfig_Array Clone() {
      return new GameResultBuffConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.GameResultBuffConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.GameResultBuffConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.GameResultBuffConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.GameResultBuffConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.GameResultBuffConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameResultBuffConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameResultBuffConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameResultBuffConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
