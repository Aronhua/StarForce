// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_itemcommentconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_itemcommentconfig.proto</summary>
  public static partial class XlsBeansItemcommentconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_itemcommentconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansItemcommentconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiF4bHNfYmVhbnNfaXRlbWNvbW1lbnRjb25maWcucHJvdG8SCkQxMS5QYmVh",
            "bnMifwoRSXRlbUNvbW1lbnRDb25maWcSCgoCaWQYASABKA0SOAoIc2hvd0Nv",
            "bmQYAiADKAsyJi5EMTEuUGJlYW5zLkl0ZW1Db21tZW50Q29uZmlnX3Nob3dD",
            "b25kEg8KB21pbmltdW0YAyABKAISEwoLY29vbGluZ1RpbWUYBCABKA0iPwoa",
            "SXRlbUNvbW1lbnRDb25maWdfc2hvd0NvbmQSDgoGY29uZElkGAEgASgJEhEK",
            "CWNvbmRWYWx1ZRgCIAEoDSJHChdJdGVtQ29tbWVudENvbmZpZ19BcnJheRIs",
            "CgVpdGVtcxgBIAMoCzIdLkQxMS5QYmVhbnMuSXRlbUNvbW1lbnRDb25maWdi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.ItemCommentConfig), global::D11.Pbeans.ItemCommentConfig.Parser, new[]{ "Id", "ShowCond", "Minimum", "CoolingTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.ItemCommentConfig_showCond), global::D11.Pbeans.ItemCommentConfig_showCond.Parser, new[]{ "CondId", "CondValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.ItemCommentConfig_Array), global::D11.Pbeans.ItemCommentConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ItemCommentConfig : pb::IMessage<ItemCommentConfig> {
    private static readonly pb::MessageParser<ItemCommentConfig> _parser = new pb::MessageParser<ItemCommentConfig>(() => new ItemCommentConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemCommentConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansItemcommentconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemCommentConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemCommentConfig(ItemCommentConfig other) : this() {
      id_ = other.id_;
      showCond_ = other.showCond_.Clone();
      minimum_ = other.minimum_;
      coolingTime_ = other.coolingTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemCommentConfig Clone() {
      return new ItemCommentConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// key 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "showCond" field.</summary>
    public const int ShowCondFieldNumber = 2;
    private static readonly pb::FieldCodec<global::D11.Pbeans.ItemCommentConfig_showCond> _repeated_showCond_codec
        = pb::FieldCodec.ForMessage(18, global::D11.Pbeans.ItemCommentConfig_showCond.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.ItemCommentConfig_showCond> showCond_ = new pbc::RepeatedField<global::D11.Pbeans.ItemCommentConfig_showCond>();
    /// <summary>
    /// 显示条件 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.ItemCommentConfig_showCond> ShowCond {
      get { return showCond_; }
    }

    /// <summary>Field number for the "minimum" field.</summary>
    public const int MinimumFieldNumber = 3;
    private float minimum_;
    /// <summary>
    /// 评分保底值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Minimum {
      get { return minimum_; }
      set {
        minimum_ = value;
      }
    }

    /// <summary>Field number for the "coolingTime" field.</summary>
    public const int CoolingTimeFieldNumber = 4;
    private uint coolingTime_;
    /// <summary>
    /// 评论冷却时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CoolingTime {
      get { return coolingTime_; }
      set {
        coolingTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemCommentConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemCommentConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!showCond_.Equals(other.showCond_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Minimum, other.Minimum)) return false;
      if (CoolingTime != other.CoolingTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= showCond_.GetHashCode();
      if (Minimum != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Minimum);
      if (CoolingTime != 0) hash ^= CoolingTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      showCond_.WriteTo(output, _repeated_showCond_codec);
      if (Minimum != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Minimum);
      }
      if (CoolingTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CoolingTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      size += showCond_.CalculateSize(_repeated_showCond_codec);
      if (Minimum != 0F) {
        size += 1 + 4;
      }
      if (CoolingTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CoolingTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemCommentConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      showCond_.Add(other.showCond_);
      if (other.Minimum != 0F) {
        Minimum = other.Minimum;
      }
      if (other.CoolingTime != 0) {
        CoolingTime = other.CoolingTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            showCond_.AddEntriesFrom(input, _repeated_showCond_codec);
            break;
          }
          case 29: {
            Minimum = input.ReadFloat();
            break;
          }
          case 32: {
            CoolingTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemCommentConfig_showCond : pb::IMessage<ItemCommentConfig_showCond> {
    private static readonly pb::MessageParser<ItemCommentConfig_showCond> _parser = new pb::MessageParser<ItemCommentConfig_showCond>(() => new ItemCommentConfig_showCond());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemCommentConfig_showCond> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansItemcommentconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemCommentConfig_showCond() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemCommentConfig_showCond(ItemCommentConfig_showCond other) : this() {
      condId_ = other.condId_;
      condValue_ = other.condValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemCommentConfig_showCond Clone() {
      return new ItemCommentConfig_showCond(this);
    }

    /// <summary>Field number for the "condId" field.</summary>
    public const int CondIdFieldNumber = 1;
    private string condId_ = "";
    /// <summary>
    /// 显示条件 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CondId {
      get { return condId_; }
      set {
        condId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "condValue" field.</summary>
    public const int CondValueFieldNumber = 2;
    private uint condValue_;
    /// <summary>
    /// 显示参数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CondValue {
      get { return condValue_; }
      set {
        condValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemCommentConfig_showCond);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemCommentConfig_showCond other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CondId != other.CondId) return false;
      if (CondValue != other.CondValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CondId.Length != 0) hash ^= CondId.GetHashCode();
      if (CondValue != 0) hash ^= CondValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CondId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CondId);
      }
      if (CondValue != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CondValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CondId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CondId);
      }
      if (CondValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CondValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemCommentConfig_showCond other) {
      if (other == null) {
        return;
      }
      if (other.CondId.Length != 0) {
        CondId = other.CondId;
      }
      if (other.CondValue != 0) {
        CondValue = other.CondValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CondId = input.ReadString();
            break;
          }
          case 16: {
            CondValue = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemCommentConfig_Array : pb::IMessage<ItemCommentConfig_Array> {
    private static readonly pb::MessageParser<ItemCommentConfig_Array> _parser = new pb::MessageParser<ItemCommentConfig_Array>(() => new ItemCommentConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemCommentConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansItemcommentconfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemCommentConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemCommentConfig_Array(ItemCommentConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemCommentConfig_Array Clone() {
      return new ItemCommentConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.ItemCommentConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.ItemCommentConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.ItemCommentConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.ItemCommentConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.ItemCommentConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemCommentConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemCommentConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemCommentConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
