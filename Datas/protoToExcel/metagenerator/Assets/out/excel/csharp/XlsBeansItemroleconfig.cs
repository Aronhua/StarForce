// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_itemroleconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_itemroleconfig.proto</summary>
  public static partial class XlsBeansItemroleconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_itemroleconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansItemroleconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch54bHNfYmVhbnNfaXRlbXJvbGVjb25maWcucHJvdG8SCkQxMS5QYmVhbnMi",
            "mQMKDkl0ZW1Sb2xlQ29uZmlnEgoKAmlkGAEgASgNEhAKCGl0ZW1UeXBlGAIg",
            "ASgNEgwKBGNhbXAYAyABKA0SEAoIbWFpblR5cGUYBCABKA0SEAoIc3ViVHlw",
            "ZTEYBSABKA0SEAoIc3ViVHlwZTIYBiABKA0SEAoIc3ViVHlwZTMYByABKA0S",
            "EAoIc3ViVHlwZTQYCCABKA0SDwoHcXVhbGl0eRgJIAEoDRIQCghwcmlvcml0",
            "eRgKIAEoDRINCgVvcmRlchgLIAEoDRIQCghzZWxsVHlwZRgMIAEoDRIUCgxz",
            "ZWxsaW5nUHJpY2UYDSABKA0SEAoIc3RhY2tNYXgYDiABKA0SDwoHYXV0b1Vz",
            "ZRgPIAEoDRIRCglhdXRvRXF1aXAYECABKA0SFgoOc2V0dGxlbWVudEJ1ZmYY",
            "ESADKA0SDgoGYmFzZUdzGBIgASgNEhQKDGlzQ29sbGVjdGlvbhgTIAEoCBIz",
            "CgdoZWFkSWRzGBQgAygLMiIuRDExLlBiZWFucy5JdGVtUm9sZUNvbmZpZ19o",
            "ZWFkSWRzIiQKFkl0ZW1Sb2xlQ29uZmlnX2hlYWRJZHMSCgoCaWQYASABKA0i",
            "QQoUSXRlbVJvbGVDb25maWdfQXJyYXkSKQoFaXRlbXMYASADKAsyGi5EMTEu",
            "UGJlYW5zLkl0ZW1Sb2xlQ29uZmlnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.ItemRoleConfig), global::D11.Pbeans.ItemRoleConfig.Parser, new[]{ "Id", "ItemType", "Camp", "MainType", "SubType1", "SubType2", "SubType3", "SubType4", "Quality", "Priority", "Order", "SellType", "SellingPrice", "StackMax", "AutoUse", "AutoEquip", "SettlementBuff", "BaseGs", "IsCollection", "HeadIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.ItemRoleConfig_headIds), global::D11.Pbeans.ItemRoleConfig_headIds.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.ItemRoleConfig_Array), global::D11.Pbeans.ItemRoleConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ItemRoleConfig : pb::IMessage<ItemRoleConfig> {
    private static readonly pb::MessageParser<ItemRoleConfig> _parser = new pb::MessageParser<ItemRoleConfig>(() => new ItemRoleConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemRoleConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansItemroleconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemRoleConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemRoleConfig(ItemRoleConfig other) : this() {
      id_ = other.id_;
      itemType_ = other.itemType_;
      camp_ = other.camp_;
      mainType_ = other.mainType_;
      subType1_ = other.subType1_;
      subType2_ = other.subType2_;
      subType3_ = other.subType3_;
      subType4_ = other.subType4_;
      quality_ = other.quality_;
      priority_ = other.priority_;
      order_ = other.order_;
      sellType_ = other.sellType_;
      sellingPrice_ = other.sellingPrice_;
      stackMax_ = other.stackMax_;
      autoUse_ = other.autoUse_;
      autoEquip_ = other.autoEquip_;
      settlementBuff_ = other.settlementBuff_.Clone();
      baseGs_ = other.baseGs_;
      isCollection_ = other.isCollection_;
      headIds_ = other.headIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemRoleConfig Clone() {
      return new ItemRoleConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 编号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "itemType" field.</summary>
    public const int ItemTypeFieldNumber = 2;
    private uint itemType_;
    /// <summary>
    /// 道具类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 3;
    private uint camp_;
    /// <summary>
    /// 阵营(1-T 2-CT 3-all) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    /// <summary>Field number for the "mainType" field.</summary>
    public const int MainTypeFieldNumber = 4;
    private uint mainType_;
    /// <summary>
    /// 类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MainType {
      get { return mainType_; }
      set {
        mainType_ = value;
      }
    }

    /// <summary>Field number for the "subType1" field.</summary>
    public const int SubType1FieldNumber = 5;
    private uint subType1_;
    /// <summary>
    /// 子类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubType1 {
      get { return subType1_; }
      set {
        subType1_ = value;
      }
    }

    /// <summary>Field number for the "subType2" field.</summary>
    public const int SubType2FieldNumber = 6;
    private uint subType2_;
    /// <summary>
    /// 二级子类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubType2 {
      get { return subType2_; }
      set {
        subType2_ = value;
      }
    }

    /// <summary>Field number for the "subType3" field.</summary>
    public const int SubType3FieldNumber = 7;
    private uint subType3_;
    /// <summary>
    /// 三级子类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubType3 {
      get { return subType3_; }
      set {
        subType3_ = value;
      }
    }

    /// <summary>Field number for the "subType4" field.</summary>
    public const int SubType4FieldNumber = 8;
    private uint subType4_;
    /// <summary>
    /// 四级子类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubType4 {
      get { return subType4_; }
      set {
        subType4_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 9;
    private uint quality_;
    /// <summary>
    /// 品质 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 10;
    private uint priority_;
    /// <summary>
    /// 重要道具优先级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 11;
    private uint order_;
    /// <summary>
    /// 排序(从小到大) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "sellType" field.</summary>
    public const int SellTypeFieldNumber = 12;
    private uint sellType_;
    /// <summary>
    /// 卖店货币 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SellType {
      get { return sellType_; }
      set {
        sellType_ = value;
      }
    }

    /// <summary>Field number for the "sellingPrice" field.</summary>
    public const int SellingPriceFieldNumber = 13;
    private uint sellingPrice_;
    /// <summary>
    /// 卖店价格 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SellingPrice {
      get { return sellingPrice_; }
      set {
        sellingPrice_ = value;
      }
    }

    /// <summary>Field number for the "stackMax" field.</summary>
    public const int StackMaxFieldNumber = 14;
    private uint stackMax_;
    /// <summary>
    /// 是否可堆叠(0不可以 1可以) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StackMax {
      get { return stackMax_; }
      set {
        stackMax_ = value;
      }
    }

    /// <summary>Field number for the "autoUse" field.</summary>
    public const int AutoUseFieldNumber = 15;
    private uint autoUse_;
    /// <summary>
    /// 是否自动使用(1可以) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AutoUse {
      get { return autoUse_; }
      set {
        autoUse_ = value;
      }
    }

    /// <summary>Field number for the "autoEquip" field.</summary>
    public const int AutoEquipFieldNumber = 16;
    private uint autoEquip_;
    /// <summary>
    /// 是否自动装备(0为否,1为是) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AutoEquip {
      get { return autoEquip_; }
      set {
        autoEquip_ = value;
      }
    }

    /// <summary>Field number for the "settlementBuff" field.</summary>
    public const int SettlementBuffFieldNumber = 17;
    private static readonly pb::FieldCodec<uint> _repeated_settlementBuff_codec
        = pb::FieldCodec.ForUInt32(138);
    private readonly pbc::RepeatedField<uint> settlementBuff_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 物品加成buffId 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SettlementBuff {
      get { return settlementBuff_; }
    }

    /// <summary>Field number for the "baseGs" field.</summary>
    public const int BaseGsFieldNumber = 18;
    private uint baseGs_;
    /// <summary>
    /// 基础Gs值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BaseGs {
      get { return baseGs_; }
      set {
        baseGs_ = value;
      }
    }

    /// <summary>Field number for the "isCollection" field.</summary>
    public const int IsCollectionFieldNumber = 19;
    private bool isCollection_;
    /// <summary>
    /// 是否是收藏品（计入藏品收集统计） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCollection {
      get { return isCollection_; }
      set {
        isCollection_ = value;
      }
    }

    /// <summary>Field number for the "headIds" field.</summary>
    public const int HeadIdsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::D11.Pbeans.ItemRoleConfig_headIds> _repeated_headIds_codec
        = pb::FieldCodec.ForMessage(162, global::D11.Pbeans.ItemRoleConfig_headIds.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.ItemRoleConfig_headIds> headIds_ = new pbc::RepeatedField<global::D11.Pbeans.ItemRoleConfig_headIds>();
    /// <summary>
    /// 头像1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.ItemRoleConfig_headIds> HeadIds {
      get { return headIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemRoleConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemRoleConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ItemType != other.ItemType) return false;
      if (Camp != other.Camp) return false;
      if (MainType != other.MainType) return false;
      if (SubType1 != other.SubType1) return false;
      if (SubType2 != other.SubType2) return false;
      if (SubType3 != other.SubType3) return false;
      if (SubType4 != other.SubType4) return false;
      if (Quality != other.Quality) return false;
      if (Priority != other.Priority) return false;
      if (Order != other.Order) return false;
      if (SellType != other.SellType) return false;
      if (SellingPrice != other.SellingPrice) return false;
      if (StackMax != other.StackMax) return false;
      if (AutoUse != other.AutoUse) return false;
      if (AutoEquip != other.AutoEquip) return false;
      if(!settlementBuff_.Equals(other.settlementBuff_)) return false;
      if (BaseGs != other.BaseGs) return false;
      if (IsCollection != other.IsCollection) return false;
      if(!headIds_.Equals(other.headIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ItemType != 0) hash ^= ItemType.GetHashCode();
      if (Camp != 0) hash ^= Camp.GetHashCode();
      if (MainType != 0) hash ^= MainType.GetHashCode();
      if (SubType1 != 0) hash ^= SubType1.GetHashCode();
      if (SubType2 != 0) hash ^= SubType2.GetHashCode();
      if (SubType3 != 0) hash ^= SubType3.GetHashCode();
      if (SubType4 != 0) hash ^= SubType4.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (Order != 0) hash ^= Order.GetHashCode();
      if (SellType != 0) hash ^= SellType.GetHashCode();
      if (SellingPrice != 0) hash ^= SellingPrice.GetHashCode();
      if (StackMax != 0) hash ^= StackMax.GetHashCode();
      if (AutoUse != 0) hash ^= AutoUse.GetHashCode();
      if (AutoEquip != 0) hash ^= AutoEquip.GetHashCode();
      hash ^= settlementBuff_.GetHashCode();
      if (BaseGs != 0) hash ^= BaseGs.GetHashCode();
      if (IsCollection != false) hash ^= IsCollection.GetHashCode();
      hash ^= headIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (ItemType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemType);
      }
      if (Camp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Camp);
      }
      if (MainType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MainType);
      }
      if (SubType1 != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SubType1);
      }
      if (SubType2 != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(SubType2);
      }
      if (SubType3 != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SubType3);
      }
      if (SubType4 != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(SubType4);
      }
      if (Quality != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Quality);
      }
      if (Priority != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Priority);
      }
      if (Order != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Order);
      }
      if (SellType != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(SellType);
      }
      if (SellingPrice != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(SellingPrice);
      }
      if (StackMax != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(StackMax);
      }
      if (AutoUse != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(AutoUse);
      }
      if (AutoEquip != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(AutoEquip);
      }
      settlementBuff_.WriteTo(output, _repeated_settlementBuff_codec);
      if (BaseGs != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(BaseGs);
      }
      if (IsCollection != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsCollection);
      }
      headIds_.WriteTo(output, _repeated_headIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (ItemType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemType);
      }
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Camp);
      }
      if (MainType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MainType);
      }
      if (SubType1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubType1);
      }
      if (SubType2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubType2);
      }
      if (SubType3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubType3);
      }
      if (SubType4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubType4);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quality);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (Order != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
      }
      if (SellType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SellType);
      }
      if (SellingPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SellingPrice);
      }
      if (StackMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StackMax);
      }
      if (AutoUse != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AutoUse);
      }
      if (AutoEquip != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AutoEquip);
      }
      size += settlementBuff_.CalculateSize(_repeated_settlementBuff_codec);
      if (BaseGs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BaseGs);
      }
      if (IsCollection != false) {
        size += 2 + 1;
      }
      size += headIds_.CalculateSize(_repeated_headIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemRoleConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ItemType != 0) {
        ItemType = other.ItemType;
      }
      if (other.Camp != 0) {
        Camp = other.Camp;
      }
      if (other.MainType != 0) {
        MainType = other.MainType;
      }
      if (other.SubType1 != 0) {
        SubType1 = other.SubType1;
      }
      if (other.SubType2 != 0) {
        SubType2 = other.SubType2;
      }
      if (other.SubType3 != 0) {
        SubType3 = other.SubType3;
      }
      if (other.SubType4 != 0) {
        SubType4 = other.SubType4;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.Order != 0) {
        Order = other.Order;
      }
      if (other.SellType != 0) {
        SellType = other.SellType;
      }
      if (other.SellingPrice != 0) {
        SellingPrice = other.SellingPrice;
      }
      if (other.StackMax != 0) {
        StackMax = other.StackMax;
      }
      if (other.AutoUse != 0) {
        AutoUse = other.AutoUse;
      }
      if (other.AutoEquip != 0) {
        AutoEquip = other.AutoEquip;
      }
      settlementBuff_.Add(other.settlementBuff_);
      if (other.BaseGs != 0) {
        BaseGs = other.BaseGs;
      }
      if (other.IsCollection != false) {
        IsCollection = other.IsCollection;
      }
      headIds_.Add(other.headIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemType = input.ReadUInt32();
            break;
          }
          case 24: {
            Camp = input.ReadUInt32();
            break;
          }
          case 32: {
            MainType = input.ReadUInt32();
            break;
          }
          case 40: {
            SubType1 = input.ReadUInt32();
            break;
          }
          case 48: {
            SubType2 = input.ReadUInt32();
            break;
          }
          case 56: {
            SubType3 = input.ReadUInt32();
            break;
          }
          case 64: {
            SubType4 = input.ReadUInt32();
            break;
          }
          case 72: {
            Quality = input.ReadUInt32();
            break;
          }
          case 80: {
            Priority = input.ReadUInt32();
            break;
          }
          case 88: {
            Order = input.ReadUInt32();
            break;
          }
          case 96: {
            SellType = input.ReadUInt32();
            break;
          }
          case 104: {
            SellingPrice = input.ReadUInt32();
            break;
          }
          case 112: {
            StackMax = input.ReadUInt32();
            break;
          }
          case 120: {
            AutoUse = input.ReadUInt32();
            break;
          }
          case 128: {
            AutoEquip = input.ReadUInt32();
            break;
          }
          case 138:
          case 136: {
            settlementBuff_.AddEntriesFrom(input, _repeated_settlementBuff_codec);
            break;
          }
          case 144: {
            BaseGs = input.ReadUInt32();
            break;
          }
          case 152: {
            IsCollection = input.ReadBool();
            break;
          }
          case 162: {
            headIds_.AddEntriesFrom(input, _repeated_headIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemRoleConfig_headIds : pb::IMessage<ItemRoleConfig_headIds> {
    private static readonly pb::MessageParser<ItemRoleConfig_headIds> _parser = new pb::MessageParser<ItemRoleConfig_headIds>(() => new ItemRoleConfig_headIds());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemRoleConfig_headIds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansItemroleconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemRoleConfig_headIds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemRoleConfig_headIds(ItemRoleConfig_headIds other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemRoleConfig_headIds Clone() {
      return new ItemRoleConfig_headIds(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 头像1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemRoleConfig_headIds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemRoleConfig_headIds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemRoleConfig_headIds other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemRoleConfig_Array : pb::IMessage<ItemRoleConfig_Array> {
    private static readonly pb::MessageParser<ItemRoleConfig_Array> _parser = new pb::MessageParser<ItemRoleConfig_Array>(() => new ItemRoleConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemRoleConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansItemroleconfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemRoleConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemRoleConfig_Array(ItemRoleConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemRoleConfig_Array Clone() {
      return new ItemRoleConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.ItemRoleConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.ItemRoleConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.ItemRoleConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.ItemRoleConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.ItemRoleConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemRoleConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemRoleConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemRoleConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
