// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_materialdataconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_materialdataconfig.proto</summary>
  public static partial class XlsBeansMaterialdataconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_materialdataconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansMaterialdataconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJ4bHNfYmVhbnNfbWF0ZXJpYWxkYXRhY29uZmlnLnByb3RvEgpEMTEuUGJl",
            "YW5zItcBChJNYXRlcmlhbERhdGFDb25maWcSCgoCaWQYASABKA0SDAoEbmFt",
            "ZRgCIAEoCRIPCgdjYW5QZW5lGAMgASgIEg8KB21pblBlbmUYBCABKAISEQoJ",
            "YmFzZURlY2F5GAUgASgCEhIKCmV4dHJhRGVjYXkYBiABKAISGgoSQ2FuQXZv",
            "aWRGYWxsRGFtYWdlGAcgASgIEhsKE0ZyaWN0aW9uQ29lZmZpY2llbnQYCCAB",
            "KAISFAoMTW92ZUZyaWN0aW9uGAkgASgCEg8KB0lzRWFydGgYCiABKAgiSQoY",
            "TWF0ZXJpYWxEYXRhQ29uZmlnX0FycmF5Ei0KBWl0ZW1zGAEgAygLMh4uRDEx",
            "LlBiZWFucy5NYXRlcmlhbERhdGFDb25maWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.MaterialDataConfig), global::D11.Pbeans.MaterialDataConfig.Parser, new[]{ "Id", "Name", "CanPene", "MinPene", "BaseDecay", "ExtraDecay", "CanAvoidFallDamage", "FrictionCoefficient", "MoveFriction", "IsEarth" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.MaterialDataConfig_Array), global::D11.Pbeans.MaterialDataConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MaterialDataConfig : pb::IMessage<MaterialDataConfig> {
    private static readonly pb::MessageParser<MaterialDataConfig> _parser = new pb::MessageParser<MaterialDataConfig>(() => new MaterialDataConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MaterialDataConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansMaterialdataconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialDataConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialDataConfig(MaterialDataConfig other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      canPene_ = other.canPene_;
      minPene_ = other.minPene_;
      baseDecay_ = other.baseDecay_;
      extraDecay_ = other.extraDecay_;
      canAvoidFallDamage_ = other.canAvoidFallDamage_;
      frictionCoefficient_ = other.frictionCoefficient_;
      moveFriction_ = other.moveFriction_;
      isEarth_ = other.isEarth_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialDataConfig Clone() {
      return new MaterialDataConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 编号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 材质名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "canPene" field.</summary>
    public const int CanPeneFieldNumber = 3;
    private bool canPene_;
    /// <summary>
    /// 能否被穿透 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanPene {
      get { return canPene_; }
      set {
        canPene_ = value;
      }
    }

    /// <summary>Field number for the "minPene" field.</summary>
    public const int MinPeneFieldNumber = 4;
    private float minPene_;
    /// <summary>
    /// 最小穿透力 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinPene {
      get { return minPene_; }
      set {
        minPene_ = value;
      }
    }

    /// <summary>Field number for the "baseDecay" field.</summary>
    public const int BaseDecayFieldNumber = 5;
    private float baseDecay_;
    /// <summary>
    /// 基础穿透衰减值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaseDecay {
      get { return baseDecay_; }
      set {
        baseDecay_ = value;
      }
    }

    /// <summary>Field number for the "extraDecay" field.</summary>
    public const int ExtraDecayFieldNumber = 6;
    private float extraDecay_;
    /// <summary>
    /// 额外穿透衰减比例 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExtraDecay {
      get { return extraDecay_; }
      set {
        extraDecay_ = value;
      }
    }

    /// <summary>Field number for the "CanAvoidFallDamage" field.</summary>
    public const int CanAvoidFallDamageFieldNumber = 7;
    private bool canAvoidFallDamage_;
    /// <summary>
    /// 能否避免坠落伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanAvoidFallDamage {
      get { return canAvoidFallDamage_; }
      set {
        canAvoidFallDamage_ = value;
      }
    }

    /// <summary>Field number for the "FrictionCoefficient" field.</summary>
    public const int FrictionCoefficientFieldNumber = 8;
    private float frictionCoefficient_;
    /// <summary>
    /// 摩擦系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FrictionCoefficient {
      get { return frictionCoefficient_; }
      set {
        frictionCoefficient_ = value;
      }
    }

    /// <summary>Field number for the "MoveFriction" field.</summary>
    public const int MoveFrictionFieldNumber = 9;
    private float moveFriction_;
    /// <summary>
    /// 移动摩擦系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveFriction {
      get { return moveFriction_; }
      set {
        moveFriction_ = value;
      }
    }

    /// <summary>Field number for the "IsEarth" field.</summary>
    public const int IsEarthFieldNumber = 10;
    private bool isEarth_;
    /// <summary>
    /// 是否属于地面材质 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEarth {
      get { return isEarth_; }
      set {
        isEarth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MaterialDataConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MaterialDataConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (CanPene != other.CanPene) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinPene, other.MinPene)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BaseDecay, other.BaseDecay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExtraDecay, other.ExtraDecay)) return false;
      if (CanAvoidFallDamage != other.CanAvoidFallDamage) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FrictionCoefficient, other.FrictionCoefficient)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveFriction, other.MoveFriction)) return false;
      if (IsEarth != other.IsEarth) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CanPene != false) hash ^= CanPene.GetHashCode();
      if (MinPene != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinPene);
      if (BaseDecay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BaseDecay);
      if (ExtraDecay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExtraDecay);
      if (CanAvoidFallDamage != false) hash ^= CanAvoidFallDamage.GetHashCode();
      if (FrictionCoefficient != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FrictionCoefficient);
      if (MoveFriction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveFriction);
      if (IsEarth != false) hash ^= IsEarth.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (CanPene != false) {
        output.WriteRawTag(24);
        output.WriteBool(CanPene);
      }
      if (MinPene != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MinPene);
      }
      if (BaseDecay != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(BaseDecay);
      }
      if (ExtraDecay != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(ExtraDecay);
      }
      if (CanAvoidFallDamage != false) {
        output.WriteRawTag(56);
        output.WriteBool(CanAvoidFallDamage);
      }
      if (FrictionCoefficient != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(FrictionCoefficient);
      }
      if (MoveFriction != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(MoveFriction);
      }
      if (IsEarth != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsEarth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CanPene != false) {
        size += 1 + 1;
      }
      if (MinPene != 0F) {
        size += 1 + 4;
      }
      if (BaseDecay != 0F) {
        size += 1 + 4;
      }
      if (ExtraDecay != 0F) {
        size += 1 + 4;
      }
      if (CanAvoidFallDamage != false) {
        size += 1 + 1;
      }
      if (FrictionCoefficient != 0F) {
        size += 1 + 4;
      }
      if (MoveFriction != 0F) {
        size += 1 + 4;
      }
      if (IsEarth != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MaterialDataConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CanPene != false) {
        CanPene = other.CanPene;
      }
      if (other.MinPene != 0F) {
        MinPene = other.MinPene;
      }
      if (other.BaseDecay != 0F) {
        BaseDecay = other.BaseDecay;
      }
      if (other.ExtraDecay != 0F) {
        ExtraDecay = other.ExtraDecay;
      }
      if (other.CanAvoidFallDamage != false) {
        CanAvoidFallDamage = other.CanAvoidFallDamage;
      }
      if (other.FrictionCoefficient != 0F) {
        FrictionCoefficient = other.FrictionCoefficient;
      }
      if (other.MoveFriction != 0F) {
        MoveFriction = other.MoveFriction;
      }
      if (other.IsEarth != false) {
        IsEarth = other.IsEarth;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            CanPene = input.ReadBool();
            break;
          }
          case 37: {
            MinPene = input.ReadFloat();
            break;
          }
          case 45: {
            BaseDecay = input.ReadFloat();
            break;
          }
          case 53: {
            ExtraDecay = input.ReadFloat();
            break;
          }
          case 56: {
            CanAvoidFallDamage = input.ReadBool();
            break;
          }
          case 69: {
            FrictionCoefficient = input.ReadFloat();
            break;
          }
          case 77: {
            MoveFriction = input.ReadFloat();
            break;
          }
          case 80: {
            IsEarth = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MaterialDataConfig_Array : pb::IMessage<MaterialDataConfig_Array> {
    private static readonly pb::MessageParser<MaterialDataConfig_Array> _parser = new pb::MessageParser<MaterialDataConfig_Array>(() => new MaterialDataConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MaterialDataConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansMaterialdataconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialDataConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialDataConfig_Array(MaterialDataConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialDataConfig_Array Clone() {
      return new MaterialDataConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.MaterialDataConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.MaterialDataConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.MaterialDataConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.MaterialDataConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.MaterialDataConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MaterialDataConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MaterialDataConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MaterialDataConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
