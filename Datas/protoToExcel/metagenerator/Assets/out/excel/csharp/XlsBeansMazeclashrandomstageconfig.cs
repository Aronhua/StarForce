// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_mazeclashrandomstageconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_mazeclashrandomstageconfig.proto</summary>
  public static partial class XlsBeansMazeclashrandomstageconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_mazeclashrandomstageconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansMazeclashrandomstageconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cip4bHNfYmVhbnNfbWF6ZWNsYXNocmFuZG9tc3RhZ2Vjb25maWcucHJvdG8S",
            "CkQxMS5QYmVhbnMiiAEKGk1hemVDbGFzaFJhbmRvbVN0YWdlQ29uZmlnEhMK",
            "C21vZGVTdGFnZUlkGAEgASgNEhAKCHJvdW5kTnVtGAIgASgNEkMKCXN0YWdl",
            "TGlzdBgDIAMoCzIwLkQxMS5QYmVhbnMuTWF6ZUNsYXNoUmFuZG9tU3RhZ2VD",
            "b25maWdfc3RhZ2VMaXN0ImEKJE1hemVDbGFzaFJhbmRvbVN0YWdlQ29uZmln",
            "X3N0YWdlTGlzdBIQCghjb25maWdJZBgBIAEoDRIRCglkeW5hbWljSWQYAiAB",
            "KA0SFAoMcmFuZG9tV2VpZ2h0GAMgASgNIlkKIE1hemVDbGFzaFJhbmRvbVN0",
            "YWdlQ29uZmlnX0FycmF5EjUKBWl0ZW1zGAEgAygLMiYuRDExLlBiZWFucy5N",
            "YXplQ2xhc2hSYW5kb21TdGFnZUNvbmZpZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.MazeClashRandomStageConfig), global::D11.Pbeans.MazeClashRandomStageConfig.Parser, new[]{ "ModeStageId", "RoundNum", "StageList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.MazeClashRandomStageConfig_stageList), global::D11.Pbeans.MazeClashRandomStageConfig_stageList.Parser, new[]{ "ConfigId", "DynamicId", "RandomWeight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.MazeClashRandomStageConfig_Array), global::D11.Pbeans.MazeClashRandomStageConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MazeClashRandomStageConfig : pb::IMessage<MazeClashRandomStageConfig> {
    private static readonly pb::MessageParser<MazeClashRandomStageConfig> _parser = new pb::MessageParser<MazeClashRandomStageConfig>(() => new MazeClashRandomStageConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MazeClashRandomStageConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansMazeclashrandomstageconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MazeClashRandomStageConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MazeClashRandomStageConfig(MazeClashRandomStageConfig other) : this() {
      modeStageId_ = other.modeStageId_;
      roundNum_ = other.roundNum_;
      stageList_ = other.stageList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MazeClashRandomStageConfig Clone() {
      return new MazeClashRandomStageConfig(this);
    }

    /// <summary>Field number for the "modeStageId" field.</summary>
    public const int ModeStageIdFieldNumber = 1;
    private uint modeStageId_;
    /// <summary>
    /// 模式关卡 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ModeStageId {
      get { return modeStageId_; }
      set {
        modeStageId_ = value;
      }
    }

    /// <summary>Field number for the "roundNum" field.</summary>
    public const int RoundNumFieldNumber = 2;
    private uint roundNum_;
    /// <summary>
    /// 回合数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoundNum {
      get { return roundNum_; }
      set {
        roundNum_ = value;
      }
    }

    /// <summary>Field number for the "stageList" field.</summary>
    public const int StageListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::D11.Pbeans.MazeClashRandomStageConfig_stageList> _repeated_stageList_codec
        = pb::FieldCodec.ForMessage(26, global::D11.Pbeans.MazeClashRandomStageConfig_stageList.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.MazeClashRandomStageConfig_stageList> stageList_ = new pbc::RepeatedField<global::D11.Pbeans.MazeClashRandomStageConfig_stageList>();
    /// <summary>
    /// config组ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.MazeClashRandomStageConfig_stageList> StageList {
      get { return stageList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MazeClashRandomStageConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MazeClashRandomStageConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModeStageId != other.ModeStageId) return false;
      if (RoundNum != other.RoundNum) return false;
      if(!stageList_.Equals(other.stageList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModeStageId != 0) hash ^= ModeStageId.GetHashCode();
      if (RoundNum != 0) hash ^= RoundNum.GetHashCode();
      hash ^= stageList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModeStageId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ModeStageId);
      }
      if (RoundNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoundNum);
      }
      stageList_.WriteTo(output, _repeated_stageList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModeStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ModeStageId);
      }
      if (RoundNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoundNum);
      }
      size += stageList_.CalculateSize(_repeated_stageList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MazeClashRandomStageConfig other) {
      if (other == null) {
        return;
      }
      if (other.ModeStageId != 0) {
        ModeStageId = other.ModeStageId;
      }
      if (other.RoundNum != 0) {
        RoundNum = other.RoundNum;
      }
      stageList_.Add(other.stageList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ModeStageId = input.ReadUInt32();
            break;
          }
          case 16: {
            RoundNum = input.ReadUInt32();
            break;
          }
          case 26: {
            stageList_.AddEntriesFrom(input, _repeated_stageList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MazeClashRandomStageConfig_stageList : pb::IMessage<MazeClashRandomStageConfig_stageList> {
    private static readonly pb::MessageParser<MazeClashRandomStageConfig_stageList> _parser = new pb::MessageParser<MazeClashRandomStageConfig_stageList>(() => new MazeClashRandomStageConfig_stageList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MazeClashRandomStageConfig_stageList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansMazeclashrandomstageconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MazeClashRandomStageConfig_stageList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MazeClashRandomStageConfig_stageList(MazeClashRandomStageConfig_stageList other) : this() {
      configId_ = other.configId_;
      dynamicId_ = other.dynamicId_;
      randomWeight_ = other.randomWeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MazeClashRandomStageConfig_stageList Clone() {
      return new MazeClashRandomStageConfig_stageList(this);
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private uint configId_;
    /// <summary>
    /// config组ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "dynamicId" field.</summary>
    public const int DynamicIdFieldNumber = 2;
    private uint dynamicId_;
    /// <summary>
    /// dynamic组ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DynamicId {
      get { return dynamicId_; }
      set {
        dynamicId_ = value;
      }
    }

    /// <summary>Field number for the "randomWeight" field.</summary>
    public const int RandomWeightFieldNumber = 3;
    private uint randomWeight_;
    /// <summary>
    /// 随机权重 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RandomWeight {
      get { return randomWeight_; }
      set {
        randomWeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MazeClashRandomStageConfig_stageList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MazeClashRandomStageConfig_stageList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigId != other.ConfigId) return false;
      if (DynamicId != other.DynamicId) return false;
      if (RandomWeight != other.RandomWeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
      if (DynamicId != 0) hash ^= DynamicId.GetHashCode();
      if (RandomWeight != 0) hash ^= RandomWeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ConfigId);
      }
      if (DynamicId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DynamicId);
      }
      if (RandomWeight != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RandomWeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfigId);
      }
      if (DynamicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DynamicId);
      }
      if (RandomWeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RandomWeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MazeClashRandomStageConfig_stageList other) {
      if (other == null) {
        return;
      }
      if (other.ConfigId != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.DynamicId != 0) {
        DynamicId = other.DynamicId;
      }
      if (other.RandomWeight != 0) {
        RandomWeight = other.RandomWeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConfigId = input.ReadUInt32();
            break;
          }
          case 16: {
            DynamicId = input.ReadUInt32();
            break;
          }
          case 24: {
            RandomWeight = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MazeClashRandomStageConfig_Array : pb::IMessage<MazeClashRandomStageConfig_Array> {
    private static readonly pb::MessageParser<MazeClashRandomStageConfig_Array> _parser = new pb::MessageParser<MazeClashRandomStageConfig_Array>(() => new MazeClashRandomStageConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MazeClashRandomStageConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansMazeclashrandomstageconfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MazeClashRandomStageConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MazeClashRandomStageConfig_Array(MazeClashRandomStageConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MazeClashRandomStageConfig_Array Clone() {
      return new MazeClashRandomStageConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.MazeClashRandomStageConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.MazeClashRandomStageConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.MazeClashRandomStageConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.MazeClashRandomStageConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.MazeClashRandomStageConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MazeClashRandomStageConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MazeClashRandomStageConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MazeClashRandomStageConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
