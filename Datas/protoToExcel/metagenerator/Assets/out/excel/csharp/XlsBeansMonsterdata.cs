// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_monsterdata.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_monsterdata.proto</summary>
  public static partial class XlsBeansMonsterdataReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_monsterdata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansMonsterdataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cht4bHNfYmVhbnNfbW9uc3RlcmRhdGEucHJvdG8SCkQxMS5QYmVhbnMigQcK",
            "C01vbnN0ZXJEYXRhEgoKAmlkGAEgASgNEgwKBE5hbWUYAiABKAkSFwoPQm9y",
            "bkV2ZW50SURMaXN0GAMgAygNEhcKD0RlYWRFdmVudElETGlzdBgEIAMoDRIW",
            "Cg5IaXRFZmZlY3RJbmRleBgFIAEoDRIUCgxIaXRBdWRpb05hbWUYBiABKAkS",
            "EgoKbmVlZE5vdGlmeRgHIAEoCBISCgpjYW5SYWdEb2xsGAggASgIEhgKEFNw",
            "YXduRWZmZWN0SW5kZXgYCSABKA0SFwoPRGVhZEVmZmVjdEluZGV4GAogASgN",
            "EhQKDGtpbGxEdXJhdGlvbhgLIAEoAhIXCg9GaXJlRWZmZWN0SW5kZXgYDCAB",
            "KA0SGgoSRmlyZUVmZmVjdER1cmF0aW9uGA0gASgCEhwKFEZpcmVFZmZlY3RT",
            "b2NrZXROYW1lGA4gASgJEh4KFk11enpsZVRyYWNrRWZmZWN0SW5kZXgYDyAB",
            "KA0SFgoOQWltRWZmZWN0SW5kZXgYECABKA0SFgoOU2hlbGxEcm9wQXNzZXQY",
            "ESABKAkSHAoUU2hlbGxEcm9wQXNzZXRTb2NrZXQYEiABKAkSGAoQVXNlTG9v",
            "cEZpcmVBdWRpbxgTIAEoCBIVCg1GaXJlQXVkaW9OYW1lGBQgASgJEh4KFkZp",
            "cmVBdWRpb0xvb3BTdGFydE5hbWUYFSABKAkSHAoURmlyZUF1ZGlvTG9vcEVu",
            "ZE5hbWUYFiABKAkSGQoRT3BlbmVkRWZmZWN0SW5kZXgYFyABKA0SGQoRQ2xv",
            "c2VkRWZmZWN0SW5kZXgYGCABKA0SGQoRTm9ybWFsRWZmZWN0SW5kZXgYGSAB",
            "KA0SHgoWTm9ybWFsRWZmZWN0U29ja2V0TmFtZRgaIAEoCRIXCg9XZWFwb25B",
            "c3NldE5hbWUYGyABKAkSHQoVV2VhcG9uQXNzZXRSb3RhdGVOYW1lGBwgASgJ",
            "EhMKC0FDQXNzZXROYW1lGB0gASgJEhMKC3RwYXNzZXRuYW1lGB4gASgJEhQK",
            "DENyeVBsYXlFdmVudBgfIAEoCRIUCgxDcnlTdG9wRXZlbnQYICABKAkSFQoN",
            "RGVhZFBsYXlFdmVudBghIAEoCRIwCgdWb3hEYXRhGCIgAygLMh8uRDExLlBi",
            "ZWFucy5Nb25zdGVyRGF0YV9Wb3hEYXRhEg8KB0NyeVJUUEMYIyABKAkiLAoT",
            "TW9uc3RlckRhdGFfVm94RGF0YRIVCg1EZWFkUGxheUV2ZW50GAEgASgJIjsK",
            "EU1vbnN0ZXJEYXRhX0FycmF5EiYKBWl0ZW1zGAEgAygLMhcuRDExLlBiZWFu",
            "cy5Nb25zdGVyRGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.MonsterData), global::D11.Pbeans.MonsterData.Parser, new[]{ "Id", "Name", "BornEventIDList", "DeadEventIDList", "HitEffectIndex", "HitAudioName", "NeedNotify", "CanRagDoll", "SpawnEffectIndex", "DeadEffectIndex", "KillDuration", "FireEffectIndex", "FireEffectDuration", "FireEffectSocketName", "MuzzleTrackEffectIndex", "AimEffectIndex", "ShellDropAsset", "ShellDropAssetSocket", "UseLoopFireAudio", "FireAudioName", "FireAudioLoopStartName", "FireAudioLoopEndName", "OpenedEffectIndex", "ClosedEffectIndex", "NormalEffectIndex", "NormalEffectSocketName", "WeaponAssetName", "WeaponAssetRotateName", "ACAssetName", "Tpassetname", "CryPlayEvent", "CryStopEvent", "DeadPlayEvent", "VoxData", "CryRTPC" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.MonsterData_VoxData), global::D11.Pbeans.MonsterData_VoxData.Parser, new[]{ "DeadPlayEvent" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.MonsterData_Array), global::D11.Pbeans.MonsterData_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MonsterData : pb::IMessage<MonsterData> {
    private static readonly pb::MessageParser<MonsterData> _parser = new pb::MessageParser<MonsterData>(() => new MonsterData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansMonsterdataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterData(MonsterData other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      bornEventIDList_ = other.bornEventIDList_.Clone();
      deadEventIDList_ = other.deadEventIDList_.Clone();
      hitEffectIndex_ = other.hitEffectIndex_;
      hitAudioName_ = other.hitAudioName_;
      needNotify_ = other.needNotify_;
      canRagDoll_ = other.canRagDoll_;
      spawnEffectIndex_ = other.spawnEffectIndex_;
      deadEffectIndex_ = other.deadEffectIndex_;
      killDuration_ = other.killDuration_;
      fireEffectIndex_ = other.fireEffectIndex_;
      fireEffectDuration_ = other.fireEffectDuration_;
      fireEffectSocketName_ = other.fireEffectSocketName_;
      muzzleTrackEffectIndex_ = other.muzzleTrackEffectIndex_;
      aimEffectIndex_ = other.aimEffectIndex_;
      shellDropAsset_ = other.shellDropAsset_;
      shellDropAssetSocket_ = other.shellDropAssetSocket_;
      useLoopFireAudio_ = other.useLoopFireAudio_;
      fireAudioName_ = other.fireAudioName_;
      fireAudioLoopStartName_ = other.fireAudioLoopStartName_;
      fireAudioLoopEndName_ = other.fireAudioLoopEndName_;
      openedEffectIndex_ = other.openedEffectIndex_;
      closedEffectIndex_ = other.closedEffectIndex_;
      normalEffectIndex_ = other.normalEffectIndex_;
      normalEffectSocketName_ = other.normalEffectSocketName_;
      weaponAssetName_ = other.weaponAssetName_;
      weaponAssetRotateName_ = other.weaponAssetRotateName_;
      aCAssetName_ = other.aCAssetName_;
      tpassetname_ = other.tpassetname_;
      cryPlayEvent_ = other.cryPlayEvent_;
      cryStopEvent_ = other.cryStopEvent_;
      deadPlayEvent_ = other.deadPlayEvent_;
      voxData_ = other.voxData_.Clone();
      cryRTPC_ = other.cryRTPC_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterData Clone() {
      return new MonsterData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BornEventIDList" field.</summary>
    public const int BornEventIDListFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_bornEventIDList_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> bornEventIDList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 诞生事件 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BornEventIDList {
      get { return bornEventIDList_; }
    }

    /// <summary>Field number for the "DeadEventIDList" field.</summary>
    public const int DeadEventIDListFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_deadEventIDList_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> deadEventIDList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 死亡事件 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DeadEventIDList {
      get { return deadEventIDList_; }
    }

    /// <summary>Field number for the "HitEffectIndex" field.</summary>
    public const int HitEffectIndexFieldNumber = 5;
    private uint hitEffectIndex_;
    /// <summary>
    /// 击中特效索引 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HitEffectIndex {
      get { return hitEffectIndex_; }
      set {
        hitEffectIndex_ = value;
      }
    }

    /// <summary>Field number for the "HitAudioName" field.</summary>
    public const int HitAudioNameFieldNumber = 6;
    private string hitAudioName_ = "";
    /// <summary>
    /// 击中音效名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitAudioName {
      get { return hitAudioName_; }
      set {
        hitAudioName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "needNotify" field.</summary>
    public const int NeedNotifyFieldNumber = 7;
    private bool needNotify_;
    /// <summary>
    /// 需要通知客户端死亡表现 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedNotify {
      get { return needNotify_; }
      set {
        needNotify_ = value;
      }
    }

    /// <summary>Field number for the "canRagDoll" field.</summary>
    public const int CanRagDollFieldNumber = 8;
    private bool canRagDoll_;
    /// <summary>
    /// 角色是否允许布娃娃 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanRagDoll {
      get { return canRagDoll_; }
      set {
        canRagDoll_ = value;
      }
    }

    /// <summary>Field number for the "SpawnEffectIndex" field.</summary>
    public const int SpawnEffectIndexFieldNumber = 9;
    private uint spawnEffectIndex_;
    /// <summary>
    /// 登场特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpawnEffectIndex {
      get { return spawnEffectIndex_; }
      set {
        spawnEffectIndex_ = value;
      }
    }

    /// <summary>Field number for the "DeadEffectIndex" field.</summary>
    public const int DeadEffectIndexFieldNumber = 10;
    private uint deadEffectIndex_;
    /// <summary>
    /// 死亡特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeadEffectIndex {
      get { return deadEffectIndex_; }
      set {
        deadEffectIndex_ = value;
      }
    }

    /// <summary>Field number for the "killDuration" field.</summary>
    public const int KillDurationFieldNumber = 11;
    private float killDuration_;
    /// <summary>
    /// 死亡持续时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float KillDuration {
      get { return killDuration_; }
      set {
        killDuration_ = value;
      }
    }

    /// <summary>Field number for the "FireEffectIndex" field.</summary>
    public const int FireEffectIndexFieldNumber = 12;
    private uint fireEffectIndex_;
    /// <summary>
    /// 开火特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FireEffectIndex {
      get { return fireEffectIndex_; }
      set {
        fireEffectIndex_ = value;
      }
    }

    /// <summary>Field number for the "FireEffectDuration" field.</summary>
    public const int FireEffectDurationFieldNumber = 13;
    private float fireEffectDuration_;
    /// <summary>
    /// 开火特效持续时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireEffectDuration {
      get { return fireEffectDuration_; }
      set {
        fireEffectDuration_ = value;
      }
    }

    /// <summary>Field number for the "FireEffectSocketName" field.</summary>
    public const int FireEffectSocketNameFieldNumber = 14;
    private string fireEffectSocketName_ = "";
    /// <summary>
    /// 开火特效挂点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireEffectSocketName {
      get { return fireEffectSocketName_; }
      set {
        fireEffectSocketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MuzzleTrackEffectIndex" field.</summary>
    public const int MuzzleTrackEffectIndexFieldNumber = 15;
    private uint muzzleTrackEffectIndex_;
    /// <summary>
    /// 曳光弹特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MuzzleTrackEffectIndex {
      get { return muzzleTrackEffectIndex_; }
      set {
        muzzleTrackEffectIndex_ = value;
      }
    }

    /// <summary>Field number for the "AimEffectIndex" field.</summary>
    public const int AimEffectIndexFieldNumber = 16;
    private uint aimEffectIndex_;
    /// <summary>
    /// 瞄准特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AimEffectIndex {
      get { return aimEffectIndex_; }
      set {
        aimEffectIndex_ = value;
      }
    }

    /// <summary>Field number for the "ShellDropAsset" field.</summary>
    public const int ShellDropAssetFieldNumber = 17;
    private string shellDropAsset_ = "";
    /// <summary>
    /// 抛壳特效资源名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShellDropAsset {
      get { return shellDropAsset_; }
      set {
        shellDropAsset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ShellDropAssetSocket" field.</summary>
    public const int ShellDropAssetSocketFieldNumber = 18;
    private string shellDropAssetSocket_ = "";
    /// <summary>
    /// 抛壳特效挂点名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShellDropAssetSocket {
      get { return shellDropAssetSocket_; }
      set {
        shellDropAssetSocket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UseLoopFireAudio" field.</summary>
    public const int UseLoopFireAudioFieldNumber = 19;
    private bool useLoopFireAudio_;
    /// <summary>
    /// 用循环开火音效而非单发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseLoopFireAudio {
      get { return useLoopFireAudio_; }
      set {
        useLoopFireAudio_ = value;
      }
    }

    /// <summary>Field number for the "FireAudioName" field.</summary>
    public const int FireAudioNameFieldNumber = 20;
    private string fireAudioName_ = "";
    /// <summary>
    /// 开火音效（目前仅精英怪生效） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireAudioName {
      get { return fireAudioName_; }
      set {
        fireAudioName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireAudioLoopStartName" field.</summary>
    public const int FireAudioLoopStartNameFieldNumber = 21;
    private string fireAudioLoopStartName_ = "";
    /// <summary>
    /// 开火循环音效开始key 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireAudioLoopStartName {
      get { return fireAudioLoopStartName_; }
      set {
        fireAudioLoopStartName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireAudioLoopEndName" field.</summary>
    public const int FireAudioLoopEndNameFieldNumber = 22;
    private string fireAudioLoopEndName_ = "";
    /// <summary>
    /// 开火循环音效结束key 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireAudioLoopEndName {
      get { return fireAudioLoopEndName_; }
      set {
        fireAudioLoopEndName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OpenedEffectIndex" field.</summary>
    public const int OpenedEffectIndexFieldNumber = 23;
    private uint openedEffectIndex_;
    /// <summary>
    /// 开启状态特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenedEffectIndex {
      get { return openedEffectIndex_; }
      set {
        openedEffectIndex_ = value;
      }
    }

    /// <summary>Field number for the "ClosedEffectIndex" field.</summary>
    public const int ClosedEffectIndexFieldNumber = 24;
    private uint closedEffectIndex_;
    /// <summary>
    /// 关闭状态特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClosedEffectIndex {
      get { return closedEffectIndex_; }
      set {
        closedEffectIndex_ = value;
      }
    }

    /// <summary>Field number for the "NormalEffectIndex" field.</summary>
    public const int NormalEffectIndexFieldNumber = 25;
    private uint normalEffectIndex_;
    /// <summary>
    /// 常驻特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NormalEffectIndex {
      get { return normalEffectIndex_; }
      set {
        normalEffectIndex_ = value;
      }
    }

    /// <summary>Field number for the "NormalEffectSocketName" field.</summary>
    public const int NormalEffectSocketNameFieldNumber = 26;
    private string normalEffectSocketName_ = "";
    /// <summary>
    /// 常驻特效挂点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NormalEffectSocketName {
      get { return normalEffectSocketName_; }
      set {
        normalEffectSocketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WeaponAssetName" field.</summary>
    public const int WeaponAssetNameFieldNumber = 27;
    private string weaponAssetName_ = "";
    /// <summary>
    /// 武器资源[涉及挂点动作的用3p,不涉及用pickUp] 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeaponAssetName {
      get { return weaponAssetName_; }
      set {
        weaponAssetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WeaponAssetRotateName" field.</summary>
    public const int WeaponAssetRotateNameFieldNumber = 28;
    private string weaponAssetRotateName_ = "";
    /// <summary>
    /// 武器挂点旋转数据预设（人和怪物公用武器，怪物需要修正不带Skin的才填写） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeaponAssetRotateName {
      get { return weaponAssetRotateName_; }
      set {
        weaponAssetRotateName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ACAssetName" field.</summary>
    public const int ACAssetNameFieldNumber = 29;
    private string aCAssetName_ = "";
    /// <summary>
    /// 动画状态机，不填写则为默认 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ACAssetName {
      get { return aCAssetName_; }
      set {
        aCAssetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tpassetname" field.</summary>
    public const int TpassetnameFieldNumber = 30;
    private string tpassetname_ = "";
    /// <summary>
    /// 3p视角模型资源名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tpassetname {
      get { return tpassetname_; }
      set {
        tpassetname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CryPlayEvent" field.</summary>
    public const int CryPlayEventFieldNumber = 31;
    private string cryPlayEvent_ = "";
    /// <summary>
    /// 嘶吼声play 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CryPlayEvent {
      get { return cryPlayEvent_; }
      set {
        cryPlayEvent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CryStopEvent" field.</summary>
    public const int CryStopEventFieldNumber = 32;
    private string cryStopEvent_ = "";
    /// <summary>
    /// 嘶吼声stop 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CryStopEvent {
      get { return cryStopEvent_; }
      set {
        cryStopEvent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeadPlayEvent" field.</summary>
    public const int DeadPlayEventFieldNumber = 33;
    private string deadPlayEvent_ = "";
    /// <summary>
    /// 死亡play 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeadPlayEvent {
      get { return deadPlayEvent_; }
      set {
        deadPlayEvent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VoxData" field.</summary>
    public const int VoxDataFieldNumber = 34;
    private static readonly pb::FieldCodec<global::D11.Pbeans.MonsterData_VoxData> _repeated_voxData_codec
        = pb::FieldCodec.ForMessage(274, global::D11.Pbeans.MonsterData_VoxData.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.MonsterData_VoxData> voxData_ = new pbc::RepeatedField<global::D11.Pbeans.MonsterData_VoxData>();
    /// <summary>
    /// 死亡play 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.MonsterData_VoxData> VoxData {
      get { return voxData_; }
    }

    /// <summary>Field number for the "CryRTPC" field.</summary>
    public const int CryRTPCFieldNumber = 35;
    private string cryRTPC_ = "";
    /// <summary>
    /// 嘶吼人数的rtpc 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CryRTPC {
      get { return cryRTPC_; }
      set {
        cryRTPC_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if(!bornEventIDList_.Equals(other.bornEventIDList_)) return false;
      if(!deadEventIDList_.Equals(other.deadEventIDList_)) return false;
      if (HitEffectIndex != other.HitEffectIndex) return false;
      if (HitAudioName != other.HitAudioName) return false;
      if (NeedNotify != other.NeedNotify) return false;
      if (CanRagDoll != other.CanRagDoll) return false;
      if (SpawnEffectIndex != other.SpawnEffectIndex) return false;
      if (DeadEffectIndex != other.DeadEffectIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(KillDuration, other.KillDuration)) return false;
      if (FireEffectIndex != other.FireEffectIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireEffectDuration, other.FireEffectDuration)) return false;
      if (FireEffectSocketName != other.FireEffectSocketName) return false;
      if (MuzzleTrackEffectIndex != other.MuzzleTrackEffectIndex) return false;
      if (AimEffectIndex != other.AimEffectIndex) return false;
      if (ShellDropAsset != other.ShellDropAsset) return false;
      if (ShellDropAssetSocket != other.ShellDropAssetSocket) return false;
      if (UseLoopFireAudio != other.UseLoopFireAudio) return false;
      if (FireAudioName != other.FireAudioName) return false;
      if (FireAudioLoopStartName != other.FireAudioLoopStartName) return false;
      if (FireAudioLoopEndName != other.FireAudioLoopEndName) return false;
      if (OpenedEffectIndex != other.OpenedEffectIndex) return false;
      if (ClosedEffectIndex != other.ClosedEffectIndex) return false;
      if (NormalEffectIndex != other.NormalEffectIndex) return false;
      if (NormalEffectSocketName != other.NormalEffectSocketName) return false;
      if (WeaponAssetName != other.WeaponAssetName) return false;
      if (WeaponAssetRotateName != other.WeaponAssetRotateName) return false;
      if (ACAssetName != other.ACAssetName) return false;
      if (Tpassetname != other.Tpassetname) return false;
      if (CryPlayEvent != other.CryPlayEvent) return false;
      if (CryStopEvent != other.CryStopEvent) return false;
      if (DeadPlayEvent != other.DeadPlayEvent) return false;
      if(!voxData_.Equals(other.voxData_)) return false;
      if (CryRTPC != other.CryRTPC) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= bornEventIDList_.GetHashCode();
      hash ^= deadEventIDList_.GetHashCode();
      if (HitEffectIndex != 0) hash ^= HitEffectIndex.GetHashCode();
      if (HitAudioName.Length != 0) hash ^= HitAudioName.GetHashCode();
      if (NeedNotify != false) hash ^= NeedNotify.GetHashCode();
      if (CanRagDoll != false) hash ^= CanRagDoll.GetHashCode();
      if (SpawnEffectIndex != 0) hash ^= SpawnEffectIndex.GetHashCode();
      if (DeadEffectIndex != 0) hash ^= DeadEffectIndex.GetHashCode();
      if (KillDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(KillDuration);
      if (FireEffectIndex != 0) hash ^= FireEffectIndex.GetHashCode();
      if (FireEffectDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireEffectDuration);
      if (FireEffectSocketName.Length != 0) hash ^= FireEffectSocketName.GetHashCode();
      if (MuzzleTrackEffectIndex != 0) hash ^= MuzzleTrackEffectIndex.GetHashCode();
      if (AimEffectIndex != 0) hash ^= AimEffectIndex.GetHashCode();
      if (ShellDropAsset.Length != 0) hash ^= ShellDropAsset.GetHashCode();
      if (ShellDropAssetSocket.Length != 0) hash ^= ShellDropAssetSocket.GetHashCode();
      if (UseLoopFireAudio != false) hash ^= UseLoopFireAudio.GetHashCode();
      if (FireAudioName.Length != 0) hash ^= FireAudioName.GetHashCode();
      if (FireAudioLoopStartName.Length != 0) hash ^= FireAudioLoopStartName.GetHashCode();
      if (FireAudioLoopEndName.Length != 0) hash ^= FireAudioLoopEndName.GetHashCode();
      if (OpenedEffectIndex != 0) hash ^= OpenedEffectIndex.GetHashCode();
      if (ClosedEffectIndex != 0) hash ^= ClosedEffectIndex.GetHashCode();
      if (NormalEffectIndex != 0) hash ^= NormalEffectIndex.GetHashCode();
      if (NormalEffectSocketName.Length != 0) hash ^= NormalEffectSocketName.GetHashCode();
      if (WeaponAssetName.Length != 0) hash ^= WeaponAssetName.GetHashCode();
      if (WeaponAssetRotateName.Length != 0) hash ^= WeaponAssetRotateName.GetHashCode();
      if (ACAssetName.Length != 0) hash ^= ACAssetName.GetHashCode();
      if (Tpassetname.Length != 0) hash ^= Tpassetname.GetHashCode();
      if (CryPlayEvent.Length != 0) hash ^= CryPlayEvent.GetHashCode();
      if (CryStopEvent.Length != 0) hash ^= CryStopEvent.GetHashCode();
      if (DeadPlayEvent.Length != 0) hash ^= DeadPlayEvent.GetHashCode();
      hash ^= voxData_.GetHashCode();
      if (CryRTPC.Length != 0) hash ^= CryRTPC.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      bornEventIDList_.WriteTo(output, _repeated_bornEventIDList_codec);
      deadEventIDList_.WriteTo(output, _repeated_deadEventIDList_codec);
      if (HitEffectIndex != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HitEffectIndex);
      }
      if (HitAudioName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(HitAudioName);
      }
      if (NeedNotify != false) {
        output.WriteRawTag(56);
        output.WriteBool(NeedNotify);
      }
      if (CanRagDoll != false) {
        output.WriteRawTag(64);
        output.WriteBool(CanRagDoll);
      }
      if (SpawnEffectIndex != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SpawnEffectIndex);
      }
      if (DeadEffectIndex != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(DeadEffectIndex);
      }
      if (KillDuration != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(KillDuration);
      }
      if (FireEffectIndex != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(FireEffectIndex);
      }
      if (FireEffectDuration != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(FireEffectDuration);
      }
      if (FireEffectSocketName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(FireEffectSocketName);
      }
      if (MuzzleTrackEffectIndex != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(MuzzleTrackEffectIndex);
      }
      if (AimEffectIndex != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(AimEffectIndex);
      }
      if (ShellDropAsset.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ShellDropAsset);
      }
      if (ShellDropAssetSocket.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ShellDropAssetSocket);
      }
      if (UseLoopFireAudio != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(UseLoopFireAudio);
      }
      if (FireAudioName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(FireAudioName);
      }
      if (FireAudioLoopStartName.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(FireAudioLoopStartName);
      }
      if (FireAudioLoopEndName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(FireAudioLoopEndName);
      }
      if (OpenedEffectIndex != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(OpenedEffectIndex);
      }
      if (ClosedEffectIndex != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(ClosedEffectIndex);
      }
      if (NormalEffectIndex != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(NormalEffectIndex);
      }
      if (NormalEffectSocketName.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(NormalEffectSocketName);
      }
      if (WeaponAssetName.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(WeaponAssetName);
      }
      if (WeaponAssetRotateName.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(WeaponAssetRotateName);
      }
      if (ACAssetName.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(ACAssetName);
      }
      if (Tpassetname.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Tpassetname);
      }
      if (CryPlayEvent.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(CryPlayEvent);
      }
      if (CryStopEvent.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(CryStopEvent);
      }
      if (DeadPlayEvent.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(DeadPlayEvent);
      }
      voxData_.WriteTo(output, _repeated_voxData_codec);
      if (CryRTPC.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(CryRTPC);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += bornEventIDList_.CalculateSize(_repeated_bornEventIDList_codec);
      size += deadEventIDList_.CalculateSize(_repeated_deadEventIDList_codec);
      if (HitEffectIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HitEffectIndex);
      }
      if (HitAudioName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HitAudioName);
      }
      if (NeedNotify != false) {
        size += 1 + 1;
      }
      if (CanRagDoll != false) {
        size += 1 + 1;
      }
      if (SpawnEffectIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpawnEffectIndex);
      }
      if (DeadEffectIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeadEffectIndex);
      }
      if (KillDuration != 0F) {
        size += 1 + 4;
      }
      if (FireEffectIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FireEffectIndex);
      }
      if (FireEffectDuration != 0F) {
        size += 1 + 4;
      }
      if (FireEffectSocketName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FireEffectSocketName);
      }
      if (MuzzleTrackEffectIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MuzzleTrackEffectIndex);
      }
      if (AimEffectIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AimEffectIndex);
      }
      if (ShellDropAsset.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShellDropAsset);
      }
      if (ShellDropAssetSocket.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShellDropAssetSocket);
      }
      if (UseLoopFireAudio != false) {
        size += 2 + 1;
      }
      if (FireAudioName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FireAudioName);
      }
      if (FireAudioLoopStartName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FireAudioLoopStartName);
      }
      if (FireAudioLoopEndName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FireAudioLoopEndName);
      }
      if (OpenedEffectIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OpenedEffectIndex);
      }
      if (ClosedEffectIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClosedEffectIndex);
      }
      if (NormalEffectIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NormalEffectIndex);
      }
      if (NormalEffectSocketName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NormalEffectSocketName);
      }
      if (WeaponAssetName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WeaponAssetName);
      }
      if (WeaponAssetRotateName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WeaponAssetRotateName);
      }
      if (ACAssetName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ACAssetName);
      }
      if (Tpassetname.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tpassetname);
      }
      if (CryPlayEvent.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CryPlayEvent);
      }
      if (CryStopEvent.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CryStopEvent);
      }
      if (DeadPlayEvent.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeadPlayEvent);
      }
      size += voxData_.CalculateSize(_repeated_voxData_codec);
      if (CryRTPC.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CryRTPC);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      bornEventIDList_.Add(other.bornEventIDList_);
      deadEventIDList_.Add(other.deadEventIDList_);
      if (other.HitEffectIndex != 0) {
        HitEffectIndex = other.HitEffectIndex;
      }
      if (other.HitAudioName.Length != 0) {
        HitAudioName = other.HitAudioName;
      }
      if (other.NeedNotify != false) {
        NeedNotify = other.NeedNotify;
      }
      if (other.CanRagDoll != false) {
        CanRagDoll = other.CanRagDoll;
      }
      if (other.SpawnEffectIndex != 0) {
        SpawnEffectIndex = other.SpawnEffectIndex;
      }
      if (other.DeadEffectIndex != 0) {
        DeadEffectIndex = other.DeadEffectIndex;
      }
      if (other.KillDuration != 0F) {
        KillDuration = other.KillDuration;
      }
      if (other.FireEffectIndex != 0) {
        FireEffectIndex = other.FireEffectIndex;
      }
      if (other.FireEffectDuration != 0F) {
        FireEffectDuration = other.FireEffectDuration;
      }
      if (other.FireEffectSocketName.Length != 0) {
        FireEffectSocketName = other.FireEffectSocketName;
      }
      if (other.MuzzleTrackEffectIndex != 0) {
        MuzzleTrackEffectIndex = other.MuzzleTrackEffectIndex;
      }
      if (other.AimEffectIndex != 0) {
        AimEffectIndex = other.AimEffectIndex;
      }
      if (other.ShellDropAsset.Length != 0) {
        ShellDropAsset = other.ShellDropAsset;
      }
      if (other.ShellDropAssetSocket.Length != 0) {
        ShellDropAssetSocket = other.ShellDropAssetSocket;
      }
      if (other.UseLoopFireAudio != false) {
        UseLoopFireAudio = other.UseLoopFireAudio;
      }
      if (other.FireAudioName.Length != 0) {
        FireAudioName = other.FireAudioName;
      }
      if (other.FireAudioLoopStartName.Length != 0) {
        FireAudioLoopStartName = other.FireAudioLoopStartName;
      }
      if (other.FireAudioLoopEndName.Length != 0) {
        FireAudioLoopEndName = other.FireAudioLoopEndName;
      }
      if (other.OpenedEffectIndex != 0) {
        OpenedEffectIndex = other.OpenedEffectIndex;
      }
      if (other.ClosedEffectIndex != 0) {
        ClosedEffectIndex = other.ClosedEffectIndex;
      }
      if (other.NormalEffectIndex != 0) {
        NormalEffectIndex = other.NormalEffectIndex;
      }
      if (other.NormalEffectSocketName.Length != 0) {
        NormalEffectSocketName = other.NormalEffectSocketName;
      }
      if (other.WeaponAssetName.Length != 0) {
        WeaponAssetName = other.WeaponAssetName;
      }
      if (other.WeaponAssetRotateName.Length != 0) {
        WeaponAssetRotateName = other.WeaponAssetRotateName;
      }
      if (other.ACAssetName.Length != 0) {
        ACAssetName = other.ACAssetName;
      }
      if (other.Tpassetname.Length != 0) {
        Tpassetname = other.Tpassetname;
      }
      if (other.CryPlayEvent.Length != 0) {
        CryPlayEvent = other.CryPlayEvent;
      }
      if (other.CryStopEvent.Length != 0) {
        CryStopEvent = other.CryStopEvent;
      }
      if (other.DeadPlayEvent.Length != 0) {
        DeadPlayEvent = other.DeadPlayEvent;
      }
      voxData_.Add(other.voxData_);
      if (other.CryRTPC.Length != 0) {
        CryRTPC = other.CryRTPC;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            bornEventIDList_.AddEntriesFrom(input, _repeated_bornEventIDList_codec);
            break;
          }
          case 34:
          case 32: {
            deadEventIDList_.AddEntriesFrom(input, _repeated_deadEventIDList_codec);
            break;
          }
          case 40: {
            HitEffectIndex = input.ReadUInt32();
            break;
          }
          case 50: {
            HitAudioName = input.ReadString();
            break;
          }
          case 56: {
            NeedNotify = input.ReadBool();
            break;
          }
          case 64: {
            CanRagDoll = input.ReadBool();
            break;
          }
          case 72: {
            SpawnEffectIndex = input.ReadUInt32();
            break;
          }
          case 80: {
            DeadEffectIndex = input.ReadUInt32();
            break;
          }
          case 93: {
            KillDuration = input.ReadFloat();
            break;
          }
          case 96: {
            FireEffectIndex = input.ReadUInt32();
            break;
          }
          case 109: {
            FireEffectDuration = input.ReadFloat();
            break;
          }
          case 114: {
            FireEffectSocketName = input.ReadString();
            break;
          }
          case 120: {
            MuzzleTrackEffectIndex = input.ReadUInt32();
            break;
          }
          case 128: {
            AimEffectIndex = input.ReadUInt32();
            break;
          }
          case 138: {
            ShellDropAsset = input.ReadString();
            break;
          }
          case 146: {
            ShellDropAssetSocket = input.ReadString();
            break;
          }
          case 152: {
            UseLoopFireAudio = input.ReadBool();
            break;
          }
          case 162: {
            FireAudioName = input.ReadString();
            break;
          }
          case 170: {
            FireAudioLoopStartName = input.ReadString();
            break;
          }
          case 178: {
            FireAudioLoopEndName = input.ReadString();
            break;
          }
          case 184: {
            OpenedEffectIndex = input.ReadUInt32();
            break;
          }
          case 192: {
            ClosedEffectIndex = input.ReadUInt32();
            break;
          }
          case 200: {
            NormalEffectIndex = input.ReadUInt32();
            break;
          }
          case 210: {
            NormalEffectSocketName = input.ReadString();
            break;
          }
          case 218: {
            WeaponAssetName = input.ReadString();
            break;
          }
          case 226: {
            WeaponAssetRotateName = input.ReadString();
            break;
          }
          case 234: {
            ACAssetName = input.ReadString();
            break;
          }
          case 242: {
            Tpassetname = input.ReadString();
            break;
          }
          case 250: {
            CryPlayEvent = input.ReadString();
            break;
          }
          case 258: {
            CryStopEvent = input.ReadString();
            break;
          }
          case 266: {
            DeadPlayEvent = input.ReadString();
            break;
          }
          case 274: {
            voxData_.AddEntriesFrom(input, _repeated_voxData_codec);
            break;
          }
          case 282: {
            CryRTPC = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonsterData_VoxData : pb::IMessage<MonsterData_VoxData> {
    private static readonly pb::MessageParser<MonsterData_VoxData> _parser = new pb::MessageParser<MonsterData_VoxData>(() => new MonsterData_VoxData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterData_VoxData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansMonsterdataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterData_VoxData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterData_VoxData(MonsterData_VoxData other) : this() {
      deadPlayEvent_ = other.deadPlayEvent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterData_VoxData Clone() {
      return new MonsterData_VoxData(this);
    }

    /// <summary>Field number for the "DeadPlayEvent" field.</summary>
    public const int DeadPlayEventFieldNumber = 1;
    private string deadPlayEvent_ = "";
    /// <summary>
    /// 死亡play 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeadPlayEvent {
      get { return deadPlayEvent_; }
      set {
        deadPlayEvent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterData_VoxData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterData_VoxData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeadPlayEvent != other.DeadPlayEvent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeadPlayEvent.Length != 0) hash ^= DeadPlayEvent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeadPlayEvent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeadPlayEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeadPlayEvent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeadPlayEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterData_VoxData other) {
      if (other == null) {
        return;
      }
      if (other.DeadPlayEvent.Length != 0) {
        DeadPlayEvent = other.DeadPlayEvent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeadPlayEvent = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonsterData_Array : pb::IMessage<MonsterData_Array> {
    private static readonly pb::MessageParser<MonsterData_Array> _parser = new pb::MessageParser<MonsterData_Array>(() => new MonsterData_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterData_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansMonsterdataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterData_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterData_Array(MonsterData_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterData_Array Clone() {
      return new MonsterData_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.MonsterData> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.MonsterData.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.MonsterData> items_ = new pbc::RepeatedField<global::D11.Pbeans.MonsterData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.MonsterData> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterData_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterData_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterData_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
