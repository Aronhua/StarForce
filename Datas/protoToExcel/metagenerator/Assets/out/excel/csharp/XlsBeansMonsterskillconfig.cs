// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_monsterskillconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_monsterskillconfig.proto</summary>
  public static partial class XlsBeansMonsterskillconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_monsterskillconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansMonsterskillconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJ4bHNfYmVhbnNfbW9uc3RlcnNraWxsY29uZmlnLnByb3RvEgpEMTEuUGJl",
            "YW5zIuUBChJNb25zdGVyU2tpbGxDb25maWcSCgoCaWQYASABKA0SEQoJc2tp",
            "bGxUeXBlGAIgASgNEhIKCnRhcmdldFR5cGUYAyABKA0SFwoPYmVmb3JBdHRh",
            "Y2tUaW1lGAQgASgCEhMKC3JlcGVhdFRpbWVzGAUgASgNEhYKDnJlcGVhdElu",
            "dGVydmFsGAYgASgCEhQKDGNhc3RJbnRlcnZhbBgHIAEoAhIXCg9hZnRlckF0",
            "dGFja1RpbWUYCCABKAISEgoKY29uZmlnRmlsZRgJIAEoCRITCgttaW5EaXN0",
            "YW5jZRgKIAEoAiJJChhNb25zdGVyU2tpbGxDb25maWdfQXJyYXkSLQoFaXRl",
            "bXMYASADKAsyHi5EMTEuUGJlYW5zLk1vbnN0ZXJTa2lsbENvbmZpZ2IGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.MonsterSkillConfig), global::D11.Pbeans.MonsterSkillConfig.Parser, new[]{ "Id", "SkillType", "TargetType", "BeforAttackTime", "RepeatTimes", "RepeatInterval", "CastInterval", "AfterAttackTime", "ConfigFile", "MinDistance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.MonsterSkillConfig_Array), global::D11.Pbeans.MonsterSkillConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MonsterSkillConfig : pb::IMessage<MonsterSkillConfig> {
    private static readonly pb::MessageParser<MonsterSkillConfig> _parser = new pb::MessageParser<MonsterSkillConfig>(() => new MonsterSkillConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterSkillConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansMonsterskillconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterSkillConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterSkillConfig(MonsterSkillConfig other) : this() {
      id_ = other.id_;
      skillType_ = other.skillType_;
      targetType_ = other.targetType_;
      beforAttackTime_ = other.beforAttackTime_;
      repeatTimes_ = other.repeatTimes_;
      repeatInterval_ = other.repeatInterval_;
      castInterval_ = other.castInterval_;
      afterAttackTime_ = other.afterAttackTime_;
      configFile_ = other.configFile_;
      minDistance_ = other.minDistance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterSkillConfig Clone() {
      return new MonsterSkillConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 技能ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "skillType" field.</summary>
    public const int SkillTypeFieldNumber = 2;
    private uint skillType_;
    /// <summary>
    /// 技能类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillType {
      get { return skillType_; }
      set {
        skillType_ = value;
      }
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 3;
    private uint targetType_;
    /// <summary>
    /// 目标类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "beforAttackTime" field.</summary>
    public const int BeforAttackTimeFieldNumber = 4;
    private float beforAttackTime_;
    /// <summary>
    /// 前摇时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BeforAttackTime {
      get { return beforAttackTime_; }
      set {
        beforAttackTime_ = value;
      }
    }

    /// <summary>Field number for the "repeatTimes" field.</summary>
    public const int RepeatTimesFieldNumber = 5;
    private uint repeatTimes_;
    /// <summary>
    /// 重复次数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RepeatTimes {
      get { return repeatTimes_; }
      set {
        repeatTimes_ = value;
      }
    }

    /// <summary>Field number for the "repeatInterval" field.</summary>
    public const int RepeatIntervalFieldNumber = 6;
    private float repeatInterval_;
    /// <summary>
    /// 重复间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RepeatInterval {
      get { return repeatInterval_; }
      set {
        repeatInterval_ = value;
      }
    }

    /// <summary>Field number for the "castInterval" field.</summary>
    public const int CastIntervalFieldNumber = 7;
    private float castInterval_;
    /// <summary>
    /// 施法间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CastInterval {
      get { return castInterval_; }
      set {
        castInterval_ = value;
      }
    }

    /// <summary>Field number for the "afterAttackTime" field.</summary>
    public const int AfterAttackTimeFieldNumber = 8;
    private float afterAttackTime_;
    /// <summary>
    /// 后摇时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AfterAttackTime {
      get { return afterAttackTime_; }
      set {
        afterAttackTime_ = value;
      }
    }

    /// <summary>Field number for the "configFile" field.</summary>
    public const int ConfigFileFieldNumber = 9;
    private string configFile_ = "";
    /// <summary>
    /// 配置文件 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConfigFile {
      get { return configFile_; }
      set {
        configFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minDistance" field.</summary>
    public const int MinDistanceFieldNumber = 10;
    private float minDistance_;
    /// <summary>
    /// 最小释放距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinDistance {
      get { return minDistance_; }
      set {
        minDistance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterSkillConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterSkillConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SkillType != other.SkillType) return false;
      if (TargetType != other.TargetType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BeforAttackTime, other.BeforAttackTime)) return false;
      if (RepeatTimes != other.RepeatTimes) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RepeatInterval, other.RepeatInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CastInterval, other.CastInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AfterAttackTime, other.AfterAttackTime)) return false;
      if (ConfigFile != other.ConfigFile) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinDistance, other.MinDistance)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (SkillType != 0) hash ^= SkillType.GetHashCode();
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (BeforAttackTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BeforAttackTime);
      if (RepeatTimes != 0) hash ^= RepeatTimes.GetHashCode();
      if (RepeatInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RepeatInterval);
      if (CastInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CastInterval);
      if (AfterAttackTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AfterAttackTime);
      if (ConfigFile.Length != 0) hash ^= ConfigFile.GetHashCode();
      if (MinDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinDistance);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (SkillType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillType);
      }
      if (TargetType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TargetType);
      }
      if (BeforAttackTime != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(BeforAttackTime);
      }
      if (RepeatTimes != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RepeatTimes);
      }
      if (RepeatInterval != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(RepeatInterval);
      }
      if (CastInterval != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(CastInterval);
      }
      if (AfterAttackTime != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(AfterAttackTime);
      }
      if (ConfigFile.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ConfigFile);
      }
      if (MinDistance != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MinDistance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (SkillType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillType);
      }
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetType);
      }
      if (BeforAttackTime != 0F) {
        size += 1 + 4;
      }
      if (RepeatTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RepeatTimes);
      }
      if (RepeatInterval != 0F) {
        size += 1 + 4;
      }
      if (CastInterval != 0F) {
        size += 1 + 4;
      }
      if (AfterAttackTime != 0F) {
        size += 1 + 4;
      }
      if (ConfigFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfigFile);
      }
      if (MinDistance != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterSkillConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.SkillType != 0) {
        SkillType = other.SkillType;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.BeforAttackTime != 0F) {
        BeforAttackTime = other.BeforAttackTime;
      }
      if (other.RepeatTimes != 0) {
        RepeatTimes = other.RepeatTimes;
      }
      if (other.RepeatInterval != 0F) {
        RepeatInterval = other.RepeatInterval;
      }
      if (other.CastInterval != 0F) {
        CastInterval = other.CastInterval;
      }
      if (other.AfterAttackTime != 0F) {
        AfterAttackTime = other.AfterAttackTime;
      }
      if (other.ConfigFile.Length != 0) {
        ConfigFile = other.ConfigFile;
      }
      if (other.MinDistance != 0F) {
        MinDistance = other.MinDistance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillType = input.ReadUInt32();
            break;
          }
          case 24: {
            TargetType = input.ReadUInt32();
            break;
          }
          case 37: {
            BeforAttackTime = input.ReadFloat();
            break;
          }
          case 40: {
            RepeatTimes = input.ReadUInt32();
            break;
          }
          case 53: {
            RepeatInterval = input.ReadFloat();
            break;
          }
          case 61: {
            CastInterval = input.ReadFloat();
            break;
          }
          case 69: {
            AfterAttackTime = input.ReadFloat();
            break;
          }
          case 74: {
            ConfigFile = input.ReadString();
            break;
          }
          case 85: {
            MinDistance = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonsterSkillConfig_Array : pb::IMessage<MonsterSkillConfig_Array> {
    private static readonly pb::MessageParser<MonsterSkillConfig_Array> _parser = new pb::MessageParser<MonsterSkillConfig_Array>(() => new MonsterSkillConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterSkillConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansMonsterskillconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterSkillConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterSkillConfig_Array(MonsterSkillConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterSkillConfig_Array Clone() {
      return new MonsterSkillConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.MonsterSkillConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.MonsterSkillConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.MonsterSkillConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.MonsterSkillConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.MonsterSkillConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterSkillConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterSkillConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterSkillConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
