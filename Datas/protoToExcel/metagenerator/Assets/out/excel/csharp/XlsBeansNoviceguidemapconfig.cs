// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_noviceguidemapconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_noviceguidemapconfig.proto</summary>
  public static partial class XlsBeansNoviceguidemapconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_noviceguidemapconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansNoviceguidemapconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiR4bHNfYmVhbnNfbm92aWNlZ3VpZGVtYXBjb25maWcucHJvdG8SCkQxMS5Q",
            "YmVhbnMi+gEKFE5vdmljZUd1aWRlTWFwQ29uZmlnEgoKAmlkGAEgASgNEg4K",
            "Bm1vZGVpZBgCIAEoDRINCgVtYXBpZBgDIAEoDRIOCgZwcmVmaXgYBCABKAkS",
            "DwoHZ3VpZGVJRBgFIAEoDRIRCgljb25kaXRpb24YBiABKA0SEgoKYXV0b0Zp",
            "bmlzaBgHIAEoCBIYChBzaG93QmF0dGxlUmVzdWx0GAggASgIEhUKDXNob3dN",
            "YXRjaFRlYW0YCSABKAgSEwoLbG9hZGluZ1R5cGUYCiABKA0SFwoPc2tpcFdp",
            "bmRvd1RpdGxlGAsgASgJEhAKCHNraXBTdGVwGAwgASgNIk0KGk5vdmljZUd1",
            "aWRlTWFwQ29uZmlnX0FycmF5Ei8KBWl0ZW1zGAEgAygLMiAuRDExLlBiZWFu",
            "cy5Ob3ZpY2VHdWlkZU1hcENvbmZpZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.NoviceGuideMapConfig), global::D11.Pbeans.NoviceGuideMapConfig.Parser, new[]{ "Id", "Modeid", "Mapid", "Prefix", "GuideID", "Condition", "AutoFinish", "ShowBattleResult", "ShowMatchTeam", "LoadingType", "SkipWindowTitle", "SkipStep" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.NoviceGuideMapConfig_Array), global::D11.Pbeans.NoviceGuideMapConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NoviceGuideMapConfig : pb::IMessage<NoviceGuideMapConfig> {
    private static readonly pb::MessageParser<NoviceGuideMapConfig> _parser = new pb::MessageParser<NoviceGuideMapConfig>(() => new NoviceGuideMapConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoviceGuideMapConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansNoviceguidemapconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoviceGuideMapConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoviceGuideMapConfig(NoviceGuideMapConfig other) : this() {
      id_ = other.id_;
      modeid_ = other.modeid_;
      mapid_ = other.mapid_;
      prefix_ = other.prefix_;
      guideID_ = other.guideID_;
      condition_ = other.condition_;
      autoFinish_ = other.autoFinish_;
      showBattleResult_ = other.showBattleResult_;
      showMatchTeam_ = other.showMatchTeam_;
      loadingType_ = other.loadingType_;
      skipWindowTitle_ = other.skipWindowTitle_;
      skipStep_ = other.skipStep_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoviceGuideMapConfig Clone() {
      return new NoviceGuideMapConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "modeid" field.</summary>
    public const int ModeidFieldNumber = 2;
    private uint modeid_;
    /// <summary>
    /// 模式id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Modeid {
      get { return modeid_; }
      set {
        modeid_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 3;
    private uint mapid_;
    /// <summary>
    /// 地图id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 4;
    private string prefix_ = "";
    /// <summary>
    /// 引导key前缀 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Prefix {
      get { return prefix_; }
      set {
        prefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guideID" field.</summary>
    public const int GuideIDFieldNumber = 5;
    private uint guideID_;
    /// <summary>
    /// 完成的guideID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuideID {
      get { return guideID_; }
      set {
        guideID_ = value;
      }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 6;
    private uint condition_;
    /// <summary>
    /// 引导检查类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    /// <summary>Field number for the "autoFinish" field.</summary>
    public const int AutoFinishFieldNumber = 7;
    private bool autoFinish_;
    /// <summary>
    /// 主动退出是否自动完成 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoFinish {
      get { return autoFinish_; }
      set {
        autoFinish_ = value;
      }
    }

    /// <summary>Field number for the "showBattleResult" field.</summary>
    public const int ShowBattleResultFieldNumber = 8;
    private bool showBattleResult_;
    /// <summary>
    /// 显示结算信息 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowBattleResult {
      get { return showBattleResult_; }
      set {
        showBattleResult_ = value;
      }
    }

    /// <summary>Field number for the "showMatchTeam" field.</summary>
    public const int ShowMatchTeamFieldNumber = 9;
    private bool showMatchTeam_;
    /// <summary>
    /// 主动创建队伍 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowMatchTeam {
      get { return showMatchTeam_; }
      set {
        showMatchTeam_ = value;
      }
    }

    /// <summary>Field number for the "loadingType" field.</summary>
    public const int LoadingTypeFieldNumber = 10;
    private uint loadingType_;
    /// <summary>
    /// 特殊loading 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoadingType {
      get { return loadingType_; }
      set {
        loadingType_ = value;
      }
    }

    /// <summary>Field number for the "skipWindowTitle" field.</summary>
    public const int SkipWindowTitleFieldNumber = 11;
    private string skipWindowTitle_ = "";
    /// <summary>
    /// 跳过确认弹框标题 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkipWindowTitle {
      get { return skipWindowTitle_; }
      set {
        skipWindowTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skipStep" field.</summary>
    public const int SkipStepFieldNumber = 12;
    private uint skipStep_;
    /// <summary>
    /// 跳过的ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkipStep {
      get { return skipStep_; }
      set {
        skipStep_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoviceGuideMapConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoviceGuideMapConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Modeid != other.Modeid) return false;
      if (Mapid != other.Mapid) return false;
      if (Prefix != other.Prefix) return false;
      if (GuideID != other.GuideID) return false;
      if (Condition != other.Condition) return false;
      if (AutoFinish != other.AutoFinish) return false;
      if (ShowBattleResult != other.ShowBattleResult) return false;
      if (ShowMatchTeam != other.ShowMatchTeam) return false;
      if (LoadingType != other.LoadingType) return false;
      if (SkipWindowTitle != other.SkipWindowTitle) return false;
      if (SkipStep != other.SkipStep) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Modeid != 0) hash ^= Modeid.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (Prefix.Length != 0) hash ^= Prefix.GetHashCode();
      if (GuideID != 0) hash ^= GuideID.GetHashCode();
      if (Condition != 0) hash ^= Condition.GetHashCode();
      if (AutoFinish != false) hash ^= AutoFinish.GetHashCode();
      if (ShowBattleResult != false) hash ^= ShowBattleResult.GetHashCode();
      if (ShowMatchTeam != false) hash ^= ShowMatchTeam.GetHashCode();
      if (LoadingType != 0) hash ^= LoadingType.GetHashCode();
      if (SkipWindowTitle.Length != 0) hash ^= SkipWindowTitle.GetHashCode();
      if (SkipStep != 0) hash ^= SkipStep.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Modeid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Modeid);
      }
      if (Mapid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Mapid);
      }
      if (Prefix.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Prefix);
      }
      if (GuideID != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(GuideID);
      }
      if (Condition != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Condition);
      }
      if (AutoFinish != false) {
        output.WriteRawTag(56);
        output.WriteBool(AutoFinish);
      }
      if (ShowBattleResult != false) {
        output.WriteRawTag(64);
        output.WriteBool(ShowBattleResult);
      }
      if (ShowMatchTeam != false) {
        output.WriteRawTag(72);
        output.WriteBool(ShowMatchTeam);
      }
      if (LoadingType != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(LoadingType);
      }
      if (SkipWindowTitle.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SkipWindowTitle);
      }
      if (SkipStep != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(SkipStep);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Modeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Modeid);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      if (Prefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prefix);
      }
      if (GuideID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuideID);
      }
      if (Condition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Condition);
      }
      if (AutoFinish != false) {
        size += 1 + 1;
      }
      if (ShowBattleResult != false) {
        size += 1 + 1;
      }
      if (ShowMatchTeam != false) {
        size += 1 + 1;
      }
      if (LoadingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoadingType);
      }
      if (SkipWindowTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkipWindowTitle);
      }
      if (SkipStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkipStep);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoviceGuideMapConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Modeid != 0) {
        Modeid = other.Modeid;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.Prefix.Length != 0) {
        Prefix = other.Prefix;
      }
      if (other.GuideID != 0) {
        GuideID = other.GuideID;
      }
      if (other.Condition != 0) {
        Condition = other.Condition;
      }
      if (other.AutoFinish != false) {
        AutoFinish = other.AutoFinish;
      }
      if (other.ShowBattleResult != false) {
        ShowBattleResult = other.ShowBattleResult;
      }
      if (other.ShowMatchTeam != false) {
        ShowMatchTeam = other.ShowMatchTeam;
      }
      if (other.LoadingType != 0) {
        LoadingType = other.LoadingType;
      }
      if (other.SkipWindowTitle.Length != 0) {
        SkipWindowTitle = other.SkipWindowTitle;
      }
      if (other.SkipStep != 0) {
        SkipStep = other.SkipStep;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Modeid = input.ReadUInt32();
            break;
          }
          case 24: {
            Mapid = input.ReadUInt32();
            break;
          }
          case 34: {
            Prefix = input.ReadString();
            break;
          }
          case 40: {
            GuideID = input.ReadUInt32();
            break;
          }
          case 48: {
            Condition = input.ReadUInt32();
            break;
          }
          case 56: {
            AutoFinish = input.ReadBool();
            break;
          }
          case 64: {
            ShowBattleResult = input.ReadBool();
            break;
          }
          case 72: {
            ShowMatchTeam = input.ReadBool();
            break;
          }
          case 80: {
            LoadingType = input.ReadUInt32();
            break;
          }
          case 90: {
            SkipWindowTitle = input.ReadString();
            break;
          }
          case 96: {
            SkipStep = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoviceGuideMapConfig_Array : pb::IMessage<NoviceGuideMapConfig_Array> {
    private static readonly pb::MessageParser<NoviceGuideMapConfig_Array> _parser = new pb::MessageParser<NoviceGuideMapConfig_Array>(() => new NoviceGuideMapConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoviceGuideMapConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansNoviceguidemapconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoviceGuideMapConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoviceGuideMapConfig_Array(NoviceGuideMapConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoviceGuideMapConfig_Array Clone() {
      return new NoviceGuideMapConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.NoviceGuideMapConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.NoviceGuideMapConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.NoviceGuideMapConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.NoviceGuideMapConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.NoviceGuideMapConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoviceGuideMapConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoviceGuideMapConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoviceGuideMapConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
