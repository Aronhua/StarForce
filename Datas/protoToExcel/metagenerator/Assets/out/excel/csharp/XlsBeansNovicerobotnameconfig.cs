// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_novicerobotnameconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_novicerobotnameconfig.proto</summary>
  public static partial class XlsBeansNovicerobotnameconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_novicerobotnameconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansNovicerobotnameconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiV4bHNfYmVhbnNfbm92aWNlcm9ib3RuYW1lY29uZmlnLnByb3RvEgpEMTEu",
            "UGJlYW5zIocEChVOb3ZpY2VSb2JvdE5hbWVDb25maWcSDAoEWkhDThgBIAEo",
            "CRIKCgJFThgCIAEoCRIKCgJSVRgDIAEoCRIKCgJBRhgEIAEoCRIKCgJBUhgF",
            "IAEoCRIKCgJFVRgGIAEoCRIKCgJCRRgHIAEoCRIKCgJCRxgIIAEoCRIKCgJD",
            "QRgJIAEoCRIMCgRaSFRXGAogASgJEgoKAkNTGAsgASgJEgoKAkRBGAwgASgJ",
            "EgoKAk5MGA0gASgJEgoKAkVUGA4gASgJEgoKAkZPGA8gASgJEgoKAkZJGBAg",
            "ASgJEgoKAkZSGBEgASgJEgoKAkRFGBIgASgJEgoKAkVMGBMgASgJEgoKAkhF",
            "GBQgASgJEgoKAkhVGBUgASgJEgoKAklTGBYgASgJEgoKAklEGBcgASgJEgoK",
            "AklUGBggASgJEgoKAkpBGBkgASgJEgoKAktPGBogASgJEgoKAkxWGBsgASgJ",
            "EgoKAkxUGBwgASgJEgoKAk5PGB0gASgJEgoKAlBMGB4gASgJEgoKAlBUGB8g",
            "ASgJEgoKAlJPGCAgASgJEgoKAkhSGCEgASgJEgoKAlNLGCIgASgJEgoKAlNM",
            "GCMgASgJEgoKAkVTGCQgASgJEgoKAlNWGCUgASgJEgoKAlRIGCYgASgJEgoK",
            "AlRSGCcgASgJEgoKAlVLGCggASgJEgoKAlZJGCkgASgJIk8KG05vdmljZVJv",
            "Ym90TmFtZUNvbmZpZ19BcnJheRIwCgVpdGVtcxgBIAMoCzIhLkQxMS5QYmVh",
            "bnMuTm92aWNlUm9ib3ROYW1lQ29uZmlnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.NoviceRobotNameConfig), global::D11.Pbeans.NoviceRobotNameConfig.Parser, new[]{ "ZHCN", "EN", "RU", "AF", "AR", "EU", "BE", "BG", "CA", "ZHTW", "CS", "DA", "NL", "ET", "FO", "FI", "FR", "DE", "EL", "HE", "HU", "IS", "ID", "IT", "JA", "KO", "LV", "LT", "NO", "PL", "PT", "RO", "HR", "SK", "SL", "ES", "SV", "TH", "TR", "UK", "VI" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.NoviceRobotNameConfig_Array), global::D11.Pbeans.NoviceRobotNameConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NoviceRobotNameConfig : pb::IMessage<NoviceRobotNameConfig> {
    private static readonly pb::MessageParser<NoviceRobotNameConfig> _parser = new pb::MessageParser<NoviceRobotNameConfig>(() => new NoviceRobotNameConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoviceRobotNameConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansNovicerobotnameconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoviceRobotNameConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoviceRobotNameConfig(NoviceRobotNameConfig other) : this() {
      zHCN_ = other.zHCN_;
      eN_ = other.eN_;
      rU_ = other.rU_;
      aF_ = other.aF_;
      aR_ = other.aR_;
      eU_ = other.eU_;
      bE_ = other.bE_;
      bG_ = other.bG_;
      cA_ = other.cA_;
      zHTW_ = other.zHTW_;
      cS_ = other.cS_;
      dA_ = other.dA_;
      nL_ = other.nL_;
      eT_ = other.eT_;
      fO_ = other.fO_;
      fI_ = other.fI_;
      fR_ = other.fR_;
      dE_ = other.dE_;
      eL_ = other.eL_;
      hE_ = other.hE_;
      hU_ = other.hU_;
      iS_ = other.iS_;
      iD_ = other.iD_;
      iT_ = other.iT_;
      jA_ = other.jA_;
      kO_ = other.kO_;
      lV_ = other.lV_;
      lT_ = other.lT_;
      nO_ = other.nO_;
      pL_ = other.pL_;
      pT_ = other.pT_;
      rO_ = other.rO_;
      hR_ = other.hR_;
      sK_ = other.sK_;
      sL_ = other.sL_;
      eS_ = other.eS_;
      sV_ = other.sV_;
      tH_ = other.tH_;
      tR_ = other.tR_;
      uK_ = other.uK_;
      vI_ = other.vI_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoviceRobotNameConfig Clone() {
      return new NoviceRobotNameConfig(this);
    }

    /// <summary>Field number for the "ZHCN" field.</summary>
    public const int ZHCNFieldNumber = 1;
    private string zHCN_ = "";
    /// <summary>
    /// 中文 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZHCN {
      get { return zHCN_; }
      set {
        zHCN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EN" field.</summary>
    public const int ENFieldNumber = 2;
    private string eN_ = "";
    /// <summary>
    /// 英文 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EN {
      get { return eN_; }
      set {
        eN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RU" field.</summary>
    public const int RUFieldNumber = 3;
    private string rU_ = "";
    /// <summary>
    /// 俄文 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RU {
      get { return rU_; }
      set {
        rU_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AF" field.</summary>
    public const int AFFieldNumber = 4;
    private string aF_ = "";
    /// <summary>
    /// 南非荷兰 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AF {
      get { return aF_; }
      set {
        aF_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AR" field.</summary>
    public const int ARFieldNumber = 5;
    private string aR_ = "";
    /// <summary>
    /// 阿拉伯 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AR {
      get { return aR_; }
      set {
        aR_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EU" field.</summary>
    public const int EUFieldNumber = 6;
    private string eU_ = "";
    /// <summary>
    /// 巴斯克 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EU {
      get { return eU_; }
      set {
        eU_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BE" field.</summary>
    public const int BEFieldNumber = 7;
    private string bE_ = "";
    /// <summary>
    /// 白俄 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BE {
      get { return bE_; }
      set {
        bE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BG" field.</summary>
    public const int BGFieldNumber = 8;
    private string bG_ = "";
    /// <summary>
    /// 保加利亚 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BG {
      get { return bG_; }
      set {
        bG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CA" field.</summary>
    public const int CAFieldNumber = 9;
    private string cA_ = "";
    /// <summary>
    /// 加泰罗 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CA {
      get { return cA_; }
      set {
        cA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ZHTW" field.</summary>
    public const int ZHTWFieldNumber = 10;
    private string zHTW_ = "";
    /// <summary>
    /// 繁中 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZHTW {
      get { return zHTW_; }
      set {
        zHTW_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CS" field.</summary>
    public const int CSFieldNumber = 11;
    private string cS_ = "";
    /// <summary>
    /// 捷克 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CS {
      get { return cS_; }
      set {
        cS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DA" field.</summary>
    public const int DAFieldNumber = 12;
    private string dA_ = "";
    /// <summary>
    /// 丹麦 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DA {
      get { return dA_; }
      set {
        dA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NL" field.</summary>
    public const int NLFieldNumber = 13;
    private string nL_ = "";
    /// <summary>
    /// 荷兰 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NL {
      get { return nL_; }
      set {
        nL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ET" field.</summary>
    public const int ETFieldNumber = 14;
    private string eT_ = "";
    /// <summary>
    /// 爱沙尼亚 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ET {
      get { return eT_; }
      set {
        eT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FO" field.</summary>
    public const int FOFieldNumber = 15;
    private string fO_ = "";
    /// <summary>
    /// 法罗 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FO {
      get { return fO_; }
      set {
        fO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FI" field.</summary>
    public const int FIFieldNumber = 16;
    private string fI_ = "";
    /// <summary>
    /// 芬兰 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FI {
      get { return fI_; }
      set {
        fI_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FR" field.</summary>
    public const int FRFieldNumber = 17;
    private string fR_ = "";
    /// <summary>
    /// 法 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FR {
      get { return fR_; }
      set {
        fR_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DE" field.</summary>
    public const int DEFieldNumber = 18;
    private string dE_ = "";
    /// <summary>
    /// 德 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DE {
      get { return dE_; }
      set {
        dE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EL" field.</summary>
    public const int ELFieldNumber = 19;
    private string eL_ = "";
    /// <summary>
    /// 希腊 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EL {
      get { return eL_; }
      set {
        eL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HE" field.</summary>
    public const int HEFieldNumber = 20;
    private string hE_ = "";
    /// <summary>
    /// 希伯来（犹太） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HE {
      get { return hE_; }
      set {
        hE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HU" field.</summary>
    public const int HUFieldNumber = 21;
    private string hU_ = "";
    /// <summary>
    /// 匈牙利 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HU {
      get { return hU_; }
      set {
        hU_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IS" field.</summary>
    public const int ISFieldNumber = 22;
    private string iS_ = "";
    /// <summary>
    /// 冰岛 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IS {
      get { return iS_; }
      set {
        iS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 23;
    private string iD_ = "";
    /// <summary>
    /// 印尼 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ID {
      get { return iD_; }
      set {
        iD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IT" field.</summary>
    public const int ITFieldNumber = 24;
    private string iT_ = "";
    /// <summary>
    /// 意大利 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IT {
      get { return iT_; }
      set {
        iT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "JA" field.</summary>
    public const int JAFieldNumber = 25;
    private string jA_ = "";
    /// <summary>
    /// 日本 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JA {
      get { return jA_; }
      set {
        jA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "KO" field.</summary>
    public const int KOFieldNumber = 26;
    private string kO_ = "";
    /// <summary>
    /// 韩国 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KO {
      get { return kO_; }
      set {
        kO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LV" field.</summary>
    public const int LVFieldNumber = 27;
    private string lV_ = "";
    /// <summary>
    /// 拉脱维亚 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LV {
      get { return lV_; }
      set {
        lV_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LT" field.</summary>
    public const int LTFieldNumber = 28;
    private string lT_ = "";
    /// <summary>
    /// 立陶宛 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LT {
      get { return lT_; }
      set {
        lT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NO" field.</summary>
    public const int NOFieldNumber = 29;
    private string nO_ = "";
    /// <summary>
    /// 挪威 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NO {
      get { return nO_; }
      set {
        nO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PL" field.</summary>
    public const int PLFieldNumber = 30;
    private string pL_ = "";
    /// <summary>
    /// 波兰 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PL {
      get { return pL_; }
      set {
        pL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PT" field.</summary>
    public const int PTFieldNumber = 31;
    private string pT_ = "";
    /// <summary>
    /// 葡萄牙 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PT {
      get { return pT_; }
      set {
        pT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RO" field.</summary>
    public const int ROFieldNumber = 32;
    private string rO_ = "";
    /// <summary>
    /// 罗马尼亚 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RO {
      get { return rO_; }
      set {
        rO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HR" field.</summary>
    public const int HRFieldNumber = 33;
    private string hR_ = "";
    /// <summary>
    /// 塞尔维亚克罗地亚 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HR {
      get { return hR_; }
      set {
        hR_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SK" field.</summary>
    public const int SKFieldNumber = 34;
    private string sK_ = "";
    /// <summary>
    /// 斯洛伐克 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SK {
      get { return sK_; }
      set {
        sK_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SL" field.</summary>
    public const int SLFieldNumber = 35;
    private string sL_ = "";
    /// <summary>
    /// 斯洛文尼亚 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SL {
      get { return sL_; }
      set {
        sL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ES" field.</summary>
    public const int ESFieldNumber = 36;
    private string eS_ = "";
    /// <summary>
    /// 西班牙 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ES {
      get { return eS_; }
      set {
        eS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SV" field.</summary>
    public const int SVFieldNumber = 37;
    private string sV_ = "";
    /// <summary>
    /// 瑞典 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SV {
      get { return sV_; }
      set {
        sV_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TH" field.</summary>
    public const int THFieldNumber = 38;
    private string tH_ = "";
    /// <summary>
    /// 泰国 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TH {
      get { return tH_; }
      set {
        tH_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TR" field.</summary>
    public const int TRFieldNumber = 39;
    private string tR_ = "";
    /// <summary>
    /// 土耳其 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TR {
      get { return tR_; }
      set {
        tR_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UK" field.</summary>
    public const int UKFieldNumber = 40;
    private string uK_ = "";
    /// <summary>
    /// 乌克兰 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UK {
      get { return uK_; }
      set {
        uK_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VI" field.</summary>
    public const int VIFieldNumber = 41;
    private string vI_ = "";
    /// <summary>
    /// 越南 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VI {
      get { return vI_; }
      set {
        vI_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoviceRobotNameConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoviceRobotNameConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ZHCN != other.ZHCN) return false;
      if (EN != other.EN) return false;
      if (RU != other.RU) return false;
      if (AF != other.AF) return false;
      if (AR != other.AR) return false;
      if (EU != other.EU) return false;
      if (BE != other.BE) return false;
      if (BG != other.BG) return false;
      if (CA != other.CA) return false;
      if (ZHTW != other.ZHTW) return false;
      if (CS != other.CS) return false;
      if (DA != other.DA) return false;
      if (NL != other.NL) return false;
      if (ET != other.ET) return false;
      if (FO != other.FO) return false;
      if (FI != other.FI) return false;
      if (FR != other.FR) return false;
      if (DE != other.DE) return false;
      if (EL != other.EL) return false;
      if (HE != other.HE) return false;
      if (HU != other.HU) return false;
      if (IS != other.IS) return false;
      if (ID != other.ID) return false;
      if (IT != other.IT) return false;
      if (JA != other.JA) return false;
      if (KO != other.KO) return false;
      if (LV != other.LV) return false;
      if (LT != other.LT) return false;
      if (NO != other.NO) return false;
      if (PL != other.PL) return false;
      if (PT != other.PT) return false;
      if (RO != other.RO) return false;
      if (HR != other.HR) return false;
      if (SK != other.SK) return false;
      if (SL != other.SL) return false;
      if (ES != other.ES) return false;
      if (SV != other.SV) return false;
      if (TH != other.TH) return false;
      if (TR != other.TR) return false;
      if (UK != other.UK) return false;
      if (VI != other.VI) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ZHCN.Length != 0) hash ^= ZHCN.GetHashCode();
      if (EN.Length != 0) hash ^= EN.GetHashCode();
      if (RU.Length != 0) hash ^= RU.GetHashCode();
      if (AF.Length != 0) hash ^= AF.GetHashCode();
      if (AR.Length != 0) hash ^= AR.GetHashCode();
      if (EU.Length != 0) hash ^= EU.GetHashCode();
      if (BE.Length != 0) hash ^= BE.GetHashCode();
      if (BG.Length != 0) hash ^= BG.GetHashCode();
      if (CA.Length != 0) hash ^= CA.GetHashCode();
      if (ZHTW.Length != 0) hash ^= ZHTW.GetHashCode();
      if (CS.Length != 0) hash ^= CS.GetHashCode();
      if (DA.Length != 0) hash ^= DA.GetHashCode();
      if (NL.Length != 0) hash ^= NL.GetHashCode();
      if (ET.Length != 0) hash ^= ET.GetHashCode();
      if (FO.Length != 0) hash ^= FO.GetHashCode();
      if (FI.Length != 0) hash ^= FI.GetHashCode();
      if (FR.Length != 0) hash ^= FR.GetHashCode();
      if (DE.Length != 0) hash ^= DE.GetHashCode();
      if (EL.Length != 0) hash ^= EL.GetHashCode();
      if (HE.Length != 0) hash ^= HE.GetHashCode();
      if (HU.Length != 0) hash ^= HU.GetHashCode();
      if (IS.Length != 0) hash ^= IS.GetHashCode();
      if (ID.Length != 0) hash ^= ID.GetHashCode();
      if (IT.Length != 0) hash ^= IT.GetHashCode();
      if (JA.Length != 0) hash ^= JA.GetHashCode();
      if (KO.Length != 0) hash ^= KO.GetHashCode();
      if (LV.Length != 0) hash ^= LV.GetHashCode();
      if (LT.Length != 0) hash ^= LT.GetHashCode();
      if (NO.Length != 0) hash ^= NO.GetHashCode();
      if (PL.Length != 0) hash ^= PL.GetHashCode();
      if (PT.Length != 0) hash ^= PT.GetHashCode();
      if (RO.Length != 0) hash ^= RO.GetHashCode();
      if (HR.Length != 0) hash ^= HR.GetHashCode();
      if (SK.Length != 0) hash ^= SK.GetHashCode();
      if (SL.Length != 0) hash ^= SL.GetHashCode();
      if (ES.Length != 0) hash ^= ES.GetHashCode();
      if (SV.Length != 0) hash ^= SV.GetHashCode();
      if (TH.Length != 0) hash ^= TH.GetHashCode();
      if (TR.Length != 0) hash ^= TR.GetHashCode();
      if (UK.Length != 0) hash ^= UK.GetHashCode();
      if (VI.Length != 0) hash ^= VI.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZHCN.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ZHCN);
      }
      if (EN.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EN);
      }
      if (RU.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RU);
      }
      if (AF.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AF);
      }
      if (AR.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AR);
      }
      if (EU.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(EU);
      }
      if (BE.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BE);
      }
      if (BG.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BG);
      }
      if (CA.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CA);
      }
      if (ZHTW.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ZHTW);
      }
      if (CS.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CS);
      }
      if (DA.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(DA);
      }
      if (NL.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(NL);
      }
      if (ET.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ET);
      }
      if (FO.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(FO);
      }
      if (FI.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(FI);
      }
      if (FR.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(FR);
      }
      if (DE.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(DE);
      }
      if (EL.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(EL);
      }
      if (HE.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(HE);
      }
      if (HU.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(HU);
      }
      if (IS.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(IS);
      }
      if (ID.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(ID);
      }
      if (IT.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(IT);
      }
      if (JA.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(JA);
      }
      if (KO.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(KO);
      }
      if (LV.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(LV);
      }
      if (LT.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(LT);
      }
      if (NO.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(NO);
      }
      if (PL.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(PL);
      }
      if (PT.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(PT);
      }
      if (RO.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(RO);
      }
      if (HR.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(HR);
      }
      if (SK.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(SK);
      }
      if (SL.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(SL);
      }
      if (ES.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(ES);
      }
      if (SV.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(SV);
      }
      if (TH.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(TH);
      }
      if (TR.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(TR);
      }
      if (UK.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(UK);
      }
      if (VI.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(VI);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZHCN.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZHCN);
      }
      if (EN.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EN);
      }
      if (RU.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RU);
      }
      if (AF.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AF);
      }
      if (AR.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AR);
      }
      if (EU.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EU);
      }
      if (BE.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BE);
      }
      if (BG.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BG);
      }
      if (CA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CA);
      }
      if (ZHTW.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZHTW);
      }
      if (CS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CS);
      }
      if (DA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DA);
      }
      if (NL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NL);
      }
      if (ET.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ET);
      }
      if (FO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FO);
      }
      if (FI.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FI);
      }
      if (FR.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FR);
      }
      if (DE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DE);
      }
      if (EL.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EL);
      }
      if (HE.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HE);
      }
      if (HU.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HU);
      }
      if (IS.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IS);
      }
      if (ID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ID);
      }
      if (IT.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IT);
      }
      if (JA.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(JA);
      }
      if (KO.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(KO);
      }
      if (LV.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LV);
      }
      if (LT.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LT);
      }
      if (NO.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NO);
      }
      if (PL.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PL);
      }
      if (PT.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PT);
      }
      if (RO.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RO);
      }
      if (HR.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HR);
      }
      if (SK.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SK);
      }
      if (SL.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SL);
      }
      if (ES.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ES);
      }
      if (SV.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SV);
      }
      if (TH.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TH);
      }
      if (TR.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TR);
      }
      if (UK.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UK);
      }
      if (VI.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VI);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoviceRobotNameConfig other) {
      if (other == null) {
        return;
      }
      if (other.ZHCN.Length != 0) {
        ZHCN = other.ZHCN;
      }
      if (other.EN.Length != 0) {
        EN = other.EN;
      }
      if (other.RU.Length != 0) {
        RU = other.RU;
      }
      if (other.AF.Length != 0) {
        AF = other.AF;
      }
      if (other.AR.Length != 0) {
        AR = other.AR;
      }
      if (other.EU.Length != 0) {
        EU = other.EU;
      }
      if (other.BE.Length != 0) {
        BE = other.BE;
      }
      if (other.BG.Length != 0) {
        BG = other.BG;
      }
      if (other.CA.Length != 0) {
        CA = other.CA;
      }
      if (other.ZHTW.Length != 0) {
        ZHTW = other.ZHTW;
      }
      if (other.CS.Length != 0) {
        CS = other.CS;
      }
      if (other.DA.Length != 0) {
        DA = other.DA;
      }
      if (other.NL.Length != 0) {
        NL = other.NL;
      }
      if (other.ET.Length != 0) {
        ET = other.ET;
      }
      if (other.FO.Length != 0) {
        FO = other.FO;
      }
      if (other.FI.Length != 0) {
        FI = other.FI;
      }
      if (other.FR.Length != 0) {
        FR = other.FR;
      }
      if (other.DE.Length != 0) {
        DE = other.DE;
      }
      if (other.EL.Length != 0) {
        EL = other.EL;
      }
      if (other.HE.Length != 0) {
        HE = other.HE;
      }
      if (other.HU.Length != 0) {
        HU = other.HU;
      }
      if (other.IS.Length != 0) {
        IS = other.IS;
      }
      if (other.ID.Length != 0) {
        ID = other.ID;
      }
      if (other.IT.Length != 0) {
        IT = other.IT;
      }
      if (other.JA.Length != 0) {
        JA = other.JA;
      }
      if (other.KO.Length != 0) {
        KO = other.KO;
      }
      if (other.LV.Length != 0) {
        LV = other.LV;
      }
      if (other.LT.Length != 0) {
        LT = other.LT;
      }
      if (other.NO.Length != 0) {
        NO = other.NO;
      }
      if (other.PL.Length != 0) {
        PL = other.PL;
      }
      if (other.PT.Length != 0) {
        PT = other.PT;
      }
      if (other.RO.Length != 0) {
        RO = other.RO;
      }
      if (other.HR.Length != 0) {
        HR = other.HR;
      }
      if (other.SK.Length != 0) {
        SK = other.SK;
      }
      if (other.SL.Length != 0) {
        SL = other.SL;
      }
      if (other.ES.Length != 0) {
        ES = other.ES;
      }
      if (other.SV.Length != 0) {
        SV = other.SV;
      }
      if (other.TH.Length != 0) {
        TH = other.TH;
      }
      if (other.TR.Length != 0) {
        TR = other.TR;
      }
      if (other.UK.Length != 0) {
        UK = other.UK;
      }
      if (other.VI.Length != 0) {
        VI = other.VI;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ZHCN = input.ReadString();
            break;
          }
          case 18: {
            EN = input.ReadString();
            break;
          }
          case 26: {
            RU = input.ReadString();
            break;
          }
          case 34: {
            AF = input.ReadString();
            break;
          }
          case 42: {
            AR = input.ReadString();
            break;
          }
          case 50: {
            EU = input.ReadString();
            break;
          }
          case 58: {
            BE = input.ReadString();
            break;
          }
          case 66: {
            BG = input.ReadString();
            break;
          }
          case 74: {
            CA = input.ReadString();
            break;
          }
          case 82: {
            ZHTW = input.ReadString();
            break;
          }
          case 90: {
            CS = input.ReadString();
            break;
          }
          case 98: {
            DA = input.ReadString();
            break;
          }
          case 106: {
            NL = input.ReadString();
            break;
          }
          case 114: {
            ET = input.ReadString();
            break;
          }
          case 122: {
            FO = input.ReadString();
            break;
          }
          case 130: {
            FI = input.ReadString();
            break;
          }
          case 138: {
            FR = input.ReadString();
            break;
          }
          case 146: {
            DE = input.ReadString();
            break;
          }
          case 154: {
            EL = input.ReadString();
            break;
          }
          case 162: {
            HE = input.ReadString();
            break;
          }
          case 170: {
            HU = input.ReadString();
            break;
          }
          case 178: {
            IS = input.ReadString();
            break;
          }
          case 186: {
            ID = input.ReadString();
            break;
          }
          case 194: {
            IT = input.ReadString();
            break;
          }
          case 202: {
            JA = input.ReadString();
            break;
          }
          case 210: {
            KO = input.ReadString();
            break;
          }
          case 218: {
            LV = input.ReadString();
            break;
          }
          case 226: {
            LT = input.ReadString();
            break;
          }
          case 234: {
            NO = input.ReadString();
            break;
          }
          case 242: {
            PL = input.ReadString();
            break;
          }
          case 250: {
            PT = input.ReadString();
            break;
          }
          case 258: {
            RO = input.ReadString();
            break;
          }
          case 266: {
            HR = input.ReadString();
            break;
          }
          case 274: {
            SK = input.ReadString();
            break;
          }
          case 282: {
            SL = input.ReadString();
            break;
          }
          case 290: {
            ES = input.ReadString();
            break;
          }
          case 298: {
            SV = input.ReadString();
            break;
          }
          case 306: {
            TH = input.ReadString();
            break;
          }
          case 314: {
            TR = input.ReadString();
            break;
          }
          case 322: {
            UK = input.ReadString();
            break;
          }
          case 330: {
            VI = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoviceRobotNameConfig_Array : pb::IMessage<NoviceRobotNameConfig_Array> {
    private static readonly pb::MessageParser<NoviceRobotNameConfig_Array> _parser = new pb::MessageParser<NoviceRobotNameConfig_Array>(() => new NoviceRobotNameConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoviceRobotNameConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansNovicerobotnameconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoviceRobotNameConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoviceRobotNameConfig_Array(NoviceRobotNameConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoviceRobotNameConfig_Array Clone() {
      return new NoviceRobotNameConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.NoviceRobotNameConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.NoviceRobotNameConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.NoviceRobotNameConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.NoviceRobotNameConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.NoviceRobotNameConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoviceRobotNameConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoviceRobotNameConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoviceRobotNameConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
