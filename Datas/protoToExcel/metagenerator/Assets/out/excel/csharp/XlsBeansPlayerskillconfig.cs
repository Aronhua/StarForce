// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_playerskillconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_playerskillconfig.proto</summary>
  public static partial class XlsBeansPlayerskillconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_playerskillconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansPlayerskillconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiF4bHNfYmVhbnNfcGxheWVyc2tpbGxjb25maWcucHJvdG8SCkQxMS5QYmVh",
            "bnMi7AUKEVBsYXllclNraWxsQ29uZmlnEgoKAmlkGAEgASgNEgwKBGNvc3QY",
            "AiABKA0SFQoNU2tpbGxXZWFwb25JRBgDIAEoDRIRCglza2lsbFR5cGUYBCAB",
            "KA0SDwoHdXNlVHlwZRgFIAEoDRISCgp0YXJnZXRUeXBlGAYgASgNEhUKDUZ1",
            "bmN0aW9uR3JvdXAYByABKA0SCwoDbnVtGAggASgNEhAKCE9uY2VUaW1lGAkg",
            "ASgIEg8KB3Bhc3NpdmUYCiABKAgSFwoPY2hhcmdlSG9sZExpbWl0GAsgASgN",
            "EhEKCW1heEVuZXJneRgMIAEoDRISCgpjaGFyZ2VUeXBlGA0gASgNEhMKC2No",
            "YXJnZVNwZWVkGA4gASgCEhgKEHRpbWVyQ2hhcmdlU3BlZWQYDyABKAISFAoM",
            "Y29vbERvd25UaW1lGBAgASgCEhMKC3JlcGVhdFRpbWVzGBEgASgNEhYKDnJl",
            "cGVhdEludGVydmFsGBIgASgCEhcKD2JlZm9yQXR0YWNrVGltZRgTIAEoAhIU",
            "CgxjYXN0SW50ZXJ2YWwYFCABKAISFwoPYWZ0ZXJBdHRhY2tUaW1lGBUgASgC",
            "Eg8KB2NmZ05hbWUYFiABKAkSEAoIYnVmZkxpc3QYFyADKA0SFAoMRWZmZWN0",
            "U2hvd0lkGBggASgNEhcKD0VmZmVjdENvbmRpdGlvbhgZIAEoDRIdChVFZmZl",
            "Y3RDb25kaXRpb25QYXJhbTEYGiABKA0SDAoEaWNvbhgbIAEoDRIQCghpY29u",
            "R3JheRgcIAEoDRIYChBVSUVmZmVjdEZpbGVwYXRoGB0gASgJEhMKC2VuZXJn",
            "eUNvbG9yGB4gASgJEgwKBG5hbWUYHyABKAkSCwoDZGVzGCAgASgJEkAKDFNr",
            "aWxsRWZmZWN0cxghIAMoCzIqLkQxMS5QYmVhbnMuUGxheWVyU2tpbGxDb25m",
            "aWdfU2tpbGxFZmZlY3RzEhAKCFVzZU11c2ljGCIgASgJIpQBCh5QbGF5ZXJT",
            "a2lsbENvbmZpZ19Ta2lsbEVmZmVjdHMSEgoKVGFyZ2V0VHlwZRgBIAEoDRIQ",
            "CghFZmZlY3RJZBgCIAEoDRIYChBFZmZlY3RNdXNpY0V2ZW50GAMgASgJEgwK",
            "BFRpbWUYBCABKA0SEQoJSW50UGFyYW0xGAUgASgNEhEKCUludFBhcmFtMhgG",
            "IAEoDSJHChdQbGF5ZXJTa2lsbENvbmZpZ19BcnJheRIsCgVpdGVtcxgBIAMo",
            "CzIdLkQxMS5QYmVhbnMuUGxheWVyU2tpbGxDb25maWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.PlayerSkillConfig), global::D11.Pbeans.PlayerSkillConfig.Parser, new[]{ "Id", "Cost", "SkillWeaponID", "SkillType", "UseType", "TargetType", "FunctionGroup", "Num", "OnceTime", "Passive", "ChargeHoldLimit", "MaxEnergy", "ChargeType", "ChargeSpeed", "TimerChargeSpeed", "CoolDownTime", "RepeatTimes", "RepeatInterval", "BeforAttackTime", "CastInterval", "AfterAttackTime", "CfgName", "BuffList", "EffectShowId", "EffectCondition", "EffectConditionParam1", "Icon", "IconGray", "UIEffectFilepath", "EnergyColor", "Name", "Des", "SkillEffects", "UseMusic" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.PlayerSkillConfig_SkillEffects), global::D11.Pbeans.PlayerSkillConfig_SkillEffects.Parser, new[]{ "TargetType", "EffectId", "EffectMusicEvent", "Time", "IntParam1", "IntParam2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.PlayerSkillConfig_Array), global::D11.Pbeans.PlayerSkillConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerSkillConfig : pb::IMessage<PlayerSkillConfig> {
    private static readonly pb::MessageParser<PlayerSkillConfig> _parser = new pb::MessageParser<PlayerSkillConfig>(() => new PlayerSkillConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSkillConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansPlayerskillconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSkillConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSkillConfig(PlayerSkillConfig other) : this() {
      id_ = other.id_;
      cost_ = other.cost_;
      skillWeaponID_ = other.skillWeaponID_;
      skillType_ = other.skillType_;
      useType_ = other.useType_;
      targetType_ = other.targetType_;
      functionGroup_ = other.functionGroup_;
      num_ = other.num_;
      onceTime_ = other.onceTime_;
      passive_ = other.passive_;
      chargeHoldLimit_ = other.chargeHoldLimit_;
      maxEnergy_ = other.maxEnergy_;
      chargeType_ = other.chargeType_;
      chargeSpeed_ = other.chargeSpeed_;
      timerChargeSpeed_ = other.timerChargeSpeed_;
      coolDownTime_ = other.coolDownTime_;
      repeatTimes_ = other.repeatTimes_;
      repeatInterval_ = other.repeatInterval_;
      beforAttackTime_ = other.beforAttackTime_;
      castInterval_ = other.castInterval_;
      afterAttackTime_ = other.afterAttackTime_;
      cfgName_ = other.cfgName_;
      buffList_ = other.buffList_.Clone();
      effectShowId_ = other.effectShowId_;
      effectCondition_ = other.effectCondition_;
      effectConditionParam1_ = other.effectConditionParam1_;
      icon_ = other.icon_;
      iconGray_ = other.iconGray_;
      uIEffectFilepath_ = other.uIEffectFilepath_;
      energyColor_ = other.energyColor_;
      name_ = other.name_;
      des_ = other.des_;
      skillEffects_ = other.skillEffects_.Clone();
      useMusic_ = other.useMusic_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSkillConfig Clone() {
      return new PlayerSkillConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 技能ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 2;
    private uint cost_;
    /// <summary>
    /// 技能点数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "SkillWeaponID" field.</summary>
    public const int SkillWeaponIDFieldNumber = 3;
    private uint skillWeaponID_;
    /// <summary>
    /// 技能武器Id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillWeaponID {
      get { return skillWeaponID_; }
      set {
        skillWeaponID_ = value;
      }
    }

    /// <summary>Field number for the "skillType" field.</summary>
    public const int SkillTypeFieldNumber = 4;
    private uint skillType_;
    /// <summary>
    /// 技能类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillType {
      get { return skillType_; }
      set {
        skillType_ = value;
      }
    }

    /// <summary>Field number for the "useType" field.</summary>
    public const int UseTypeFieldNumber = 5;
    private uint useType_;
    /// <summary>
    /// 触发方式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseType {
      get { return useType_; }
      set {
        useType_ = value;
      }
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 6;
    private uint targetType_;
    /// <summary>
    /// 目标类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "FunctionGroup" field.</summary>
    public const int FunctionGroupFieldNumber = 7;
    private uint functionGroup_;
    /// <summary>
    /// 功能组 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FunctionGroup {
      get { return functionGroup_; }
      set {
        functionGroup_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 8;
    private uint num_;
    /// <summary>
    /// 序号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "OnceTime" field.</summary>
    public const int OnceTimeFieldNumber = 9;
    private bool onceTime_;
    /// <summary>
    /// 一次性技能 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnceTime {
      get { return onceTime_; }
      set {
        onceTime_ = value;
      }
    }

    /// <summary>Field number for the "passive" field.</summary>
    public const int PassiveFieldNumber = 10;
    private bool passive_;
    /// <summary>
    /// 被动技能 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Passive {
      get { return passive_; }
      set {
        passive_ = value;
      }
    }

    /// <summary>Field number for the "chargeHoldLimit" field.</summary>
    public const int ChargeHoldLimitFieldNumber = 11;
    private uint chargeHoldLimit_;
    /// <summary>
    /// 充能持有上限 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChargeHoldLimit {
      get { return chargeHoldLimit_; }
      set {
        chargeHoldLimit_ = value;
      }
    }

    /// <summary>Field number for the "maxEnergy" field.</summary>
    public const int MaxEnergyFieldNumber = 12;
    private uint maxEnergy_;
    /// <summary>
    /// 能量条 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxEnergy {
      get { return maxEnergy_; }
      set {
        maxEnergy_ = value;
      }
    }

    /// <summary>Field number for the "chargeType" field.</summary>
    public const int ChargeTypeFieldNumber = 13;
    private uint chargeType_;
    /// <summary>
    /// 充能方式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChargeType {
      get { return chargeType_; }
      set {
        chargeType_ = value;
      }
    }

    /// <summary>Field number for the "chargeSpeed" field.</summary>
    public const int ChargeSpeedFieldNumber = 14;
    private float chargeSpeed_;
    /// <summary>
    /// 充能速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChargeSpeed {
      get { return chargeSpeed_; }
      set {
        chargeSpeed_ = value;
      }
    }

    /// <summary>Field number for the "timerChargeSpeed" field.</summary>
    public const int TimerChargeSpeedFieldNumber = 15;
    private float timerChargeSpeed_;
    /// <summary>
    /// 时间充能速度(/s) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimerChargeSpeed {
      get { return timerChargeSpeed_; }
      set {
        timerChargeSpeed_ = value;
      }
    }

    /// <summary>Field number for the "coolDownTime" field.</summary>
    public const int CoolDownTimeFieldNumber = 16;
    private float coolDownTime_;
    /// <summary>
    /// 冷卻时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CoolDownTime {
      get { return coolDownTime_; }
      set {
        coolDownTime_ = value;
      }
    }

    /// <summary>Field number for the "repeatTimes" field.</summary>
    public const int RepeatTimesFieldNumber = 17;
    private uint repeatTimes_;
    /// <summary>
    /// 重复次数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RepeatTimes {
      get { return repeatTimes_; }
      set {
        repeatTimes_ = value;
      }
    }

    /// <summary>Field number for the "repeatInterval" field.</summary>
    public const int RepeatIntervalFieldNumber = 18;
    private float repeatInterval_;
    /// <summary>
    /// 重复间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RepeatInterval {
      get { return repeatInterval_; }
      set {
        repeatInterval_ = value;
      }
    }

    /// <summary>Field number for the "beforAttackTime" field.</summary>
    public const int BeforAttackTimeFieldNumber = 19;
    private float beforAttackTime_;
    /// <summary>
    /// 前摇时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BeforAttackTime {
      get { return beforAttackTime_; }
      set {
        beforAttackTime_ = value;
      }
    }

    /// <summary>Field number for the "castInterval" field.</summary>
    public const int CastIntervalFieldNumber = 20;
    private float castInterval_;
    /// <summary>
    /// 施法间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CastInterval {
      get { return castInterval_; }
      set {
        castInterval_ = value;
      }
    }

    /// <summary>Field number for the "afterAttackTime" field.</summary>
    public const int AfterAttackTimeFieldNumber = 21;
    private float afterAttackTime_;
    /// <summary>
    /// 后摇时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AfterAttackTime {
      get { return afterAttackTime_; }
      set {
        afterAttackTime_ = value;
      }
    }

    /// <summary>Field number for the "cfgName" field.</summary>
    public const int CfgNameFieldNumber = 22;
    private string cfgName_ = "";
    /// <summary>
    /// json配置 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CfgName {
      get { return cfgName_; }
      set {
        cfgName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "buffList" field.</summary>
    public const int BuffListFieldNumber = 23;
    private static readonly pb::FieldCodec<uint> _repeated_buffList_codec
        = pb::FieldCodec.ForUInt32(186);
    private readonly pbc::RepeatedField<uint> buffList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// Buff列表 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BuffList {
      get { return buffList_; }
    }

    /// <summary>Field number for the "EffectShowId" field.</summary>
    public const int EffectShowIdFieldNumber = 24;
    private uint effectShowId_;
    /// <summary>
    /// 生效表现 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EffectShowId {
      get { return effectShowId_; }
      set {
        effectShowId_ = value;
      }
    }

    /// <summary>Field number for the "EffectCondition" field.</summary>
    public const int EffectConditionFieldNumber = 25;
    private uint effectCondition_;
    /// <summary>
    /// 生效条件 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EffectCondition {
      get { return effectCondition_; }
      set {
        effectCondition_ = value;
      }
    }

    /// <summary>Field number for the "EffectConditionParam1" field.</summary>
    public const int EffectConditionParam1FieldNumber = 26;
    private uint effectConditionParam1_;
    /// <summary>
    /// 生效条件参数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EffectConditionParam1 {
      get { return effectConditionParam1_; }
      set {
        effectConditionParam1_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 27;
    private uint icon_;
    /// <summary>
    /// 资源 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "iconGray" field.</summary>
    public const int IconGrayFieldNumber = 28;
    private uint iconGray_;
    /// <summary>
    /// 置灰图片资源资源 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IconGray {
      get { return iconGray_; }
      set {
        iconGray_ = value;
      }
    }

    /// <summary>Field number for the "UIEffectFilepath" field.</summary>
    public const int UIEffectFilepathFieldNumber = 29;
    private string uIEffectFilepath_ = "";
    /// <summary>
    /// UI技能特效资源 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UIEffectFilepath {
      get { return uIEffectFilepath_; }
      set {
        uIEffectFilepath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "energyColor" field.</summary>
    public const int EnergyColorFieldNumber = 30;
    private string energyColor_ = "";
    /// <summary>
    /// 技能充能颜色 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnergyColor {
      get { return energyColor_; }
      set {
        energyColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 31;
    private string name_ = "";
    /// <summary>
    /// 名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "des" field.</summary>
    public const int DesFieldNumber = 32;
    private string des_ = "";
    /// <summary>
    /// 效果描述 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Des {
      get { return des_; }
      set {
        des_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SkillEffects" field.</summary>
    public const int SkillEffectsFieldNumber = 33;
    private static readonly pb::FieldCodec<global::D11.Pbeans.PlayerSkillConfig_SkillEffects> _repeated_skillEffects_codec
        = pb::FieldCodec.ForMessage(266, global::D11.Pbeans.PlayerSkillConfig_SkillEffects.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.PlayerSkillConfig_SkillEffects> skillEffects_ = new pbc::RepeatedField<global::D11.Pbeans.PlayerSkillConfig_SkillEffects>();
    /// <summary>
    /// 特效目标1：场景 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.PlayerSkillConfig_SkillEffects> SkillEffects {
      get { return skillEffects_; }
    }

    /// <summary>Field number for the "UseMusic" field.</summary>
    public const int UseMusicFieldNumber = 34;
    private string useMusic_ = "";
    /// <summary>
    /// 使用技能的界面音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UseMusic {
      get { return useMusic_; }
      set {
        useMusic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSkillConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSkillConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Cost != other.Cost) return false;
      if (SkillWeaponID != other.SkillWeaponID) return false;
      if (SkillType != other.SkillType) return false;
      if (UseType != other.UseType) return false;
      if (TargetType != other.TargetType) return false;
      if (FunctionGroup != other.FunctionGroup) return false;
      if (Num != other.Num) return false;
      if (OnceTime != other.OnceTime) return false;
      if (Passive != other.Passive) return false;
      if (ChargeHoldLimit != other.ChargeHoldLimit) return false;
      if (MaxEnergy != other.MaxEnergy) return false;
      if (ChargeType != other.ChargeType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChargeSpeed, other.ChargeSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimerChargeSpeed, other.TimerChargeSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CoolDownTime, other.CoolDownTime)) return false;
      if (RepeatTimes != other.RepeatTimes) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RepeatInterval, other.RepeatInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BeforAttackTime, other.BeforAttackTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CastInterval, other.CastInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AfterAttackTime, other.AfterAttackTime)) return false;
      if (CfgName != other.CfgName) return false;
      if(!buffList_.Equals(other.buffList_)) return false;
      if (EffectShowId != other.EffectShowId) return false;
      if (EffectCondition != other.EffectCondition) return false;
      if (EffectConditionParam1 != other.EffectConditionParam1) return false;
      if (Icon != other.Icon) return false;
      if (IconGray != other.IconGray) return false;
      if (UIEffectFilepath != other.UIEffectFilepath) return false;
      if (EnergyColor != other.EnergyColor) return false;
      if (Name != other.Name) return false;
      if (Des != other.Des) return false;
      if(!skillEffects_.Equals(other.skillEffects_)) return false;
      if (UseMusic != other.UseMusic) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (SkillWeaponID != 0) hash ^= SkillWeaponID.GetHashCode();
      if (SkillType != 0) hash ^= SkillType.GetHashCode();
      if (UseType != 0) hash ^= UseType.GetHashCode();
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (FunctionGroup != 0) hash ^= FunctionGroup.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (OnceTime != false) hash ^= OnceTime.GetHashCode();
      if (Passive != false) hash ^= Passive.GetHashCode();
      if (ChargeHoldLimit != 0) hash ^= ChargeHoldLimit.GetHashCode();
      if (MaxEnergy != 0) hash ^= MaxEnergy.GetHashCode();
      if (ChargeType != 0) hash ^= ChargeType.GetHashCode();
      if (ChargeSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChargeSpeed);
      if (TimerChargeSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimerChargeSpeed);
      if (CoolDownTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CoolDownTime);
      if (RepeatTimes != 0) hash ^= RepeatTimes.GetHashCode();
      if (RepeatInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RepeatInterval);
      if (BeforAttackTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BeforAttackTime);
      if (CastInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CastInterval);
      if (AfterAttackTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AfterAttackTime);
      if (CfgName.Length != 0) hash ^= CfgName.GetHashCode();
      hash ^= buffList_.GetHashCode();
      if (EffectShowId != 0) hash ^= EffectShowId.GetHashCode();
      if (EffectCondition != 0) hash ^= EffectCondition.GetHashCode();
      if (EffectConditionParam1 != 0) hash ^= EffectConditionParam1.GetHashCode();
      if (Icon != 0) hash ^= Icon.GetHashCode();
      if (IconGray != 0) hash ^= IconGray.GetHashCode();
      if (UIEffectFilepath.Length != 0) hash ^= UIEffectFilepath.GetHashCode();
      if (EnergyColor.Length != 0) hash ^= EnergyColor.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Des.Length != 0) hash ^= Des.GetHashCode();
      hash ^= skillEffects_.GetHashCode();
      if (UseMusic.Length != 0) hash ^= UseMusic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Cost != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Cost);
      }
      if (SkillWeaponID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SkillWeaponID);
      }
      if (SkillType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SkillType);
      }
      if (UseType != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(UseType);
      }
      if (TargetType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TargetType);
      }
      if (FunctionGroup != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(FunctionGroup);
      }
      if (Num != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Num);
      }
      if (OnceTime != false) {
        output.WriteRawTag(72);
        output.WriteBool(OnceTime);
      }
      if (Passive != false) {
        output.WriteRawTag(80);
        output.WriteBool(Passive);
      }
      if (ChargeHoldLimit != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(ChargeHoldLimit);
      }
      if (MaxEnergy != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(MaxEnergy);
      }
      if (ChargeType != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(ChargeType);
      }
      if (ChargeSpeed != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(ChargeSpeed);
      }
      if (TimerChargeSpeed != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(TimerChargeSpeed);
      }
      if (CoolDownTime != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(CoolDownTime);
      }
      if (RepeatTimes != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(RepeatTimes);
      }
      if (RepeatInterval != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(RepeatInterval);
      }
      if (BeforAttackTime != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(BeforAttackTime);
      }
      if (CastInterval != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(CastInterval);
      }
      if (AfterAttackTime != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(AfterAttackTime);
      }
      if (CfgName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CfgName);
      }
      buffList_.WriteTo(output, _repeated_buffList_codec);
      if (EffectShowId != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(EffectShowId);
      }
      if (EffectCondition != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(EffectCondition);
      }
      if (EffectConditionParam1 != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(EffectConditionParam1);
      }
      if (Icon != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(Icon);
      }
      if (IconGray != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(IconGray);
      }
      if (UIEffectFilepath.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(UIEffectFilepath);
      }
      if (EnergyColor.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(EnergyColor);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Name);
      }
      if (Des.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(Des);
      }
      skillEffects_.WriteTo(output, _repeated_skillEffects_codec);
      if (UseMusic.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(UseMusic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cost);
      }
      if (SkillWeaponID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillWeaponID);
      }
      if (SkillType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillType);
      }
      if (UseType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseType);
      }
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetType);
      }
      if (FunctionGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FunctionGroup);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
      }
      if (OnceTime != false) {
        size += 1 + 1;
      }
      if (Passive != false) {
        size += 1 + 1;
      }
      if (ChargeHoldLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChargeHoldLimit);
      }
      if (MaxEnergy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxEnergy);
      }
      if (ChargeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChargeType);
      }
      if (ChargeSpeed != 0F) {
        size += 1 + 4;
      }
      if (TimerChargeSpeed != 0F) {
        size += 1 + 4;
      }
      if (CoolDownTime != 0F) {
        size += 2 + 4;
      }
      if (RepeatTimes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RepeatTimes);
      }
      if (RepeatInterval != 0F) {
        size += 2 + 4;
      }
      if (BeforAttackTime != 0F) {
        size += 2 + 4;
      }
      if (CastInterval != 0F) {
        size += 2 + 4;
      }
      if (AfterAttackTime != 0F) {
        size += 2 + 4;
      }
      if (CfgName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CfgName);
      }
      size += buffList_.CalculateSize(_repeated_buffList_codec);
      if (EffectShowId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EffectShowId);
      }
      if (EffectCondition != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EffectCondition);
      }
      if (EffectConditionParam1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EffectConditionParam1);
      }
      if (Icon != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icon);
      }
      if (IconGray != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IconGray);
      }
      if (UIEffectFilepath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UIEffectFilepath);
      }
      if (EnergyColor.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EnergyColor);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Des.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Des);
      }
      size += skillEffects_.CalculateSize(_repeated_skillEffects_codec);
      if (UseMusic.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UseMusic);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSkillConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.SkillWeaponID != 0) {
        SkillWeaponID = other.SkillWeaponID;
      }
      if (other.SkillType != 0) {
        SkillType = other.SkillType;
      }
      if (other.UseType != 0) {
        UseType = other.UseType;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.FunctionGroup != 0) {
        FunctionGroup = other.FunctionGroup;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.OnceTime != false) {
        OnceTime = other.OnceTime;
      }
      if (other.Passive != false) {
        Passive = other.Passive;
      }
      if (other.ChargeHoldLimit != 0) {
        ChargeHoldLimit = other.ChargeHoldLimit;
      }
      if (other.MaxEnergy != 0) {
        MaxEnergy = other.MaxEnergy;
      }
      if (other.ChargeType != 0) {
        ChargeType = other.ChargeType;
      }
      if (other.ChargeSpeed != 0F) {
        ChargeSpeed = other.ChargeSpeed;
      }
      if (other.TimerChargeSpeed != 0F) {
        TimerChargeSpeed = other.TimerChargeSpeed;
      }
      if (other.CoolDownTime != 0F) {
        CoolDownTime = other.CoolDownTime;
      }
      if (other.RepeatTimes != 0) {
        RepeatTimes = other.RepeatTimes;
      }
      if (other.RepeatInterval != 0F) {
        RepeatInterval = other.RepeatInterval;
      }
      if (other.BeforAttackTime != 0F) {
        BeforAttackTime = other.BeforAttackTime;
      }
      if (other.CastInterval != 0F) {
        CastInterval = other.CastInterval;
      }
      if (other.AfterAttackTime != 0F) {
        AfterAttackTime = other.AfterAttackTime;
      }
      if (other.CfgName.Length != 0) {
        CfgName = other.CfgName;
      }
      buffList_.Add(other.buffList_);
      if (other.EffectShowId != 0) {
        EffectShowId = other.EffectShowId;
      }
      if (other.EffectCondition != 0) {
        EffectCondition = other.EffectCondition;
      }
      if (other.EffectConditionParam1 != 0) {
        EffectConditionParam1 = other.EffectConditionParam1;
      }
      if (other.Icon != 0) {
        Icon = other.Icon;
      }
      if (other.IconGray != 0) {
        IconGray = other.IconGray;
      }
      if (other.UIEffectFilepath.Length != 0) {
        UIEffectFilepath = other.UIEffectFilepath;
      }
      if (other.EnergyColor.Length != 0) {
        EnergyColor = other.EnergyColor;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Des.Length != 0) {
        Des = other.Des;
      }
      skillEffects_.Add(other.skillEffects_);
      if (other.UseMusic.Length != 0) {
        UseMusic = other.UseMusic;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Cost = input.ReadUInt32();
            break;
          }
          case 24: {
            SkillWeaponID = input.ReadUInt32();
            break;
          }
          case 32: {
            SkillType = input.ReadUInt32();
            break;
          }
          case 40: {
            UseType = input.ReadUInt32();
            break;
          }
          case 48: {
            TargetType = input.ReadUInt32();
            break;
          }
          case 56: {
            FunctionGroup = input.ReadUInt32();
            break;
          }
          case 64: {
            Num = input.ReadUInt32();
            break;
          }
          case 72: {
            OnceTime = input.ReadBool();
            break;
          }
          case 80: {
            Passive = input.ReadBool();
            break;
          }
          case 88: {
            ChargeHoldLimit = input.ReadUInt32();
            break;
          }
          case 96: {
            MaxEnergy = input.ReadUInt32();
            break;
          }
          case 104: {
            ChargeType = input.ReadUInt32();
            break;
          }
          case 117: {
            ChargeSpeed = input.ReadFloat();
            break;
          }
          case 125: {
            TimerChargeSpeed = input.ReadFloat();
            break;
          }
          case 133: {
            CoolDownTime = input.ReadFloat();
            break;
          }
          case 136: {
            RepeatTimes = input.ReadUInt32();
            break;
          }
          case 149: {
            RepeatInterval = input.ReadFloat();
            break;
          }
          case 157: {
            BeforAttackTime = input.ReadFloat();
            break;
          }
          case 165: {
            CastInterval = input.ReadFloat();
            break;
          }
          case 173: {
            AfterAttackTime = input.ReadFloat();
            break;
          }
          case 178: {
            CfgName = input.ReadString();
            break;
          }
          case 186:
          case 184: {
            buffList_.AddEntriesFrom(input, _repeated_buffList_codec);
            break;
          }
          case 192: {
            EffectShowId = input.ReadUInt32();
            break;
          }
          case 200: {
            EffectCondition = input.ReadUInt32();
            break;
          }
          case 208: {
            EffectConditionParam1 = input.ReadUInt32();
            break;
          }
          case 216: {
            Icon = input.ReadUInt32();
            break;
          }
          case 224: {
            IconGray = input.ReadUInt32();
            break;
          }
          case 234: {
            UIEffectFilepath = input.ReadString();
            break;
          }
          case 242: {
            EnergyColor = input.ReadString();
            break;
          }
          case 250: {
            Name = input.ReadString();
            break;
          }
          case 258: {
            Des = input.ReadString();
            break;
          }
          case 266: {
            skillEffects_.AddEntriesFrom(input, _repeated_skillEffects_codec);
            break;
          }
          case 274: {
            UseMusic = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerSkillConfig_SkillEffects : pb::IMessage<PlayerSkillConfig_SkillEffects> {
    private static readonly pb::MessageParser<PlayerSkillConfig_SkillEffects> _parser = new pb::MessageParser<PlayerSkillConfig_SkillEffects>(() => new PlayerSkillConfig_SkillEffects());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSkillConfig_SkillEffects> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansPlayerskillconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSkillConfig_SkillEffects() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSkillConfig_SkillEffects(PlayerSkillConfig_SkillEffects other) : this() {
      targetType_ = other.targetType_;
      effectId_ = other.effectId_;
      effectMusicEvent_ = other.effectMusicEvent_;
      time_ = other.time_;
      intParam1_ = other.intParam1_;
      intParam2_ = other.intParam2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSkillConfig_SkillEffects Clone() {
      return new PlayerSkillConfig_SkillEffects(this);
    }

    /// <summary>Field number for the "TargetType" field.</summary>
    public const int TargetTypeFieldNumber = 1;
    private uint targetType_;
    /// <summary>
    /// 特效目标1：场景 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "EffectId" field.</summary>
    public const int EffectIdFieldNumber = 2;
    private uint effectId_;
    /// <summary>
    /// 特效IDIndexResourceConfig 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EffectId {
      get { return effectId_; }
      set {
        effectId_ = value;
      }
    }

    /// <summary>Field number for the "EffectMusicEvent" field.</summary>
    public const int EffectMusicEventFieldNumber = 3;
    private string effectMusicEvent_ = "";
    /// <summary>
    /// 特效音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EffectMusicEvent {
      get { return effectMusicEvent_; }
      set {
        effectMusicEvent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 4;
    private uint time_;
    /// <summary>
    /// 特效时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "IntParam1" field.</summary>
    public const int IntParam1FieldNumber = 5;
    private uint intParam1_;
    /// <summary>
    /// 【场景】特效位置ID阵营类型                  1：己方阵营 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntParam1 {
      get { return intParam1_; }
      set {
        intParam1_ = value;
      }
    }

    /// <summary>Field number for the "IntParam2" field.</summary>
    public const int IntParam2FieldNumber = 6;
    private uint intParam2_;
    /// <summary>
    /// 【场景】特效位置ID:              对应模式场景配置的特效位置ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntParam2 {
      get { return intParam2_; }
      set {
        intParam2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSkillConfig_SkillEffects);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSkillConfig_SkillEffects other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetType != other.TargetType) return false;
      if (EffectId != other.EffectId) return false;
      if (EffectMusicEvent != other.EffectMusicEvent) return false;
      if (Time != other.Time) return false;
      if (IntParam1 != other.IntParam1) return false;
      if (IntParam2 != other.IntParam2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (EffectId != 0) hash ^= EffectId.GetHashCode();
      if (EffectMusicEvent.Length != 0) hash ^= EffectMusicEvent.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (IntParam1 != 0) hash ^= IntParam1.GetHashCode();
      if (IntParam2 != 0) hash ^= IntParam2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetType);
      }
      if (EffectId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(EffectId);
      }
      if (EffectMusicEvent.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EffectMusicEvent);
      }
      if (Time != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Time);
      }
      if (IntParam1 != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(IntParam1);
      }
      if (IntParam2 != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(IntParam2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetType);
      }
      if (EffectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EffectId);
      }
      if (EffectMusicEvent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectMusicEvent);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (IntParam1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntParam1);
      }
      if (IntParam2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntParam2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSkillConfig_SkillEffects other) {
      if (other == null) {
        return;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.EffectId != 0) {
        EffectId = other.EffectId;
      }
      if (other.EffectMusicEvent.Length != 0) {
        EffectMusicEvent = other.EffectMusicEvent;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.IntParam1 != 0) {
        IntParam1 = other.IntParam1;
      }
      if (other.IntParam2 != 0) {
        IntParam2 = other.IntParam2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetType = input.ReadUInt32();
            break;
          }
          case 16: {
            EffectId = input.ReadUInt32();
            break;
          }
          case 26: {
            EffectMusicEvent = input.ReadString();
            break;
          }
          case 32: {
            Time = input.ReadUInt32();
            break;
          }
          case 40: {
            IntParam1 = input.ReadUInt32();
            break;
          }
          case 48: {
            IntParam2 = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerSkillConfig_Array : pb::IMessage<PlayerSkillConfig_Array> {
    private static readonly pb::MessageParser<PlayerSkillConfig_Array> _parser = new pb::MessageParser<PlayerSkillConfig_Array>(() => new PlayerSkillConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSkillConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansPlayerskillconfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSkillConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSkillConfig_Array(PlayerSkillConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSkillConfig_Array Clone() {
      return new PlayerSkillConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.PlayerSkillConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.PlayerSkillConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.PlayerSkillConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.PlayerSkillConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.PlayerSkillConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSkillConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSkillConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSkillConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
