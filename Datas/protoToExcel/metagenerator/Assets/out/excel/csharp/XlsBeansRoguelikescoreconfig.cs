// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_roguelikescoreconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_roguelikescoreconfig.proto</summary>
  public static partial class XlsBeansRoguelikescoreconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_roguelikescoreconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansRoguelikescoreconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiR4bHNfYmVhbnNfcm9ndWVsaWtlc2NvcmVjb25maWcucHJvdG8SCkQxMS5Q",
            "YmVhbnMi/QYKFFJvZ3VlTGlrZVNjb3JlQ29uZmlnEgoKAmlkGAEgASgNEhQK",
            "DGtpbGxNYXhTY29yZRgCIAEoDRIbChNraWxsU2NvcmVTdGFydFBvaW50GAMg",
            "ASgNEhkKEWtpbGxTY29yZUVuZFBvaW50GAQgASgNEhYKDmRhbWFnZU1heFNj",
            "b3JlGAUgASgNEh0KFWRhbWFnZVNjb3JlU3RhcnRQb2ludBgGIAEoDRIbChNk",
            "YW1hZ2VTY29yZUVuZFBvaW50GAcgASgNEhUKDW1vbmV5TWF4U2NvcmUYCCAB",
            "KA0SHAoUbW9uZXlTY29yZVN0YXJ0UG9pbnQYCSABKA0SGgoSbW9uZXlTY29y",
            "ZUVuZFBvaW50GAogASgNEhgKEHNob3RIZWFkTWF4U2NvcmUYCyABKA0SHwoX",
            "c2hvdEhlYWRTY29yZVN0YXJ0UG9pbnQYDCABKA0SHQoVc2hvdEhlYWRTY29y",
            "ZUVuZFBvaW50GA0gASgNEhQKDGRlYWRNYXhTY29yZRgOIAEoDRIbChNkZWFk",
            "U2NvcmVTdGFydFBvaW50GA8gASgNEhkKEWRlYWRTY29yZUVuZFBvaW50GBAg",
            "ASgNEhkKEWdldFdlYXBvbk1heFNjb3JlGBEgASgNEiAKGGdldFdlYXBvblNj",
            "b3JlU3RhcnRQb2ludBgSIAEoDRIeChZnZXRXZWFwb25TY29yZUVuZFBvaW50",
            "GBMgASgNEhwKFHNpbmdsZURhbWFnZU1heFNjb3JlGBQgASgNEiMKG3Npbmds",
            "ZURhbWFnZVNjb3JlU3RhcnRQb2ludBgVIAEoDRIYChBzaW5nbGVEYW1hZ2VT",
            "dGVwGBYgASgNEhcKD3VzZVByb3BNYXhTY29yZRgXIAEoDRIeChZ1c2VQcm9w",
            "U2NvcmVTdGFydFBvaW50GBggASgNEhwKFHVzZVByb3BTY29yZUVuZFBvaW50",
            "GBkgASgNEhcKD3VzZVByb2pNYXhTY29yZRgaIAEoDRIeChZ1c2VQcm9qU2Nv",
            "cmVTdGFydFBvaW50GBsgASgNEhwKFHVzZVByb2pTY29yZUVuZFBvaW50GBwg",
            "ASgNEhgKEHBhc3NUaW1lTWF4U2NvcmUYHSABKA0SHgoWcGFzc1RpbWVHZXRN",
            "U2NvcmVQb2ludBgeIAEoDRIcChRwYXNzVGltZU5vU2NvcmVQb2ludBgfIAEo",
            "DSJNChpSb2d1ZUxpa2VTY29yZUNvbmZpZ19BcnJheRIvCgVpdGVtcxgBIAMo",
            "CzIgLkQxMS5QYmVhbnMuUm9ndWVMaWtlU2NvcmVDb25maWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.RogueLikeScoreConfig), global::D11.Pbeans.RogueLikeScoreConfig.Parser, new[]{ "Id", "KillMaxScore", "KillScoreStartPoint", "KillScoreEndPoint", "DamageMaxScore", "DamageScoreStartPoint", "DamageScoreEndPoint", "MoneyMaxScore", "MoneyScoreStartPoint", "MoneyScoreEndPoint", "ShotHeadMaxScore", "ShotHeadScoreStartPoint", "ShotHeadScoreEndPoint", "DeadMaxScore", "DeadScoreStartPoint", "DeadScoreEndPoint", "GetWeaponMaxScore", "GetWeaponScoreStartPoint", "GetWeaponScoreEndPoint", "SingleDamageMaxScore", "SingleDamageScoreStartPoint", "SingleDamageStep", "UsePropMaxScore", "UsePropScoreStartPoint", "UsePropScoreEndPoint", "UseProjMaxScore", "UseProjScoreStartPoint", "UseProjScoreEndPoint", "PassTimeMaxScore", "PassTimeGetMScorePoint", "PassTimeNoScorePoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.RogueLikeScoreConfig_Array), global::D11.Pbeans.RogueLikeScoreConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RogueLikeScoreConfig : pb::IMessage<RogueLikeScoreConfig> {
    private static readonly pb::MessageParser<RogueLikeScoreConfig> _parser = new pb::MessageParser<RogueLikeScoreConfig>(() => new RogueLikeScoreConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RogueLikeScoreConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansRoguelikescoreconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RogueLikeScoreConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RogueLikeScoreConfig(RogueLikeScoreConfig other) : this() {
      id_ = other.id_;
      killMaxScore_ = other.killMaxScore_;
      killScoreStartPoint_ = other.killScoreStartPoint_;
      killScoreEndPoint_ = other.killScoreEndPoint_;
      damageMaxScore_ = other.damageMaxScore_;
      damageScoreStartPoint_ = other.damageScoreStartPoint_;
      damageScoreEndPoint_ = other.damageScoreEndPoint_;
      moneyMaxScore_ = other.moneyMaxScore_;
      moneyScoreStartPoint_ = other.moneyScoreStartPoint_;
      moneyScoreEndPoint_ = other.moneyScoreEndPoint_;
      shotHeadMaxScore_ = other.shotHeadMaxScore_;
      shotHeadScoreStartPoint_ = other.shotHeadScoreStartPoint_;
      shotHeadScoreEndPoint_ = other.shotHeadScoreEndPoint_;
      deadMaxScore_ = other.deadMaxScore_;
      deadScoreStartPoint_ = other.deadScoreStartPoint_;
      deadScoreEndPoint_ = other.deadScoreEndPoint_;
      getWeaponMaxScore_ = other.getWeaponMaxScore_;
      getWeaponScoreStartPoint_ = other.getWeaponScoreStartPoint_;
      getWeaponScoreEndPoint_ = other.getWeaponScoreEndPoint_;
      singleDamageMaxScore_ = other.singleDamageMaxScore_;
      singleDamageScoreStartPoint_ = other.singleDamageScoreStartPoint_;
      singleDamageStep_ = other.singleDamageStep_;
      usePropMaxScore_ = other.usePropMaxScore_;
      usePropScoreStartPoint_ = other.usePropScoreStartPoint_;
      usePropScoreEndPoint_ = other.usePropScoreEndPoint_;
      useProjMaxScore_ = other.useProjMaxScore_;
      useProjScoreStartPoint_ = other.useProjScoreStartPoint_;
      useProjScoreEndPoint_ = other.useProjScoreEndPoint_;
      passTimeMaxScore_ = other.passTimeMaxScore_;
      passTimeGetMScorePoint_ = other.passTimeGetMScorePoint_;
      passTimeNoScorePoint_ = other.passTimeNoScorePoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RogueLikeScoreConfig Clone() {
      return new RogueLikeScoreConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 难度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "killMaxScore" field.</summary>
    public const int KillMaxScoreFieldNumber = 2;
    private uint killMaxScore_;
    /// <summary>
    /// 击杀怪物得分上限 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KillMaxScore {
      get { return killMaxScore_; }
      set {
        killMaxScore_ = value;
      }
    }

    /// <summary>Field number for the "killScoreStartPoint" field.</summary>
    public const int KillScoreStartPointFieldNumber = 3;
    private uint killScoreStartPoint_;
    /// <summary>
    /// 击杀怪物起始计分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KillScoreStartPoint {
      get { return killScoreStartPoint_; }
      set {
        killScoreStartPoint_ = value;
      }
    }

    /// <summary>Field number for the "killScoreEndPoint" field.</summary>
    public const int KillScoreEndPointFieldNumber = 4;
    private uint killScoreEndPoint_;
    /// <summary>
    /// 击杀怪物终止计分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KillScoreEndPoint {
      get { return killScoreEndPoint_; }
      set {
        killScoreEndPoint_ = value;
      }
    }

    /// <summary>Field number for the "damageMaxScore" field.</summary>
    public const int DamageMaxScoreFieldNumber = 5;
    private uint damageMaxScore_;
    /// <summary>
    /// 伤害得分上限 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageMaxScore {
      get { return damageMaxScore_; }
      set {
        damageMaxScore_ = value;
      }
    }

    /// <summary>Field number for the "damageScoreStartPoint" field.</summary>
    public const int DamageScoreStartPointFieldNumber = 6;
    private uint damageScoreStartPoint_;
    /// <summary>
    /// 伤害起始计分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageScoreStartPoint {
      get { return damageScoreStartPoint_; }
      set {
        damageScoreStartPoint_ = value;
      }
    }

    /// <summary>Field number for the "damageScoreEndPoint" field.</summary>
    public const int DamageScoreEndPointFieldNumber = 7;
    private uint damageScoreEndPoint_;
    /// <summary>
    /// 伤害终止计分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageScoreEndPoint {
      get { return damageScoreEndPoint_; }
      set {
        damageScoreEndPoint_ = value;
      }
    }

    /// <summary>Field number for the "moneyMaxScore" field.</summary>
    public const int MoneyMaxScoreFieldNumber = 8;
    private uint moneyMaxScore_;
    /// <summary>
    /// 金钱得分上限 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MoneyMaxScore {
      get { return moneyMaxScore_; }
      set {
        moneyMaxScore_ = value;
      }
    }

    /// <summary>Field number for the "moneyScoreStartPoint" field.</summary>
    public const int MoneyScoreStartPointFieldNumber = 9;
    private uint moneyScoreStartPoint_;
    /// <summary>
    /// 金钱起始计分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MoneyScoreStartPoint {
      get { return moneyScoreStartPoint_; }
      set {
        moneyScoreStartPoint_ = value;
      }
    }

    /// <summary>Field number for the "moneyScoreEndPoint" field.</summary>
    public const int MoneyScoreEndPointFieldNumber = 10;
    private uint moneyScoreEndPoint_;
    /// <summary>
    /// 金钱终止计分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MoneyScoreEndPoint {
      get { return moneyScoreEndPoint_; }
      set {
        moneyScoreEndPoint_ = value;
      }
    }

    /// <summary>Field number for the "shotHeadMaxScore" field.</summary>
    public const int ShotHeadMaxScoreFieldNumber = 11;
    private uint shotHeadMaxScore_;
    /// <summary>
    /// 爆头得分上限 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShotHeadMaxScore {
      get { return shotHeadMaxScore_; }
      set {
        shotHeadMaxScore_ = value;
      }
    }

    /// <summary>Field number for the "shotHeadScoreStartPoint" field.</summary>
    public const int ShotHeadScoreStartPointFieldNumber = 12;
    private uint shotHeadScoreStartPoint_;
    /// <summary>
    /// 爆头起始计分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShotHeadScoreStartPoint {
      get { return shotHeadScoreStartPoint_; }
      set {
        shotHeadScoreStartPoint_ = value;
      }
    }

    /// <summary>Field number for the "shotHeadScoreEndPoint" field.</summary>
    public const int ShotHeadScoreEndPointFieldNumber = 13;
    private uint shotHeadScoreEndPoint_;
    /// <summary>
    /// 爆头终止计分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShotHeadScoreEndPoint {
      get { return shotHeadScoreEndPoint_; }
      set {
        shotHeadScoreEndPoint_ = value;
      }
    }

    /// <summary>Field number for the "deadMaxScore" field.</summary>
    public const int DeadMaxScoreFieldNumber = 14;
    private uint deadMaxScore_;
    /// <summary>
    /// 死亡扣分上限 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeadMaxScore {
      get { return deadMaxScore_; }
      set {
        deadMaxScore_ = value;
      }
    }

    /// <summary>Field number for the "deadScoreStartPoint" field.</summary>
    public const int DeadScoreStartPointFieldNumber = 15;
    private uint deadScoreStartPoint_;
    /// <summary>
    /// 死亡起始扣分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeadScoreStartPoint {
      get { return deadScoreStartPoint_; }
      set {
        deadScoreStartPoint_ = value;
      }
    }

    /// <summary>Field number for the "deadScoreEndPoint" field.</summary>
    public const int DeadScoreEndPointFieldNumber = 16;
    private uint deadScoreEndPoint_;
    /// <summary>
    /// 死亡终止扣分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeadScoreEndPoint {
      get { return deadScoreEndPoint_; }
      set {
        deadScoreEndPoint_ = value;
      }
    }

    /// <summary>Field number for the "getWeaponMaxScore" field.</summary>
    public const int GetWeaponMaxScoreFieldNumber = 17;
    private uint getWeaponMaxScore_;
    /// <summary>
    /// 获得武器得分上限 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GetWeaponMaxScore {
      get { return getWeaponMaxScore_; }
      set {
        getWeaponMaxScore_ = value;
      }
    }

    /// <summary>Field number for the "getWeaponScoreStartPoint" field.</summary>
    public const int GetWeaponScoreStartPointFieldNumber = 18;
    private uint getWeaponScoreStartPoint_;
    /// <summary>
    /// 获得武器起始计分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GetWeaponScoreStartPoint {
      get { return getWeaponScoreStartPoint_; }
      set {
        getWeaponScoreStartPoint_ = value;
      }
    }

    /// <summary>Field number for the "getWeaponScoreEndPoint" field.</summary>
    public const int GetWeaponScoreEndPointFieldNumber = 19;
    private uint getWeaponScoreEndPoint_;
    /// <summary>
    /// 获得武器终止计分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GetWeaponScoreEndPoint {
      get { return getWeaponScoreEndPoint_; }
      set {
        getWeaponScoreEndPoint_ = value;
      }
    }

    /// <summary>Field number for the "singleDamageMaxScore" field.</summary>
    public const int SingleDamageMaxScoreFieldNumber = 20;
    private uint singleDamageMaxScore_;
    /// <summary>
    /// 单次伤害得分上限 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SingleDamageMaxScore {
      get { return singleDamageMaxScore_; }
      set {
        singleDamageMaxScore_ = value;
      }
    }

    /// <summary>Field number for the "singleDamageScoreStartPoint" field.</summary>
    public const int SingleDamageScoreStartPointFieldNumber = 21;
    private uint singleDamageScoreStartPoint_;
    /// <summary>
    /// 单次伤害起始计分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SingleDamageScoreStartPoint {
      get { return singleDamageScoreStartPoint_; }
      set {
        singleDamageScoreStartPoint_ = value;
      }
    }

    /// <summary>Field number for the "singleDamageStep" field.</summary>
    public const int SingleDamageStepFieldNumber = 22;
    private uint singleDamageStep_;
    /// <summary>
    /// 单次伤害计分步长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SingleDamageStep {
      get { return singleDamageStep_; }
      set {
        singleDamageStep_ = value;
      }
    }

    /// <summary>Field number for the "usePropMaxScore" field.</summary>
    public const int UsePropMaxScoreFieldNumber = 23;
    private uint usePropMaxScore_;
    /// <summary>
    /// 使用道具得分上限 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UsePropMaxScore {
      get { return usePropMaxScore_; }
      set {
        usePropMaxScore_ = value;
      }
    }

    /// <summary>Field number for the "usePropScoreStartPoint" field.</summary>
    public const int UsePropScoreStartPointFieldNumber = 24;
    private uint usePropScoreStartPoint_;
    /// <summary>
    /// 使用道具起始计分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UsePropScoreStartPoint {
      get { return usePropScoreStartPoint_; }
      set {
        usePropScoreStartPoint_ = value;
      }
    }

    /// <summary>Field number for the "usePropScoreEndPoint" field.</summary>
    public const int UsePropScoreEndPointFieldNumber = 25;
    private uint usePropScoreEndPoint_;
    /// <summary>
    /// 使用道具终止计分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UsePropScoreEndPoint {
      get { return usePropScoreEndPoint_; }
      set {
        usePropScoreEndPoint_ = value;
      }
    }

    /// <summary>Field number for the "useProjMaxScore" field.</summary>
    public const int UseProjMaxScoreFieldNumber = 26;
    private uint useProjMaxScore_;
    /// <summary>
    /// 使用投掷物得分上限 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseProjMaxScore {
      get { return useProjMaxScore_; }
      set {
        useProjMaxScore_ = value;
      }
    }

    /// <summary>Field number for the "useProjScoreStartPoint" field.</summary>
    public const int UseProjScoreStartPointFieldNumber = 27;
    private uint useProjScoreStartPoint_;
    /// <summary>
    /// 使用投掷物起始计分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseProjScoreStartPoint {
      get { return useProjScoreStartPoint_; }
      set {
        useProjScoreStartPoint_ = value;
      }
    }

    /// <summary>Field number for the "useProjScoreEndPoint" field.</summary>
    public const int UseProjScoreEndPointFieldNumber = 28;
    private uint useProjScoreEndPoint_;
    /// <summary>
    /// 使用投掷物终止计分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseProjScoreEndPoint {
      get { return useProjScoreEndPoint_; }
      set {
        useProjScoreEndPoint_ = value;
      }
    }

    /// <summary>Field number for the "passTimeMaxScore" field.</summary>
    public const int PassTimeMaxScoreFieldNumber = 29;
    private uint passTimeMaxScore_;
    /// <summary>
    /// 通关时长得分上限 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PassTimeMaxScore {
      get { return passTimeMaxScore_; }
      set {
        passTimeMaxScore_ = value;
      }
    }

    /// <summary>Field number for the "passTimeGetMScorePoint" field.</summary>
    public const int PassTimeGetMScorePointFieldNumber = 30;
    private uint passTimeGetMScorePoint_;
    /// <summary>
    /// 通关时长最大得分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PassTimeGetMScorePoint {
      get { return passTimeGetMScorePoint_; }
      set {
        passTimeGetMScorePoint_ = value;
      }
    }

    /// <summary>Field number for the "passTimeNoScorePoint" field.</summary>
    public const int PassTimeNoScorePointFieldNumber = 31;
    private uint passTimeNoScorePoint_;
    /// <summary>
    /// 通关时长不能得分点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PassTimeNoScorePoint {
      get { return passTimeNoScorePoint_; }
      set {
        passTimeNoScorePoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RogueLikeScoreConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RogueLikeScoreConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (KillMaxScore != other.KillMaxScore) return false;
      if (KillScoreStartPoint != other.KillScoreStartPoint) return false;
      if (KillScoreEndPoint != other.KillScoreEndPoint) return false;
      if (DamageMaxScore != other.DamageMaxScore) return false;
      if (DamageScoreStartPoint != other.DamageScoreStartPoint) return false;
      if (DamageScoreEndPoint != other.DamageScoreEndPoint) return false;
      if (MoneyMaxScore != other.MoneyMaxScore) return false;
      if (MoneyScoreStartPoint != other.MoneyScoreStartPoint) return false;
      if (MoneyScoreEndPoint != other.MoneyScoreEndPoint) return false;
      if (ShotHeadMaxScore != other.ShotHeadMaxScore) return false;
      if (ShotHeadScoreStartPoint != other.ShotHeadScoreStartPoint) return false;
      if (ShotHeadScoreEndPoint != other.ShotHeadScoreEndPoint) return false;
      if (DeadMaxScore != other.DeadMaxScore) return false;
      if (DeadScoreStartPoint != other.DeadScoreStartPoint) return false;
      if (DeadScoreEndPoint != other.DeadScoreEndPoint) return false;
      if (GetWeaponMaxScore != other.GetWeaponMaxScore) return false;
      if (GetWeaponScoreStartPoint != other.GetWeaponScoreStartPoint) return false;
      if (GetWeaponScoreEndPoint != other.GetWeaponScoreEndPoint) return false;
      if (SingleDamageMaxScore != other.SingleDamageMaxScore) return false;
      if (SingleDamageScoreStartPoint != other.SingleDamageScoreStartPoint) return false;
      if (SingleDamageStep != other.SingleDamageStep) return false;
      if (UsePropMaxScore != other.UsePropMaxScore) return false;
      if (UsePropScoreStartPoint != other.UsePropScoreStartPoint) return false;
      if (UsePropScoreEndPoint != other.UsePropScoreEndPoint) return false;
      if (UseProjMaxScore != other.UseProjMaxScore) return false;
      if (UseProjScoreStartPoint != other.UseProjScoreStartPoint) return false;
      if (UseProjScoreEndPoint != other.UseProjScoreEndPoint) return false;
      if (PassTimeMaxScore != other.PassTimeMaxScore) return false;
      if (PassTimeGetMScorePoint != other.PassTimeGetMScorePoint) return false;
      if (PassTimeNoScorePoint != other.PassTimeNoScorePoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (KillMaxScore != 0) hash ^= KillMaxScore.GetHashCode();
      if (KillScoreStartPoint != 0) hash ^= KillScoreStartPoint.GetHashCode();
      if (KillScoreEndPoint != 0) hash ^= KillScoreEndPoint.GetHashCode();
      if (DamageMaxScore != 0) hash ^= DamageMaxScore.GetHashCode();
      if (DamageScoreStartPoint != 0) hash ^= DamageScoreStartPoint.GetHashCode();
      if (DamageScoreEndPoint != 0) hash ^= DamageScoreEndPoint.GetHashCode();
      if (MoneyMaxScore != 0) hash ^= MoneyMaxScore.GetHashCode();
      if (MoneyScoreStartPoint != 0) hash ^= MoneyScoreStartPoint.GetHashCode();
      if (MoneyScoreEndPoint != 0) hash ^= MoneyScoreEndPoint.GetHashCode();
      if (ShotHeadMaxScore != 0) hash ^= ShotHeadMaxScore.GetHashCode();
      if (ShotHeadScoreStartPoint != 0) hash ^= ShotHeadScoreStartPoint.GetHashCode();
      if (ShotHeadScoreEndPoint != 0) hash ^= ShotHeadScoreEndPoint.GetHashCode();
      if (DeadMaxScore != 0) hash ^= DeadMaxScore.GetHashCode();
      if (DeadScoreStartPoint != 0) hash ^= DeadScoreStartPoint.GetHashCode();
      if (DeadScoreEndPoint != 0) hash ^= DeadScoreEndPoint.GetHashCode();
      if (GetWeaponMaxScore != 0) hash ^= GetWeaponMaxScore.GetHashCode();
      if (GetWeaponScoreStartPoint != 0) hash ^= GetWeaponScoreStartPoint.GetHashCode();
      if (GetWeaponScoreEndPoint != 0) hash ^= GetWeaponScoreEndPoint.GetHashCode();
      if (SingleDamageMaxScore != 0) hash ^= SingleDamageMaxScore.GetHashCode();
      if (SingleDamageScoreStartPoint != 0) hash ^= SingleDamageScoreStartPoint.GetHashCode();
      if (SingleDamageStep != 0) hash ^= SingleDamageStep.GetHashCode();
      if (UsePropMaxScore != 0) hash ^= UsePropMaxScore.GetHashCode();
      if (UsePropScoreStartPoint != 0) hash ^= UsePropScoreStartPoint.GetHashCode();
      if (UsePropScoreEndPoint != 0) hash ^= UsePropScoreEndPoint.GetHashCode();
      if (UseProjMaxScore != 0) hash ^= UseProjMaxScore.GetHashCode();
      if (UseProjScoreStartPoint != 0) hash ^= UseProjScoreStartPoint.GetHashCode();
      if (UseProjScoreEndPoint != 0) hash ^= UseProjScoreEndPoint.GetHashCode();
      if (PassTimeMaxScore != 0) hash ^= PassTimeMaxScore.GetHashCode();
      if (PassTimeGetMScorePoint != 0) hash ^= PassTimeGetMScorePoint.GetHashCode();
      if (PassTimeNoScorePoint != 0) hash ^= PassTimeNoScorePoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (KillMaxScore != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(KillMaxScore);
      }
      if (KillScoreStartPoint != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(KillScoreStartPoint);
      }
      if (KillScoreEndPoint != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(KillScoreEndPoint);
      }
      if (DamageMaxScore != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DamageMaxScore);
      }
      if (DamageScoreStartPoint != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DamageScoreStartPoint);
      }
      if (DamageScoreEndPoint != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(DamageScoreEndPoint);
      }
      if (MoneyMaxScore != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(MoneyMaxScore);
      }
      if (MoneyScoreStartPoint != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(MoneyScoreStartPoint);
      }
      if (MoneyScoreEndPoint != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(MoneyScoreEndPoint);
      }
      if (ShotHeadMaxScore != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(ShotHeadMaxScore);
      }
      if (ShotHeadScoreStartPoint != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(ShotHeadScoreStartPoint);
      }
      if (ShotHeadScoreEndPoint != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(ShotHeadScoreEndPoint);
      }
      if (DeadMaxScore != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(DeadMaxScore);
      }
      if (DeadScoreStartPoint != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(DeadScoreStartPoint);
      }
      if (DeadScoreEndPoint != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(DeadScoreEndPoint);
      }
      if (GetWeaponMaxScore != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(GetWeaponMaxScore);
      }
      if (GetWeaponScoreStartPoint != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(GetWeaponScoreStartPoint);
      }
      if (GetWeaponScoreEndPoint != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(GetWeaponScoreEndPoint);
      }
      if (SingleDamageMaxScore != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(SingleDamageMaxScore);
      }
      if (SingleDamageScoreStartPoint != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(SingleDamageScoreStartPoint);
      }
      if (SingleDamageStep != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(SingleDamageStep);
      }
      if (UsePropMaxScore != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(UsePropMaxScore);
      }
      if (UsePropScoreStartPoint != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(UsePropScoreStartPoint);
      }
      if (UsePropScoreEndPoint != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(UsePropScoreEndPoint);
      }
      if (UseProjMaxScore != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(UseProjMaxScore);
      }
      if (UseProjScoreStartPoint != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(UseProjScoreStartPoint);
      }
      if (UseProjScoreEndPoint != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(UseProjScoreEndPoint);
      }
      if (PassTimeMaxScore != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(PassTimeMaxScore);
      }
      if (PassTimeGetMScorePoint != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(PassTimeGetMScorePoint);
      }
      if (PassTimeNoScorePoint != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(PassTimeNoScorePoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (KillMaxScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KillMaxScore);
      }
      if (KillScoreStartPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KillScoreStartPoint);
      }
      if (KillScoreEndPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KillScoreEndPoint);
      }
      if (DamageMaxScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageMaxScore);
      }
      if (DamageScoreStartPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageScoreStartPoint);
      }
      if (DamageScoreEndPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DamageScoreEndPoint);
      }
      if (MoneyMaxScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoneyMaxScore);
      }
      if (MoneyScoreStartPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoneyScoreStartPoint);
      }
      if (MoneyScoreEndPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoneyScoreEndPoint);
      }
      if (ShotHeadMaxScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShotHeadMaxScore);
      }
      if (ShotHeadScoreStartPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShotHeadScoreStartPoint);
      }
      if (ShotHeadScoreEndPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShotHeadScoreEndPoint);
      }
      if (DeadMaxScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeadMaxScore);
      }
      if (DeadScoreStartPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeadScoreStartPoint);
      }
      if (DeadScoreEndPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DeadScoreEndPoint);
      }
      if (GetWeaponMaxScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GetWeaponMaxScore);
      }
      if (GetWeaponScoreStartPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GetWeaponScoreStartPoint);
      }
      if (GetWeaponScoreEndPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GetWeaponScoreEndPoint);
      }
      if (SingleDamageMaxScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SingleDamageMaxScore);
      }
      if (SingleDamageScoreStartPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SingleDamageScoreStartPoint);
      }
      if (SingleDamageStep != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SingleDamageStep);
      }
      if (UsePropMaxScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UsePropMaxScore);
      }
      if (UsePropScoreStartPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UsePropScoreStartPoint);
      }
      if (UsePropScoreEndPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UsePropScoreEndPoint);
      }
      if (UseProjMaxScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UseProjMaxScore);
      }
      if (UseProjScoreStartPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UseProjScoreStartPoint);
      }
      if (UseProjScoreEndPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UseProjScoreEndPoint);
      }
      if (PassTimeMaxScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PassTimeMaxScore);
      }
      if (PassTimeGetMScorePoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PassTimeGetMScorePoint);
      }
      if (PassTimeNoScorePoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PassTimeNoScorePoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RogueLikeScoreConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.KillMaxScore != 0) {
        KillMaxScore = other.KillMaxScore;
      }
      if (other.KillScoreStartPoint != 0) {
        KillScoreStartPoint = other.KillScoreStartPoint;
      }
      if (other.KillScoreEndPoint != 0) {
        KillScoreEndPoint = other.KillScoreEndPoint;
      }
      if (other.DamageMaxScore != 0) {
        DamageMaxScore = other.DamageMaxScore;
      }
      if (other.DamageScoreStartPoint != 0) {
        DamageScoreStartPoint = other.DamageScoreStartPoint;
      }
      if (other.DamageScoreEndPoint != 0) {
        DamageScoreEndPoint = other.DamageScoreEndPoint;
      }
      if (other.MoneyMaxScore != 0) {
        MoneyMaxScore = other.MoneyMaxScore;
      }
      if (other.MoneyScoreStartPoint != 0) {
        MoneyScoreStartPoint = other.MoneyScoreStartPoint;
      }
      if (other.MoneyScoreEndPoint != 0) {
        MoneyScoreEndPoint = other.MoneyScoreEndPoint;
      }
      if (other.ShotHeadMaxScore != 0) {
        ShotHeadMaxScore = other.ShotHeadMaxScore;
      }
      if (other.ShotHeadScoreStartPoint != 0) {
        ShotHeadScoreStartPoint = other.ShotHeadScoreStartPoint;
      }
      if (other.ShotHeadScoreEndPoint != 0) {
        ShotHeadScoreEndPoint = other.ShotHeadScoreEndPoint;
      }
      if (other.DeadMaxScore != 0) {
        DeadMaxScore = other.DeadMaxScore;
      }
      if (other.DeadScoreStartPoint != 0) {
        DeadScoreStartPoint = other.DeadScoreStartPoint;
      }
      if (other.DeadScoreEndPoint != 0) {
        DeadScoreEndPoint = other.DeadScoreEndPoint;
      }
      if (other.GetWeaponMaxScore != 0) {
        GetWeaponMaxScore = other.GetWeaponMaxScore;
      }
      if (other.GetWeaponScoreStartPoint != 0) {
        GetWeaponScoreStartPoint = other.GetWeaponScoreStartPoint;
      }
      if (other.GetWeaponScoreEndPoint != 0) {
        GetWeaponScoreEndPoint = other.GetWeaponScoreEndPoint;
      }
      if (other.SingleDamageMaxScore != 0) {
        SingleDamageMaxScore = other.SingleDamageMaxScore;
      }
      if (other.SingleDamageScoreStartPoint != 0) {
        SingleDamageScoreStartPoint = other.SingleDamageScoreStartPoint;
      }
      if (other.SingleDamageStep != 0) {
        SingleDamageStep = other.SingleDamageStep;
      }
      if (other.UsePropMaxScore != 0) {
        UsePropMaxScore = other.UsePropMaxScore;
      }
      if (other.UsePropScoreStartPoint != 0) {
        UsePropScoreStartPoint = other.UsePropScoreStartPoint;
      }
      if (other.UsePropScoreEndPoint != 0) {
        UsePropScoreEndPoint = other.UsePropScoreEndPoint;
      }
      if (other.UseProjMaxScore != 0) {
        UseProjMaxScore = other.UseProjMaxScore;
      }
      if (other.UseProjScoreStartPoint != 0) {
        UseProjScoreStartPoint = other.UseProjScoreStartPoint;
      }
      if (other.UseProjScoreEndPoint != 0) {
        UseProjScoreEndPoint = other.UseProjScoreEndPoint;
      }
      if (other.PassTimeMaxScore != 0) {
        PassTimeMaxScore = other.PassTimeMaxScore;
      }
      if (other.PassTimeGetMScorePoint != 0) {
        PassTimeGetMScorePoint = other.PassTimeGetMScorePoint;
      }
      if (other.PassTimeNoScorePoint != 0) {
        PassTimeNoScorePoint = other.PassTimeNoScorePoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            KillMaxScore = input.ReadUInt32();
            break;
          }
          case 24: {
            KillScoreStartPoint = input.ReadUInt32();
            break;
          }
          case 32: {
            KillScoreEndPoint = input.ReadUInt32();
            break;
          }
          case 40: {
            DamageMaxScore = input.ReadUInt32();
            break;
          }
          case 48: {
            DamageScoreStartPoint = input.ReadUInt32();
            break;
          }
          case 56: {
            DamageScoreEndPoint = input.ReadUInt32();
            break;
          }
          case 64: {
            MoneyMaxScore = input.ReadUInt32();
            break;
          }
          case 72: {
            MoneyScoreStartPoint = input.ReadUInt32();
            break;
          }
          case 80: {
            MoneyScoreEndPoint = input.ReadUInt32();
            break;
          }
          case 88: {
            ShotHeadMaxScore = input.ReadUInt32();
            break;
          }
          case 96: {
            ShotHeadScoreStartPoint = input.ReadUInt32();
            break;
          }
          case 104: {
            ShotHeadScoreEndPoint = input.ReadUInt32();
            break;
          }
          case 112: {
            DeadMaxScore = input.ReadUInt32();
            break;
          }
          case 120: {
            DeadScoreStartPoint = input.ReadUInt32();
            break;
          }
          case 128: {
            DeadScoreEndPoint = input.ReadUInt32();
            break;
          }
          case 136: {
            GetWeaponMaxScore = input.ReadUInt32();
            break;
          }
          case 144: {
            GetWeaponScoreStartPoint = input.ReadUInt32();
            break;
          }
          case 152: {
            GetWeaponScoreEndPoint = input.ReadUInt32();
            break;
          }
          case 160: {
            SingleDamageMaxScore = input.ReadUInt32();
            break;
          }
          case 168: {
            SingleDamageScoreStartPoint = input.ReadUInt32();
            break;
          }
          case 176: {
            SingleDamageStep = input.ReadUInt32();
            break;
          }
          case 184: {
            UsePropMaxScore = input.ReadUInt32();
            break;
          }
          case 192: {
            UsePropScoreStartPoint = input.ReadUInt32();
            break;
          }
          case 200: {
            UsePropScoreEndPoint = input.ReadUInt32();
            break;
          }
          case 208: {
            UseProjMaxScore = input.ReadUInt32();
            break;
          }
          case 216: {
            UseProjScoreStartPoint = input.ReadUInt32();
            break;
          }
          case 224: {
            UseProjScoreEndPoint = input.ReadUInt32();
            break;
          }
          case 232: {
            PassTimeMaxScore = input.ReadUInt32();
            break;
          }
          case 240: {
            PassTimeGetMScorePoint = input.ReadUInt32();
            break;
          }
          case 248: {
            PassTimeNoScorePoint = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RogueLikeScoreConfig_Array : pb::IMessage<RogueLikeScoreConfig_Array> {
    private static readonly pb::MessageParser<RogueLikeScoreConfig_Array> _parser = new pb::MessageParser<RogueLikeScoreConfig_Array>(() => new RogueLikeScoreConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RogueLikeScoreConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansRoguelikescoreconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RogueLikeScoreConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RogueLikeScoreConfig_Array(RogueLikeScoreConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RogueLikeScoreConfig_Array Clone() {
      return new RogueLikeScoreConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.RogueLikeScoreConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.RogueLikeScoreConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.RogueLikeScoreConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.RogueLikeScoreConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.RogueLikeScoreConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RogueLikeScoreConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RogueLikeScoreConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RogueLikeScoreConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
