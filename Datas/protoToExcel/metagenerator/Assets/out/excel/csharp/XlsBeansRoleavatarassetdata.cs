// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_roleavatarassetdata.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_roleavatarassetdata.proto</summary>
  public static partial class XlsBeansRoleavatarassetdataReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_roleavatarassetdata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansRoleavatarassetdataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiN4bHNfYmVhbnNfcm9sZWF2YXRhcmFzc2V0ZGF0YS5wcm90bxIKRDExLlBi",
            "ZWFucyK1AQoTUm9sZUF2YXRhckFzc2V0RGF0YRIKCgJpZBgBIAEoDRIMCgRj",
            "YW1wGAIgASgJEhIKCmZhbGxiYWNraWQYAyABKA0SEwoLZnBhc3NldG5hbWUY",
            "BCABKAkSEwoLdHBhc3NldG5hbWUYBSABKAkSGAoQZnBjaGVzdGFzc2V0bmFt",
            "ZRgGIAEoCRIRCglyb2JvdFVzZWQYByABKA0SGQoRRW50ZXJTY2VuZVZvaWNl",
            "SWQYCCABKA0iSwoZUm9sZUF2YXRhckFzc2V0RGF0YV9BcnJheRIuCgVpdGVt",
            "cxgBIAMoCzIfLkQxMS5QYmVhbnMuUm9sZUF2YXRhckFzc2V0RGF0YWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.RoleAvatarAssetData), global::D11.Pbeans.RoleAvatarAssetData.Parser, new[]{ "Id", "Camp", "Fallbackid", "Fpassetname", "Tpassetname", "Fpchestassetname", "RobotUsed", "EnterSceneVoiceId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.RoleAvatarAssetData_Array), global::D11.Pbeans.RoleAvatarAssetData_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RoleAvatarAssetData : pb::IMessage<RoleAvatarAssetData> {
    private static readonly pb::MessageParser<RoleAvatarAssetData> _parser = new pb::MessageParser<RoleAvatarAssetData>(() => new RoleAvatarAssetData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAvatarAssetData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansRoleavatarassetdataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAvatarAssetData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAvatarAssetData(RoleAvatarAssetData other) : this() {
      id_ = other.id_;
      camp_ = other.camp_;
      fallbackid_ = other.fallbackid_;
      fpassetname_ = other.fpassetname_;
      tpassetname_ = other.tpassetname_;
      fpchestassetname_ = other.fpchestassetname_;
      robotUsed_ = other.robotUsed_;
      enterSceneVoiceId_ = other.enterSceneVoiceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAvatarAssetData Clone() {
      return new RoleAvatarAssetData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 唯一ID(itemID) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 2;
    private string camp_ = "";
    /// <summary>
    /// 模型所属阵营 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Camp {
      get { return camp_; }
      set {
        camp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fallbackid" field.</summary>
    public const int FallbackidFieldNumber = 3;
    private uint fallbackid_;
    /// <summary>
    /// 分包未下载时回退ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fallbackid {
      get { return fallbackid_; }
      set {
        fallbackid_ = value;
      }
    }

    /// <summary>Field number for the "fpassetname" field.</summary>
    public const int FpassetnameFieldNumber = 4;
    private string fpassetname_ = "";
    /// <summary>
    /// 1p视角模型资源名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fpassetname {
      get { return fpassetname_; }
      set {
        fpassetname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tpassetname" field.</summary>
    public const int TpassetnameFieldNumber = 5;
    private string tpassetname_ = "";
    /// <summary>
    /// 3p视角模型资源名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tpassetname {
      get { return tpassetname_; }
      set {
        tpassetname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fpchestassetname" field.</summary>
    public const int FpchestassetnameFieldNumber = 6;
    private string fpchestassetname_ = "";
    /// <summary>
    /// 1p视角模型胸部 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fpchestassetname {
      get { return fpchestassetname_; }
      set {
        fpchestassetname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "robotUsed" field.</summary>
    public const int RobotUsedFieldNumber = 7;
    private uint robotUsed_;
    /// <summary>
    /// 机器人是否可用,1:可用 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RobotUsed {
      get { return robotUsed_; }
      set {
        robotUsed_ = value;
      }
    }

    /// <summary>Field number for the "EnterSceneVoiceId" field.</summary>
    public const int EnterSceneVoiceIdFieldNumber = 8;
    private uint enterSceneVoiceId_;
    /// <summary>
    /// 进场景的播放声音id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnterSceneVoiceId {
      get { return enterSceneVoiceId_; }
      set {
        enterSceneVoiceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleAvatarAssetData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleAvatarAssetData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Camp != other.Camp) return false;
      if (Fallbackid != other.Fallbackid) return false;
      if (Fpassetname != other.Fpassetname) return false;
      if (Tpassetname != other.Tpassetname) return false;
      if (Fpchestassetname != other.Fpchestassetname) return false;
      if (RobotUsed != other.RobotUsed) return false;
      if (EnterSceneVoiceId != other.EnterSceneVoiceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Camp.Length != 0) hash ^= Camp.GetHashCode();
      if (Fallbackid != 0) hash ^= Fallbackid.GetHashCode();
      if (Fpassetname.Length != 0) hash ^= Fpassetname.GetHashCode();
      if (Tpassetname.Length != 0) hash ^= Tpassetname.GetHashCode();
      if (Fpchestassetname.Length != 0) hash ^= Fpchestassetname.GetHashCode();
      if (RobotUsed != 0) hash ^= RobotUsed.GetHashCode();
      if (EnterSceneVoiceId != 0) hash ^= EnterSceneVoiceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Camp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Camp);
      }
      if (Fallbackid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Fallbackid);
      }
      if (Fpassetname.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Fpassetname);
      }
      if (Tpassetname.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Tpassetname);
      }
      if (Fpchestassetname.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Fpchestassetname);
      }
      if (RobotUsed != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RobotUsed);
      }
      if (EnterSceneVoiceId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(EnterSceneVoiceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Camp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Camp);
      }
      if (Fallbackid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fallbackid);
      }
      if (Fpassetname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fpassetname);
      }
      if (Tpassetname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tpassetname);
      }
      if (Fpchestassetname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fpchestassetname);
      }
      if (RobotUsed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RobotUsed);
      }
      if (EnterSceneVoiceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnterSceneVoiceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleAvatarAssetData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Camp.Length != 0) {
        Camp = other.Camp;
      }
      if (other.Fallbackid != 0) {
        Fallbackid = other.Fallbackid;
      }
      if (other.Fpassetname.Length != 0) {
        Fpassetname = other.Fpassetname;
      }
      if (other.Tpassetname.Length != 0) {
        Tpassetname = other.Tpassetname;
      }
      if (other.Fpchestassetname.Length != 0) {
        Fpchestassetname = other.Fpchestassetname;
      }
      if (other.RobotUsed != 0) {
        RobotUsed = other.RobotUsed;
      }
      if (other.EnterSceneVoiceId != 0) {
        EnterSceneVoiceId = other.EnterSceneVoiceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Camp = input.ReadString();
            break;
          }
          case 24: {
            Fallbackid = input.ReadUInt32();
            break;
          }
          case 34: {
            Fpassetname = input.ReadString();
            break;
          }
          case 42: {
            Tpassetname = input.ReadString();
            break;
          }
          case 50: {
            Fpchestassetname = input.ReadString();
            break;
          }
          case 56: {
            RobotUsed = input.ReadUInt32();
            break;
          }
          case 64: {
            EnterSceneVoiceId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleAvatarAssetData_Array : pb::IMessage<RoleAvatarAssetData_Array> {
    private static readonly pb::MessageParser<RoleAvatarAssetData_Array> _parser = new pb::MessageParser<RoleAvatarAssetData_Array>(() => new RoleAvatarAssetData_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAvatarAssetData_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansRoleavatarassetdataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAvatarAssetData_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAvatarAssetData_Array(RoleAvatarAssetData_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAvatarAssetData_Array Clone() {
      return new RoleAvatarAssetData_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.RoleAvatarAssetData> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.RoleAvatarAssetData.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.RoleAvatarAssetData> items_ = new pbc::RepeatedField<global::D11.Pbeans.RoleAvatarAssetData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.RoleAvatarAssetData> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleAvatarAssetData_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleAvatarAssetData_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleAvatarAssetData_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
