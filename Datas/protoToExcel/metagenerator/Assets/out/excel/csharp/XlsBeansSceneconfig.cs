// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_sceneconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_sceneconfig.proto</summary>
  public static partial class XlsBeansSceneconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_sceneconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansSceneconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cht4bHNfYmVhbnNfc2NlbmVjb25maWcucHJvdG8SCkQxMS5QYmVhbnMi+AUK",
            "C1NjZW5lQ29uZmlnEgoKAmlkGAEgASgNEgwKBG5hbWUYAiABKAkSGgoSUm9h",
            "ZEFyZWFDb25maWdQYXRoGAMgASgJEgwKBGRlc2MYBCABKAkSFAoMbGV2ZWxf",
            "bWFwX2JnGAUgASgJEhQKDGxldmVsX21hcF9zbRgGIAEoCRITCgtNYXBSb3Rh",
            "dGlvbhgHIAEoAhIQCghjZW50ZXJfeBgIIAEoAhIQCghjZW50ZXJfeRgJIAEo",
            "AhIQCghjZW50ZXJfehgKIAEoAhIRCglNYXBfU2l6ZVgYCyABKAISEQoJTWFw",
            "X1NpemVZGAwgASgCEhAKCG1hcFNjYWxlGA0gASgCEhMKC0Fwb3NpdGlvbl94",
            "GA4gASgCEhMKC0Fwb3NpdGlvbl95GA8gASgCEhMKC0Fwb3NpdGlvbl96GBAg",
            "ASgCEhMKC0Jwb3NpdGlvbl94GBEgASgCEhMKC0Jwb3NpdGlvbl95GBIgASgC",
            "EhMKC0Jwb3NpdGlvbl96GBMgASgCEhMKC1Rwb3NpdGlvbl94GBQgASgCEhMK",
            "C1Rwb3NpdGlvbl95GBUgASgCEhMKC1Rwb3NpdGlvbl96GBYgASgCEhQKDENU",
            "cG9zaXRpb25feBgXIAEoAhIUCgxDVHBvc2l0aW9uX3kYGCABKAISFAoMQ1Rw",
            "b3NpdGlvbl96GBkgASgCEhEKCUM0QVBvc2lfWBgaIAEoAhIRCglDNEFQb3Np",
            "X1kYGyABKAISEQoJQzRBUG9zaV9aGBwgASgCEhEKCUM0QVJvdGFfWBgdIAEo",
            "AhIRCglDNEFSb3RhX1kYHiABKAISEQoJQzRBUm90YV9aGB8gASgCEhEKCUM0",
            "QlBvc2lfWBggIAEoAhIRCglDNEJQb3NpX1kYISABKAISEQoJQzRCUG9zaV9a",
            "GCIgASgCEhEKCUM0QlJvdGFfWBgjIAEoAhIRCglDNEJSb3RhX1kYJCABKAIS",
            "EQoJQzRCUm90YV9aGCUgASgCEhMKC0hhbmdVcFZvaWNlGCYgASgJIjsKEVNj",
            "ZW5lQ29uZmlnX0FycmF5EiYKBWl0ZW1zGAEgAygLMhcuRDExLlBiZWFucy5T",
            "Y2VuZUNvbmZpZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.SceneConfig), global::D11.Pbeans.SceneConfig.Parser, new[]{ "Id", "Name", "RoadAreaConfigPath", "Desc", "LevelMapBg", "LevelMapSm", "MapRotation", "CenterX", "CenterY", "CenterZ", "MapSizeX", "MapSizeY", "MapScale", "ApositionX", "ApositionY", "ApositionZ", "BpositionX", "BpositionY", "BpositionZ", "TpositionX", "TpositionY", "TpositionZ", "CTpositionX", "CTpositionY", "CTpositionZ", "C4APosiX", "C4APosiY", "C4APosiZ", "C4ARotaX", "C4ARotaY", "C4ARotaZ", "C4BPosiX", "C4BPosiY", "C4BPosiZ", "C4BRotaX", "C4BRotaY", "C4BRotaZ", "HangUpVoice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.SceneConfig_Array), global::D11.Pbeans.SceneConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SceneConfig : pb::IMessage<SceneConfig> {
    private static readonly pb::MessageParser<SceneConfig> _parser = new pb::MessageParser<SceneConfig>(() => new SceneConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansSceneconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneConfig(SceneConfig other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      roadAreaConfigPath_ = other.roadAreaConfigPath_;
      desc_ = other.desc_;
      levelMapBg_ = other.levelMapBg_;
      levelMapSm_ = other.levelMapSm_;
      mapRotation_ = other.mapRotation_;
      centerX_ = other.centerX_;
      centerY_ = other.centerY_;
      centerZ_ = other.centerZ_;
      mapSizeX_ = other.mapSizeX_;
      mapSizeY_ = other.mapSizeY_;
      mapScale_ = other.mapScale_;
      apositionX_ = other.apositionX_;
      apositionY_ = other.apositionY_;
      apositionZ_ = other.apositionZ_;
      bpositionX_ = other.bpositionX_;
      bpositionY_ = other.bpositionY_;
      bpositionZ_ = other.bpositionZ_;
      tpositionX_ = other.tpositionX_;
      tpositionY_ = other.tpositionY_;
      tpositionZ_ = other.tpositionZ_;
      cTpositionX_ = other.cTpositionX_;
      cTpositionY_ = other.cTpositionY_;
      cTpositionZ_ = other.cTpositionZ_;
      c4APosiX_ = other.c4APosiX_;
      c4APosiY_ = other.c4APosiY_;
      c4APosiZ_ = other.c4APosiZ_;
      c4ARotaX_ = other.c4ARotaX_;
      c4ARotaY_ = other.c4ARotaY_;
      c4ARotaZ_ = other.c4ARotaZ_;
      c4BPosiX_ = other.c4BPosiX_;
      c4BPosiY_ = other.c4BPosiY_;
      c4BPosiZ_ = other.c4BPosiZ_;
      c4BRotaX_ = other.c4BRotaX_;
      c4BRotaY_ = other.c4BRotaY_;
      c4BRotaZ_ = other.c4BRotaZ_;
      hangUpVoice_ = other.hangUpVoice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneConfig Clone() {
      return new SceneConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 场景ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 正式名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RoadAreaConfigPath" field.</summary>
    public const int RoadAreaConfigPathFieldNumber = 3;
    private string roadAreaConfigPath_ = "";
    /// <summary>
    /// 场景中道路区域配置表 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoadAreaConfigPath {
      get { return roadAreaConfigPath_; }
      set {
        roadAreaConfigPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 4;
    private string desc_ = "";
    /// <summary>
    /// 备注 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level_map_bg" field.</summary>
    public const int LevelMapBgFieldNumber = 5;
    private string levelMapBg_ = "";
    /// <summary>
    /// 大地图资源 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LevelMapBg {
      get { return levelMapBg_; }
      set {
        levelMapBg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level_map_sm" field.</summary>
    public const int LevelMapSmFieldNumber = 6;
    private string levelMapSm_ = "";
    /// <summary>
    /// 小地图资源 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LevelMapSm {
      get { return levelMapSm_; }
      set {
        levelMapSm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MapRotation" field.</summary>
    public const int MapRotationFieldNumber = 7;
    private float mapRotation_;
    /// <summary>
    /// 旋转角度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MapRotation {
      get { return mapRotation_; }
      set {
        mapRotation_ = value;
      }
    }

    /// <summary>Field number for the "center_x" field.</summary>
    public const int CenterXFieldNumber = 8;
    private float centerX_;
    /// <summary>
    /// 地图中心点x 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CenterX {
      get { return centerX_; }
      set {
        centerX_ = value;
      }
    }

    /// <summary>Field number for the "center_y" field.</summary>
    public const int CenterYFieldNumber = 9;
    private float centerY_;
    /// <summary>
    /// 地图中心点y 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CenterY {
      get { return centerY_; }
      set {
        centerY_ = value;
      }
    }

    /// <summary>Field number for the "center_z" field.</summary>
    public const int CenterZFieldNumber = 10;
    private float centerZ_;
    /// <summary>
    /// 地图中心点z 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CenterZ {
      get { return centerZ_; }
      set {
        centerZ_ = value;
      }
    }

    /// <summary>Field number for the "Map_SizeX" field.</summary>
    public const int MapSizeXFieldNumber = 11;
    private float mapSizeX_;
    /// <summary>
    /// 3D地图有效尺寸x 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MapSizeX {
      get { return mapSizeX_; }
      set {
        mapSizeX_ = value;
      }
    }

    /// <summary>Field number for the "Map_SizeY" field.</summary>
    public const int MapSizeYFieldNumber = 12;
    private float mapSizeY_;
    /// <summary>
    /// 3D地图有效尺寸y 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MapSizeY {
      get { return mapSizeY_; }
      set {
        mapSizeY_ = value;
      }
    }

    /// <summary>Field number for the "mapScale" field.</summary>
    public const int MapScaleFieldNumber = 13;
    private float mapScale_;
    /// <summary>
    /// 缩放比例 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MapScale {
      get { return mapScale_; }
      set {
        mapScale_ = value;
      }
    }

    /// <summary>Field number for the "Aposition_x" field.</summary>
    public const int ApositionXFieldNumber = 14;
    private float apositionX_;
    /// <summary>
    /// Aposition_x 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ApositionX {
      get { return apositionX_; }
      set {
        apositionX_ = value;
      }
    }

    /// <summary>Field number for the "Aposition_y" field.</summary>
    public const int ApositionYFieldNumber = 15;
    private float apositionY_;
    /// <summary>
    /// Aposition_y 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ApositionY {
      get { return apositionY_; }
      set {
        apositionY_ = value;
      }
    }

    /// <summary>Field number for the "Aposition_z" field.</summary>
    public const int ApositionZFieldNumber = 16;
    private float apositionZ_;
    /// <summary>
    /// Aposition_z 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ApositionZ {
      get { return apositionZ_; }
      set {
        apositionZ_ = value;
      }
    }

    /// <summary>Field number for the "Bposition_x" field.</summary>
    public const int BpositionXFieldNumber = 17;
    private float bpositionX_;
    /// <summary>
    /// Bposition_x 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BpositionX {
      get { return bpositionX_; }
      set {
        bpositionX_ = value;
      }
    }

    /// <summary>Field number for the "Bposition_y" field.</summary>
    public const int BpositionYFieldNumber = 18;
    private float bpositionY_;
    /// <summary>
    /// Bposition_y 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BpositionY {
      get { return bpositionY_; }
      set {
        bpositionY_ = value;
      }
    }

    /// <summary>Field number for the "Bposition_z" field.</summary>
    public const int BpositionZFieldNumber = 19;
    private float bpositionZ_;
    /// <summary>
    /// Bposition_z 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BpositionZ {
      get { return bpositionZ_; }
      set {
        bpositionZ_ = value;
      }
    }

    /// <summary>Field number for the "Tposition_x" field.</summary>
    public const int TpositionXFieldNumber = 20;
    private float tpositionX_;
    /// <summary>
    /// Tposition_x 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TpositionX {
      get { return tpositionX_; }
      set {
        tpositionX_ = value;
      }
    }

    /// <summary>Field number for the "Tposition_y" field.</summary>
    public const int TpositionYFieldNumber = 21;
    private float tpositionY_;
    /// <summary>
    /// Tposition_y 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TpositionY {
      get { return tpositionY_; }
      set {
        tpositionY_ = value;
      }
    }

    /// <summary>Field number for the "Tposition_z" field.</summary>
    public const int TpositionZFieldNumber = 22;
    private float tpositionZ_;
    /// <summary>
    /// Tposition_z 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TpositionZ {
      get { return tpositionZ_; }
      set {
        tpositionZ_ = value;
      }
    }

    /// <summary>Field number for the "CTposition_x" field.</summary>
    public const int CTpositionXFieldNumber = 23;
    private float cTpositionX_;
    /// <summary>
    /// CTposition_x 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CTpositionX {
      get { return cTpositionX_; }
      set {
        cTpositionX_ = value;
      }
    }

    /// <summary>Field number for the "CTposition_y" field.</summary>
    public const int CTpositionYFieldNumber = 24;
    private float cTpositionY_;
    /// <summary>
    /// CTposition_y 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CTpositionY {
      get { return cTpositionY_; }
      set {
        cTpositionY_ = value;
      }
    }

    /// <summary>Field number for the "CTposition_z" field.</summary>
    public const int CTpositionZFieldNumber = 25;
    private float cTpositionZ_;
    /// <summary>
    /// CTposition_z 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CTpositionZ {
      get { return cTpositionZ_; }
      set {
        cTpositionZ_ = value;
      }
    }

    /// <summary>Field number for the "C4APosi_X" field.</summary>
    public const int C4APosiXFieldNumber = 26;
    private float c4APosiX_;
    /// <summary>
    /// c4A点位置 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4APosiX {
      get { return c4APosiX_; }
      set {
        c4APosiX_ = value;
      }
    }

    /// <summary>Field number for the "C4APosi_Y" field.</summary>
    public const int C4APosiYFieldNumber = 27;
    private float c4APosiY_;
    /// <summary>
    /// c4A点位置 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4APosiY {
      get { return c4APosiY_; }
      set {
        c4APosiY_ = value;
      }
    }

    /// <summary>Field number for the "C4APosi_Z" field.</summary>
    public const int C4APosiZFieldNumber = 28;
    private float c4APosiZ_;
    /// <summary>
    /// c4A点位置 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4APosiZ {
      get { return c4APosiZ_; }
      set {
        c4APosiZ_ = value;
      }
    }

    /// <summary>Field number for the "C4ARota_X" field.</summary>
    public const int C4ARotaXFieldNumber = 29;
    private float c4ARotaX_;
    /// <summary>
    /// c4A点旋转 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4ARotaX {
      get { return c4ARotaX_; }
      set {
        c4ARotaX_ = value;
      }
    }

    /// <summary>Field number for the "C4ARota_Y" field.</summary>
    public const int C4ARotaYFieldNumber = 30;
    private float c4ARotaY_;
    /// <summary>
    /// c4A点旋转 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4ARotaY {
      get { return c4ARotaY_; }
      set {
        c4ARotaY_ = value;
      }
    }

    /// <summary>Field number for the "C4ARota_Z" field.</summary>
    public const int C4ARotaZFieldNumber = 31;
    private float c4ARotaZ_;
    /// <summary>
    /// c4A点旋转 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4ARotaZ {
      get { return c4ARotaZ_; }
      set {
        c4ARotaZ_ = value;
      }
    }

    /// <summary>Field number for the "C4BPosi_X" field.</summary>
    public const int C4BPosiXFieldNumber = 32;
    private float c4BPosiX_;
    /// <summary>
    /// c4B点位置 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4BPosiX {
      get { return c4BPosiX_; }
      set {
        c4BPosiX_ = value;
      }
    }

    /// <summary>Field number for the "C4BPosi_Y" field.</summary>
    public const int C4BPosiYFieldNumber = 33;
    private float c4BPosiY_;
    /// <summary>
    /// c4B点位置 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4BPosiY {
      get { return c4BPosiY_; }
      set {
        c4BPosiY_ = value;
      }
    }

    /// <summary>Field number for the "C4BPosi_Z" field.</summary>
    public const int C4BPosiZFieldNumber = 34;
    private float c4BPosiZ_;
    /// <summary>
    /// c4B点位置 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4BPosiZ {
      get { return c4BPosiZ_; }
      set {
        c4BPosiZ_ = value;
      }
    }

    /// <summary>Field number for the "C4BRota_X" field.</summary>
    public const int C4BRotaXFieldNumber = 35;
    private float c4BRotaX_;
    /// <summary>
    /// c4B点旋转 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4BRotaX {
      get { return c4BRotaX_; }
      set {
        c4BRotaX_ = value;
      }
    }

    /// <summary>Field number for the "C4BRota_Y" field.</summary>
    public const int C4BRotaYFieldNumber = 36;
    private float c4BRotaY_;
    /// <summary>
    /// c4B点旋转 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4BRotaY {
      get { return c4BRotaY_; }
      set {
        c4BRotaY_ = value;
      }
    }

    /// <summary>Field number for the "C4BRota_Z" field.</summary>
    public const int C4BRotaZFieldNumber = 37;
    private float c4BRotaZ_;
    /// <summary>
    /// c4B点旋转 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4BRotaZ {
      get { return c4BRotaZ_; }
      set {
        c4BRotaZ_ = value;
      }
    }

    /// <summary>Field number for the "HangUpVoice" field.</summary>
    public const int HangUpVoiceFieldNumber = 38;
    private string hangUpVoice_ = "";
    /// <summary>
    /// 触发挂机提示音 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HangUpVoice {
      get { return hangUpVoice_; }
      set {
        hangUpVoice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (RoadAreaConfigPath != other.RoadAreaConfigPath) return false;
      if (Desc != other.Desc) return false;
      if (LevelMapBg != other.LevelMapBg) return false;
      if (LevelMapSm != other.LevelMapSm) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MapRotation, other.MapRotation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CenterX, other.CenterX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CenterY, other.CenterY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CenterZ, other.CenterZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MapSizeX, other.MapSizeX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MapSizeY, other.MapSizeY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MapScale, other.MapScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ApositionX, other.ApositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ApositionY, other.ApositionY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ApositionZ, other.ApositionZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BpositionX, other.BpositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BpositionY, other.BpositionY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BpositionZ, other.BpositionZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TpositionX, other.TpositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TpositionY, other.TpositionY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TpositionZ, other.TpositionZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CTpositionX, other.CTpositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CTpositionY, other.CTpositionY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CTpositionZ, other.CTpositionZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4APosiX, other.C4APosiX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4APosiY, other.C4APosiY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4APosiZ, other.C4APosiZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4ARotaX, other.C4ARotaX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4ARotaY, other.C4ARotaY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4ARotaZ, other.C4ARotaZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4BPosiX, other.C4BPosiX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4BPosiY, other.C4BPosiY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4BPosiZ, other.C4BPosiZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4BRotaX, other.C4BRotaX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4BRotaY, other.C4BRotaY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4BRotaZ, other.C4BRotaZ)) return false;
      if (HangUpVoice != other.HangUpVoice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (RoadAreaConfigPath.Length != 0) hash ^= RoadAreaConfigPath.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (LevelMapBg.Length != 0) hash ^= LevelMapBg.GetHashCode();
      if (LevelMapSm.Length != 0) hash ^= LevelMapSm.GetHashCode();
      if (MapRotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MapRotation);
      if (CenterX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CenterX);
      if (CenterY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CenterY);
      if (CenterZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CenterZ);
      if (MapSizeX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MapSizeX);
      if (MapSizeY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MapSizeY);
      if (MapScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MapScale);
      if (ApositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ApositionX);
      if (ApositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ApositionY);
      if (ApositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ApositionZ);
      if (BpositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BpositionX);
      if (BpositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BpositionY);
      if (BpositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BpositionZ);
      if (TpositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TpositionX);
      if (TpositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TpositionY);
      if (TpositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TpositionZ);
      if (CTpositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CTpositionX);
      if (CTpositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CTpositionY);
      if (CTpositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CTpositionZ);
      if (C4APosiX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4APosiX);
      if (C4APosiY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4APosiY);
      if (C4APosiZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4APosiZ);
      if (C4ARotaX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4ARotaX);
      if (C4ARotaY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4ARotaY);
      if (C4ARotaZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4ARotaZ);
      if (C4BPosiX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4BPosiX);
      if (C4BPosiY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4BPosiY);
      if (C4BPosiZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4BPosiZ);
      if (C4BRotaX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4BRotaX);
      if (C4BRotaY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4BRotaY);
      if (C4BRotaZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4BRotaZ);
      if (HangUpVoice.Length != 0) hash ^= HangUpVoice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (RoadAreaConfigPath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoadAreaConfigPath);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Desc);
      }
      if (LevelMapBg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LevelMapBg);
      }
      if (LevelMapSm.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LevelMapSm);
      }
      if (MapRotation != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(MapRotation);
      }
      if (CenterX != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(CenterX);
      }
      if (CenterY != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(CenterY);
      }
      if (CenterZ != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(CenterZ);
      }
      if (MapSizeX != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(MapSizeX);
      }
      if (MapSizeY != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(MapSizeY);
      }
      if (MapScale != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(MapScale);
      }
      if (ApositionX != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(ApositionX);
      }
      if (ApositionY != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(ApositionY);
      }
      if (ApositionZ != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(ApositionZ);
      }
      if (BpositionX != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(BpositionX);
      }
      if (BpositionY != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(BpositionY);
      }
      if (BpositionZ != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(BpositionZ);
      }
      if (TpositionX != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(TpositionX);
      }
      if (TpositionY != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(TpositionY);
      }
      if (TpositionZ != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(TpositionZ);
      }
      if (CTpositionX != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(CTpositionX);
      }
      if (CTpositionY != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(CTpositionY);
      }
      if (CTpositionZ != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(CTpositionZ);
      }
      if (C4APosiX != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(C4APosiX);
      }
      if (C4APosiY != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(C4APosiY);
      }
      if (C4APosiZ != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(C4APosiZ);
      }
      if (C4ARotaX != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(C4ARotaX);
      }
      if (C4ARotaY != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(C4ARotaY);
      }
      if (C4ARotaZ != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(C4ARotaZ);
      }
      if (C4BPosiX != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(C4BPosiX);
      }
      if (C4BPosiY != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(C4BPosiY);
      }
      if (C4BPosiZ != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(C4BPosiZ);
      }
      if (C4BRotaX != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(C4BRotaX);
      }
      if (C4BRotaY != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(C4BRotaY);
      }
      if (C4BRotaZ != 0F) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(C4BRotaZ);
      }
      if (HangUpVoice.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(HangUpVoice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (RoadAreaConfigPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoadAreaConfigPath);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (LevelMapBg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelMapBg);
      }
      if (LevelMapSm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelMapSm);
      }
      if (MapRotation != 0F) {
        size += 1 + 4;
      }
      if (CenterX != 0F) {
        size += 1 + 4;
      }
      if (CenterY != 0F) {
        size += 1 + 4;
      }
      if (CenterZ != 0F) {
        size += 1 + 4;
      }
      if (MapSizeX != 0F) {
        size += 1 + 4;
      }
      if (MapSizeY != 0F) {
        size += 1 + 4;
      }
      if (MapScale != 0F) {
        size += 1 + 4;
      }
      if (ApositionX != 0F) {
        size += 1 + 4;
      }
      if (ApositionY != 0F) {
        size += 1 + 4;
      }
      if (ApositionZ != 0F) {
        size += 2 + 4;
      }
      if (BpositionX != 0F) {
        size += 2 + 4;
      }
      if (BpositionY != 0F) {
        size += 2 + 4;
      }
      if (BpositionZ != 0F) {
        size += 2 + 4;
      }
      if (TpositionX != 0F) {
        size += 2 + 4;
      }
      if (TpositionY != 0F) {
        size += 2 + 4;
      }
      if (TpositionZ != 0F) {
        size += 2 + 4;
      }
      if (CTpositionX != 0F) {
        size += 2 + 4;
      }
      if (CTpositionY != 0F) {
        size += 2 + 4;
      }
      if (CTpositionZ != 0F) {
        size += 2 + 4;
      }
      if (C4APosiX != 0F) {
        size += 2 + 4;
      }
      if (C4APosiY != 0F) {
        size += 2 + 4;
      }
      if (C4APosiZ != 0F) {
        size += 2 + 4;
      }
      if (C4ARotaX != 0F) {
        size += 2 + 4;
      }
      if (C4ARotaY != 0F) {
        size += 2 + 4;
      }
      if (C4ARotaZ != 0F) {
        size += 2 + 4;
      }
      if (C4BPosiX != 0F) {
        size += 2 + 4;
      }
      if (C4BPosiY != 0F) {
        size += 2 + 4;
      }
      if (C4BPosiZ != 0F) {
        size += 2 + 4;
      }
      if (C4BRotaX != 0F) {
        size += 2 + 4;
      }
      if (C4BRotaY != 0F) {
        size += 2 + 4;
      }
      if (C4BRotaZ != 0F) {
        size += 2 + 4;
      }
      if (HangUpVoice.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HangUpVoice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.RoadAreaConfigPath.Length != 0) {
        RoadAreaConfigPath = other.RoadAreaConfigPath;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.LevelMapBg.Length != 0) {
        LevelMapBg = other.LevelMapBg;
      }
      if (other.LevelMapSm.Length != 0) {
        LevelMapSm = other.LevelMapSm;
      }
      if (other.MapRotation != 0F) {
        MapRotation = other.MapRotation;
      }
      if (other.CenterX != 0F) {
        CenterX = other.CenterX;
      }
      if (other.CenterY != 0F) {
        CenterY = other.CenterY;
      }
      if (other.CenterZ != 0F) {
        CenterZ = other.CenterZ;
      }
      if (other.MapSizeX != 0F) {
        MapSizeX = other.MapSizeX;
      }
      if (other.MapSizeY != 0F) {
        MapSizeY = other.MapSizeY;
      }
      if (other.MapScale != 0F) {
        MapScale = other.MapScale;
      }
      if (other.ApositionX != 0F) {
        ApositionX = other.ApositionX;
      }
      if (other.ApositionY != 0F) {
        ApositionY = other.ApositionY;
      }
      if (other.ApositionZ != 0F) {
        ApositionZ = other.ApositionZ;
      }
      if (other.BpositionX != 0F) {
        BpositionX = other.BpositionX;
      }
      if (other.BpositionY != 0F) {
        BpositionY = other.BpositionY;
      }
      if (other.BpositionZ != 0F) {
        BpositionZ = other.BpositionZ;
      }
      if (other.TpositionX != 0F) {
        TpositionX = other.TpositionX;
      }
      if (other.TpositionY != 0F) {
        TpositionY = other.TpositionY;
      }
      if (other.TpositionZ != 0F) {
        TpositionZ = other.TpositionZ;
      }
      if (other.CTpositionX != 0F) {
        CTpositionX = other.CTpositionX;
      }
      if (other.CTpositionY != 0F) {
        CTpositionY = other.CTpositionY;
      }
      if (other.CTpositionZ != 0F) {
        CTpositionZ = other.CTpositionZ;
      }
      if (other.C4APosiX != 0F) {
        C4APosiX = other.C4APosiX;
      }
      if (other.C4APosiY != 0F) {
        C4APosiY = other.C4APosiY;
      }
      if (other.C4APosiZ != 0F) {
        C4APosiZ = other.C4APosiZ;
      }
      if (other.C4ARotaX != 0F) {
        C4ARotaX = other.C4ARotaX;
      }
      if (other.C4ARotaY != 0F) {
        C4ARotaY = other.C4ARotaY;
      }
      if (other.C4ARotaZ != 0F) {
        C4ARotaZ = other.C4ARotaZ;
      }
      if (other.C4BPosiX != 0F) {
        C4BPosiX = other.C4BPosiX;
      }
      if (other.C4BPosiY != 0F) {
        C4BPosiY = other.C4BPosiY;
      }
      if (other.C4BPosiZ != 0F) {
        C4BPosiZ = other.C4BPosiZ;
      }
      if (other.C4BRotaX != 0F) {
        C4BRotaX = other.C4BRotaX;
      }
      if (other.C4BRotaY != 0F) {
        C4BRotaY = other.C4BRotaY;
      }
      if (other.C4BRotaZ != 0F) {
        C4BRotaZ = other.C4BRotaZ;
      }
      if (other.HangUpVoice.Length != 0) {
        HangUpVoice = other.HangUpVoice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            RoadAreaConfigPath = input.ReadString();
            break;
          }
          case 34: {
            Desc = input.ReadString();
            break;
          }
          case 42: {
            LevelMapBg = input.ReadString();
            break;
          }
          case 50: {
            LevelMapSm = input.ReadString();
            break;
          }
          case 61: {
            MapRotation = input.ReadFloat();
            break;
          }
          case 69: {
            CenterX = input.ReadFloat();
            break;
          }
          case 77: {
            CenterY = input.ReadFloat();
            break;
          }
          case 85: {
            CenterZ = input.ReadFloat();
            break;
          }
          case 93: {
            MapSizeX = input.ReadFloat();
            break;
          }
          case 101: {
            MapSizeY = input.ReadFloat();
            break;
          }
          case 109: {
            MapScale = input.ReadFloat();
            break;
          }
          case 117: {
            ApositionX = input.ReadFloat();
            break;
          }
          case 125: {
            ApositionY = input.ReadFloat();
            break;
          }
          case 133: {
            ApositionZ = input.ReadFloat();
            break;
          }
          case 141: {
            BpositionX = input.ReadFloat();
            break;
          }
          case 149: {
            BpositionY = input.ReadFloat();
            break;
          }
          case 157: {
            BpositionZ = input.ReadFloat();
            break;
          }
          case 165: {
            TpositionX = input.ReadFloat();
            break;
          }
          case 173: {
            TpositionY = input.ReadFloat();
            break;
          }
          case 181: {
            TpositionZ = input.ReadFloat();
            break;
          }
          case 189: {
            CTpositionX = input.ReadFloat();
            break;
          }
          case 197: {
            CTpositionY = input.ReadFloat();
            break;
          }
          case 205: {
            CTpositionZ = input.ReadFloat();
            break;
          }
          case 213: {
            C4APosiX = input.ReadFloat();
            break;
          }
          case 221: {
            C4APosiY = input.ReadFloat();
            break;
          }
          case 229: {
            C4APosiZ = input.ReadFloat();
            break;
          }
          case 237: {
            C4ARotaX = input.ReadFloat();
            break;
          }
          case 245: {
            C4ARotaY = input.ReadFloat();
            break;
          }
          case 253: {
            C4ARotaZ = input.ReadFloat();
            break;
          }
          case 261: {
            C4BPosiX = input.ReadFloat();
            break;
          }
          case 269: {
            C4BPosiY = input.ReadFloat();
            break;
          }
          case 277: {
            C4BPosiZ = input.ReadFloat();
            break;
          }
          case 285: {
            C4BRotaX = input.ReadFloat();
            break;
          }
          case 293: {
            C4BRotaY = input.ReadFloat();
            break;
          }
          case 301: {
            C4BRotaZ = input.ReadFloat();
            break;
          }
          case 306: {
            HangUpVoice = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneConfig_Array : pb::IMessage<SceneConfig_Array> {
    private static readonly pb::MessageParser<SceneConfig_Array> _parser = new pb::MessageParser<SceneConfig_Array>(() => new SceneConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansSceneconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneConfig_Array(SceneConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneConfig_Array Clone() {
      return new SceneConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.SceneConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.SceneConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.SceneConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.SceneConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.SceneConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
