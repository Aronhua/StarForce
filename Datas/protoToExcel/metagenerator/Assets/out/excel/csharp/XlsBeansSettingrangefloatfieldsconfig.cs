// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_settingrangefloatfieldsconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_settingrangefloatfieldsconfig.proto</summary>
  public static partial class XlsBeansSettingrangefloatfieldsconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_settingrangefloatfieldsconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansSettingrangefloatfieldsconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci14bHNfYmVhbnNfc2V0dGluZ3JhbmdlZmxvYXRmaWVsZHNjb25maWcucHJv",
            "dG8SCkQxMS5QYmVhbnMimwIKHVNldHRpbmdSYW5nZUZsb2F0RmllbGRzQ29u",
            "ZmlnEgoKAmlkGAEgASgNEhEKCWZpZWxkTmFtZRgCIAEoCRIQCghpc0NvbW1v",
            "bhgDIAEoDRIQCghzd2l0Y2hJZBgEIAEoDRISCgpzYXZlU2VydmVyGAUgASgN",
            "EhMKC3Nob3dSZWxlYXNlGAYgASgIEhgKEGZpZWxkRGlzcGxheU5hbWUYByAB",
            "KAkSEwoLdGlwc0NvbnRlbnQYCCABKAkSEQoJZmllbGRUeXBlGAkgASgNEgwK",
            "BHN0ZXAYCiABKAISFAoMZGVmYXVsdFZhbHVlGAsgAygCEgsKA21pbhgMIAEo",
            "AhILCgNtYXgYDSABKAISDgoGZm9ybWF0GA4gASgNIl8KI1NldHRpbmdSYW5n",
            "ZUZsb2F0RmllbGRzQ29uZmlnX0FycmF5EjgKBWl0ZW1zGAEgAygLMikuRDEx",
            "LlBiZWFucy5TZXR0aW5nUmFuZ2VGbG9hdEZpZWxkc0NvbmZpZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.SettingRangeFloatFieldsConfig), global::D11.Pbeans.SettingRangeFloatFieldsConfig.Parser, new[]{ "Id", "FieldName", "IsCommon", "SwitchId", "SaveServer", "ShowRelease", "FieldDisplayName", "TipsContent", "FieldType", "Step", "DefaultValue", "Min", "Max", "Format" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.SettingRangeFloatFieldsConfig_Array), global::D11.Pbeans.SettingRangeFloatFieldsConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SettingRangeFloatFieldsConfig : pb::IMessage<SettingRangeFloatFieldsConfig> {
    private static readonly pb::MessageParser<SettingRangeFloatFieldsConfig> _parser = new pb::MessageParser<SettingRangeFloatFieldsConfig>(() => new SettingRangeFloatFieldsConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SettingRangeFloatFieldsConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansSettingrangefloatfieldsconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingRangeFloatFieldsConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingRangeFloatFieldsConfig(SettingRangeFloatFieldsConfig other) : this() {
      id_ = other.id_;
      fieldName_ = other.fieldName_;
      isCommon_ = other.isCommon_;
      switchId_ = other.switchId_;
      saveServer_ = other.saveServer_;
      showRelease_ = other.showRelease_;
      fieldDisplayName_ = other.fieldDisplayName_;
      tipsContent_ = other.tipsContent_;
      fieldType_ = other.fieldType_;
      step_ = other.step_;
      defaultValue_ = other.defaultValue_.Clone();
      min_ = other.min_;
      max_ = other.max_;
      format_ = other.format_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingRangeFloatFieldsConfig Clone() {
      return new SettingRangeFloatFieldsConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "fieldName" field.</summary>
    public const int FieldNameFieldNumber = 2;
    private string fieldName_ = "";
    /// <summary>
    /// 字段名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FieldName {
      get { return fieldName_; }
      set {
        fieldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isCommon" field.</summary>
    public const int IsCommonFieldNumber = 3;
    private uint isCommon_;
    /// <summary>
    /// 是否公共的（不区分模式） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsCommon {
      get { return isCommon_; }
      set {
        isCommon_ = value;
      }
    }

    /// <summary>Field number for the "switchId" field.</summary>
    public const int SwitchIdFieldNumber = 4;
    private uint switchId_;
    /// <summary>
    /// 开关字段id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SwitchId {
      get { return switchId_; }
      set {
        switchId_ = value;
      }
    }

    /// <summary>Field number for the "saveServer" field.</summary>
    public const int SaveServerFieldNumber = 5;
    private uint saveServer_;
    /// <summary>
    /// 是否传服务器 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SaveServer {
      get { return saveServer_; }
      set {
        saveServer_ = value;
      }
    }

    /// <summary>Field number for the "showRelease" field.</summary>
    public const int ShowReleaseFieldNumber = 6;
    private bool showRelease_;
    /// <summary>
    /// release显示 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowRelease {
      get { return showRelease_; }
      set {
        showRelease_ = value;
      }
    }

    /// <summary>Field number for the "fieldDisplayName" field.</summary>
    public const int FieldDisplayNameFieldNumber = 7;
    private string fieldDisplayName_ = "";
    /// <summary>
    /// 字段显示名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FieldDisplayName {
      get { return fieldDisplayName_; }
      set {
        fieldDisplayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tipsContent" field.</summary>
    public const int TipsContentFieldNumber = 8;
    private string tipsContent_ = "";
    /// <summary>
    /// 提示弹框内容 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TipsContent {
      get { return tipsContent_; }
      set {
        tipsContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fieldType" field.</summary>
    public const int FieldTypeFieldNumber = 9;
    private uint fieldType_;
    /// <summary>
    /// 字段类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FieldType {
      get { return fieldType_; }
      set {
        fieldType_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 10;
    private float step_;
    /// <summary>
    /// 步长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    /// <summary>Field number for the "defaultValue" field.</summary>
    public const int DefaultValueFieldNumber = 11;
    private static readonly pb::FieldCodec<float> _repeated_defaultValue_codec
        = pb::FieldCodec.ForFloat(90);
    private readonly pbc::RepeatedField<float> defaultValue_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 默认值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> DefaultValue {
      get { return defaultValue_; }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 12;
    private float min_;
    /// <summary>
    /// 最小值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 13;
    private float max_;
    /// <summary>
    /// 最大值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 14;
    private uint format_;
    /// <summary>
    /// 显示格式(小数几位 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SettingRangeFloatFieldsConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SettingRangeFloatFieldsConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FieldName != other.FieldName) return false;
      if (IsCommon != other.IsCommon) return false;
      if (SwitchId != other.SwitchId) return false;
      if (SaveServer != other.SaveServer) return false;
      if (ShowRelease != other.ShowRelease) return false;
      if (FieldDisplayName != other.FieldDisplayName) return false;
      if (TipsContent != other.TipsContent) return false;
      if (FieldType != other.FieldType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Step, other.Step)) return false;
      if(!defaultValue_.Equals(other.defaultValue_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Min, other.Min)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Max, other.Max)) return false;
      if (Format != other.Format) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (FieldName.Length != 0) hash ^= FieldName.GetHashCode();
      if (IsCommon != 0) hash ^= IsCommon.GetHashCode();
      if (SwitchId != 0) hash ^= SwitchId.GetHashCode();
      if (SaveServer != 0) hash ^= SaveServer.GetHashCode();
      if (ShowRelease != false) hash ^= ShowRelease.GetHashCode();
      if (FieldDisplayName.Length != 0) hash ^= FieldDisplayName.GetHashCode();
      if (TipsContent.Length != 0) hash ^= TipsContent.GetHashCode();
      if (FieldType != 0) hash ^= FieldType.GetHashCode();
      if (Step != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Step);
      hash ^= defaultValue_.GetHashCode();
      if (Min != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Min);
      if (Max != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Max);
      if (Format != 0) hash ^= Format.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (FieldName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FieldName);
      }
      if (IsCommon != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(IsCommon);
      }
      if (SwitchId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SwitchId);
      }
      if (SaveServer != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SaveServer);
      }
      if (ShowRelease != false) {
        output.WriteRawTag(48);
        output.WriteBool(ShowRelease);
      }
      if (FieldDisplayName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FieldDisplayName);
      }
      if (TipsContent.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TipsContent);
      }
      if (FieldType != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(FieldType);
      }
      if (Step != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Step);
      }
      defaultValue_.WriteTo(output, _repeated_defaultValue_codec);
      if (Min != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Min);
      }
      if (Max != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(Max);
      }
      if (Format != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Format);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (FieldName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldName);
      }
      if (IsCommon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsCommon);
      }
      if (SwitchId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SwitchId);
      }
      if (SaveServer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SaveServer);
      }
      if (ShowRelease != false) {
        size += 1 + 1;
      }
      if (FieldDisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldDisplayName);
      }
      if (TipsContent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TipsContent);
      }
      if (FieldType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FieldType);
      }
      if (Step != 0F) {
        size += 1 + 4;
      }
      size += defaultValue_.CalculateSize(_repeated_defaultValue_codec);
      if (Min != 0F) {
        size += 1 + 4;
      }
      if (Max != 0F) {
        size += 1 + 4;
      }
      if (Format != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Format);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SettingRangeFloatFieldsConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.FieldName.Length != 0) {
        FieldName = other.FieldName;
      }
      if (other.IsCommon != 0) {
        IsCommon = other.IsCommon;
      }
      if (other.SwitchId != 0) {
        SwitchId = other.SwitchId;
      }
      if (other.SaveServer != 0) {
        SaveServer = other.SaveServer;
      }
      if (other.ShowRelease != false) {
        ShowRelease = other.ShowRelease;
      }
      if (other.FieldDisplayName.Length != 0) {
        FieldDisplayName = other.FieldDisplayName;
      }
      if (other.TipsContent.Length != 0) {
        TipsContent = other.TipsContent;
      }
      if (other.FieldType != 0) {
        FieldType = other.FieldType;
      }
      if (other.Step != 0F) {
        Step = other.Step;
      }
      defaultValue_.Add(other.defaultValue_);
      if (other.Min != 0F) {
        Min = other.Min;
      }
      if (other.Max != 0F) {
        Max = other.Max;
      }
      if (other.Format != 0) {
        Format = other.Format;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            FieldName = input.ReadString();
            break;
          }
          case 24: {
            IsCommon = input.ReadUInt32();
            break;
          }
          case 32: {
            SwitchId = input.ReadUInt32();
            break;
          }
          case 40: {
            SaveServer = input.ReadUInt32();
            break;
          }
          case 48: {
            ShowRelease = input.ReadBool();
            break;
          }
          case 58: {
            FieldDisplayName = input.ReadString();
            break;
          }
          case 66: {
            TipsContent = input.ReadString();
            break;
          }
          case 72: {
            FieldType = input.ReadUInt32();
            break;
          }
          case 85: {
            Step = input.ReadFloat();
            break;
          }
          case 90:
          case 93: {
            defaultValue_.AddEntriesFrom(input, _repeated_defaultValue_codec);
            break;
          }
          case 101: {
            Min = input.ReadFloat();
            break;
          }
          case 109: {
            Max = input.ReadFloat();
            break;
          }
          case 112: {
            Format = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SettingRangeFloatFieldsConfig_Array : pb::IMessage<SettingRangeFloatFieldsConfig_Array> {
    private static readonly pb::MessageParser<SettingRangeFloatFieldsConfig_Array> _parser = new pb::MessageParser<SettingRangeFloatFieldsConfig_Array>(() => new SettingRangeFloatFieldsConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SettingRangeFloatFieldsConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansSettingrangefloatfieldsconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingRangeFloatFieldsConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingRangeFloatFieldsConfig_Array(SettingRangeFloatFieldsConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingRangeFloatFieldsConfig_Array Clone() {
      return new SettingRangeFloatFieldsConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.SettingRangeFloatFieldsConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.SettingRangeFloatFieldsConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.SettingRangeFloatFieldsConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.SettingRangeFloatFieldsConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.SettingRangeFloatFieldsConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SettingRangeFloatFieldsConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SettingRangeFloatFieldsConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SettingRangeFloatFieldsConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
