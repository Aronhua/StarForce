// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_skinabilitysuitconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_skinabilitysuitconfig.proto</summary>
  public static partial class XlsBeansSkinabilitysuitconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_skinabilitysuitconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansSkinabilitysuitconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiV4bHNfYmVhbnNfc2tpbmFiaWxpdHlzdWl0Y29uZmlnLnByb3RvEgpEMTEu",
            "UGJlYW5zIpUCChVTa2luQWJpbGl0eVN1aXRDb25maWcSCgoCaWQYASABKA0S",
            "DAoEbmFtZRgCIAEoCRIPCgdxdWFsaXR5GAMgASgNEgwKBGJnSWQYBCABKA0S",
            "EAoIbWVudUJnSWQYBSABKA0SEQoJcGFuZWxCZ0lkGAYgASgNEhcKD3BhbmVs",
            "U2NvcmVDb2xvchgHIAEoCRIhChlwYW5lbEFiaWxpdHlJbmFjdGl2ZUNvbG9y",
            "GAggASgJEiAKGHBhbmVsQWJpbGl0eUFjdGl2ZWRDb2xvchgJIAEoCRJACgp3",
            "ZWFwb25MaXN0GAogAygLMiwuRDExLlBiZWFucy5Ta2luQWJpbGl0eVN1aXRD",
            "b25maWdfd2VhcG9uTGlzdCJGCiBTa2luQWJpbGl0eVN1aXRDb25maWdfd2Vh",
            "cG9uTGlzdBIQCgh3ZWFwb25JRBgBIAEoDRIQCghwb3NpdGlvbhgCIAEoCSJP",
            "ChtTa2luQWJpbGl0eVN1aXRDb25maWdfQXJyYXkSMAoFaXRlbXMYASADKAsy",
            "IS5EMTEuUGJlYW5zLlNraW5BYmlsaXR5U3VpdENvbmZpZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.SkinAbilitySuitConfig), global::D11.Pbeans.SkinAbilitySuitConfig.Parser, new[]{ "Id", "Name", "Quality", "BgId", "MenuBgId", "PanelBgId", "PanelScoreColor", "PanelAbilityInactiveColor", "PanelAbilityActivedColor", "WeaponList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.SkinAbilitySuitConfig_weaponList), global::D11.Pbeans.SkinAbilitySuitConfig_weaponList.Parser, new[]{ "WeaponID", "Position" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.SkinAbilitySuitConfig_Array), global::D11.Pbeans.SkinAbilitySuitConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SkinAbilitySuitConfig : pb::IMessage<SkinAbilitySuitConfig> {
    private static readonly pb::MessageParser<SkinAbilitySuitConfig> _parser = new pb::MessageParser<SkinAbilitySuitConfig>(() => new SkinAbilitySuitConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkinAbilitySuitConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansSkinabilitysuitconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkinAbilitySuitConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkinAbilitySuitConfig(SkinAbilitySuitConfig other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      quality_ = other.quality_;
      bgId_ = other.bgId_;
      menuBgId_ = other.menuBgId_;
      panelBgId_ = other.panelBgId_;
      panelScoreColor_ = other.panelScoreColor_;
      panelAbilityInactiveColor_ = other.panelAbilityInactiveColor_;
      panelAbilityActivedColor_ = other.panelAbilityActivedColor_;
      weaponList_ = other.weaponList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkinAbilitySuitConfig Clone() {
      return new SkinAbilitySuitConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 套装id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 套装名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 3;
    private uint quality_;
    /// <summary>
    /// 稀有度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "bgId" field.</summary>
    public const int BgIdFieldNumber = 4;
    private uint bgId_;
    /// <summary>
    /// 套装图标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BgId {
      get { return bgId_; }
      set {
        bgId_ = value;
      }
    }

    /// <summary>Field number for the "menuBgId" field.</summary>
    public const int MenuBgIdFieldNumber = 5;
    private uint menuBgId_;
    /// <summary>
    /// 菜单选项背景 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MenuBgId {
      get { return menuBgId_; }
      set {
        menuBgId_ = value;
      }
    }

    /// <summary>Field number for the "panelBgId" field.</summary>
    public const int PanelBgIdFieldNumber = 6;
    private uint panelBgId_;
    /// <summary>
    /// 面板背景 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PanelBgId {
      get { return panelBgId_; }
      set {
        panelBgId_ = value;
      }
    }

    /// <summary>Field number for the "panelScoreColor" field.</summary>
    public const int PanelScoreColorFieldNumber = 7;
    private string panelScoreColor_ = "";
    /// <summary>
    /// 面板分数颜色 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PanelScoreColor {
      get { return panelScoreColor_; }
      set {
        panelScoreColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "panelAbilityInactiveColor" field.</summary>
    public const int PanelAbilityInactiveColorFieldNumber = 8;
    private string panelAbilityInactiveColor_ = "";
    /// <summary>
    /// 面板属性未激活颜色 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PanelAbilityInactiveColor {
      get { return panelAbilityInactiveColor_; }
      set {
        panelAbilityInactiveColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "panelAbilityActivedColor" field.</summary>
    public const int PanelAbilityActivedColorFieldNumber = 9;
    private string panelAbilityActivedColor_ = "";
    /// <summary>
    /// 面板属性已激活颜色 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PanelAbilityActivedColor {
      get { return panelAbilityActivedColor_; }
      set {
        panelAbilityActivedColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weaponList" field.</summary>
    public const int WeaponListFieldNumber = 10;
    private static readonly pb::FieldCodec<global::D11.Pbeans.SkinAbilitySuitConfig_weaponList> _repeated_weaponList_codec
        = pb::FieldCodec.ForMessage(82, global::D11.Pbeans.SkinAbilitySuitConfig_weaponList.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.SkinAbilitySuitConfig_weaponList> weaponList_ = new pbc::RepeatedField<global::D11.Pbeans.SkinAbilitySuitConfig_weaponList>();
    /// <summary>
    /// 套装内武器id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.SkinAbilitySuitConfig_weaponList> WeaponList {
      get { return weaponList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkinAbilitySuitConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkinAbilitySuitConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Quality != other.Quality) return false;
      if (BgId != other.BgId) return false;
      if (MenuBgId != other.MenuBgId) return false;
      if (PanelBgId != other.PanelBgId) return false;
      if (PanelScoreColor != other.PanelScoreColor) return false;
      if (PanelAbilityInactiveColor != other.PanelAbilityInactiveColor) return false;
      if (PanelAbilityActivedColor != other.PanelAbilityActivedColor) return false;
      if(!weaponList_.Equals(other.weaponList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (BgId != 0) hash ^= BgId.GetHashCode();
      if (MenuBgId != 0) hash ^= MenuBgId.GetHashCode();
      if (PanelBgId != 0) hash ^= PanelBgId.GetHashCode();
      if (PanelScoreColor.Length != 0) hash ^= PanelScoreColor.GetHashCode();
      if (PanelAbilityInactiveColor.Length != 0) hash ^= PanelAbilityInactiveColor.GetHashCode();
      if (PanelAbilityActivedColor.Length != 0) hash ^= PanelAbilityActivedColor.GetHashCode();
      hash ^= weaponList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Quality != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Quality);
      }
      if (BgId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BgId);
      }
      if (MenuBgId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MenuBgId);
      }
      if (PanelBgId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PanelBgId);
      }
      if (PanelScoreColor.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PanelScoreColor);
      }
      if (PanelAbilityInactiveColor.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PanelAbilityInactiveColor);
      }
      if (PanelAbilityActivedColor.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PanelAbilityActivedColor);
      }
      weaponList_.WriteTo(output, _repeated_weaponList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quality);
      }
      if (BgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BgId);
      }
      if (MenuBgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MenuBgId);
      }
      if (PanelBgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PanelBgId);
      }
      if (PanelScoreColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PanelScoreColor);
      }
      if (PanelAbilityInactiveColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PanelAbilityInactiveColor);
      }
      if (PanelAbilityActivedColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PanelAbilityActivedColor);
      }
      size += weaponList_.CalculateSize(_repeated_weaponList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkinAbilitySuitConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.BgId != 0) {
        BgId = other.BgId;
      }
      if (other.MenuBgId != 0) {
        MenuBgId = other.MenuBgId;
      }
      if (other.PanelBgId != 0) {
        PanelBgId = other.PanelBgId;
      }
      if (other.PanelScoreColor.Length != 0) {
        PanelScoreColor = other.PanelScoreColor;
      }
      if (other.PanelAbilityInactiveColor.Length != 0) {
        PanelAbilityInactiveColor = other.PanelAbilityInactiveColor;
      }
      if (other.PanelAbilityActivedColor.Length != 0) {
        PanelAbilityActivedColor = other.PanelAbilityActivedColor;
      }
      weaponList_.Add(other.weaponList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Quality = input.ReadUInt32();
            break;
          }
          case 32: {
            BgId = input.ReadUInt32();
            break;
          }
          case 40: {
            MenuBgId = input.ReadUInt32();
            break;
          }
          case 48: {
            PanelBgId = input.ReadUInt32();
            break;
          }
          case 58: {
            PanelScoreColor = input.ReadString();
            break;
          }
          case 66: {
            PanelAbilityInactiveColor = input.ReadString();
            break;
          }
          case 74: {
            PanelAbilityActivedColor = input.ReadString();
            break;
          }
          case 82: {
            weaponList_.AddEntriesFrom(input, _repeated_weaponList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkinAbilitySuitConfig_weaponList : pb::IMessage<SkinAbilitySuitConfig_weaponList> {
    private static readonly pb::MessageParser<SkinAbilitySuitConfig_weaponList> _parser = new pb::MessageParser<SkinAbilitySuitConfig_weaponList>(() => new SkinAbilitySuitConfig_weaponList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkinAbilitySuitConfig_weaponList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansSkinabilitysuitconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkinAbilitySuitConfig_weaponList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkinAbilitySuitConfig_weaponList(SkinAbilitySuitConfig_weaponList other) : this() {
      weaponID_ = other.weaponID_;
      position_ = other.position_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkinAbilitySuitConfig_weaponList Clone() {
      return new SkinAbilitySuitConfig_weaponList(this);
    }

    /// <summary>Field number for the "weaponID" field.</summary>
    public const int WeaponIDFieldNumber = 1;
    private uint weaponID_;
    /// <summary>
    /// 套装内武器id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeaponID {
      get { return weaponID_; }
      set {
        weaponID_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private string position_ = "";
    /// <summary>
    /// 套装内武器位置 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Position {
      get { return position_; }
      set {
        position_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkinAbilitySuitConfig_weaponList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkinAbilitySuitConfig_weaponList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WeaponID != other.WeaponID) return false;
      if (Position != other.Position) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WeaponID != 0) hash ^= WeaponID.GetHashCode();
      if (Position.Length != 0) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WeaponID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(WeaponID);
      }
      if (Position.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WeaponID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeaponID);
      }
      if (Position.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkinAbilitySuitConfig_weaponList other) {
      if (other == null) {
        return;
      }
      if (other.WeaponID != 0) {
        WeaponID = other.WeaponID;
      }
      if (other.Position.Length != 0) {
        Position = other.Position;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WeaponID = input.ReadUInt32();
            break;
          }
          case 18: {
            Position = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkinAbilitySuitConfig_Array : pb::IMessage<SkinAbilitySuitConfig_Array> {
    private static readonly pb::MessageParser<SkinAbilitySuitConfig_Array> _parser = new pb::MessageParser<SkinAbilitySuitConfig_Array>(() => new SkinAbilitySuitConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkinAbilitySuitConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansSkinabilitysuitconfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkinAbilitySuitConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkinAbilitySuitConfig_Array(SkinAbilitySuitConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkinAbilitySuitConfig_Array Clone() {
      return new SkinAbilitySuitConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.SkinAbilitySuitConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.SkinAbilitySuitConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.SkinAbilitySuitConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.SkinAbilitySuitConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.SkinAbilitySuitConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkinAbilitySuitConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkinAbilitySuitConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkinAbilitySuitConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
