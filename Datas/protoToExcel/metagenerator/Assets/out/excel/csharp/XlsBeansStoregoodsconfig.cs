// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_storegoodsconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_storegoodsconfig.proto</summary>
  public static partial class XlsBeansStoregoodsconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_storegoodsconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansStoregoodsconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiB4bHNfYmVhbnNfc3RvcmVnb29kc2NvbmZpZy5wcm90bxIKRDExLlBiZWFu",
            "cyKBBAoQU3RvcmVHb29kc0NvbmZpZxIKCgJpZBgBIAEoDRIOCgZpdGVtSWQY",
            "AiABKA0SDwoHZ3JvdXBJZBgDIAEoDRIRCglzdG9yZVR5cGUYBCABKA0SFQoN",
            "ZGVzY3JpcHRpb25JRBgFIAEoDRINCgVsYWJlbBgGIAEoDRIQCghkaXNjb3Vu",
            "dBgHIAEoDRIvCgRjb3N0GAggAygLMiEuRDExLlBiZWFucy5TdG9yZUdvb2Rz",
            "Q29uZmlnX2Nvc3QSFAoMbGltaXRCdXlUeXBlGAkgASgJEhUKDWxpbWl0QnV5",
            "Q291bnQYCiABKA0SEwoLbWF4QnV5Q291bnQYCyABKA0SEAoIcXVhbnRpdHkY",
            "DCABKA0SEQoJc3RhcnRUaW1lGA0gASgDEg8KB2VuZFRpbWUYDiABKAMSEAoI",
            "cHJpb3JpdHkYDyABKA0SDgoGaXNTZWxsGBAgASgIEhYKDmlzU2hvd1JlZFBv",
            "aW50GBEgASgIEjEKBWxpbWl0GBIgAygLMiIuRDExLlBiZWFucy5TdG9yZUdv",
            "b2RzQ29uZmlnX2xpbWl0Eg4KBmV4cGlyZRgTIAEoDRIQCghsb2NrVGltZRgU",
            "IAEoDRIXCg9idWJibGVTdGFydFRpbWUYFSABKAMSFQoNYnViYmxlRW5kVGlt",
            "ZRgWIAEoAxINCgVib3hCZxgXIAEoDSIyChVTdG9yZUdvb2RzQ29uZmlnX2Nv",
            "c3QSCgoCaWQYASABKA0SDQoFdmFsdWUYAiABKA0iMwoWU3RvcmVHb29kc0Nv",
            "bmZpZ19saW1pdBIKCgJpZBgBIAEoDRINCgV2YWx1ZRgCIAEoDSJFChZTdG9y",
            "ZUdvb2RzQ29uZmlnX0FycmF5EisKBWl0ZW1zGAEgAygLMhwuRDExLlBiZWFu",
            "cy5TdG9yZUdvb2RzQ29uZmlnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.StoreGoodsConfig), global::D11.Pbeans.StoreGoodsConfig.Parser, new[]{ "Id", "ItemId", "GroupId", "StoreType", "DescriptionID", "Label", "Discount", "Cost", "LimitBuyType", "LimitBuyCount", "MaxBuyCount", "Quantity", "StartTime", "EndTime", "Priority", "IsSell", "IsShowRedPoint", "Limit", "Expire", "LockTime", "BubbleStartTime", "BubbleEndTime", "BoxBg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.StoreGoodsConfig_cost), global::D11.Pbeans.StoreGoodsConfig_cost.Parser, new[]{ "Id", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.StoreGoodsConfig_limit), global::D11.Pbeans.StoreGoodsConfig_limit.Parser, new[]{ "Id", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.StoreGoodsConfig_Array), global::D11.Pbeans.StoreGoodsConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class StoreGoodsConfig : pb::IMessage<StoreGoodsConfig> {
    private static readonly pb::MessageParser<StoreGoodsConfig> _parser = new pb::MessageParser<StoreGoodsConfig>(() => new StoreGoodsConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoreGoodsConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansStoregoodsconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreGoodsConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreGoodsConfig(StoreGoodsConfig other) : this() {
      id_ = other.id_;
      itemId_ = other.itemId_;
      groupId_ = other.groupId_;
      storeType_ = other.storeType_;
      descriptionID_ = other.descriptionID_;
      label_ = other.label_;
      discount_ = other.discount_;
      cost_ = other.cost_.Clone();
      limitBuyType_ = other.limitBuyType_;
      limitBuyCount_ = other.limitBuyCount_;
      maxBuyCount_ = other.maxBuyCount_;
      quantity_ = other.quantity_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      priority_ = other.priority_;
      isSell_ = other.isSell_;
      isShowRedPoint_ = other.isShowRedPoint_;
      limit_ = other.limit_.Clone();
      expire_ = other.expire_;
      lockTime_ = other.lockTime_;
      bubbleStartTime_ = other.bubbleStartTime_;
      bubbleEndTime_ = other.bubbleEndTime_;
      boxBg_ = other.boxBg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreGoodsConfig Clone() {
      return new StoreGoodsConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 商品ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private uint itemId_;
    /// <summary>
    /// 关联物品ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 3;
    private uint groupId_;
    /// <summary>
    /// 商品类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "storeType" field.</summary>
    public const int StoreTypeFieldNumber = 4;
    private uint storeType_;
    /// <summary>
    /// 商店类型（服务器用于校验购买是否合法） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StoreType {
      get { return storeType_; }
      set {
        storeType_ = value;
      }
    }

    /// <summary>Field number for the "descriptionID" field.</summary>
    public const int DescriptionIDFieldNumber = 5;
    private uint descriptionID_;
    /// <summary>
    /// 非贩售显示 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DescriptionID {
      get { return descriptionID_; }
      set {
        descriptionID_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 6;
    private uint label_;
    /// <summary>
    /// 标签 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }

    /// <summary>Field number for the "discount" field.</summary>
    public const int DiscountFieldNumber = 7;
    private uint discount_;
    /// <summary>
    /// 折扣(0-100) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Discount {
      get { return discount_; }
      set {
        discount_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 8;
    private static readonly pb::FieldCodec<global::D11.Pbeans.StoreGoodsConfig_cost> _repeated_cost_codec
        = pb::FieldCodec.ForMessage(66, global::D11.Pbeans.StoreGoodsConfig_cost.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.StoreGoodsConfig_cost> cost_ = new pbc::RepeatedField<global::D11.Pbeans.StoreGoodsConfig_cost>();
    /// <summary>
    /// 消耗id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.StoreGoodsConfig_cost> Cost {
      get { return cost_; }
    }

    /// <summary>Field number for the "limitBuyType" field.</summary>
    public const int LimitBuyTypeFieldNumber = 9;
    private string limitBuyType_ = "";
    /// <summary>
    /// 限购类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LimitBuyType {
      get { return limitBuyType_; }
      set {
        limitBuyType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limitBuyCount" field.</summary>
    public const int LimitBuyCountFieldNumber = 10;
    private uint limitBuyCount_;
    /// <summary>
    /// 限购数量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LimitBuyCount {
      get { return limitBuyCount_; }
      set {
        limitBuyCount_ = value;
      }
    }

    /// <summary>Field number for the "maxBuyCount" field.</summary>
    public const int MaxBuyCountFieldNumber = 11;
    private uint maxBuyCount_;
    /// <summary>
    /// 单次购买最大购买数量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxBuyCount {
      get { return maxBuyCount_; }
      set {
        maxBuyCount_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 12;
    private uint quantity_;
    /// <summary>
    /// 单次销售数量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 13;
    private long startTime_;
    /// <summary>
    /// 上架时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 14;
    private long endTime_;
    /// <summary>
    /// 下架时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 15;
    private uint priority_;
    /// <summary>
    /// 排序优先级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "isSell" field.</summary>
    public const int IsSellFieldNumber = 16;
    private bool isSell_;
    /// <summary>
    /// 是否售卖 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSell {
      get { return isSell_; }
      set {
        isSell_ = value;
      }
    }

    /// <summary>Field number for the "isShowRedPoint" field.</summary>
    public const int IsShowRedPointFieldNumber = 17;
    private bool isShowRedPoint_;
    /// <summary>
    /// 是否显示红点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShowRedPoint {
      get { return isShowRedPoint_; }
      set {
        isShowRedPoint_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 18;
    private static readonly pb::FieldCodec<global::D11.Pbeans.StoreGoodsConfig_limit> _repeated_limit_codec
        = pb::FieldCodec.ForMessage(146, global::D11.Pbeans.StoreGoodsConfig_limit.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.StoreGoodsConfig_limit> limit_ = new pbc::RepeatedField<global::D11.Pbeans.StoreGoodsConfig_limit>();
    /// <summary>
    /// 购买限制条件 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.StoreGoodsConfig_limit> Limit {
      get { return limit_; }
    }

    /// <summary>Field number for the "expire" field.</summary>
    public const int ExpireFieldNumber = 19;
    private uint expire_;
    /// <summary>
    /// 有效时间（秒，0无限制） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Expire {
      get { return expire_; }
      set {
        expire_ = value;
      }
    }

    /// <summary>Field number for the "lockTime" field.</summary>
    public const int LockTimeFieldNumber = 20;
    private uint lockTime_;
    /// <summary>
    /// 交易锁定时间（秒，0无限制） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LockTime {
      get { return lockTime_; }
      set {
        lockTime_ = value;
      }
    }

    /// <summary>Field number for the "bubbleStartTime" field.</summary>
    public const int BubbleStartTimeFieldNumber = 21;
    private long bubbleStartTime_;
    /// <summary>
    /// 气泡开始时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BubbleStartTime {
      get { return bubbleStartTime_; }
      set {
        bubbleStartTime_ = value;
      }
    }

    /// <summary>Field number for the "bubbleEndTime" field.</summary>
    public const int BubbleEndTimeFieldNumber = 22;
    private long bubbleEndTime_;
    /// <summary>
    /// 气泡结束时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BubbleEndTime {
      get { return bubbleEndTime_; }
      set {
        bubbleEndTime_ = value;
      }
    }

    /// <summary>Field number for the "boxBg" field.</summary>
    public const int BoxBgFieldNumber = 23;
    private uint boxBg_;
    /// <summary>
    /// 武器箱背景 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoxBg {
      get { return boxBg_; }
      set {
        boxBg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoreGoodsConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoreGoodsConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ItemId != other.ItemId) return false;
      if (GroupId != other.GroupId) return false;
      if (StoreType != other.StoreType) return false;
      if (DescriptionID != other.DescriptionID) return false;
      if (Label != other.Label) return false;
      if (Discount != other.Discount) return false;
      if(!cost_.Equals(other.cost_)) return false;
      if (LimitBuyType != other.LimitBuyType) return false;
      if (LimitBuyCount != other.LimitBuyCount) return false;
      if (MaxBuyCount != other.MaxBuyCount) return false;
      if (Quantity != other.Quantity) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (Priority != other.Priority) return false;
      if (IsSell != other.IsSell) return false;
      if (IsShowRedPoint != other.IsShowRedPoint) return false;
      if(!limit_.Equals(other.limit_)) return false;
      if (Expire != other.Expire) return false;
      if (LockTime != other.LockTime) return false;
      if (BubbleStartTime != other.BubbleStartTime) return false;
      if (BubbleEndTime != other.BubbleEndTime) return false;
      if (BoxBg != other.BoxBg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (StoreType != 0) hash ^= StoreType.GetHashCode();
      if (DescriptionID != 0) hash ^= DescriptionID.GetHashCode();
      if (Label != 0) hash ^= Label.GetHashCode();
      if (Discount != 0) hash ^= Discount.GetHashCode();
      hash ^= cost_.GetHashCode();
      if (LimitBuyType.Length != 0) hash ^= LimitBuyType.GetHashCode();
      if (LimitBuyCount != 0) hash ^= LimitBuyCount.GetHashCode();
      if (MaxBuyCount != 0) hash ^= MaxBuyCount.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (IsSell != false) hash ^= IsSell.GetHashCode();
      if (IsShowRedPoint != false) hash ^= IsShowRedPoint.GetHashCode();
      hash ^= limit_.GetHashCode();
      if (Expire != 0) hash ^= Expire.GetHashCode();
      if (LockTime != 0) hash ^= LockTime.GetHashCode();
      if (BubbleStartTime != 0L) hash ^= BubbleStartTime.GetHashCode();
      if (BubbleEndTime != 0L) hash ^= BubbleEndTime.GetHashCode();
      if (BoxBg != 0) hash ^= BoxBg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemId);
      }
      if (GroupId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GroupId);
      }
      if (StoreType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(StoreType);
      }
      if (DescriptionID != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DescriptionID);
      }
      if (Label != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Label);
      }
      if (Discount != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Discount);
      }
      cost_.WriteTo(output, _repeated_cost_codec);
      if (LimitBuyType.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(LimitBuyType);
      }
      if (LimitBuyCount != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(LimitBuyCount);
      }
      if (MaxBuyCount != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(MaxBuyCount);
      }
      if (Quantity != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Quantity);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(EndTime);
      }
      if (Priority != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(Priority);
      }
      if (IsSell != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsSell);
      }
      if (IsShowRedPoint != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsShowRedPoint);
      }
      limit_.WriteTo(output, _repeated_limit_codec);
      if (Expire != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Expire);
      }
      if (LockTime != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(LockTime);
      }
      if (BubbleStartTime != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(BubbleStartTime);
      }
      if (BubbleEndTime != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(BubbleEndTime);
      }
      if (BoxBg != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(BoxBg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (StoreType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StoreType);
      }
      if (DescriptionID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DescriptionID);
      }
      if (Label != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Label);
      }
      if (Discount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Discount);
      }
      size += cost_.CalculateSize(_repeated_cost_codec);
      if (LimitBuyType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LimitBuyType);
      }
      if (LimitBuyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LimitBuyCount);
      }
      if (MaxBuyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxBuyCount);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quantity);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (IsSell != false) {
        size += 2 + 1;
      }
      if (IsShowRedPoint != false) {
        size += 2 + 1;
      }
      size += limit_.CalculateSize(_repeated_limit_codec);
      if (Expire != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Expire);
      }
      if (LockTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LockTime);
      }
      if (BubbleStartTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BubbleStartTime);
      }
      if (BubbleEndTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BubbleEndTime);
      }
      if (BoxBg != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BoxBg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoreGoodsConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.StoreType != 0) {
        StoreType = other.StoreType;
      }
      if (other.DescriptionID != 0) {
        DescriptionID = other.DescriptionID;
      }
      if (other.Label != 0) {
        Label = other.Label;
      }
      if (other.Discount != 0) {
        Discount = other.Discount;
      }
      cost_.Add(other.cost_);
      if (other.LimitBuyType.Length != 0) {
        LimitBuyType = other.LimitBuyType;
      }
      if (other.LimitBuyCount != 0) {
        LimitBuyCount = other.LimitBuyCount;
      }
      if (other.MaxBuyCount != 0) {
        MaxBuyCount = other.MaxBuyCount;
      }
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.IsSell != false) {
        IsSell = other.IsSell;
      }
      if (other.IsShowRedPoint != false) {
        IsShowRedPoint = other.IsShowRedPoint;
      }
      limit_.Add(other.limit_);
      if (other.Expire != 0) {
        Expire = other.Expire;
      }
      if (other.LockTime != 0) {
        LockTime = other.LockTime;
      }
      if (other.BubbleStartTime != 0L) {
        BubbleStartTime = other.BubbleStartTime;
      }
      if (other.BubbleEndTime != 0L) {
        BubbleEndTime = other.BubbleEndTime;
      }
      if (other.BoxBg != 0) {
        BoxBg = other.BoxBg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 24: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 32: {
            StoreType = input.ReadUInt32();
            break;
          }
          case 40: {
            DescriptionID = input.ReadUInt32();
            break;
          }
          case 48: {
            Label = input.ReadUInt32();
            break;
          }
          case 56: {
            Discount = input.ReadUInt32();
            break;
          }
          case 66: {
            cost_.AddEntriesFrom(input, _repeated_cost_codec);
            break;
          }
          case 74: {
            LimitBuyType = input.ReadString();
            break;
          }
          case 80: {
            LimitBuyCount = input.ReadUInt32();
            break;
          }
          case 88: {
            MaxBuyCount = input.ReadUInt32();
            break;
          }
          case 96: {
            Quantity = input.ReadUInt32();
            break;
          }
          case 104: {
            StartTime = input.ReadInt64();
            break;
          }
          case 112: {
            EndTime = input.ReadInt64();
            break;
          }
          case 120: {
            Priority = input.ReadUInt32();
            break;
          }
          case 128: {
            IsSell = input.ReadBool();
            break;
          }
          case 136: {
            IsShowRedPoint = input.ReadBool();
            break;
          }
          case 146: {
            limit_.AddEntriesFrom(input, _repeated_limit_codec);
            break;
          }
          case 152: {
            Expire = input.ReadUInt32();
            break;
          }
          case 160: {
            LockTime = input.ReadUInt32();
            break;
          }
          case 168: {
            BubbleStartTime = input.ReadInt64();
            break;
          }
          case 176: {
            BubbleEndTime = input.ReadInt64();
            break;
          }
          case 184: {
            BoxBg = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StoreGoodsConfig_cost : pb::IMessage<StoreGoodsConfig_cost> {
    private static readonly pb::MessageParser<StoreGoodsConfig_cost> _parser = new pb::MessageParser<StoreGoodsConfig_cost>(() => new StoreGoodsConfig_cost());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoreGoodsConfig_cost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansStoregoodsconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreGoodsConfig_cost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreGoodsConfig_cost(StoreGoodsConfig_cost other) : this() {
      id_ = other.id_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreGoodsConfig_cost Clone() {
      return new StoreGoodsConfig_cost(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 消耗id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private uint value_;
    /// <summary>
    /// 消耗数量（折后价） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoreGoodsConfig_cost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoreGoodsConfig_cost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoreGoodsConfig_cost other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StoreGoodsConfig_limit : pb::IMessage<StoreGoodsConfig_limit> {
    private static readonly pb::MessageParser<StoreGoodsConfig_limit> _parser = new pb::MessageParser<StoreGoodsConfig_limit>(() => new StoreGoodsConfig_limit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoreGoodsConfig_limit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansStoregoodsconfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreGoodsConfig_limit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreGoodsConfig_limit(StoreGoodsConfig_limit other) : this() {
      id_ = other.id_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreGoodsConfig_limit Clone() {
      return new StoreGoodsConfig_limit(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 购买限制条件 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private uint value_;
    /// <summary>
    /// 条件对应值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoreGoodsConfig_limit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoreGoodsConfig_limit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoreGoodsConfig_limit other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StoreGoodsConfig_Array : pb::IMessage<StoreGoodsConfig_Array> {
    private static readonly pb::MessageParser<StoreGoodsConfig_Array> _parser = new pb::MessageParser<StoreGoodsConfig_Array>(() => new StoreGoodsConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoreGoodsConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansStoregoodsconfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreGoodsConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreGoodsConfig_Array(StoreGoodsConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StoreGoodsConfig_Array Clone() {
      return new StoreGoodsConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.StoreGoodsConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.StoreGoodsConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.StoreGoodsConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.StoreGoodsConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.StoreGoodsConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StoreGoodsConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StoreGoodsConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StoreGoodsConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
