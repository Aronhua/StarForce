// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_trapconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_trapconfig.proto</summary>
  public static partial class XlsBeansTrapconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_trapconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansTrapconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chp4bHNfYmVhbnNfdHJhcGNvbmZpZy5wcm90bxIKRDExLlBiZWFucyKfAgoK",
            "VHJhcENvbmZpZxIKCgJpZBgBIAEoDRIQCghlZmZlY3RJZBgCIAEoDRIPCgds",
            "b2dpY0lkGAMgASgNEhEKCWF1dG9tYXRpYxgEIAEoCBITCgt0cmlnZ2VyVGlt",
            "ZRgFIAEoBRIQCghpbnRlcnZhbBgGIAEoAhIQCghjb29sRG93bhgHIAEoAhIO",
            "CgZkYW1hZ2UYCCABKAISFgoOZGFtYWdlSW50ZXJ2YWwYCSABKAISFAoMZnJp",
            "ZW5kRGFtYWdlGAogASgIEhMKC2VuZW15RGFtYWdlGAsgASgIEhUKDW1vbnN0",
            "ZXJEYW1hZ2UYDCABKAgSEwoLd2FybmluZ1RpbWUYDSABKAISFwoPd2Fybmlu",
            "Z0VmZmVjdElkGA4gASgNIjkKEFRyYXBDb25maWdfQXJyYXkSJQoFaXRlbXMY",
            "ASADKAsyFi5EMTEuUGJlYW5zLlRyYXBDb25maWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.TrapConfig), global::D11.Pbeans.TrapConfig.Parser, new[]{ "Id", "EffectId", "LogicId", "Automatic", "TriggerTime", "Interval", "CoolDown", "Damage", "DamageInterval", "FriendDamage", "EnemyDamage", "MonsterDamage", "WarningTime", "WarningEffectId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.TrapConfig_Array), global::D11.Pbeans.TrapConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TrapConfig : pb::IMessage<TrapConfig> {
    private static readonly pb::MessageParser<TrapConfig> _parser = new pb::MessageParser<TrapConfig>(() => new TrapConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrapConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansTrapconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapConfig(TrapConfig other) : this() {
      id_ = other.id_;
      effectId_ = other.effectId_;
      logicId_ = other.logicId_;
      automatic_ = other.automatic_;
      triggerTime_ = other.triggerTime_;
      interval_ = other.interval_;
      coolDown_ = other.coolDown_;
      damage_ = other.damage_;
      damageInterval_ = other.damageInterval_;
      friendDamage_ = other.friendDamage_;
      enemyDamage_ = other.enemyDamage_;
      monsterDamage_ = other.monsterDamage_;
      warningTime_ = other.warningTime_;
      warningEffectId_ = other.warningEffectId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapConfig Clone() {
      return new TrapConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 陷阱编号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "effectId" field.</summary>
    public const int EffectIdFieldNumber = 2;
    private uint effectId_;
    /// <summary>
    /// 效果ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EffectId {
      get { return effectId_; }
      set {
        effectId_ = value;
      }
    }

    /// <summary>Field number for the "logicId" field.</summary>
    public const int LogicIdFieldNumber = 3;
    private uint logicId_;
    /// <summary>
    /// 逻辑ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LogicId {
      get { return logicId_; }
      set {
        logicId_ = value;
      }
    }

    /// <summary>Field number for the "automatic" field.</summary>
    public const int AutomaticFieldNumber = 4;
    private bool automatic_;
    /// <summary>
    /// 自触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Automatic {
      get { return automatic_; }
      set {
        automatic_ = value;
      }
    }

    /// <summary>Field number for the "triggerTime" field.</summary>
    public const int TriggerTimeFieldNumber = 5;
    private int triggerTime_;
    /// <summary>
    /// 可触发次数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TriggerTime {
      get { return triggerTime_; }
      set {
        triggerTime_ = value;
      }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 6;
    private float interval_;
    /// <summary>
    /// 持续时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "coolDown" field.</summary>
    public const int CoolDownFieldNumber = 7;
    private float coolDown_;
    /// <summary>
    /// 冷却时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CoolDown {
      get { return coolDown_; }
      set {
        coolDown_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 8;
    private float damage_;
    /// <summary>
    /// 伤害值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "damageInterval" field.</summary>
    public const int DamageIntervalFieldNumber = 9;
    private float damageInterval_;
    /// <summary>
    /// 伤害间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DamageInterval {
      get { return damageInterval_; }
      set {
        damageInterval_ = value;
      }
    }

    /// <summary>Field number for the "friendDamage" field.</summary>
    public const int FriendDamageFieldNumber = 10;
    private bool friendDamage_;
    /// <summary>
    /// 友军伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FriendDamage {
      get { return friendDamage_; }
      set {
        friendDamage_ = value;
      }
    }

    /// <summary>Field number for the "enemyDamage" field.</summary>
    public const int EnemyDamageFieldNumber = 11;
    private bool enemyDamage_;
    /// <summary>
    /// 敌军伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnemyDamage {
      get { return enemyDamage_; }
      set {
        enemyDamage_ = value;
      }
    }

    /// <summary>Field number for the "monsterDamage" field.</summary>
    public const int MonsterDamageFieldNumber = 12;
    private bool monsterDamage_;
    /// <summary>
    /// 怪物伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MonsterDamage {
      get { return monsterDamage_; }
      set {
        monsterDamage_ = value;
      }
    }

    /// <summary>Field number for the "warningTime" field.</summary>
    public const int WarningTimeFieldNumber = 13;
    private float warningTime_;
    /// <summary>
    /// 预警时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WarningTime {
      get { return warningTime_; }
      set {
        warningTime_ = value;
      }
    }

    /// <summary>Field number for the "warningEffectId" field.</summary>
    public const int WarningEffectIdFieldNumber = 14;
    private uint warningEffectId_;
    /// <summary>
    /// 预警特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WarningEffectId {
      get { return warningEffectId_; }
      set {
        warningEffectId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrapConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrapConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (EffectId != other.EffectId) return false;
      if (LogicId != other.LogicId) return false;
      if (Automatic != other.Automatic) return false;
      if (TriggerTime != other.TriggerTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Interval, other.Interval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CoolDown, other.CoolDown)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Damage, other.Damage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamageInterval, other.DamageInterval)) return false;
      if (FriendDamage != other.FriendDamage) return false;
      if (EnemyDamage != other.EnemyDamage) return false;
      if (MonsterDamage != other.MonsterDamage) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WarningTime, other.WarningTime)) return false;
      if (WarningEffectId != other.WarningEffectId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (EffectId != 0) hash ^= EffectId.GetHashCode();
      if (LogicId != 0) hash ^= LogicId.GetHashCode();
      if (Automatic != false) hash ^= Automatic.GetHashCode();
      if (TriggerTime != 0) hash ^= TriggerTime.GetHashCode();
      if (Interval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Interval);
      if (CoolDown != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CoolDown);
      if (Damage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Damage);
      if (DamageInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamageInterval);
      if (FriendDamage != false) hash ^= FriendDamage.GetHashCode();
      if (EnemyDamage != false) hash ^= EnemyDamage.GetHashCode();
      if (MonsterDamage != false) hash ^= MonsterDamage.GetHashCode();
      if (WarningTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WarningTime);
      if (WarningEffectId != 0) hash ^= WarningEffectId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (EffectId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(EffectId);
      }
      if (LogicId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LogicId);
      }
      if (Automatic != false) {
        output.WriteRawTag(32);
        output.WriteBool(Automatic);
      }
      if (TriggerTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TriggerTime);
      }
      if (Interval != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Interval);
      }
      if (CoolDown != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(CoolDown);
      }
      if (Damage != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Damage);
      }
      if (DamageInterval != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(DamageInterval);
      }
      if (FriendDamage != false) {
        output.WriteRawTag(80);
        output.WriteBool(FriendDamage);
      }
      if (EnemyDamage != false) {
        output.WriteRawTag(88);
        output.WriteBool(EnemyDamage);
      }
      if (MonsterDamage != false) {
        output.WriteRawTag(96);
        output.WriteBool(MonsterDamage);
      }
      if (WarningTime != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(WarningTime);
      }
      if (WarningEffectId != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(WarningEffectId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (EffectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EffectId);
      }
      if (LogicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LogicId);
      }
      if (Automatic != false) {
        size += 1 + 1;
      }
      if (TriggerTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerTime);
      }
      if (Interval != 0F) {
        size += 1 + 4;
      }
      if (CoolDown != 0F) {
        size += 1 + 4;
      }
      if (Damage != 0F) {
        size += 1 + 4;
      }
      if (DamageInterval != 0F) {
        size += 1 + 4;
      }
      if (FriendDamage != false) {
        size += 1 + 1;
      }
      if (EnemyDamage != false) {
        size += 1 + 1;
      }
      if (MonsterDamage != false) {
        size += 1 + 1;
      }
      if (WarningTime != 0F) {
        size += 1 + 4;
      }
      if (WarningEffectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WarningEffectId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrapConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.EffectId != 0) {
        EffectId = other.EffectId;
      }
      if (other.LogicId != 0) {
        LogicId = other.LogicId;
      }
      if (other.Automatic != false) {
        Automatic = other.Automatic;
      }
      if (other.TriggerTime != 0) {
        TriggerTime = other.TriggerTime;
      }
      if (other.Interval != 0F) {
        Interval = other.Interval;
      }
      if (other.CoolDown != 0F) {
        CoolDown = other.CoolDown;
      }
      if (other.Damage != 0F) {
        Damage = other.Damage;
      }
      if (other.DamageInterval != 0F) {
        DamageInterval = other.DamageInterval;
      }
      if (other.FriendDamage != false) {
        FriendDamage = other.FriendDamage;
      }
      if (other.EnemyDamage != false) {
        EnemyDamage = other.EnemyDamage;
      }
      if (other.MonsterDamage != false) {
        MonsterDamage = other.MonsterDamage;
      }
      if (other.WarningTime != 0F) {
        WarningTime = other.WarningTime;
      }
      if (other.WarningEffectId != 0) {
        WarningEffectId = other.WarningEffectId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            EffectId = input.ReadUInt32();
            break;
          }
          case 24: {
            LogicId = input.ReadUInt32();
            break;
          }
          case 32: {
            Automatic = input.ReadBool();
            break;
          }
          case 40: {
            TriggerTime = input.ReadInt32();
            break;
          }
          case 53: {
            Interval = input.ReadFloat();
            break;
          }
          case 61: {
            CoolDown = input.ReadFloat();
            break;
          }
          case 69: {
            Damage = input.ReadFloat();
            break;
          }
          case 77: {
            DamageInterval = input.ReadFloat();
            break;
          }
          case 80: {
            FriendDamage = input.ReadBool();
            break;
          }
          case 88: {
            EnemyDamage = input.ReadBool();
            break;
          }
          case 96: {
            MonsterDamage = input.ReadBool();
            break;
          }
          case 109: {
            WarningTime = input.ReadFloat();
            break;
          }
          case 112: {
            WarningEffectId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrapConfig_Array : pb::IMessage<TrapConfig_Array> {
    private static readonly pb::MessageParser<TrapConfig_Array> _parser = new pb::MessageParser<TrapConfig_Array>(() => new TrapConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrapConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansTrapconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapConfig_Array(TrapConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrapConfig_Array Clone() {
      return new TrapConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.TrapConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.TrapConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.TrapConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.TrapConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.TrapConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrapConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrapConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrapConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
