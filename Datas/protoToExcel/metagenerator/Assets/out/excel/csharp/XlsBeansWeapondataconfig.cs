// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_weapondataconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_weapondataconfig.proto</summary>
  public static partial class XlsBeansWeapondataconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_weapondataconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansWeapondataconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiB4bHNfYmVhbnNfd2VhcG9uZGF0YWNvbmZpZy5wcm90bxIKRDExLlBiZWFu",
            "cyK6BwoQV2VhcG9uRGF0YUNvbmZpZxIKCgJpZBgBIAEoDRISCgpmYWxsYmFj",
            "a0lkGAIgASgNEgwKBG5hbWUYAyABKAkSDAoEY2FtcBgEIAEoDRIQCghtYWlu",
            "VHlwZRgFIAEoDRIQCghzdWJUeXBlMRgGIAEoDRIQCghzdWJUeXBlMhgHIAEo",
            "DRIQCghzdWJUeXBlMxgIIAEoDRINCgVsZXZlbBgJIAEoDRISCgp3ZWFwb25U",
            "eXBlGAogASgNEhEKCXRoZW1lSWNvbhgLIAEoDRIbChN0aGVtZUJhY2tncm91",
            "bmRJY29uGAwgASgNEhkKEWJhZ0JhY2tncm91bmRJY29uGA0gASgNEh4KFmJh",
            "Z1NtYWxsQmFja2dyb3VuZEljb24YDiABKA0SEQoJc2hhcmVJY29uGA8gASgN",
            "EgwKBGljb24YECABKA0SEQoJaWNvblNtYWxsGBEgASgNEg4KBmljb25JRBgS",
            "IAEoDRIcChRTcGVjaWFsQmlsbGJvYXJkSWNvbhgTIAEoDRIYChB3ZWFwb25D",
            "b25maWdOYW1lGBQgASgJEh0KFWV4dHJhV2VhcG9uQ29uZmlnTmFtZRgVIAMo",
            "CRINCgVsaW1pdBgWIAEoDRIVCg1wYWludEtpdExpbWl0GBcgAygNEg8KB3F1",
            "YWxpdHkYGCABKA0SEAoIcHJpb3JpdHkYGSABKA0SDQoFb3JkZXIYGiABKA0S",
            "EAoIc2VsbFR5cGUYGyABKA0SFAoMc2VsbGluZ1ByaWNlGBwgASgNEhAKCHN0",
            "YWNrTWF4GB0gASgNEhEKCWF1dG9FcXVpcBgeIAEoDRIWCg5zZXR0bGVtZW50",
            "QnVmZhgfIAMoDRITCgtkZXNjcmlwdGlvbhggIAEoCRIVCg1ickRlc2NyaXB0",
            "aW9uGCEgASgJEhMKC3RwQXNzZXROYW1lGCIgASgJEhMKC2ZwQXNzZXROYW1l",
            "GCMgASgJEhQKDGdldEl0ZW1Xb3JkcxgkIAEoCRITCgtzcGVjaWFsRnVuYxgl",
            "IAEoDRIVCg1ub3JtYWxTdGF0ZUlEGCYgASgNEhYKDnNwZWNhaWxTdGF0ZUlE",
            "GCcgASgNEhUKDXNwZWNpYWxQaWNrVXAYKCABKA0SFAoMa2lsbE5vdGlmeUlk",
            "GCkgASgNEhAKCGZlYXR1cmVzGCogAygNEhIKCmF0dHJpYnV0ZXMYKyADKA0S",
            "DgoGYmFzZUdzGCwgASgNEhMKC2ljb25EaXJOYW1lGC0gASgJEhQKDGlzQ29s",
            "bGVjdGlvbhguIAEoCCJFChZXZWFwb25EYXRhQ29uZmlnX0FycmF5EisKBWl0",
            "ZW1zGAEgAygLMhwuRDExLlBiZWFucy5XZWFwb25EYXRhQ29uZmlnYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.WeaponDataConfig), global::D11.Pbeans.WeaponDataConfig.Parser, new[]{ "Id", "FallbackId", "Name", "Camp", "MainType", "SubType1", "SubType2", "SubType3", "Level", "WeaponType", "ThemeIcon", "ThemeBackgroundIcon", "BagBackgroundIcon", "BagSmallBackgroundIcon", "ShareIcon", "Icon", "IconSmall", "IconID", "SpecialBillboardIcon", "WeaponConfigName", "ExtraWeaponConfigName", "Limit", "PaintKitLimit", "Quality", "Priority", "Order", "SellType", "SellingPrice", "StackMax", "AutoEquip", "SettlementBuff", "Description", "BrDescription", "TpAssetName", "FpAssetName", "GetItemWords", "SpecialFunc", "NormalStateID", "SpecailStateID", "SpecialPickUp", "KillNotifyId", "Features", "Attributes", "BaseGs", "IconDirName", "IsCollection" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.WeaponDataConfig_Array), global::D11.Pbeans.WeaponDataConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponDataConfig : pb::IMessage<WeaponDataConfig> {
    private static readonly pb::MessageParser<WeaponDataConfig> _parser = new pb::MessageParser<WeaponDataConfig>(() => new WeaponDataConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponDataConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansWeapondataconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponDataConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponDataConfig(WeaponDataConfig other) : this() {
      id_ = other.id_;
      fallbackId_ = other.fallbackId_;
      name_ = other.name_;
      camp_ = other.camp_;
      mainType_ = other.mainType_;
      subType1_ = other.subType1_;
      subType2_ = other.subType2_;
      subType3_ = other.subType3_;
      level_ = other.level_;
      weaponType_ = other.weaponType_;
      themeIcon_ = other.themeIcon_;
      themeBackgroundIcon_ = other.themeBackgroundIcon_;
      bagBackgroundIcon_ = other.bagBackgroundIcon_;
      bagSmallBackgroundIcon_ = other.bagSmallBackgroundIcon_;
      shareIcon_ = other.shareIcon_;
      icon_ = other.icon_;
      iconSmall_ = other.iconSmall_;
      iconID_ = other.iconID_;
      specialBillboardIcon_ = other.specialBillboardIcon_;
      weaponConfigName_ = other.weaponConfigName_;
      extraWeaponConfigName_ = other.extraWeaponConfigName_.Clone();
      limit_ = other.limit_;
      paintKitLimit_ = other.paintKitLimit_.Clone();
      quality_ = other.quality_;
      priority_ = other.priority_;
      order_ = other.order_;
      sellType_ = other.sellType_;
      sellingPrice_ = other.sellingPrice_;
      stackMax_ = other.stackMax_;
      autoEquip_ = other.autoEquip_;
      settlementBuff_ = other.settlementBuff_.Clone();
      description_ = other.description_;
      brDescription_ = other.brDescription_;
      tpAssetName_ = other.tpAssetName_;
      fpAssetName_ = other.fpAssetName_;
      getItemWords_ = other.getItemWords_;
      specialFunc_ = other.specialFunc_;
      normalStateID_ = other.normalStateID_;
      specailStateID_ = other.specailStateID_;
      specialPickUp_ = other.specialPickUp_;
      killNotifyId_ = other.killNotifyId_;
      features_ = other.features_.Clone();
      attributes_ = other.attributes_.Clone();
      baseGs_ = other.baseGs_;
      iconDirName_ = other.iconDirName_;
      isCollection_ = other.isCollection_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponDataConfig Clone() {
      return new WeaponDataConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 编号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "fallbackId" field.</summary>
    public const int FallbackIdFieldNumber = 2;
    private uint fallbackId_;
    /// <summary>
    /// 对应黑皮id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FallbackId {
      get { return fallbackId_; }
      set {
        fallbackId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// 物品名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 4;
    private uint camp_;
    /// <summary>
    /// 阵营(1-T 2-CT 3-all) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    /// <summary>Field number for the "mainType" field.</summary>
    public const int MainTypeFieldNumber = 5;
    private uint mainType_;
    /// <summary>
    /// 物品类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MainType {
      get { return mainType_; }
      set {
        mainType_ = value;
      }
    }

    /// <summary>Field number for the "subType1" field.</summary>
    public const int SubType1FieldNumber = 6;
    private uint subType1_;
    /// <summary>
    /// 武器主类型（子类型） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubType1 {
      get { return subType1_; }
      set {
        subType1_ = value;
      }
    }

    /// <summary>Field number for the "subType2" field.</summary>
    public const int SubType2FieldNumber = 7;
    private uint subType2_;
    /// <summary>
    /// 二级子类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubType2 {
      get { return subType2_; }
      set {
        subType2_ = value;
      }
    }

    /// <summary>Field number for the "subType3" field.</summary>
    public const int SubType3FieldNumber = 8;
    private uint subType3_;
    /// <summary>
    /// 三级子类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubType3 {
      get { return subType3_; }
      set {
        subType3_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 9;
    private uint level_;
    /// <summary>
    /// 等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "weaponType" field.</summary>
    public const int WeaponTypeFieldNumber = 10;
    private uint weaponType_;
    /// <summary>
    /// 武器类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeaponType {
      get { return weaponType_; }
      set {
        weaponType_ = value;
      }
    }

    /// <summary>Field number for the "themeIcon" field.</summary>
    public const int ThemeIconFieldNumber = 11;
    private uint themeIcon_;
    /// <summary>
    /// 主题标记图标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ThemeIcon {
      get { return themeIcon_; }
      set {
        themeIcon_ = value;
      }
    }

    /// <summary>Field number for the "themeBackgroundIcon" field.</summary>
    public const int ThemeBackgroundIconFieldNumber = 12;
    private uint themeBackgroundIcon_;
    /// <summary>
    /// 主题背景图标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ThemeBackgroundIcon {
      get { return themeBackgroundIcon_; }
      set {
        themeBackgroundIcon_ = value;
      }
    }

    /// <summary>Field number for the "bagBackgroundIcon" field.</summary>
    public const int BagBackgroundIconFieldNumber = 13;
    private uint bagBackgroundIcon_;
    /// <summary>
    /// 仓库主题底板图标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BagBackgroundIcon {
      get { return bagBackgroundIcon_; }
      set {
        bagBackgroundIcon_ = value;
      }
    }

    /// <summary>Field number for the "bagSmallBackgroundIcon" field.</summary>
    public const int BagSmallBackgroundIconFieldNumber = 14;
    private uint bagSmallBackgroundIcon_;
    /// <summary>
    /// 仓库主题底板图标（小） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BagSmallBackgroundIcon {
      get { return bagSmallBackgroundIcon_; }
      set {
        bagSmallBackgroundIcon_ = value;
      }
    }

    /// <summary>Field number for the "shareIcon" field.</summary>
    public const int ShareIconFieldNumber = 15;
    private uint shareIcon_;
    /// <summary>
    /// 分享图 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShareIcon {
      get { return shareIcon_; }
      set {
        shareIcon_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 16;
    private uint icon_;
    /// <summary>
    /// HUD图标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "iconSmall" field.</summary>
    public const int IconSmallFieldNumber = 17;
    private uint iconSmall_;
    /// <summary>
    /// HUD小图标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IconSmall {
      get { return iconSmall_; }
      set {
        iconSmall_ = value;
      }
    }

    /// <summary>Field number for the "iconID" field.</summary>
    public const int IconIDFieldNumber = 18;
    private uint iconID_;
    /// <summary>
    /// 局外图标资源id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IconID {
      get { return iconID_; }
      set {
        iconID_ = value;
      }
    }

    /// <summary>Field number for the "SpecialBillboardIcon" field.</summary>
    public const int SpecialBillboardIconFieldNumber = 19;
    private uint specialBillboardIcon_;
    /// <summary>
    /// 特殊公告板图标 （飞行投掷物ICON，其他区分与icon字段的武器类型图标也走这） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpecialBillboardIcon {
      get { return specialBillboardIcon_; }
      set {
        specialBillboardIcon_ = value;
      }
    }

    /// <summary>Field number for the "weaponConfigName" field.</summary>
    public const int WeaponConfigNameFieldNumber = 20;
    private string weaponConfigName_ = "";
    /// <summary>
    /// 武器配置 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeaponConfigName {
      get { return weaponConfigName_; }
      set {
        weaponConfigName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraWeaponConfigName" field.</summary>
    public const int ExtraWeaponConfigNameFieldNumber = 21;
    private static readonly pb::FieldCodec<string> _repeated_extraWeaponConfigName_codec
        = pb::FieldCodec.ForString(170);
    private readonly pbc::RepeatedField<string> extraWeaponConfigName_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 分地区额外武器配置 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ExtraWeaponConfigName {
      get { return extraWeaponConfigName_; }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 22;
    private uint limit_;
    /// <summary>
    /// 拥有上限(0不限制） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "paintKitLimit" field.</summary>
    public const int PaintKitLimitFieldNumber = 23;
    private static readonly pb::FieldCodec<uint> _repeated_paintKitLimit_codec
        = pb::FieldCodec.ForUInt32(186);
    private readonly pbc::RepeatedField<uint> paintKitLimit_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 可以使用的皮肤编号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PaintKitLimit {
      get { return paintKitLimit_; }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 24;
    private uint quality_;
    /// <summary>
    /// 品质 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 25;
    private uint priority_;
    /// <summary>
    /// 重要道具优先级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 26;
    private uint order_;
    /// <summary>
    /// 排序(从小到大) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "sellType" field.</summary>
    public const int SellTypeFieldNumber = 27;
    private uint sellType_;
    /// <summary>
    /// 卖店货币 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SellType {
      get { return sellType_; }
      set {
        sellType_ = value;
      }
    }

    /// <summary>Field number for the "sellingPrice" field.</summary>
    public const int SellingPriceFieldNumber = 28;
    private uint sellingPrice_;
    /// <summary>
    /// 卖店价格 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SellingPrice {
      get { return sellingPrice_; }
      set {
        sellingPrice_ = value;
      }
    }

    /// <summary>Field number for the "stackMax" field.</summary>
    public const int StackMaxFieldNumber = 29;
    private uint stackMax_;
    /// <summary>
    /// 是否可堆叠(0不可以 1可以) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StackMax {
      get { return stackMax_; }
      set {
        stackMax_ = value;
      }
    }

    /// <summary>Field number for the "autoEquip" field.</summary>
    public const int AutoEquipFieldNumber = 30;
    private uint autoEquip_;
    /// <summary>
    /// 是否自动装备(0为否,1为是) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AutoEquip {
      get { return autoEquip_; }
      set {
        autoEquip_ = value;
      }
    }

    /// <summary>Field number for the "settlementBuff" field.</summary>
    public const int SettlementBuffFieldNumber = 31;
    private static readonly pb::FieldCodec<uint> _repeated_settlementBuff_codec
        = pb::FieldCodec.ForUInt32(250);
    private readonly pbc::RepeatedField<uint> settlementBuff_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 武器携带的buffId 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SettlementBuff {
      get { return settlementBuff_; }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 32;
    private string description_ = "";
    /// <summary>
    /// 道具描述tips 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "brDescription" field.</summary>
    public const int BrDescriptionFieldNumber = 33;
    private string brDescription_ = "";
    /// <summary>
    /// 局内背包道具描述tips 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrDescription {
      get { return brDescription_; }
      set {
        brDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tpAssetName" field.</summary>
    public const int TpAssetNameFieldNumber = 34;
    private string tpAssetName_ = "";
    /// <summary>
    /// 3P资源名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TpAssetName {
      get { return tpAssetName_; }
      set {
        tpAssetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fpAssetName" field.</summary>
    public const int FpAssetNameFieldNumber = 35;
    private string fpAssetName_ = "";
    /// <summary>
    /// 1P资源名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FpAssetName {
      get { return fpAssetName_; }
      set {
        fpAssetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "getItemWords" field.</summary>
    public const int GetItemWordsFieldNumber = 36;
    private string getItemWords_ = "";
    /// <summary>
    /// 获得界面骚话 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GetItemWords {
      get { return getItemWords_; }
      set {
        getItemWords_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "specialFunc" field.</summary>
    public const int SpecialFuncFieldNumber = 37;
    private uint specialFunc_;
    /// <summary>
    /// 特殊功能 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpecialFunc {
      get { return specialFunc_; }
      set {
        specialFunc_ = value;
      }
    }

    /// <summary>Field number for the "normalStateID" field.</summary>
    public const int NormalStateIDFieldNumber = 38;
    private uint normalStateID_;
    /// <summary>
    /// 普通状态下资源id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NormalStateID {
      get { return normalStateID_; }
      set {
        normalStateID_ = value;
      }
    }

    /// <summary>Field number for the "specailStateID" field.</summary>
    public const int SpecailStateIDFieldNumber = 39;
    private uint specailStateID_;
    /// <summary>
    /// 特殊功能状态下资源id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpecailStateID {
      get { return specailStateID_; }
      set {
        specailStateID_ = value;
      }
    }

    /// <summary>Field number for the "specialPickUp" field.</summary>
    public const int SpecialPickUpFieldNumber = 40;
    private uint specialPickUp_;
    /// <summary>
    /// 特殊捡拾物 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpecialPickUp {
      get { return specialPickUp_; }
      set {
        specialPickUp_ = value;
      }
    }

    /// <summary>Field number for the "killNotifyId" field.</summary>
    public const int KillNotifyIdFieldNumber = 41;
    private uint killNotifyId_;
    /// <summary>
    /// 专属击杀正反馈id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KillNotifyId {
      get { return killNotifyId_; }
      set {
        killNotifyId_ = value;
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 42;
    private static readonly pb::FieldCodec<uint> _repeated_features_codec
        = pb::FieldCodec.ForUInt32(338);
    private readonly pbc::RepeatedField<uint> features_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 特性Id列表 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Features {
      get { return features_; }
    }

    /// <summary>Field number for the "attributes" field.</summary>
    public const int AttributesFieldNumber = 43;
    private static readonly pb::FieldCodec<uint> _repeated_attributes_codec
        = pb::FieldCodec.ForUInt32(346);
    private readonly pbc::RepeatedField<uint> attributes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 推荐&amp;特点列表 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Attributes {
      get { return attributes_; }
    }

    /// <summary>Field number for the "baseGs" field.</summary>
    public const int BaseGsFieldNumber = 44;
    private uint baseGs_;
    /// <summary>
    /// 基础Gs值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BaseGs {
      get { return baseGs_; }
      set {
        baseGs_ = value;
      }
    }

    /// <summary>Field number for the "iconDirName" field.</summary>
    public const int IconDirNameFieldNumber = 45;
    private string iconDirName_ = "";
    /// <summary>
    /// 离线生成的图标文件夹名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconDirName {
      get { return iconDirName_; }
      set {
        iconDirName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isCollection" field.</summary>
    public const int IsCollectionFieldNumber = 46;
    private bool isCollection_;
    /// <summary>
    /// 是否是收藏品（计入藏品收集统计） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCollection {
      get { return isCollection_; }
      set {
        isCollection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponDataConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponDataConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FallbackId != other.FallbackId) return false;
      if (Name != other.Name) return false;
      if (Camp != other.Camp) return false;
      if (MainType != other.MainType) return false;
      if (SubType1 != other.SubType1) return false;
      if (SubType2 != other.SubType2) return false;
      if (SubType3 != other.SubType3) return false;
      if (Level != other.Level) return false;
      if (WeaponType != other.WeaponType) return false;
      if (ThemeIcon != other.ThemeIcon) return false;
      if (ThemeBackgroundIcon != other.ThemeBackgroundIcon) return false;
      if (BagBackgroundIcon != other.BagBackgroundIcon) return false;
      if (BagSmallBackgroundIcon != other.BagSmallBackgroundIcon) return false;
      if (ShareIcon != other.ShareIcon) return false;
      if (Icon != other.Icon) return false;
      if (IconSmall != other.IconSmall) return false;
      if (IconID != other.IconID) return false;
      if (SpecialBillboardIcon != other.SpecialBillboardIcon) return false;
      if (WeaponConfigName != other.WeaponConfigName) return false;
      if(!extraWeaponConfigName_.Equals(other.extraWeaponConfigName_)) return false;
      if (Limit != other.Limit) return false;
      if(!paintKitLimit_.Equals(other.paintKitLimit_)) return false;
      if (Quality != other.Quality) return false;
      if (Priority != other.Priority) return false;
      if (Order != other.Order) return false;
      if (SellType != other.SellType) return false;
      if (SellingPrice != other.SellingPrice) return false;
      if (StackMax != other.StackMax) return false;
      if (AutoEquip != other.AutoEquip) return false;
      if(!settlementBuff_.Equals(other.settlementBuff_)) return false;
      if (Description != other.Description) return false;
      if (BrDescription != other.BrDescription) return false;
      if (TpAssetName != other.TpAssetName) return false;
      if (FpAssetName != other.FpAssetName) return false;
      if (GetItemWords != other.GetItemWords) return false;
      if (SpecialFunc != other.SpecialFunc) return false;
      if (NormalStateID != other.NormalStateID) return false;
      if (SpecailStateID != other.SpecailStateID) return false;
      if (SpecialPickUp != other.SpecialPickUp) return false;
      if (KillNotifyId != other.KillNotifyId) return false;
      if(!features_.Equals(other.features_)) return false;
      if(!attributes_.Equals(other.attributes_)) return false;
      if (BaseGs != other.BaseGs) return false;
      if (IconDirName != other.IconDirName) return false;
      if (IsCollection != other.IsCollection) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (FallbackId != 0) hash ^= FallbackId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Camp != 0) hash ^= Camp.GetHashCode();
      if (MainType != 0) hash ^= MainType.GetHashCode();
      if (SubType1 != 0) hash ^= SubType1.GetHashCode();
      if (SubType2 != 0) hash ^= SubType2.GetHashCode();
      if (SubType3 != 0) hash ^= SubType3.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (WeaponType != 0) hash ^= WeaponType.GetHashCode();
      if (ThemeIcon != 0) hash ^= ThemeIcon.GetHashCode();
      if (ThemeBackgroundIcon != 0) hash ^= ThemeBackgroundIcon.GetHashCode();
      if (BagBackgroundIcon != 0) hash ^= BagBackgroundIcon.GetHashCode();
      if (BagSmallBackgroundIcon != 0) hash ^= BagSmallBackgroundIcon.GetHashCode();
      if (ShareIcon != 0) hash ^= ShareIcon.GetHashCode();
      if (Icon != 0) hash ^= Icon.GetHashCode();
      if (IconSmall != 0) hash ^= IconSmall.GetHashCode();
      if (IconID != 0) hash ^= IconID.GetHashCode();
      if (SpecialBillboardIcon != 0) hash ^= SpecialBillboardIcon.GetHashCode();
      if (WeaponConfigName.Length != 0) hash ^= WeaponConfigName.GetHashCode();
      hash ^= extraWeaponConfigName_.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      hash ^= paintKitLimit_.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (Order != 0) hash ^= Order.GetHashCode();
      if (SellType != 0) hash ^= SellType.GetHashCode();
      if (SellingPrice != 0) hash ^= SellingPrice.GetHashCode();
      if (StackMax != 0) hash ^= StackMax.GetHashCode();
      if (AutoEquip != 0) hash ^= AutoEquip.GetHashCode();
      hash ^= settlementBuff_.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (BrDescription.Length != 0) hash ^= BrDescription.GetHashCode();
      if (TpAssetName.Length != 0) hash ^= TpAssetName.GetHashCode();
      if (FpAssetName.Length != 0) hash ^= FpAssetName.GetHashCode();
      if (GetItemWords.Length != 0) hash ^= GetItemWords.GetHashCode();
      if (SpecialFunc != 0) hash ^= SpecialFunc.GetHashCode();
      if (NormalStateID != 0) hash ^= NormalStateID.GetHashCode();
      if (SpecailStateID != 0) hash ^= SpecailStateID.GetHashCode();
      if (SpecialPickUp != 0) hash ^= SpecialPickUp.GetHashCode();
      if (KillNotifyId != 0) hash ^= KillNotifyId.GetHashCode();
      hash ^= features_.GetHashCode();
      hash ^= attributes_.GetHashCode();
      if (BaseGs != 0) hash ^= BaseGs.GetHashCode();
      if (IconDirName.Length != 0) hash ^= IconDirName.GetHashCode();
      if (IsCollection != false) hash ^= IsCollection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (FallbackId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FallbackId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Camp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Camp);
      }
      if (MainType != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MainType);
      }
      if (SubType1 != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(SubType1);
      }
      if (SubType2 != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SubType2);
      }
      if (SubType3 != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(SubType3);
      }
      if (Level != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Level);
      }
      if (WeaponType != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(WeaponType);
      }
      if (ThemeIcon != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(ThemeIcon);
      }
      if (ThemeBackgroundIcon != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(ThemeBackgroundIcon);
      }
      if (BagBackgroundIcon != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(BagBackgroundIcon);
      }
      if (BagSmallBackgroundIcon != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(BagSmallBackgroundIcon);
      }
      if (ShareIcon != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(ShareIcon);
      }
      if (Icon != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Icon);
      }
      if (IconSmall != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(IconSmall);
      }
      if (IconID != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(IconID);
      }
      if (SpecialBillboardIcon != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(SpecialBillboardIcon);
      }
      if (WeaponConfigName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WeaponConfigName);
      }
      extraWeaponConfigName_.WriteTo(output, _repeated_extraWeaponConfigName_codec);
      if (Limit != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(Limit);
      }
      paintKitLimit_.WriteTo(output, _repeated_paintKitLimit_codec);
      if (Quality != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(Quality);
      }
      if (Priority != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Priority);
      }
      if (Order != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(Order);
      }
      if (SellType != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(SellType);
      }
      if (SellingPrice != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(SellingPrice);
      }
      if (StackMax != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(StackMax);
      }
      if (AutoEquip != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(AutoEquip);
      }
      settlementBuff_.WriteTo(output, _repeated_settlementBuff_codec);
      if (Description.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(Description);
      }
      if (BrDescription.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(BrDescription);
      }
      if (TpAssetName.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(TpAssetName);
      }
      if (FpAssetName.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(FpAssetName);
      }
      if (GetItemWords.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(GetItemWords);
      }
      if (SpecialFunc != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(SpecialFunc);
      }
      if (NormalStateID != 0) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(NormalStateID);
      }
      if (SpecailStateID != 0) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(SpecailStateID);
      }
      if (SpecialPickUp != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(SpecialPickUp);
      }
      if (KillNotifyId != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(KillNotifyId);
      }
      features_.WriteTo(output, _repeated_features_codec);
      attributes_.WriteTo(output, _repeated_attributes_codec);
      if (BaseGs != 0) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(BaseGs);
      }
      if (IconDirName.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(IconDirName);
      }
      if (IsCollection != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(IsCollection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (FallbackId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FallbackId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Camp);
      }
      if (MainType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MainType);
      }
      if (SubType1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubType1);
      }
      if (SubType2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubType2);
      }
      if (SubType3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubType3);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (WeaponType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeaponType);
      }
      if (ThemeIcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ThemeIcon);
      }
      if (ThemeBackgroundIcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ThemeBackgroundIcon);
      }
      if (BagBackgroundIcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BagBackgroundIcon);
      }
      if (BagSmallBackgroundIcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BagSmallBackgroundIcon);
      }
      if (ShareIcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShareIcon);
      }
      if (Icon != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icon);
      }
      if (IconSmall != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IconSmall);
      }
      if (IconID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IconID);
      }
      if (SpecialBillboardIcon != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpecialBillboardIcon);
      }
      if (WeaponConfigName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WeaponConfigName);
      }
      size += extraWeaponConfigName_.CalculateSize(_repeated_extraWeaponConfigName_codec);
      if (Limit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Limit);
      }
      size += paintKitLimit_.CalculateSize(_repeated_paintKitLimit_codec);
      if (Quality != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Quality);
      }
      if (Priority != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (Order != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Order);
      }
      if (SellType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SellType);
      }
      if (SellingPrice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SellingPrice);
      }
      if (StackMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StackMax);
      }
      if (AutoEquip != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AutoEquip);
      }
      size += settlementBuff_.CalculateSize(_repeated_settlementBuff_codec);
      if (Description.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (BrDescription.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BrDescription);
      }
      if (TpAssetName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TpAssetName);
      }
      if (FpAssetName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FpAssetName);
      }
      if (GetItemWords.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GetItemWords);
      }
      if (SpecialFunc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpecialFunc);
      }
      if (NormalStateID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NormalStateID);
      }
      if (SpecailStateID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpecailStateID);
      }
      if (SpecialPickUp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpecialPickUp);
      }
      if (KillNotifyId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KillNotifyId);
      }
      size += features_.CalculateSize(_repeated_features_codec);
      size += attributes_.CalculateSize(_repeated_attributes_codec);
      if (BaseGs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BaseGs);
      }
      if (IconDirName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IconDirName);
      }
      if (IsCollection != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponDataConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.FallbackId != 0) {
        FallbackId = other.FallbackId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Camp != 0) {
        Camp = other.Camp;
      }
      if (other.MainType != 0) {
        MainType = other.MainType;
      }
      if (other.SubType1 != 0) {
        SubType1 = other.SubType1;
      }
      if (other.SubType2 != 0) {
        SubType2 = other.SubType2;
      }
      if (other.SubType3 != 0) {
        SubType3 = other.SubType3;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.WeaponType != 0) {
        WeaponType = other.WeaponType;
      }
      if (other.ThemeIcon != 0) {
        ThemeIcon = other.ThemeIcon;
      }
      if (other.ThemeBackgroundIcon != 0) {
        ThemeBackgroundIcon = other.ThemeBackgroundIcon;
      }
      if (other.BagBackgroundIcon != 0) {
        BagBackgroundIcon = other.BagBackgroundIcon;
      }
      if (other.BagSmallBackgroundIcon != 0) {
        BagSmallBackgroundIcon = other.BagSmallBackgroundIcon;
      }
      if (other.ShareIcon != 0) {
        ShareIcon = other.ShareIcon;
      }
      if (other.Icon != 0) {
        Icon = other.Icon;
      }
      if (other.IconSmall != 0) {
        IconSmall = other.IconSmall;
      }
      if (other.IconID != 0) {
        IconID = other.IconID;
      }
      if (other.SpecialBillboardIcon != 0) {
        SpecialBillboardIcon = other.SpecialBillboardIcon;
      }
      if (other.WeaponConfigName.Length != 0) {
        WeaponConfigName = other.WeaponConfigName;
      }
      extraWeaponConfigName_.Add(other.extraWeaponConfigName_);
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      paintKitLimit_.Add(other.paintKitLimit_);
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.Order != 0) {
        Order = other.Order;
      }
      if (other.SellType != 0) {
        SellType = other.SellType;
      }
      if (other.SellingPrice != 0) {
        SellingPrice = other.SellingPrice;
      }
      if (other.StackMax != 0) {
        StackMax = other.StackMax;
      }
      if (other.AutoEquip != 0) {
        AutoEquip = other.AutoEquip;
      }
      settlementBuff_.Add(other.settlementBuff_);
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.BrDescription.Length != 0) {
        BrDescription = other.BrDescription;
      }
      if (other.TpAssetName.Length != 0) {
        TpAssetName = other.TpAssetName;
      }
      if (other.FpAssetName.Length != 0) {
        FpAssetName = other.FpAssetName;
      }
      if (other.GetItemWords.Length != 0) {
        GetItemWords = other.GetItemWords;
      }
      if (other.SpecialFunc != 0) {
        SpecialFunc = other.SpecialFunc;
      }
      if (other.NormalStateID != 0) {
        NormalStateID = other.NormalStateID;
      }
      if (other.SpecailStateID != 0) {
        SpecailStateID = other.SpecailStateID;
      }
      if (other.SpecialPickUp != 0) {
        SpecialPickUp = other.SpecialPickUp;
      }
      if (other.KillNotifyId != 0) {
        KillNotifyId = other.KillNotifyId;
      }
      features_.Add(other.features_);
      attributes_.Add(other.attributes_);
      if (other.BaseGs != 0) {
        BaseGs = other.BaseGs;
      }
      if (other.IconDirName.Length != 0) {
        IconDirName = other.IconDirName;
      }
      if (other.IsCollection != false) {
        IsCollection = other.IsCollection;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            FallbackId = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Camp = input.ReadUInt32();
            break;
          }
          case 40: {
            MainType = input.ReadUInt32();
            break;
          }
          case 48: {
            SubType1 = input.ReadUInt32();
            break;
          }
          case 56: {
            SubType2 = input.ReadUInt32();
            break;
          }
          case 64: {
            SubType3 = input.ReadUInt32();
            break;
          }
          case 72: {
            Level = input.ReadUInt32();
            break;
          }
          case 80: {
            WeaponType = input.ReadUInt32();
            break;
          }
          case 88: {
            ThemeIcon = input.ReadUInt32();
            break;
          }
          case 96: {
            ThemeBackgroundIcon = input.ReadUInt32();
            break;
          }
          case 104: {
            BagBackgroundIcon = input.ReadUInt32();
            break;
          }
          case 112: {
            BagSmallBackgroundIcon = input.ReadUInt32();
            break;
          }
          case 120: {
            ShareIcon = input.ReadUInt32();
            break;
          }
          case 128: {
            Icon = input.ReadUInt32();
            break;
          }
          case 136: {
            IconSmall = input.ReadUInt32();
            break;
          }
          case 144: {
            IconID = input.ReadUInt32();
            break;
          }
          case 152: {
            SpecialBillboardIcon = input.ReadUInt32();
            break;
          }
          case 162: {
            WeaponConfigName = input.ReadString();
            break;
          }
          case 170: {
            extraWeaponConfigName_.AddEntriesFrom(input, _repeated_extraWeaponConfigName_codec);
            break;
          }
          case 176: {
            Limit = input.ReadUInt32();
            break;
          }
          case 186:
          case 184: {
            paintKitLimit_.AddEntriesFrom(input, _repeated_paintKitLimit_codec);
            break;
          }
          case 192: {
            Quality = input.ReadUInt32();
            break;
          }
          case 200: {
            Priority = input.ReadUInt32();
            break;
          }
          case 208: {
            Order = input.ReadUInt32();
            break;
          }
          case 216: {
            SellType = input.ReadUInt32();
            break;
          }
          case 224: {
            SellingPrice = input.ReadUInt32();
            break;
          }
          case 232: {
            StackMax = input.ReadUInt32();
            break;
          }
          case 240: {
            AutoEquip = input.ReadUInt32();
            break;
          }
          case 250:
          case 248: {
            settlementBuff_.AddEntriesFrom(input, _repeated_settlementBuff_codec);
            break;
          }
          case 258: {
            Description = input.ReadString();
            break;
          }
          case 266: {
            BrDescription = input.ReadString();
            break;
          }
          case 274: {
            TpAssetName = input.ReadString();
            break;
          }
          case 282: {
            FpAssetName = input.ReadString();
            break;
          }
          case 290: {
            GetItemWords = input.ReadString();
            break;
          }
          case 296: {
            SpecialFunc = input.ReadUInt32();
            break;
          }
          case 304: {
            NormalStateID = input.ReadUInt32();
            break;
          }
          case 312: {
            SpecailStateID = input.ReadUInt32();
            break;
          }
          case 320: {
            SpecialPickUp = input.ReadUInt32();
            break;
          }
          case 328: {
            KillNotifyId = input.ReadUInt32();
            break;
          }
          case 338:
          case 336: {
            features_.AddEntriesFrom(input, _repeated_features_codec);
            break;
          }
          case 346:
          case 344: {
            attributes_.AddEntriesFrom(input, _repeated_attributes_codec);
            break;
          }
          case 352: {
            BaseGs = input.ReadUInt32();
            break;
          }
          case 362: {
            IconDirName = input.ReadString();
            break;
          }
          case 368: {
            IsCollection = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WeaponDataConfig_Array : pb::IMessage<WeaponDataConfig_Array> {
    private static readonly pb::MessageParser<WeaponDataConfig_Array> _parser = new pb::MessageParser<WeaponDataConfig_Array>(() => new WeaponDataConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponDataConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansWeapondataconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponDataConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponDataConfig_Array(WeaponDataConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponDataConfig_Array Clone() {
      return new WeaponDataConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.WeaponDataConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.WeaponDataConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.WeaponDataConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.WeaponDataConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.WeaponDataConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponDataConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponDataConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponDataConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
