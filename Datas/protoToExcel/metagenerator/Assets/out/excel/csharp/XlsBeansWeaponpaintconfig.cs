// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_weaponpaintconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_weaponpaintconfig.proto</summary>
  public static partial class XlsBeansWeaponpaintconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_weaponpaintconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansWeaponpaintconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiF4bHNfYmVhbnNfd2VhcG9ucGFpbnRjb25maWcucHJvdG8SCkQxMS5QYmVh",
            "bnMirgEKEVdlYXBvblBhaW50Q29uZmlnEgoKAmlkGAEgASgNEhQKDHJlc291",
            "cmNlTmFtZRgCIAEoCRIPCgdXZWFyU1JUGAMgASgJEhEKCUdydW5nZVNSVBgE",
            "IAEoCRI6CglwYWludERhdGEYBSADKAsyJy5EMTEuUGJlYW5zLldlYXBvblBh",
            "aW50Q29uZmlnX3BhaW50RGF0YRIXCg9Vc2VBbHBoYUJsZW5kZWQYBiABKAgi",
            "RAobV2VhcG9uUGFpbnRDb25maWdfcGFpbnREYXRhEg8KB1VWU2NhbGUYASAB",
            "KAISFAoMV2VhcG9uTGVuZ3RoGAIgASgCIkcKF1dlYXBvblBhaW50Q29uZmln",
            "X0FycmF5EiwKBWl0ZW1zGAEgAygLMh0uRDExLlBiZWFucy5XZWFwb25QYWlu",
            "dENvbmZpZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.WeaponPaintConfig), global::D11.Pbeans.WeaponPaintConfig.Parser, new[]{ "Id", "ResourceName", "WearSRT", "GrungeSRT", "PaintData", "UseAlphaBlended" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.WeaponPaintConfig_paintData), global::D11.Pbeans.WeaponPaintConfig_paintData.Parser, new[]{ "UVScale", "WeaponLength" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.WeaponPaintConfig_Array), global::D11.Pbeans.WeaponPaintConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponPaintConfig : pb::IMessage<WeaponPaintConfig> {
    private static readonly pb::MessageParser<WeaponPaintConfig> _parser = new pb::MessageParser<WeaponPaintConfig>(() => new WeaponPaintConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponPaintConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansWeaponpaintconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintConfig(WeaponPaintConfig other) : this() {
      id_ = other.id_;
      resourceName_ = other.resourceName_;
      wearSRT_ = other.wearSRT_;
      grungeSRT_ = other.grungeSRT_;
      paintData_ = other.paintData_.Clone();
      useAlphaBlended_ = other.useAlphaBlended_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintConfig Clone() {
      return new WeaponPaintConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// configid，武器id 前五位 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "resourceName" field.</summary>
    public const int ResourceNameFieldNumber = 2;
    private string resourceName_ = "";
    /// <summary>
    /// 黑皮材质路径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceName {
      get { return resourceName_; }
      set {
        resourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WearSRT" field.</summary>
    public const int WearSRTFieldNumber = 3;
    private string wearSRT_ = "";
    /// <summary>
    /// WEAR贴图的缩放旋转平移值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WearSRT {
      get { return wearSRT_; }
      set {
        wearSRT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GrungeSRT" field.</summary>
    public const int GrungeSRTFieldNumber = 4;
    private string grungeSRT_ = "";
    /// <summary>
    /// Grunge贴图的缩放旋转平移值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GrungeSRT {
      get { return grungeSRT_; }
      set {
        grungeSRT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "paintData" field.</summary>
    public const int PaintDataFieldNumber = 5;
    private static readonly pb::FieldCodec<global::D11.Pbeans.WeaponPaintConfig_paintData> _repeated_paintData_codec
        = pb::FieldCodec.ForMessage(42, global::D11.Pbeans.WeaponPaintConfig_paintData.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.WeaponPaintConfig_paintData> paintData_ = new pbc::RepeatedField<global::D11.Pbeans.WeaponPaintConfig_paintData>();
    /// <summary>
    /// 皮肤默认缩放系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.WeaponPaintConfig_paintData> PaintData {
      get { return paintData_; }
    }

    /// <summary>Field number for the "UseAlphaBlended" field.</summary>
    public const int UseAlphaBlendedFieldNumber = 6;
    private bool useAlphaBlended_;
    /// <summary>
    /// 开启透明通道 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseAlphaBlended {
      get { return useAlphaBlended_; }
      set {
        useAlphaBlended_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponPaintConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponPaintConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ResourceName != other.ResourceName) return false;
      if (WearSRT != other.WearSRT) return false;
      if (GrungeSRT != other.GrungeSRT) return false;
      if(!paintData_.Equals(other.paintData_)) return false;
      if (UseAlphaBlended != other.UseAlphaBlended) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
      if (WearSRT.Length != 0) hash ^= WearSRT.GetHashCode();
      if (GrungeSRT.Length != 0) hash ^= GrungeSRT.GetHashCode();
      hash ^= paintData_.GetHashCode();
      if (UseAlphaBlended != false) hash ^= UseAlphaBlended.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (ResourceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ResourceName);
      }
      if (WearSRT.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WearSRT);
      }
      if (GrungeSRT.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GrungeSRT);
      }
      paintData_.WriteTo(output, _repeated_paintData_codec);
      if (UseAlphaBlended != false) {
        output.WriteRawTag(48);
        output.WriteBool(UseAlphaBlended);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (ResourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
      }
      if (WearSRT.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WearSRT);
      }
      if (GrungeSRT.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GrungeSRT);
      }
      size += paintData_.CalculateSize(_repeated_paintData_codec);
      if (UseAlphaBlended != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponPaintConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ResourceName.Length != 0) {
        ResourceName = other.ResourceName;
      }
      if (other.WearSRT.Length != 0) {
        WearSRT = other.WearSRT;
      }
      if (other.GrungeSRT.Length != 0) {
        GrungeSRT = other.GrungeSRT;
      }
      paintData_.Add(other.paintData_);
      if (other.UseAlphaBlended != false) {
        UseAlphaBlended = other.UseAlphaBlended;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            ResourceName = input.ReadString();
            break;
          }
          case 26: {
            WearSRT = input.ReadString();
            break;
          }
          case 34: {
            GrungeSRT = input.ReadString();
            break;
          }
          case 42: {
            paintData_.AddEntriesFrom(input, _repeated_paintData_codec);
            break;
          }
          case 48: {
            UseAlphaBlended = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WeaponPaintConfig_paintData : pb::IMessage<WeaponPaintConfig_paintData> {
    private static readonly pb::MessageParser<WeaponPaintConfig_paintData> _parser = new pb::MessageParser<WeaponPaintConfig_paintData>(() => new WeaponPaintConfig_paintData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponPaintConfig_paintData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansWeaponpaintconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintConfig_paintData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintConfig_paintData(WeaponPaintConfig_paintData other) : this() {
      uVScale_ = other.uVScale_;
      weaponLength_ = other.weaponLength_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintConfig_paintData Clone() {
      return new WeaponPaintConfig_paintData(this);
    }

    /// <summary>Field number for the "UVScale" field.</summary>
    public const int UVScaleFieldNumber = 1;
    private float uVScale_;
    /// <summary>
    /// 皮肤默认缩放系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UVScale {
      get { return uVScale_; }
      set {
        uVScale_ = value;
      }
    }

    /// <summary>Field number for the "WeaponLength" field.</summary>
    public const int WeaponLengthFieldNumber = 2;
    private float weaponLength_;
    /// <summary>
    /// 武器的长度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeaponLength {
      get { return weaponLength_; }
      set {
        weaponLength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponPaintConfig_paintData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponPaintConfig_paintData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UVScale, other.UVScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WeaponLength, other.WeaponLength)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UVScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UVScale);
      if (WeaponLength != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WeaponLength);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UVScale != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(UVScale);
      }
      if (WeaponLength != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(WeaponLength);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UVScale != 0F) {
        size += 1 + 4;
      }
      if (WeaponLength != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponPaintConfig_paintData other) {
      if (other == null) {
        return;
      }
      if (other.UVScale != 0F) {
        UVScale = other.UVScale;
      }
      if (other.WeaponLength != 0F) {
        WeaponLength = other.WeaponLength;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            UVScale = input.ReadFloat();
            break;
          }
          case 21: {
            WeaponLength = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WeaponPaintConfig_Array : pb::IMessage<WeaponPaintConfig_Array> {
    private static readonly pb::MessageParser<WeaponPaintConfig_Array> _parser = new pb::MessageParser<WeaponPaintConfig_Array>(() => new WeaponPaintConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponPaintConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansWeaponpaintconfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintConfig_Array(WeaponPaintConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintConfig_Array Clone() {
      return new WeaponPaintConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.WeaponPaintConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.WeaponPaintConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.WeaponPaintConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.WeaponPaintConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.WeaponPaintConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponPaintConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponPaintConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponPaintConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
