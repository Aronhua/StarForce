// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_weaponpaintkitconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_weaponpaintkitconfig.proto</summary>
  public static partial class XlsBeansWeaponpaintkitconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_weaponpaintkitconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansWeaponpaintkitconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiR4bHNfYmVhbnNfd2VhcG9ucGFpbnRraXRjb25maWcucHJvdG8SCkQxMS5Q",
            "YmVhbnMiqAgKFFdlYXBvblBhaW50S2l0Q29uZmlnEgoKAmlkGAEgASgNEgwK",
            "BG5hbWUYAiABKAkSFAoMbWF0ZXJpYWxOYW1lGAMgASgJEg0KBXN0eWxlGAQg",
            "ASgNEhAKCGNvbmZpZ0lkGAUgASgNEhoKEmRlc2NyaXB0aW9uX3N0cmluZxgG",
            "IAEoCRIXCg9kZXNjcmlwdGlvbl90YWcYByABKAkSDwoHcGF0dGVybhgIIAEo",
            "CRIQCghiYXNlTmFtZRgJIAEoCRISCgp1c2Vfbm9ybWFsGAogASgIEhkKEXVz",
            "ZV9za2luQXNEZWZhdWx0GAsgASgIEhoKEnVzZV9kZWZhdWx0VGV4dHVyZRgM",
            "IAEoCBIUCgxkZWZhdWx0Q29sb3IYDSABKAkSGQoRdXNlX3Njb3BlTWF0ZXJp",
            "YWwYDiABKAgSFAoMd2Vhcl9kZWZhdWx0GA8gASgCEhYKDndlYXJfcmVtYXBf",
            "bWluGBAgASgCEhYKDndlYXJfcmVtYXBfbWF4GBEgASgCEg4KBmNvbG9yMBgS",
            "IAEoCRIOCgZjb2xvcjEYEyABKAkSDgoGY29sb3IyGBQgASgJEg4KBmNvbG9y",
            "MxgVIAEoCRIVCg1wYXR0ZXJuX3NjYWxlGBYgASgCEiAKGGlnbm9yZV93ZWFw",
            "b25fc2l6ZV9zY2FsZRgXIAEoCBIbChNvbmx5X2ZpcnN0X21hdGVyaWFsGBgg",
            "ASgIEh4KFnBhdHRlcm5fb2Zmc2V0X3hfc3RhcnQYGSABKAISHAoUcGF0dGVy",
            "bl9vZmZzZXRfeF9lbmQYGiABKAISHgoWcGF0dGVybl9vZmZzZXRfeV9zdGFy",
            "dBgbIAEoAhIcChRwYXR0ZXJuX29mZnNldF95X2VuZBgcIAEoAhIcChRwYXR0",
            "ZXJuX3JvdGF0ZV9zdGFydBgdIAEoAhIaChJwYXR0ZXJuX3JvdGF0ZV9lbmQY",
            "HiABKAISFQoNcGVhcmxfcGVyY2VudBgfIAEoDRIWCg5tYXRfYnJpZ2h0X21p",
            "bhggIAEoAhIWCg5tYXRfYnJpZ2h0X21heBghIAEoAhI/CgptYXRfYnJpZ2h0",
            "GCIgAygLMisuRDExLlBiZWFucy5XZWFwb25QYWludEtpdENvbmZpZ19tYXRf",
            "YnJpZ2h0EkMKDHBhcnRpY2FsX251bRgjIAMoCzItLkQxMS5QYmVhbnMuV2Vh",
            "cG9uUGFpbnRLaXRDb25maWdfcGFydGljYWxfbnVtEhAKCGluaXRXZWFyGCQg",
            "ASgNEjMKBHdlYXIYJSADKAsyJS5EMTEuUGJlYW5zLldlYXBvblBhaW50S2l0",
            "Q29uZmlnX3dlYXISEAoIaW5pdFNlZWQYJiABKA0SMwoEc2VlZBgnIAMoCzIl",
            "LkQxMS5QYmVhbnMuV2VhcG9uUGFpbnRLaXRDb25maWdfc2VlZCJJCh9XZWFw",
            "b25QYWludEtpdENvbmZpZ19tYXRfYnJpZ2h0EgwKBG5hbWUYASABKAkSCwoD",
            "bWluGAIgASgCEgsKA21heBgDIAEoAiJLCiFXZWFwb25QYWludEtpdENvbmZp",
            "Z19wYXJ0aWNhbF9udW0SDAoEbmFtZRgBIAEoCRILCgNtaW4YAiABKA0SCwoD",
            "bWF4GAMgASgNIkUKGVdlYXBvblBhaW50S2l0Q29uZmlnX3dlYXISCwoDbWlu",
            "GAEgASgNEgsKA21heBgCIAEoDRIOCgZ3ZWlnaHQYAyABKA0iRQoZV2VhcG9u",
            "UGFpbnRLaXRDb25maWdfc2VlZBILCgNtaW4YASABKA0SCwoDbWF4GAIgASgN",
            "Eg4KBndlaWdodBgDIAEoDSJNChpXZWFwb25QYWludEtpdENvbmZpZ19BcnJh",
            "eRIvCgVpdGVtcxgBIAMoCzIgLkQxMS5QYmVhbnMuV2VhcG9uUGFpbnRLaXRD",
            "b25maWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.WeaponPaintKitConfig), global::D11.Pbeans.WeaponPaintKitConfig.Parser, new[]{ "Id", "Name", "MaterialName", "Style", "ConfigId", "DescriptionString", "DescriptionTag", "Pattern", "BaseName", "UseNormal", "UseSkinAsDefault", "UseDefaultTexture", "DefaultColor", "UseScopeMaterial", "WearDefault", "WearRemapMin", "WearRemapMax", "Color0", "Color1", "Color2", "Color3", "PatternScale", "IgnoreWeaponSizeScale", "OnlyFirstMaterial", "PatternOffsetXStart", "PatternOffsetXEnd", "PatternOffsetYStart", "PatternOffsetYEnd", "PatternRotateStart", "PatternRotateEnd", "PearlPercent", "MatBrightMin", "MatBrightMax", "MatBright", "ParticalNum", "InitWear", "Wear", "InitSeed", "Seed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.WeaponPaintKitConfig_mat_bright), global::D11.Pbeans.WeaponPaintKitConfig_mat_bright.Parser, new[]{ "Name", "Min", "Max" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.WeaponPaintKitConfig_partical_num), global::D11.Pbeans.WeaponPaintKitConfig_partical_num.Parser, new[]{ "Name", "Min", "Max" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.WeaponPaintKitConfig_wear), global::D11.Pbeans.WeaponPaintKitConfig_wear.Parser, new[]{ "Min", "Max", "Weight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.WeaponPaintKitConfig_seed), global::D11.Pbeans.WeaponPaintKitConfig_seed.Parser, new[]{ "Min", "Max", "Weight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.WeaponPaintKitConfig_Array), global::D11.Pbeans.WeaponPaintKitConfig_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponPaintKitConfig : pb::IMessage<WeaponPaintKitConfig> {
    private static readonly pb::MessageParser<WeaponPaintKitConfig> _parser = new pb::MessageParser<WeaponPaintKitConfig>(() => new WeaponPaintKitConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponPaintKitConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansWeaponpaintkitconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig(WeaponPaintKitConfig other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      materialName_ = other.materialName_;
      style_ = other.style_;
      configId_ = other.configId_;
      descriptionString_ = other.descriptionString_;
      descriptionTag_ = other.descriptionTag_;
      pattern_ = other.pattern_;
      baseName_ = other.baseName_;
      useNormal_ = other.useNormal_;
      useSkinAsDefault_ = other.useSkinAsDefault_;
      useDefaultTexture_ = other.useDefaultTexture_;
      defaultColor_ = other.defaultColor_;
      useScopeMaterial_ = other.useScopeMaterial_;
      wearDefault_ = other.wearDefault_;
      wearRemapMin_ = other.wearRemapMin_;
      wearRemapMax_ = other.wearRemapMax_;
      color0_ = other.color0_;
      color1_ = other.color1_;
      color2_ = other.color2_;
      color3_ = other.color3_;
      patternScale_ = other.patternScale_;
      ignoreWeaponSizeScale_ = other.ignoreWeaponSizeScale_;
      onlyFirstMaterial_ = other.onlyFirstMaterial_;
      patternOffsetXStart_ = other.patternOffsetXStart_;
      patternOffsetXEnd_ = other.patternOffsetXEnd_;
      patternOffsetYStart_ = other.patternOffsetYStart_;
      patternOffsetYEnd_ = other.patternOffsetYEnd_;
      patternRotateStart_ = other.patternRotateStart_;
      patternRotateEnd_ = other.patternRotateEnd_;
      pearlPercent_ = other.pearlPercent_;
      matBrightMin_ = other.matBrightMin_;
      matBrightMax_ = other.matBrightMax_;
      matBright_ = other.matBright_.Clone();
      particalNum_ = other.particalNum_.Clone();
      initWear_ = other.initWear_;
      wear_ = other.wear_.Clone();
      initSeed_ = other.initSeed_;
      seed_ = other.seed_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig Clone() {
      return new WeaponPaintKitConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// paintkit的id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 武器名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "materialName" field.</summary>
    public const int MaterialNameFieldNumber = 3;
    private string materialName_ = "";
    /// <summary>
    /// 材质名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaterialName {
      get { return materialName_; }
      set {
        materialName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 4;
    private uint style_;
    /// <summary>
    /// 风格 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Style {
      get { return style_; }
      set {
        style_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 5;
    private uint configId_;
    /// <summary>
    /// 武器的基本贴图以及参数配置 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "description_string" field.</summary>
    public const int DescriptionStringFieldNumber = 6;
    private string descriptionString_ = "";
    /// <summary>
    /// 描述 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescriptionString {
      get { return descriptionString_; }
      set {
        descriptionString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description_tag" field.</summary>
    public const int DescriptionTagFieldNumber = 7;
    private string descriptionTag_ = "";
    /// <summary>
    /// 描述标签 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescriptionTag {
      get { return descriptionTag_; }
      set {
        descriptionTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pattern" field.</summary>
    public const int PatternFieldNumber = 8;
    private string pattern_ = "";
    /// <summary>
    /// 贴图名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pattern {
      get { return pattern_; }
      set {
        pattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "baseName" field.</summary>
    public const int BaseNameFieldNumber = 9;
    private string baseName_ = "";
    /// <summary>
    /// 法线名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseName {
      get { return baseName_; }
      set {
        baseName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use_normal" field.</summary>
    public const int UseNormalFieldNumber = 10;
    private bool useNormal_;
    /// <summary>
    /// 是否要使用法线 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseNormal {
      get { return useNormal_; }
      set {
        useNormal_ = value;
      }
    }

    /// <summary>Field number for the "use_skinAsDefault" field.</summary>
    public const int UseSkinAsDefaultFieldNumber = 11;
    private bool useSkinAsDefault_;
    /// <summary>
    /// 是否要使用皮肤图作为黑皮图 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseSkinAsDefault {
      get { return useSkinAsDefault_; }
      set {
        useSkinAsDefault_ = value;
      }
    }

    /// <summary>Field number for the "use_defaultTexture" field.</summary>
    public const int UseDefaultTextureFieldNumber = 12;
    private bool useDefaultTexture_;
    /// <summary>
    /// 是否要使用黑皮 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseDefaultTexture {
      get { return useDefaultTexture_; }
      set {
        useDefaultTexture_ = value;
      }
    }

    /// <summary>Field number for the "defaultColor" field.</summary>
    public const int DefaultColorFieldNumber = 13;
    private string defaultColor_ = "";
    /// <summary>
    /// 无黑皮采样底色 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultColor {
      get { return defaultColor_; }
      set {
        defaultColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use_scopeMaterial" field.</summary>
    public const int UseScopeMaterialFieldNumber = 14;
    private bool useScopeMaterial_;
    /// <summary>
    /// 是否使用镜筒材质 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseScopeMaterial {
      get { return useScopeMaterial_; }
      set {
        useScopeMaterial_ = value;
      }
    }

    /// <summary>Field number for the "wear_default" field.</summary>
    public const int WearDefaultFieldNumber = 15;
    private float wearDefault_;
    /// <summary>
    /// 默认展示磨损值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WearDefault {
      get { return wearDefault_; }
      set {
        wearDefault_ = value;
      }
    }

    /// <summary>Field number for the "wear_remap_min" field.</summary>
    public const int WearRemapMinFieldNumber = 16;
    private float wearRemapMin_;
    /// <summary>
    /// 最小磨损值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WearRemapMin {
      get { return wearRemapMin_; }
      set {
        wearRemapMin_ = value;
      }
    }

    /// <summary>Field number for the "wear_remap_max" field.</summary>
    public const int WearRemapMaxFieldNumber = 17;
    private float wearRemapMax_;
    /// <summary>
    /// 最大磨损值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WearRemapMax {
      get { return wearRemapMax_; }
      set {
        wearRemapMax_ = value;
      }
    }

    /// <summary>Field number for the "color0" field.</summary>
    public const int Color0FieldNumber = 18;
    private string color0_ = "";
    /// <summary>
    /// 颜色0 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color0 {
      get { return color0_; }
      set {
        color0_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color1" field.</summary>
    public const int Color1FieldNumber = 19;
    private string color1_ = "";
    /// <summary>
    /// 颜色1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color1 {
      get { return color1_; }
      set {
        color1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color2" field.</summary>
    public const int Color2FieldNumber = 20;
    private string color2_ = "";
    /// <summary>
    /// 颜色2 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color2 {
      get { return color2_; }
      set {
        color2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color3" field.</summary>
    public const int Color3FieldNumber = 21;
    private string color3_ = "";
    /// <summary>
    /// 颜色3 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color3 {
      get { return color3_; }
      set {
        color3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pattern_scale" field.</summary>
    public const int PatternScaleFieldNumber = 22;
    private float patternScale_;
    /// <summary>
    /// 图形缩放系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PatternScale {
      get { return patternScale_; }
      set {
        patternScale_ = value;
      }
    }

    /// <summary>Field number for the "ignore_weapon_size_scale" field.</summary>
    public const int IgnoreWeaponSizeScaleFieldNumber = 23;
    private bool ignoreWeaponSizeScale_;
    /// <summary>
    /// 是否忽略武器大小 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreWeaponSizeScale {
      get { return ignoreWeaponSizeScale_; }
      set {
        ignoreWeaponSizeScale_ = value;
      }
    }

    /// <summary>Field number for the "only_first_material" field.</summary>
    public const int OnlyFirstMaterialFieldNumber = 24;
    private bool onlyFirstMaterial_;
    /// <summary>
    /// 只有第一个材质 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnlyFirstMaterial {
      get { return onlyFirstMaterial_; }
      set {
        onlyFirstMaterial_ = value;
      }
    }

    /// <summary>Field number for the "pattern_offset_x_start" field.</summary>
    public const int PatternOffsetXStartFieldNumber = 25;
    private float patternOffsetXStart_;
    /// <summary>
    /// 皮肤x方向偏移起始值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PatternOffsetXStart {
      get { return patternOffsetXStart_; }
      set {
        patternOffsetXStart_ = value;
      }
    }

    /// <summary>Field number for the "pattern_offset_x_end" field.</summary>
    public const int PatternOffsetXEndFieldNumber = 26;
    private float patternOffsetXEnd_;
    /// <summary>
    /// 皮肤x方向偏移终止值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PatternOffsetXEnd {
      get { return patternOffsetXEnd_; }
      set {
        patternOffsetXEnd_ = value;
      }
    }

    /// <summary>Field number for the "pattern_offset_y_start" field.</summary>
    public const int PatternOffsetYStartFieldNumber = 27;
    private float patternOffsetYStart_;
    /// <summary>
    /// 皮肤y方向偏移起始值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PatternOffsetYStart {
      get { return patternOffsetYStart_; }
      set {
        patternOffsetYStart_ = value;
      }
    }

    /// <summary>Field number for the "pattern_offset_y_end" field.</summary>
    public const int PatternOffsetYEndFieldNumber = 28;
    private float patternOffsetYEnd_;
    /// <summary>
    /// 皮肤y方向偏移终止值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PatternOffsetYEnd {
      get { return patternOffsetYEnd_; }
      set {
        patternOffsetYEnd_ = value;
      }
    }

    /// <summary>Field number for the "pattern_rotate_start" field.</summary>
    public const int PatternRotateStartFieldNumber = 29;
    private float patternRotateStart_;
    /// <summary>
    /// 皮肤旋转起始值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PatternRotateStart {
      get { return patternRotateStart_; }
      set {
        patternRotateStart_ = value;
      }
    }

    /// <summary>Field number for the "pattern_rotate_end" field.</summary>
    public const int PatternRotateEndFieldNumber = 30;
    private float patternRotateEnd_;
    /// <summary>
    /// 皮肤旋转终止值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PatternRotateEnd {
      get { return patternRotateEnd_; }
      set {
        patternRotateEnd_ = value;
      }
    }

    /// <summary>Field number for the "pearl_percent" field.</summary>
    public const int PearlPercentFieldNumber = 31;
    private uint pearlPercent_;
    /// <summary>
    /// 珍珠色混合百分比 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PearlPercent {
      get { return pearlPercent_; }
      set {
        pearlPercent_ = value;
      }
    }

    /// <summary>Field number for the "mat_bright_min" field.</summary>
    public const int MatBrightMinFieldNumber = 32;
    private float matBrightMin_;
    /// <summary>
    /// 统一最低亮度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MatBrightMin {
      get { return matBrightMin_; }
      set {
        matBrightMin_ = value;
      }
    }

    /// <summary>Field number for the "mat_bright_max" field.</summary>
    public const int MatBrightMaxFieldNumber = 33;
    private float matBrightMax_;
    /// <summary>
    /// 统一基础亮度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MatBrightMax {
      get { return matBrightMax_; }
      set {
        matBrightMax_ = value;
      }
    }

    /// <summary>Field number for the "mat_bright" field.</summary>
    public const int MatBrightFieldNumber = 34;
    private static readonly pb::FieldCodec<global::D11.Pbeans.WeaponPaintKitConfig_mat_bright> _repeated_matBright_codec
        = pb::FieldCodec.ForMessage(274, global::D11.Pbeans.WeaponPaintKitConfig_mat_bright.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.WeaponPaintKitConfig_mat_bright> matBright_ = new pbc::RepeatedField<global::D11.Pbeans.WeaponPaintKitConfig_mat_bright>();
    /// <summary>
    /// 材质名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.WeaponPaintKitConfig_mat_bright> MatBright {
      get { return matBright_; }
    }

    /// <summary>Field number for the "partical_num" field.</summary>
    public const int ParticalNumFieldNumber = 35;
    private static readonly pb::FieldCodec<global::D11.Pbeans.WeaponPaintKitConfig_partical_num> _repeated_particalNum_codec
        = pb::FieldCodec.ForMessage(282, global::D11.Pbeans.WeaponPaintKitConfig_partical_num.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.WeaponPaintKitConfig_partical_num> particalNum_ = new pbc::RepeatedField<global::D11.Pbeans.WeaponPaintKitConfig_partical_num>();
    /// <summary>
    /// 粒子名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.WeaponPaintKitConfig_partical_num> ParticalNum {
      get { return particalNum_; }
    }

    /// <summary>Field number for the "initWear" field.</summary>
    public const int InitWearFieldNumber = 36;
    private uint initWear_;
    /// <summary>
    /// 默认展示磨损 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InitWear {
      get { return initWear_; }
      set {
        initWear_ = value;
      }
    }

    /// <summary>Field number for the "wear" field.</summary>
    public const int WearFieldNumber = 37;
    private static readonly pb::FieldCodec<global::D11.Pbeans.WeaponPaintKitConfig_wear> _repeated_wear_codec
        = pb::FieldCodec.ForMessage(298, global::D11.Pbeans.WeaponPaintKitConfig_wear.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.WeaponPaintKitConfig_wear> wear_ = new pbc::RepeatedField<global::D11.Pbeans.WeaponPaintKitConfig_wear>();
    /// <summary>
    /// 磨损度分段1下限(最小0) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.WeaponPaintKitConfig_wear> Wear {
      get { return wear_; }
    }

    /// <summary>Field number for the "initSeed" field.</summary>
    public const int InitSeedFieldNumber = 38;
    private uint initSeed_;
    /// <summary>
    /// 默认展示模板 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InitSeed {
      get { return initSeed_; }
      set {
        initSeed_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 39;
    private static readonly pb::FieldCodec<global::D11.Pbeans.WeaponPaintKitConfig_seed> _repeated_seed_codec
        = pb::FieldCodec.ForMessage(314, global::D11.Pbeans.WeaponPaintKitConfig_seed.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.WeaponPaintKitConfig_seed> seed_ = new pbc::RepeatedField<global::D11.Pbeans.WeaponPaintKitConfig_seed>();
    /// <summary>
    /// 模板参数分段1下限(包含) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.WeaponPaintKitConfig_seed> Seed {
      get { return seed_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponPaintKitConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponPaintKitConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (MaterialName != other.MaterialName) return false;
      if (Style != other.Style) return false;
      if (ConfigId != other.ConfigId) return false;
      if (DescriptionString != other.DescriptionString) return false;
      if (DescriptionTag != other.DescriptionTag) return false;
      if (Pattern != other.Pattern) return false;
      if (BaseName != other.BaseName) return false;
      if (UseNormal != other.UseNormal) return false;
      if (UseSkinAsDefault != other.UseSkinAsDefault) return false;
      if (UseDefaultTexture != other.UseDefaultTexture) return false;
      if (DefaultColor != other.DefaultColor) return false;
      if (UseScopeMaterial != other.UseScopeMaterial) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WearDefault, other.WearDefault)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WearRemapMin, other.WearRemapMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WearRemapMax, other.WearRemapMax)) return false;
      if (Color0 != other.Color0) return false;
      if (Color1 != other.Color1) return false;
      if (Color2 != other.Color2) return false;
      if (Color3 != other.Color3) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PatternScale, other.PatternScale)) return false;
      if (IgnoreWeaponSizeScale != other.IgnoreWeaponSizeScale) return false;
      if (OnlyFirstMaterial != other.OnlyFirstMaterial) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PatternOffsetXStart, other.PatternOffsetXStart)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PatternOffsetXEnd, other.PatternOffsetXEnd)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PatternOffsetYStart, other.PatternOffsetYStart)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PatternOffsetYEnd, other.PatternOffsetYEnd)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PatternRotateStart, other.PatternRotateStart)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PatternRotateEnd, other.PatternRotateEnd)) return false;
      if (PearlPercent != other.PearlPercent) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MatBrightMin, other.MatBrightMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MatBrightMax, other.MatBrightMax)) return false;
      if(!matBright_.Equals(other.matBright_)) return false;
      if(!particalNum_.Equals(other.particalNum_)) return false;
      if (InitWear != other.InitWear) return false;
      if(!wear_.Equals(other.wear_)) return false;
      if (InitSeed != other.InitSeed) return false;
      if(!seed_.Equals(other.seed_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MaterialName.Length != 0) hash ^= MaterialName.GetHashCode();
      if (Style != 0) hash ^= Style.GetHashCode();
      if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
      if (DescriptionString.Length != 0) hash ^= DescriptionString.GetHashCode();
      if (DescriptionTag.Length != 0) hash ^= DescriptionTag.GetHashCode();
      if (Pattern.Length != 0) hash ^= Pattern.GetHashCode();
      if (BaseName.Length != 0) hash ^= BaseName.GetHashCode();
      if (UseNormal != false) hash ^= UseNormal.GetHashCode();
      if (UseSkinAsDefault != false) hash ^= UseSkinAsDefault.GetHashCode();
      if (UseDefaultTexture != false) hash ^= UseDefaultTexture.GetHashCode();
      if (DefaultColor.Length != 0) hash ^= DefaultColor.GetHashCode();
      if (UseScopeMaterial != false) hash ^= UseScopeMaterial.GetHashCode();
      if (WearDefault != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WearDefault);
      if (WearRemapMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WearRemapMin);
      if (WearRemapMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WearRemapMax);
      if (Color0.Length != 0) hash ^= Color0.GetHashCode();
      if (Color1.Length != 0) hash ^= Color1.GetHashCode();
      if (Color2.Length != 0) hash ^= Color2.GetHashCode();
      if (Color3.Length != 0) hash ^= Color3.GetHashCode();
      if (PatternScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PatternScale);
      if (IgnoreWeaponSizeScale != false) hash ^= IgnoreWeaponSizeScale.GetHashCode();
      if (OnlyFirstMaterial != false) hash ^= OnlyFirstMaterial.GetHashCode();
      if (PatternOffsetXStart != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PatternOffsetXStart);
      if (PatternOffsetXEnd != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PatternOffsetXEnd);
      if (PatternOffsetYStart != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PatternOffsetYStart);
      if (PatternOffsetYEnd != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PatternOffsetYEnd);
      if (PatternRotateStart != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PatternRotateStart);
      if (PatternRotateEnd != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PatternRotateEnd);
      if (PearlPercent != 0) hash ^= PearlPercent.GetHashCode();
      if (MatBrightMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MatBrightMin);
      if (MatBrightMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MatBrightMax);
      hash ^= matBright_.GetHashCode();
      hash ^= particalNum_.GetHashCode();
      if (InitWear != 0) hash ^= InitWear.GetHashCode();
      hash ^= wear_.GetHashCode();
      if (InitSeed != 0) hash ^= InitSeed.GetHashCode();
      hash ^= seed_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MaterialName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MaterialName);
      }
      if (Style != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Style);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ConfigId);
      }
      if (DescriptionString.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DescriptionString);
      }
      if (DescriptionTag.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DescriptionTag);
      }
      if (Pattern.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Pattern);
      }
      if (BaseName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(BaseName);
      }
      if (UseNormal != false) {
        output.WriteRawTag(80);
        output.WriteBool(UseNormal);
      }
      if (UseSkinAsDefault != false) {
        output.WriteRawTag(88);
        output.WriteBool(UseSkinAsDefault);
      }
      if (UseDefaultTexture != false) {
        output.WriteRawTag(96);
        output.WriteBool(UseDefaultTexture);
      }
      if (DefaultColor.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(DefaultColor);
      }
      if (UseScopeMaterial != false) {
        output.WriteRawTag(112);
        output.WriteBool(UseScopeMaterial);
      }
      if (WearDefault != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(WearDefault);
      }
      if (WearRemapMin != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(WearRemapMin);
      }
      if (WearRemapMax != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(WearRemapMax);
      }
      if (Color0.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Color0);
      }
      if (Color1.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Color1);
      }
      if (Color2.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Color2);
      }
      if (Color3.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Color3);
      }
      if (PatternScale != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(PatternScale);
      }
      if (IgnoreWeaponSizeScale != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(IgnoreWeaponSizeScale);
      }
      if (OnlyFirstMaterial != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(OnlyFirstMaterial);
      }
      if (PatternOffsetXStart != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(PatternOffsetXStart);
      }
      if (PatternOffsetXEnd != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(PatternOffsetXEnd);
      }
      if (PatternOffsetYStart != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(PatternOffsetYStart);
      }
      if (PatternOffsetYEnd != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(PatternOffsetYEnd);
      }
      if (PatternRotateStart != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(PatternRotateStart);
      }
      if (PatternRotateEnd != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(PatternRotateEnd);
      }
      if (PearlPercent != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(PearlPercent);
      }
      if (MatBrightMin != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(MatBrightMin);
      }
      if (MatBrightMax != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(MatBrightMax);
      }
      matBright_.WriteTo(output, _repeated_matBright_codec);
      particalNum_.WriteTo(output, _repeated_particalNum_codec);
      if (InitWear != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(InitWear);
      }
      wear_.WriteTo(output, _repeated_wear_codec);
      if (InitSeed != 0) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(InitSeed);
      }
      seed_.WriteTo(output, _repeated_seed_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MaterialName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaterialName);
      }
      if (Style != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Style);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfigId);
      }
      if (DescriptionString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescriptionString);
      }
      if (DescriptionTag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescriptionTag);
      }
      if (Pattern.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pattern);
      }
      if (BaseName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseName);
      }
      if (UseNormal != false) {
        size += 1 + 1;
      }
      if (UseSkinAsDefault != false) {
        size += 1 + 1;
      }
      if (UseDefaultTexture != false) {
        size += 1 + 1;
      }
      if (DefaultColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultColor);
      }
      if (UseScopeMaterial != false) {
        size += 1 + 1;
      }
      if (WearDefault != 0F) {
        size += 1 + 4;
      }
      if (WearRemapMin != 0F) {
        size += 2 + 4;
      }
      if (WearRemapMax != 0F) {
        size += 2 + 4;
      }
      if (Color0.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Color0);
      }
      if (Color1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Color1);
      }
      if (Color2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Color2);
      }
      if (Color3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Color3);
      }
      if (PatternScale != 0F) {
        size += 2 + 4;
      }
      if (IgnoreWeaponSizeScale != false) {
        size += 2 + 1;
      }
      if (OnlyFirstMaterial != false) {
        size += 2 + 1;
      }
      if (PatternOffsetXStart != 0F) {
        size += 2 + 4;
      }
      if (PatternOffsetXEnd != 0F) {
        size += 2 + 4;
      }
      if (PatternOffsetYStart != 0F) {
        size += 2 + 4;
      }
      if (PatternOffsetYEnd != 0F) {
        size += 2 + 4;
      }
      if (PatternRotateStart != 0F) {
        size += 2 + 4;
      }
      if (PatternRotateEnd != 0F) {
        size += 2 + 4;
      }
      if (PearlPercent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PearlPercent);
      }
      if (MatBrightMin != 0F) {
        size += 2 + 4;
      }
      if (MatBrightMax != 0F) {
        size += 2 + 4;
      }
      size += matBright_.CalculateSize(_repeated_matBright_codec);
      size += particalNum_.CalculateSize(_repeated_particalNum_codec);
      if (InitWear != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(InitWear);
      }
      size += wear_.CalculateSize(_repeated_wear_codec);
      if (InitSeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(InitSeed);
      }
      size += seed_.CalculateSize(_repeated_seed_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponPaintKitConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MaterialName.Length != 0) {
        MaterialName = other.MaterialName;
      }
      if (other.Style != 0) {
        Style = other.Style;
      }
      if (other.ConfigId != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.DescriptionString.Length != 0) {
        DescriptionString = other.DescriptionString;
      }
      if (other.DescriptionTag.Length != 0) {
        DescriptionTag = other.DescriptionTag;
      }
      if (other.Pattern.Length != 0) {
        Pattern = other.Pattern;
      }
      if (other.BaseName.Length != 0) {
        BaseName = other.BaseName;
      }
      if (other.UseNormal != false) {
        UseNormal = other.UseNormal;
      }
      if (other.UseSkinAsDefault != false) {
        UseSkinAsDefault = other.UseSkinAsDefault;
      }
      if (other.UseDefaultTexture != false) {
        UseDefaultTexture = other.UseDefaultTexture;
      }
      if (other.DefaultColor.Length != 0) {
        DefaultColor = other.DefaultColor;
      }
      if (other.UseScopeMaterial != false) {
        UseScopeMaterial = other.UseScopeMaterial;
      }
      if (other.WearDefault != 0F) {
        WearDefault = other.WearDefault;
      }
      if (other.WearRemapMin != 0F) {
        WearRemapMin = other.WearRemapMin;
      }
      if (other.WearRemapMax != 0F) {
        WearRemapMax = other.WearRemapMax;
      }
      if (other.Color0.Length != 0) {
        Color0 = other.Color0;
      }
      if (other.Color1.Length != 0) {
        Color1 = other.Color1;
      }
      if (other.Color2.Length != 0) {
        Color2 = other.Color2;
      }
      if (other.Color3.Length != 0) {
        Color3 = other.Color3;
      }
      if (other.PatternScale != 0F) {
        PatternScale = other.PatternScale;
      }
      if (other.IgnoreWeaponSizeScale != false) {
        IgnoreWeaponSizeScale = other.IgnoreWeaponSizeScale;
      }
      if (other.OnlyFirstMaterial != false) {
        OnlyFirstMaterial = other.OnlyFirstMaterial;
      }
      if (other.PatternOffsetXStart != 0F) {
        PatternOffsetXStart = other.PatternOffsetXStart;
      }
      if (other.PatternOffsetXEnd != 0F) {
        PatternOffsetXEnd = other.PatternOffsetXEnd;
      }
      if (other.PatternOffsetYStart != 0F) {
        PatternOffsetYStart = other.PatternOffsetYStart;
      }
      if (other.PatternOffsetYEnd != 0F) {
        PatternOffsetYEnd = other.PatternOffsetYEnd;
      }
      if (other.PatternRotateStart != 0F) {
        PatternRotateStart = other.PatternRotateStart;
      }
      if (other.PatternRotateEnd != 0F) {
        PatternRotateEnd = other.PatternRotateEnd;
      }
      if (other.PearlPercent != 0) {
        PearlPercent = other.PearlPercent;
      }
      if (other.MatBrightMin != 0F) {
        MatBrightMin = other.MatBrightMin;
      }
      if (other.MatBrightMax != 0F) {
        MatBrightMax = other.MatBrightMax;
      }
      matBright_.Add(other.matBright_);
      particalNum_.Add(other.particalNum_);
      if (other.InitWear != 0) {
        InitWear = other.InitWear;
      }
      wear_.Add(other.wear_);
      if (other.InitSeed != 0) {
        InitSeed = other.InitSeed;
      }
      seed_.Add(other.seed_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            MaterialName = input.ReadString();
            break;
          }
          case 32: {
            Style = input.ReadUInt32();
            break;
          }
          case 40: {
            ConfigId = input.ReadUInt32();
            break;
          }
          case 50: {
            DescriptionString = input.ReadString();
            break;
          }
          case 58: {
            DescriptionTag = input.ReadString();
            break;
          }
          case 66: {
            Pattern = input.ReadString();
            break;
          }
          case 74: {
            BaseName = input.ReadString();
            break;
          }
          case 80: {
            UseNormal = input.ReadBool();
            break;
          }
          case 88: {
            UseSkinAsDefault = input.ReadBool();
            break;
          }
          case 96: {
            UseDefaultTexture = input.ReadBool();
            break;
          }
          case 106: {
            DefaultColor = input.ReadString();
            break;
          }
          case 112: {
            UseScopeMaterial = input.ReadBool();
            break;
          }
          case 125: {
            WearDefault = input.ReadFloat();
            break;
          }
          case 133: {
            WearRemapMin = input.ReadFloat();
            break;
          }
          case 141: {
            WearRemapMax = input.ReadFloat();
            break;
          }
          case 146: {
            Color0 = input.ReadString();
            break;
          }
          case 154: {
            Color1 = input.ReadString();
            break;
          }
          case 162: {
            Color2 = input.ReadString();
            break;
          }
          case 170: {
            Color3 = input.ReadString();
            break;
          }
          case 181: {
            PatternScale = input.ReadFloat();
            break;
          }
          case 184: {
            IgnoreWeaponSizeScale = input.ReadBool();
            break;
          }
          case 192: {
            OnlyFirstMaterial = input.ReadBool();
            break;
          }
          case 205: {
            PatternOffsetXStart = input.ReadFloat();
            break;
          }
          case 213: {
            PatternOffsetXEnd = input.ReadFloat();
            break;
          }
          case 221: {
            PatternOffsetYStart = input.ReadFloat();
            break;
          }
          case 229: {
            PatternOffsetYEnd = input.ReadFloat();
            break;
          }
          case 237: {
            PatternRotateStart = input.ReadFloat();
            break;
          }
          case 245: {
            PatternRotateEnd = input.ReadFloat();
            break;
          }
          case 248: {
            PearlPercent = input.ReadUInt32();
            break;
          }
          case 261: {
            MatBrightMin = input.ReadFloat();
            break;
          }
          case 269: {
            MatBrightMax = input.ReadFloat();
            break;
          }
          case 274: {
            matBright_.AddEntriesFrom(input, _repeated_matBright_codec);
            break;
          }
          case 282: {
            particalNum_.AddEntriesFrom(input, _repeated_particalNum_codec);
            break;
          }
          case 288: {
            InitWear = input.ReadUInt32();
            break;
          }
          case 298: {
            wear_.AddEntriesFrom(input, _repeated_wear_codec);
            break;
          }
          case 304: {
            InitSeed = input.ReadUInt32();
            break;
          }
          case 314: {
            seed_.AddEntriesFrom(input, _repeated_seed_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WeaponPaintKitConfig_mat_bright : pb::IMessage<WeaponPaintKitConfig_mat_bright> {
    private static readonly pb::MessageParser<WeaponPaintKitConfig_mat_bright> _parser = new pb::MessageParser<WeaponPaintKitConfig_mat_bright>(() => new WeaponPaintKitConfig_mat_bright());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponPaintKitConfig_mat_bright> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansWeaponpaintkitconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig_mat_bright() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig_mat_bright(WeaponPaintKitConfig_mat_bright other) : this() {
      name_ = other.name_;
      min_ = other.min_;
      max_ = other.max_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig_mat_bright Clone() {
      return new WeaponPaintKitConfig_mat_bright(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 材质名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 2;
    private float min_;
    /// <summary>
    /// 最低亮度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 3;
    private float max_;
    /// <summary>
    /// 最高亮度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponPaintKitConfig_mat_bright);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponPaintKitConfig_mat_bright other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Min, other.Min)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Max, other.Max)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Min != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Min);
      if (Max != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Max);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Min != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Min);
      }
      if (Max != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Max);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Min != 0F) {
        size += 1 + 4;
      }
      if (Max != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponPaintKitConfig_mat_bright other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Min != 0F) {
        Min = other.Min;
      }
      if (other.Max != 0F) {
        Max = other.Max;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 21: {
            Min = input.ReadFloat();
            break;
          }
          case 29: {
            Max = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WeaponPaintKitConfig_partical_num : pb::IMessage<WeaponPaintKitConfig_partical_num> {
    private static readonly pb::MessageParser<WeaponPaintKitConfig_partical_num> _parser = new pb::MessageParser<WeaponPaintKitConfig_partical_num>(() => new WeaponPaintKitConfig_partical_num());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponPaintKitConfig_partical_num> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansWeaponpaintkitconfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig_partical_num() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig_partical_num(WeaponPaintKitConfig_partical_num other) : this() {
      name_ = other.name_;
      min_ = other.min_;
      max_ = other.max_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig_partical_num Clone() {
      return new WeaponPaintKitConfig_partical_num(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 粒子名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 2;
    private uint min_;
    /// <summary>
    /// 最小粒子数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 3;
    private uint max_;
    /// <summary>
    /// 最大粒子数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponPaintKitConfig_partical_num);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponPaintKitConfig_partical_num other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Min != other.Min) return false;
      if (Max != other.Max) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Min != 0) hash ^= Min.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Min != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Min);
      }
      if (Max != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Max);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Min != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Min);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Max);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponPaintKitConfig_partical_num other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Min != 0) {
        Min = other.Min;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Min = input.ReadUInt32();
            break;
          }
          case 24: {
            Max = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WeaponPaintKitConfig_wear : pb::IMessage<WeaponPaintKitConfig_wear> {
    private static readonly pb::MessageParser<WeaponPaintKitConfig_wear> _parser = new pb::MessageParser<WeaponPaintKitConfig_wear>(() => new WeaponPaintKitConfig_wear());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponPaintKitConfig_wear> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansWeaponpaintkitconfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig_wear() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig_wear(WeaponPaintKitConfig_wear other) : this() {
      min_ = other.min_;
      max_ = other.max_;
      weight_ = other.weight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig_wear Clone() {
      return new WeaponPaintKitConfig_wear(this);
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 1;
    private uint min_;
    /// <summary>
    /// 磨损度分段1下限(最小0) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 2;
    private uint max_;
    /// <summary>
    /// 磨损度分段1上限(最大9999) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 3;
    private uint weight_;
    /// <summary>
    /// 磨损度分段1权重 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponPaintKitConfig_wear);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponPaintKitConfig_wear other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Min != other.Min) return false;
      if (Max != other.Max) return false;
      if (Weight != other.Weight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Min != 0) hash ^= Min.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Min != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Min);
      }
      if (Max != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Max);
      }
      if (Weight != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Weight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Min != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Min);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Max);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Weight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponPaintKitConfig_wear other) {
      if (other == null) {
        return;
      }
      if (other.Min != 0) {
        Min = other.Min;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Min = input.ReadUInt32();
            break;
          }
          case 16: {
            Max = input.ReadUInt32();
            break;
          }
          case 24: {
            Weight = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WeaponPaintKitConfig_seed : pb::IMessage<WeaponPaintKitConfig_seed> {
    private static readonly pb::MessageParser<WeaponPaintKitConfig_seed> _parser = new pb::MessageParser<WeaponPaintKitConfig_seed>(() => new WeaponPaintKitConfig_seed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponPaintKitConfig_seed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansWeaponpaintkitconfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig_seed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig_seed(WeaponPaintKitConfig_seed other) : this() {
      min_ = other.min_;
      max_ = other.max_;
      weight_ = other.weight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig_seed Clone() {
      return new WeaponPaintKitConfig_seed(this);
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 1;
    private uint min_;
    /// <summary>
    /// 模板参数分段1下限(包含) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 2;
    private uint max_;
    /// <summary>
    /// 模板参数分段1上限(包含) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 3;
    private uint weight_;
    /// <summary>
    /// 模板参数分段1权重 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponPaintKitConfig_seed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponPaintKitConfig_seed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Min != other.Min) return false;
      if (Max != other.Max) return false;
      if (Weight != other.Weight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Min != 0) hash ^= Min.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Min != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Min);
      }
      if (Max != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Max);
      }
      if (Weight != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Weight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Min != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Min);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Max);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Weight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponPaintKitConfig_seed other) {
      if (other == null) {
        return;
      }
      if (other.Min != 0) {
        Min = other.Min;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Min = input.ReadUInt32();
            break;
          }
          case 16: {
            Max = input.ReadUInt32();
            break;
          }
          case 24: {
            Weight = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WeaponPaintKitConfig_Array : pb::IMessage<WeaponPaintKitConfig_Array> {
    private static readonly pb::MessageParser<WeaponPaintKitConfig_Array> _parser = new pb::MessageParser<WeaponPaintKitConfig_Array>(() => new WeaponPaintKitConfig_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponPaintKitConfig_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansWeaponpaintkitconfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig_Array(WeaponPaintKitConfig_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPaintKitConfig_Array Clone() {
      return new WeaponPaintKitConfig_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.WeaponPaintKitConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.WeaponPaintKitConfig.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.WeaponPaintKitConfig> items_ = new pbc::RepeatedField<global::D11.Pbeans.WeaponPaintKitConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.WeaponPaintKitConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponPaintKitConfig_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponPaintKitConfig_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponPaintKitConfig_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
