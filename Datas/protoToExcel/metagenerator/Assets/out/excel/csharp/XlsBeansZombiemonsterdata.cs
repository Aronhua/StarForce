// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xls_beans_zombiemonsterdata.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pbeans {

  /// <summary>Holder for reflection information generated from xls_beans_zombiemonsterdata.proto</summary>
  public static partial class XlsBeansZombiemonsterdataReflection {

    #region Descriptor
    /// <summary>File descriptor for xls_beans_zombiemonsterdata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlsBeansZombiemonsterdataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiF4bHNfYmVhbnNfem9tYmllbW9uc3RlcmRhdGEucHJvdG8SCkQxMS5QYmVh",
            "bnMi5w0KEVpvbWJpZU1vbnN0ZXJEYXRhEgoKAmlkGAEgASgNEhEKCU1vbnN0",
            "ZXJJZBgCIAEoDRINCgVMZXZlbBgDIAEoDRISCgpab21iaWVUeXBlGAQgASgN",
            "EhIKCk1lbW9yeVNwYW4YBSABKAISIwobVmlzaW9uUGVyY2VwdGlvblRhcmdl",
            "dEFuZ2xlGAYgASgNEiYKHlZpc2lvblBlcmNlcHRpb25UYXJnZXREaXN0YW5j",
            "ZRgHIAEoDRIgChhTZWxlY3RUYXJnZXRUaW1lSW50ZXJ2YWwYCCABKAISIQoZ",
            "Q29sbGVjdERhbWVnZVRpbWVJbnRlcnZhbBgJIAEoAhIeChZSb3RhdGlvbkJl",
            "Zm9yZVdhaXRUaW1lGAogASgCEiYKHkFuZ2xlVG9BaW1BdFRhcmdldENvbnRp",
            "bnVlVGltZRgLIAEoAhIcChREeW5hbWljUm90YXRpb25Qb3dlchgMIAEoAhIa",
            "ChJBdHRhY2tEdXJhdGlvblRpbWUYDSABKAISIwobQXR0YWNrRHVyYXRpb25U",
            "aW1lRGV2aWF0aW9uGA4gASgCEhUKDUF0dGFja0NhZGVuY2UYDyABKAISGgoS",
            "QXR0YWNrQ29vbGRvd25UaW1lGBAgASgCEiMKG0F0dGFja0Nvb2xkb3duVGlt",
            "ZURldmlhdGlvbhgRIAEoAhIdChVNaW5BdHRhY2tEYW1hZ2VSYWRpdXMYEiAB",
            "KAISHQoVTWF4QXR0YWNrRGFtYWdlUmFkaXVzGBMgASgCEhYKDkF0dGFja0Rp",
            "c3RhbmNlGBQgASgNEh8KF0F0dGFja0Rpc3RhbmNlRGV2aWF0aW9uGBUgASgN",
            "EhcKD01pbkF0dGFja0RhbWFnZRgWIAEoDRIXCg9NYXhBdHRhY2tEYW1hZ2UY",
            "FyABKA0SHwoXRGVjYXlEYW1hZ2VSYXRlVG9ab21iaWUYGCABKAISFQoNRXhw",
            "bG9kZUNlbnRlchgZIAEoAhIUCgxBdHRhY2tIZWlnaHQYGiABKAISEwoLQXR0",
            "YWNrQW5nbGUYGyABKA0SHgoWQXR0YWNrRGFtYWdlQXJtb3JTY2FsZRgcIAEo",
            "AhIYChBGaWx0cmF0aW9uWm9tYmllGB0gASgIEhcKD0luc3RhbnRIZWFkUmF0",
            "ZRgeIAEoAhIXCg9JbnN0YW50QmFja1JhdGUYHyABKAISFQoNTWVsZWVIdXJ0",
            "UmF0ZRggIAEoAhITCgtBdHRhY2tDb3VudBghIAEoDRIZChFEb2RnZUludGVy",
            "dmFsVGltZRgiIAEoAhIRCglEb2RnZVJhdGUYIyABKAISFwoPRG9kZ2VBbmds",
            "ZUxpbWl0GCQgASgCEhUKDURvZGdlRGlzdGFuY2UYJSABKAISFQoNRG9kZ2VD",
            "b3N0VGltZRgmIAEoAhIRCglIdXJ0RGVsYXkYJyABKAISEAoIV2VhcG9uSWQY",
            "KCABKA0SFAoMUHJlRG9kZ2VUaW1lGCkgASgCEhYKDkFmdGVyRG9kZ2VUaW1l",
            "GCogASgCEhIKCldhbmRlclJhdGUYKyABKAISHgoWQm9ybkF0dGFja0Nvb2xE",
            "b3duVGltZRgsIAEoAhIjChtGaXJlUG9zaXRpb25IZWlnaHREZXZpYXRpb24Y",
            "LSABKAISIgoaRmlyZVBvc2l0aW9uQW5nbGVEZXZpYXRpb24YLiABKAISJQod",
            "RmlyZVBvc2l0aW9uRGlzdGFuY2VEZXZpYXRpb24YLyABKAISKQohQWltQXRU",
            "YXJnZXRIb3Jpem9udGFsTWluRGV2aWF0aW9uGDAgASgCEicKH0FpbUF0VGFy",
            "Z2V0VmVydGljYWxNaW5EZXZpYXRpb24YMSABKAISKQohQWltQXRUYXJnZXRI",
            "b3Jpem9udGFsTWF4RGV2aWF0aW9uGDIgASgCEicKH0FpbUF0VGFyZ2V0VmVy",
            "dGljYWxNYXhEZXZpYXRpb24YMyABKAISIAoYUnVzaFRvRW5lbXlEaXN0YW5j",
            "ZUxpbWl0GDQgASgCEhgKEE1vdmVDb250aW51ZVRpbWUYNSABKAISIQoZTW92",
            "ZUNvbnRpbnVlVGltZURldmlhdGlvbhg2IAEoAhIYChBJZGxlQ29udGludWVU",
            "aW1lGDcgASgCEiEKGUlkbGVDb250aW51ZVRpbWVEZXZpYXRpb24YOCABKAIS",
            "GAoQU2l0dVBhdHJvbFJhZGl1cxg5IAEoAhIhChlTaXR1UGF0cm9sUmFkaXVz",
            "RGV2aWF0aW9uGDogASgCEhoKElNpdHVQYXRyb2xJZGxlVGltZRg7IAEoAhIj",
            "ChtTaXR1UGF0cm9sSWRsZVRpbWVEZXZpYXRpb24YPCABKAISGQoRU2l0dVJp",
            "Z2dpbmdSYWRpdXMYPSABKAIiRwoXWm9tYmllTW9uc3RlckRhdGFfQXJyYXkS",
            "LAoFaXRlbXMYASADKAsyHS5EMTEuUGJlYW5zLlpvbWJpZU1vbnN0ZXJEYXRh",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.ZombieMonsterData), global::D11.Pbeans.ZombieMonsterData.Parser, new[]{ "Id", "MonsterId", "Level", "ZombieType", "MemorySpan", "VisionPerceptionTargetAngle", "VisionPerceptionTargetDistance", "SelectTargetTimeInterval", "CollectDamegeTimeInterval", "RotationBeforeWaitTime", "AngleToAimAtTargetContinueTime", "DynamicRotationPower", "AttackDurationTime", "AttackDurationTimeDeviation", "AttackCadence", "AttackCooldownTime", "AttackCooldownTimeDeviation", "MinAttackDamageRadius", "MaxAttackDamageRadius", "AttackDistance", "AttackDistanceDeviation", "MinAttackDamage", "MaxAttackDamage", "DecayDamageRateToZombie", "ExplodeCenter", "AttackHeight", "AttackAngle", "AttackDamageArmorScale", "FiltrationZombie", "InstantHeadRate", "InstantBackRate", "MeleeHurtRate", "AttackCount", "DodgeIntervalTime", "DodgeRate", "DodgeAngleLimit", "DodgeDistance", "DodgeCostTime", "HurtDelay", "WeaponId", "PreDodgeTime", "AfterDodgeTime", "WanderRate", "BornAttackCoolDownTime", "FirePositionHeightDeviation", "FirePositionAngleDeviation", "FirePositionDistanceDeviation", "AimAtTargetHorizontalMinDeviation", "AimAtTargetVerticalMinDeviation", "AimAtTargetHorizontalMaxDeviation", "AimAtTargetVerticalMaxDeviation", "RushToEnemyDistanceLimit", "MoveContinueTime", "MoveContinueTimeDeviation", "IdleContinueTime", "IdleContinueTimeDeviation", "SituPatrolRadius", "SituPatrolRadiusDeviation", "SituPatrolIdleTime", "SituPatrolIdleTimeDeviation", "SituRiggingRadius" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pbeans.ZombieMonsterData_Array), global::D11.Pbeans.ZombieMonsterData_Array.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ZombieMonsterData : pb::IMessage<ZombieMonsterData> {
    private static readonly pb::MessageParser<ZombieMonsterData> _parser = new pb::MessageParser<ZombieMonsterData>(() => new ZombieMonsterData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZombieMonsterData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansZombiemonsterdataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZombieMonsterData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZombieMonsterData(ZombieMonsterData other) : this() {
      id_ = other.id_;
      monsterId_ = other.monsterId_;
      level_ = other.level_;
      zombieType_ = other.zombieType_;
      memorySpan_ = other.memorySpan_;
      visionPerceptionTargetAngle_ = other.visionPerceptionTargetAngle_;
      visionPerceptionTargetDistance_ = other.visionPerceptionTargetDistance_;
      selectTargetTimeInterval_ = other.selectTargetTimeInterval_;
      collectDamegeTimeInterval_ = other.collectDamegeTimeInterval_;
      rotationBeforeWaitTime_ = other.rotationBeforeWaitTime_;
      angleToAimAtTargetContinueTime_ = other.angleToAimAtTargetContinueTime_;
      dynamicRotationPower_ = other.dynamicRotationPower_;
      attackDurationTime_ = other.attackDurationTime_;
      attackDurationTimeDeviation_ = other.attackDurationTimeDeviation_;
      attackCadence_ = other.attackCadence_;
      attackCooldownTime_ = other.attackCooldownTime_;
      attackCooldownTimeDeviation_ = other.attackCooldownTimeDeviation_;
      minAttackDamageRadius_ = other.minAttackDamageRadius_;
      maxAttackDamageRadius_ = other.maxAttackDamageRadius_;
      attackDistance_ = other.attackDistance_;
      attackDistanceDeviation_ = other.attackDistanceDeviation_;
      minAttackDamage_ = other.minAttackDamage_;
      maxAttackDamage_ = other.maxAttackDamage_;
      decayDamageRateToZombie_ = other.decayDamageRateToZombie_;
      explodeCenter_ = other.explodeCenter_;
      attackHeight_ = other.attackHeight_;
      attackAngle_ = other.attackAngle_;
      attackDamageArmorScale_ = other.attackDamageArmorScale_;
      filtrationZombie_ = other.filtrationZombie_;
      instantHeadRate_ = other.instantHeadRate_;
      instantBackRate_ = other.instantBackRate_;
      meleeHurtRate_ = other.meleeHurtRate_;
      attackCount_ = other.attackCount_;
      dodgeIntervalTime_ = other.dodgeIntervalTime_;
      dodgeRate_ = other.dodgeRate_;
      dodgeAngleLimit_ = other.dodgeAngleLimit_;
      dodgeDistance_ = other.dodgeDistance_;
      dodgeCostTime_ = other.dodgeCostTime_;
      hurtDelay_ = other.hurtDelay_;
      weaponId_ = other.weaponId_;
      preDodgeTime_ = other.preDodgeTime_;
      afterDodgeTime_ = other.afterDodgeTime_;
      wanderRate_ = other.wanderRate_;
      bornAttackCoolDownTime_ = other.bornAttackCoolDownTime_;
      firePositionHeightDeviation_ = other.firePositionHeightDeviation_;
      firePositionAngleDeviation_ = other.firePositionAngleDeviation_;
      firePositionDistanceDeviation_ = other.firePositionDistanceDeviation_;
      aimAtTargetHorizontalMinDeviation_ = other.aimAtTargetHorizontalMinDeviation_;
      aimAtTargetVerticalMinDeviation_ = other.aimAtTargetVerticalMinDeviation_;
      aimAtTargetHorizontalMaxDeviation_ = other.aimAtTargetHorizontalMaxDeviation_;
      aimAtTargetVerticalMaxDeviation_ = other.aimAtTargetVerticalMaxDeviation_;
      rushToEnemyDistanceLimit_ = other.rushToEnemyDistanceLimit_;
      moveContinueTime_ = other.moveContinueTime_;
      moveContinueTimeDeviation_ = other.moveContinueTimeDeviation_;
      idleContinueTime_ = other.idleContinueTime_;
      idleContinueTimeDeviation_ = other.idleContinueTimeDeviation_;
      situPatrolRadius_ = other.situPatrolRadius_;
      situPatrolRadiusDeviation_ = other.situPatrolRadiusDeviation_;
      situPatrolIdleTime_ = other.situPatrolIdleTime_;
      situPatrolIdleTimeDeviation_ = other.situPatrolIdleTimeDeviation_;
      situRiggingRadius_ = other.situRiggingRadius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZombieMonsterData Clone() {
      return new ZombieMonsterData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// ZombieID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "MonsterId" field.</summary>
    public const int MonsterIdFieldNumber = 2;
    private uint monsterId_;
    /// <summary>
    /// MonsterData中的ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    /// <summary>
    /// 等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "ZombieType" field.</summary>
    public const int ZombieTypeFieldNumber = 4;
    private uint zombieType_;
    /// <summary>
    /// Zombie类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZombieType {
      get { return zombieType_; }
      set {
        zombieType_ = value;
      }
    }

    /// <summary>Field number for the "MemorySpan" field.</summary>
    public const int MemorySpanFieldNumber = 5;
    private float memorySpan_;
    /// <summary>
    /// 感知记忆时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MemorySpan {
      get { return memorySpan_; }
      set {
        memorySpan_ = value;
      }
    }

    /// <summary>Field number for the "VisionPerceptionTargetAngle" field.</summary>
    public const int VisionPerceptionTargetAngleFieldNumber = 6;
    private uint visionPerceptionTargetAngle_;
    /// <summary>
    /// 视野感知目标的角度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VisionPerceptionTargetAngle {
      get { return visionPerceptionTargetAngle_; }
      set {
        visionPerceptionTargetAngle_ = value;
      }
    }

    /// <summary>Field number for the "VisionPerceptionTargetDistance" field.</summary>
    public const int VisionPerceptionTargetDistanceFieldNumber = 7;
    private uint visionPerceptionTargetDistance_;
    /// <summary>
    /// 视野感知目标的距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VisionPerceptionTargetDistance {
      get { return visionPerceptionTargetDistance_; }
      set {
        visionPerceptionTargetDistance_ = value;
      }
    }

    /// <summary>Field number for the "SelectTargetTimeInterval" field.</summary>
    public const int SelectTargetTimeIntervalFieldNumber = 8;
    private float selectTargetTimeInterval_;
    /// <summary>
    /// 选择目标的时间间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SelectTargetTimeInterval {
      get { return selectTargetTimeInterval_; }
      set {
        selectTargetTimeInterval_ = value;
      }
    }

    /// <summary>Field number for the "CollectDamegeTimeInterval" field.</summary>
    public const int CollectDamegeTimeIntervalFieldNumber = 9;
    private float collectDamegeTimeInterval_;
    /// <summary>
    /// 收集多少秒所受的伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CollectDamegeTimeInterval {
      get { return collectDamegeTimeInterval_; }
      set {
        collectDamegeTimeInterval_ = value;
      }
    }

    /// <summary>Field number for the "RotationBeforeWaitTime" field.</summary>
    public const int RotationBeforeWaitTimeFieldNumber = 10;
    private float rotationBeforeWaitTime_;
    /// <summary>
    /// 旋转后的等待时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotationBeforeWaitTime {
      get { return rotationBeforeWaitTime_; }
      set {
        rotationBeforeWaitTime_ = value;
      }
    }

    /// <summary>Field number for the "AngleToAimAtTargetContinueTime" field.</summary>
    public const int AngleToAimAtTargetContinueTimeFieldNumber = 11;
    private float angleToAimAtTargetContinueTime_;
    /// <summary>
    /// 瞄准敌人时角度换算成时间的倍率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngleToAimAtTargetContinueTime {
      get { return angleToAimAtTargetContinueTime_; }
      set {
        angleToAimAtTargetContinueTime_ = value;
      }
    }

    /// <summary>Field number for the "DynamicRotationPower" field.</summary>
    public const int DynamicRotationPowerFieldNumber = 12;
    private float dynamicRotationPower_;
    /// <summary>
    /// 动态转向时的Power参数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DynamicRotationPower {
      get { return dynamicRotationPower_; }
      set {
        dynamicRotationPower_ = value;
      }
    }

    /// <summary>Field number for the "AttackDurationTime" field.</summary>
    public const int AttackDurationTimeFieldNumber = 13;
    private float attackDurationTime_;
    /// <summary>
    /// 攻击持续时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackDurationTime {
      get { return attackDurationTime_; }
      set {
        attackDurationTime_ = value;
      }
    }

    /// <summary>Field number for the "AttackDurationTimeDeviation" field.</summary>
    public const int AttackDurationTimeDeviationFieldNumber = 14;
    private float attackDurationTimeDeviation_;
    /// <summary>
    /// 攻击持续时间偏差 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackDurationTimeDeviation {
      get { return attackDurationTimeDeviation_; }
      set {
        attackDurationTimeDeviation_ = value;
      }
    }

    /// <summary>Field number for the "AttackCadence" field.</summary>
    public const int AttackCadenceFieldNumber = 15;
    private float attackCadence_;
    /// <summary>
    /// 攻击节奏 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackCadence {
      get { return attackCadence_; }
      set {
        attackCadence_ = value;
      }
    }

    /// <summary>Field number for the "AttackCooldownTime" field.</summary>
    public const int AttackCooldownTimeFieldNumber = 16;
    private float attackCooldownTime_;
    /// <summary>
    /// 攻击冷却时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackCooldownTime {
      get { return attackCooldownTime_; }
      set {
        attackCooldownTime_ = value;
      }
    }

    /// <summary>Field number for the "AttackCooldownTimeDeviation" field.</summary>
    public const int AttackCooldownTimeDeviationFieldNumber = 17;
    private float attackCooldownTimeDeviation_;
    /// <summary>
    /// 攻击冷却时间偏差 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackCooldownTimeDeviation {
      get { return attackCooldownTimeDeviation_; }
      set {
        attackCooldownTimeDeviation_ = value;
      }
    }

    /// <summary>Field number for the "MinAttackDamageRadius" field.</summary>
    public const int MinAttackDamageRadiusFieldNumber = 18;
    private float minAttackDamageRadius_;
    /// <summary>
    /// 最小伤害范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinAttackDamageRadius {
      get { return minAttackDamageRadius_; }
      set {
        minAttackDamageRadius_ = value;
      }
    }

    /// <summary>Field number for the "MaxAttackDamageRadius" field.</summary>
    public const int MaxAttackDamageRadiusFieldNumber = 19;
    private float maxAttackDamageRadius_;
    /// <summary>
    /// 最大伤害范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxAttackDamageRadius {
      get { return maxAttackDamageRadius_; }
      set {
        maxAttackDamageRadius_ = value;
      }
    }

    /// <summary>Field number for the "AttackDistance" field.</summary>
    public const int AttackDistanceFieldNumber = 20;
    private uint attackDistance_;
    /// <summary>
    /// 攻击距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackDistance {
      get { return attackDistance_; }
      set {
        attackDistance_ = value;
      }
    }

    /// <summary>Field number for the "AttackDistanceDeviation" field.</summary>
    public const int AttackDistanceDeviationFieldNumber = 21;
    private uint attackDistanceDeviation_;
    /// <summary>
    /// 攻击距离偏差 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackDistanceDeviation {
      get { return attackDistanceDeviation_; }
      set {
        attackDistanceDeviation_ = value;
      }
    }

    /// <summary>Field number for the "MinAttackDamage" field.</summary>
    public const int MinAttackDamageFieldNumber = 22;
    private uint minAttackDamage_;
    /// <summary>
    /// 最小攻击伤害（无范围伤害该字段就为实际伤害） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinAttackDamage {
      get { return minAttackDamage_; }
      set {
        minAttackDamage_ = value;
      }
    }

    /// <summary>Field number for the "MaxAttackDamage" field.</summary>
    public const int MaxAttackDamageFieldNumber = 23;
    private uint maxAttackDamage_;
    /// <summary>
    /// 最大攻击伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxAttackDamage {
      get { return maxAttackDamage_; }
      set {
        maxAttackDamage_ = value;
      }
    }

    /// <summary>Field number for the "DecayDamageRateToZombie" field.</summary>
    public const int DecayDamageRateToZombieFieldNumber = 24;
    private float decayDamageRateToZombie_;
    /// <summary>
    /// 对Zombie的伤害衰减比例 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DecayDamageRateToZombie {
      get { return decayDamageRateToZombie_; }
      set {
        decayDamageRateToZombie_ = value;
      }
    }

    /// <summary>Field number for the "ExplodeCenter" field.</summary>
    public const int ExplodeCenterFieldNumber = 25;
    private float explodeCenter_;
    /// <summary>
    /// 爆炸中心点距离脚的偏移 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExplodeCenter {
      get { return explodeCenter_; }
      set {
        explodeCenter_ = value;
      }
    }

    /// <summary>Field number for the "AttackHeight" field.</summary>
    public const int AttackHeightFieldNumber = 26;
    private float attackHeight_;
    /// <summary>
    /// 近战攻击高度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackHeight {
      get { return attackHeight_; }
      set {
        attackHeight_ = value;
      }
    }

    /// <summary>Field number for the "AttackAngle" field.</summary>
    public const int AttackAngleFieldNumber = 27;
    private uint attackAngle_;
    /// <summary>
    /// 近战攻击角度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackAngle {
      get { return attackAngle_; }
      set {
        attackAngle_ = value;
      }
    }

    /// <summary>Field number for the "AttackDamageArmorScale" field.</summary>
    public const int AttackDamageArmorScaleFieldNumber = 28;
    private float attackDamageArmorScale_;
    /// <summary>
    /// 护甲穿透比例 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackDamageArmorScale {
      get { return attackDamageArmorScale_; }
      set {
        attackDamageArmorScale_ = value;
      }
    }

    /// <summary>Field number for the "FiltrationZombie" field.</summary>
    public const int FiltrationZombieFieldNumber = 29;
    private bool filtrationZombie_;
    /// <summary>
    /// 视野检测过滤Zombie 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FiltrationZombie {
      get { return filtrationZombie_; }
      set {
        filtrationZombie_ = value;
      }
    }

    /// <summary>Field number for the "InstantHeadRate" field.</summary>
    public const int InstantHeadRateFieldNumber = 30;
    private float instantHeadRate_;
    /// <summary>
    /// 枪头部伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InstantHeadRate {
      get { return instantHeadRate_; }
      set {
        instantHeadRate_ = value;
      }
    }

    /// <summary>Field number for the "InstantBackRate" field.</summary>
    public const int InstantBackRateFieldNumber = 31;
    private float instantBackRate_;
    /// <summary>
    /// 枪背部伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InstantBackRate {
      get { return instantBackRate_; }
      set {
        instantBackRate_ = value;
      }
    }

    /// <summary>Field number for the "MeleeHurtRate" field.</summary>
    public const int MeleeHurtRateFieldNumber = 32;
    private float meleeHurtRate_;
    /// <summary>
    /// 刀伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeleeHurtRate {
      get { return meleeHurtRate_; }
      set {
        meleeHurtRate_ = value;
      }
    }

    /// <summary>Field number for the "AttackCount" field.</summary>
    public const int AttackCountFieldNumber = 33;
    private uint attackCount_;
    /// <summary>
    /// 可伤害人数上限 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackCount {
      get { return attackCount_; }
      set {
        attackCount_ = value;
      }
    }

    /// <summary>Field number for the "DodgeIntervalTime" field.</summary>
    public const int DodgeIntervalTimeFieldNumber = 34;
    private float dodgeIntervalTime_;
    /// <summary>
    /// 闪躲CD 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DodgeIntervalTime {
      get { return dodgeIntervalTime_; }
      set {
        dodgeIntervalTime_ = value;
      }
    }

    /// <summary>Field number for the "DodgeRate" field.</summary>
    public const int DodgeRateFieldNumber = 35;
    private float dodgeRate_;
    /// <summary>
    /// 闪躲概率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DodgeRate {
      get { return dodgeRate_; }
      set {
        dodgeRate_ = value;
      }
    }

    /// <summary>Field number for the "DodgeAngleLimit" field.</summary>
    public const int DodgeAngleLimitFieldNumber = 36;
    private float dodgeAngleLimit_;
    /// <summary>
    /// 朝向角度限制 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DodgeAngleLimit {
      get { return dodgeAngleLimit_; }
      set {
        dodgeAngleLimit_ = value;
      }
    }

    /// <summary>Field number for the "DodgeDistance" field.</summary>
    public const int DodgeDistanceFieldNumber = 37;
    private float dodgeDistance_;
    /// <summary>
    /// 闪躲的距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DodgeDistance {
      get { return dodgeDistance_; }
      set {
        dodgeDistance_ = value;
      }
    }

    /// <summary>Field number for the "DodgeCostTime" field.</summary>
    public const int DodgeCostTimeFieldNumber = 38;
    private float dodgeCostTime_;
    /// <summary>
    /// 闪躲所需时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DodgeCostTime {
      get { return dodgeCostTime_; }
      set {
        dodgeCostTime_ = value;
      }
    }

    /// <summary>Field number for the "HurtDelay" field.</summary>
    public const int HurtDelayFieldNumber = 39;
    private float hurtDelay_;
    /// <summary>
    /// 近战伤害延时 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HurtDelay {
      get { return hurtDelay_; }
      set {
        hurtDelay_ = value;
      }
    }

    /// <summary>Field number for the "WeaponId" field.</summary>
    public const int WeaponIdFieldNumber = 40;
    private uint weaponId_;
    /// <summary>
    /// 武器ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeaponId {
      get { return weaponId_; }
      set {
        weaponId_ = value;
      }
    }

    /// <summary>Field number for the "PreDodgeTime" field.</summary>
    public const int PreDodgeTimeFieldNumber = 41;
    private float preDodgeTime_;
    /// <summary>
    /// 躲闪前摇时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PreDodgeTime {
      get { return preDodgeTime_; }
      set {
        preDodgeTime_ = value;
      }
    }

    /// <summary>Field number for the "AfterDodgeTime" field.</summary>
    public const int AfterDodgeTimeFieldNumber = 42;
    private float afterDodgeTime_;
    /// <summary>
    /// 躲闪后摇时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AfterDodgeTime {
      get { return afterDodgeTime_; }
      set {
        afterDodgeTime_ = value;
      }
    }

    /// <summary>Field number for the "WanderRate" field.</summary>
    public const int WanderRateFieldNumber = 43;
    private float wanderRate_;
    /// <summary>
    /// 攻击间隔游荡概率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WanderRate {
      get { return wanderRate_; }
      set {
        wanderRate_ = value;
      }
    }

    /// <summary>Field number for the "BornAttackCoolDownTime" field.</summary>
    public const int BornAttackCoolDownTimeFieldNumber = 44;
    private float bornAttackCoolDownTime_;
    /// <summary>
    /// 出生攻击冷却时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BornAttackCoolDownTime {
      get { return bornAttackCoolDownTime_; }
      set {
        bornAttackCoolDownTime_ = value;
      }
    }

    /// <summary>Field number for the "FirePositionHeightDeviation" field.</summary>
    public const int FirePositionHeightDeviationFieldNumber = 45;
    private float firePositionHeightDeviation_;
    /// <summary>
    /// 开火位置高度偏差 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FirePositionHeightDeviation {
      get { return firePositionHeightDeviation_; }
      set {
        firePositionHeightDeviation_ = value;
      }
    }

    /// <summary>Field number for the "FirePositionAngleDeviation" field.</summary>
    public const int FirePositionAngleDeviationFieldNumber = 46;
    private float firePositionAngleDeviation_;
    /// <summary>
    /// 开火位置角度偏差 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FirePositionAngleDeviation {
      get { return firePositionAngleDeviation_; }
      set {
        firePositionAngleDeviation_ = value;
      }
    }

    /// <summary>Field number for the "FirePositionDistanceDeviation" field.</summary>
    public const int FirePositionDistanceDeviationFieldNumber = 47;
    private float firePositionDistanceDeviation_;
    /// <summary>
    /// 开火位置距离偏差 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FirePositionDistanceDeviation {
      get { return firePositionDistanceDeviation_; }
      set {
        firePositionDistanceDeviation_ = value;
      }
    }

    /// <summary>Field number for the "AimAtTargetHorizontalMinDeviation" field.</summary>
    public const int AimAtTargetHorizontalMinDeviationFieldNumber = 48;
    private float aimAtTargetHorizontalMinDeviation_;
    /// <summary>
    /// 瞄准目标胸部水平方向的最小偏移 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AimAtTargetHorizontalMinDeviation {
      get { return aimAtTargetHorizontalMinDeviation_; }
      set {
        aimAtTargetHorizontalMinDeviation_ = value;
      }
    }

    /// <summary>Field number for the "AimAtTargetVerticalMinDeviation" field.</summary>
    public const int AimAtTargetVerticalMinDeviationFieldNumber = 49;
    private float aimAtTargetVerticalMinDeviation_;
    /// <summary>
    /// 瞄准目标胸部垂直方向的最小偏移 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AimAtTargetVerticalMinDeviation {
      get { return aimAtTargetVerticalMinDeviation_; }
      set {
        aimAtTargetVerticalMinDeviation_ = value;
      }
    }

    /// <summary>Field number for the "AimAtTargetHorizontalMaxDeviation" field.</summary>
    public const int AimAtTargetHorizontalMaxDeviationFieldNumber = 50;
    private float aimAtTargetHorizontalMaxDeviation_;
    /// <summary>
    /// 瞄准目标胸部水平方向的最大偏移 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AimAtTargetHorizontalMaxDeviation {
      get { return aimAtTargetHorizontalMaxDeviation_; }
      set {
        aimAtTargetHorizontalMaxDeviation_ = value;
      }
    }

    /// <summary>Field number for the "AimAtTargetVerticalMaxDeviation" field.</summary>
    public const int AimAtTargetVerticalMaxDeviationFieldNumber = 51;
    private float aimAtTargetVerticalMaxDeviation_;
    /// <summary>
    /// 瞄准目标胸部垂直方向的最大偏移 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AimAtTargetVerticalMaxDeviation {
      get { return aimAtTargetVerticalMaxDeviation_; }
      set {
        aimAtTargetVerticalMaxDeviation_ = value;
      }
    }

    /// <summary>Field number for the "RushToEnemyDistanceLimit" field.</summary>
    public const int RushToEnemyDistanceLimitFieldNumber = 52;
    private float rushToEnemyDistanceLimit_;
    /// <summary>
    /// 冲向敌人的距离限制 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RushToEnemyDistanceLimit {
      get { return rushToEnemyDistanceLimit_; }
      set {
        rushToEnemyDistanceLimit_ = value;
      }
    }

    /// <summary>Field number for the "MoveContinueTime" field.</summary>
    public const int MoveContinueTimeFieldNumber = 53;
    private float moveContinueTime_;
    /// <summary>
    /// 移动时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveContinueTime {
      get { return moveContinueTime_; }
      set {
        moveContinueTime_ = value;
      }
    }

    /// <summary>Field number for the "MoveContinueTimeDeviation" field.</summary>
    public const int MoveContinueTimeDeviationFieldNumber = 54;
    private float moveContinueTimeDeviation_;
    /// <summary>
    /// 移动时间偏差 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveContinueTimeDeviation {
      get { return moveContinueTimeDeviation_; }
      set {
        moveContinueTimeDeviation_ = value;
      }
    }

    /// <summary>Field number for the "IdleContinueTime" field.</summary>
    public const int IdleContinueTimeFieldNumber = 55;
    private float idleContinueTime_;
    /// <summary>
    /// 站立时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float IdleContinueTime {
      get { return idleContinueTime_; }
      set {
        idleContinueTime_ = value;
      }
    }

    /// <summary>Field number for the "IdleContinueTimeDeviation" field.</summary>
    public const int IdleContinueTimeDeviationFieldNumber = 56;
    private float idleContinueTimeDeviation_;
    /// <summary>
    /// 站立时间偏差 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float IdleContinueTimeDeviation {
      get { return idleContinueTimeDeviation_; }
      set {
        idleContinueTimeDeviation_ = value;
      }
    }

    /// <summary>Field number for the "SituPatrolRadius" field.</summary>
    public const int SituPatrolRadiusFieldNumber = 57;
    private float situPatrolRadius_;
    /// <summary>
    /// 原地巡逻半径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SituPatrolRadius {
      get { return situPatrolRadius_; }
      set {
        situPatrolRadius_ = value;
      }
    }

    /// <summary>Field number for the "SituPatrolRadiusDeviation" field.</summary>
    public const int SituPatrolRadiusDeviationFieldNumber = 58;
    private float situPatrolRadiusDeviation_;
    /// <summary>
    /// 原地巡逻半径偏差 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SituPatrolRadiusDeviation {
      get { return situPatrolRadiusDeviation_; }
      set {
        situPatrolRadiusDeviation_ = value;
      }
    }

    /// <summary>Field number for the "SituPatrolIdleTime" field.</summary>
    public const int SituPatrolIdleTimeFieldNumber = 59;
    private float situPatrolIdleTime_;
    /// <summary>
    /// 原地Idle时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SituPatrolIdleTime {
      get { return situPatrolIdleTime_; }
      set {
        situPatrolIdleTime_ = value;
      }
    }

    /// <summary>Field number for the "SituPatrolIdleTimeDeviation" field.</summary>
    public const int SituPatrolIdleTimeDeviationFieldNumber = 60;
    private float situPatrolIdleTimeDeviation_;
    /// <summary>
    /// 原地Idle时间偏差 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SituPatrolIdleTimeDeviation {
      get { return situPatrolIdleTimeDeviation_; }
      set {
        situPatrolIdleTimeDeviation_ = value;
      }
    }

    /// <summary>Field number for the "SituRiggingRadius" field.</summary>
    public const int SituRiggingRadiusFieldNumber = 61;
    private float situRiggingRadius_;
    /// <summary>
    /// 原地索敌半径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SituRiggingRadius {
      get { return situRiggingRadius_; }
      set {
        situRiggingRadius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZombieMonsterData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZombieMonsterData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MonsterId != other.MonsterId) return false;
      if (Level != other.Level) return false;
      if (ZombieType != other.ZombieType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MemorySpan, other.MemorySpan)) return false;
      if (VisionPerceptionTargetAngle != other.VisionPerceptionTargetAngle) return false;
      if (VisionPerceptionTargetDistance != other.VisionPerceptionTargetDistance) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SelectTargetTimeInterval, other.SelectTargetTimeInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CollectDamegeTimeInterval, other.CollectDamegeTimeInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotationBeforeWaitTime, other.RotationBeforeWaitTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngleToAimAtTargetContinueTime, other.AngleToAimAtTargetContinueTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DynamicRotationPower, other.DynamicRotationPower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackDurationTime, other.AttackDurationTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackDurationTimeDeviation, other.AttackDurationTimeDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackCadence, other.AttackCadence)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackCooldownTime, other.AttackCooldownTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackCooldownTimeDeviation, other.AttackCooldownTimeDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinAttackDamageRadius, other.MinAttackDamageRadius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxAttackDamageRadius, other.MaxAttackDamageRadius)) return false;
      if (AttackDistance != other.AttackDistance) return false;
      if (AttackDistanceDeviation != other.AttackDistanceDeviation) return false;
      if (MinAttackDamage != other.MinAttackDamage) return false;
      if (MaxAttackDamage != other.MaxAttackDamage) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DecayDamageRateToZombie, other.DecayDamageRateToZombie)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExplodeCenter, other.ExplodeCenter)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackHeight, other.AttackHeight)) return false;
      if (AttackAngle != other.AttackAngle) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackDamageArmorScale, other.AttackDamageArmorScale)) return false;
      if (FiltrationZombie != other.FiltrationZombie) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InstantHeadRate, other.InstantHeadRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InstantBackRate, other.InstantBackRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MeleeHurtRate, other.MeleeHurtRate)) return false;
      if (AttackCount != other.AttackCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DodgeIntervalTime, other.DodgeIntervalTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DodgeRate, other.DodgeRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DodgeAngleLimit, other.DodgeAngleLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DodgeDistance, other.DodgeDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DodgeCostTime, other.DodgeCostTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HurtDelay, other.HurtDelay)) return false;
      if (WeaponId != other.WeaponId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PreDodgeTime, other.PreDodgeTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AfterDodgeTime, other.AfterDodgeTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WanderRate, other.WanderRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BornAttackCoolDownTime, other.BornAttackCoolDownTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FirePositionHeightDeviation, other.FirePositionHeightDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FirePositionAngleDeviation, other.FirePositionAngleDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FirePositionDistanceDeviation, other.FirePositionDistanceDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AimAtTargetHorizontalMinDeviation, other.AimAtTargetHorizontalMinDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AimAtTargetVerticalMinDeviation, other.AimAtTargetVerticalMinDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AimAtTargetHorizontalMaxDeviation, other.AimAtTargetHorizontalMaxDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AimAtTargetVerticalMaxDeviation, other.AimAtTargetVerticalMaxDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RushToEnemyDistanceLimit, other.RushToEnemyDistanceLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveContinueTime, other.MoveContinueTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveContinueTimeDeviation, other.MoveContinueTimeDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IdleContinueTime, other.IdleContinueTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IdleContinueTimeDeviation, other.IdleContinueTimeDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SituPatrolRadius, other.SituPatrolRadius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SituPatrolRadiusDeviation, other.SituPatrolRadiusDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SituPatrolIdleTime, other.SituPatrolIdleTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SituPatrolIdleTimeDeviation, other.SituPatrolIdleTimeDeviation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SituRiggingRadius, other.SituRiggingRadius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (ZombieType != 0) hash ^= ZombieType.GetHashCode();
      if (MemorySpan != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MemorySpan);
      if (VisionPerceptionTargetAngle != 0) hash ^= VisionPerceptionTargetAngle.GetHashCode();
      if (VisionPerceptionTargetDistance != 0) hash ^= VisionPerceptionTargetDistance.GetHashCode();
      if (SelectTargetTimeInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SelectTargetTimeInterval);
      if (CollectDamegeTimeInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CollectDamegeTimeInterval);
      if (RotationBeforeWaitTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotationBeforeWaitTime);
      if (AngleToAimAtTargetContinueTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngleToAimAtTargetContinueTime);
      if (DynamicRotationPower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DynamicRotationPower);
      if (AttackDurationTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackDurationTime);
      if (AttackDurationTimeDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackDurationTimeDeviation);
      if (AttackCadence != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackCadence);
      if (AttackCooldownTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackCooldownTime);
      if (AttackCooldownTimeDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackCooldownTimeDeviation);
      if (MinAttackDamageRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinAttackDamageRadius);
      if (MaxAttackDamageRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxAttackDamageRadius);
      if (AttackDistance != 0) hash ^= AttackDistance.GetHashCode();
      if (AttackDistanceDeviation != 0) hash ^= AttackDistanceDeviation.GetHashCode();
      if (MinAttackDamage != 0) hash ^= MinAttackDamage.GetHashCode();
      if (MaxAttackDamage != 0) hash ^= MaxAttackDamage.GetHashCode();
      if (DecayDamageRateToZombie != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DecayDamageRateToZombie);
      if (ExplodeCenter != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExplodeCenter);
      if (AttackHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackHeight);
      if (AttackAngle != 0) hash ^= AttackAngle.GetHashCode();
      if (AttackDamageArmorScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackDamageArmorScale);
      if (FiltrationZombie != false) hash ^= FiltrationZombie.GetHashCode();
      if (InstantHeadRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InstantHeadRate);
      if (InstantBackRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InstantBackRate);
      if (MeleeHurtRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MeleeHurtRate);
      if (AttackCount != 0) hash ^= AttackCount.GetHashCode();
      if (DodgeIntervalTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DodgeIntervalTime);
      if (DodgeRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DodgeRate);
      if (DodgeAngleLimit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DodgeAngleLimit);
      if (DodgeDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DodgeDistance);
      if (DodgeCostTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DodgeCostTime);
      if (HurtDelay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HurtDelay);
      if (WeaponId != 0) hash ^= WeaponId.GetHashCode();
      if (PreDodgeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PreDodgeTime);
      if (AfterDodgeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AfterDodgeTime);
      if (WanderRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WanderRate);
      if (BornAttackCoolDownTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BornAttackCoolDownTime);
      if (FirePositionHeightDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FirePositionHeightDeviation);
      if (FirePositionAngleDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FirePositionAngleDeviation);
      if (FirePositionDistanceDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FirePositionDistanceDeviation);
      if (AimAtTargetHorizontalMinDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AimAtTargetHorizontalMinDeviation);
      if (AimAtTargetVerticalMinDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AimAtTargetVerticalMinDeviation);
      if (AimAtTargetHorizontalMaxDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AimAtTargetHorizontalMaxDeviation);
      if (AimAtTargetVerticalMaxDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AimAtTargetVerticalMaxDeviation);
      if (RushToEnemyDistanceLimit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RushToEnemyDistanceLimit);
      if (MoveContinueTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveContinueTime);
      if (MoveContinueTimeDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveContinueTimeDeviation);
      if (IdleContinueTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IdleContinueTime);
      if (IdleContinueTimeDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IdleContinueTimeDeviation);
      if (SituPatrolRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SituPatrolRadius);
      if (SituPatrolRadiusDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SituPatrolRadiusDeviation);
      if (SituPatrolIdleTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SituPatrolIdleTime);
      if (SituPatrolIdleTimeDeviation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SituPatrolIdleTimeDeviation);
      if (SituRiggingRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SituRiggingRadius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MonsterId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (ZombieType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ZombieType);
      }
      if (MemorySpan != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MemorySpan);
      }
      if (VisionPerceptionTargetAngle != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(VisionPerceptionTargetAngle);
      }
      if (VisionPerceptionTargetDistance != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(VisionPerceptionTargetDistance);
      }
      if (SelectTargetTimeInterval != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(SelectTargetTimeInterval);
      }
      if (CollectDamegeTimeInterval != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(CollectDamegeTimeInterval);
      }
      if (RotationBeforeWaitTime != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(RotationBeforeWaitTime);
      }
      if (AngleToAimAtTargetContinueTime != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(AngleToAimAtTargetContinueTime);
      }
      if (DynamicRotationPower != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(DynamicRotationPower);
      }
      if (AttackDurationTime != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(AttackDurationTime);
      }
      if (AttackDurationTimeDeviation != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(AttackDurationTimeDeviation);
      }
      if (AttackCadence != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(AttackCadence);
      }
      if (AttackCooldownTime != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(AttackCooldownTime);
      }
      if (AttackCooldownTimeDeviation != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(AttackCooldownTimeDeviation);
      }
      if (MinAttackDamageRadius != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(MinAttackDamageRadius);
      }
      if (MaxAttackDamageRadius != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(MaxAttackDamageRadius);
      }
      if (AttackDistance != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(AttackDistance);
      }
      if (AttackDistanceDeviation != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(AttackDistanceDeviation);
      }
      if (MinAttackDamage != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(MinAttackDamage);
      }
      if (MaxAttackDamage != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(MaxAttackDamage);
      }
      if (DecayDamageRateToZombie != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(DecayDamageRateToZombie);
      }
      if (ExplodeCenter != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(ExplodeCenter);
      }
      if (AttackHeight != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(AttackHeight);
      }
      if (AttackAngle != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(AttackAngle);
      }
      if (AttackDamageArmorScale != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(AttackDamageArmorScale);
      }
      if (FiltrationZombie != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(FiltrationZombie);
      }
      if (InstantHeadRate != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(InstantHeadRate);
      }
      if (InstantBackRate != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(InstantBackRate);
      }
      if (MeleeHurtRate != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(MeleeHurtRate);
      }
      if (AttackCount != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(AttackCount);
      }
      if (DodgeIntervalTime != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(DodgeIntervalTime);
      }
      if (DodgeRate != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(DodgeRate);
      }
      if (DodgeAngleLimit != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(DodgeAngleLimit);
      }
      if (DodgeDistance != 0F) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(DodgeDistance);
      }
      if (DodgeCostTime != 0F) {
        output.WriteRawTag(181, 2);
        output.WriteFloat(DodgeCostTime);
      }
      if (HurtDelay != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(HurtDelay);
      }
      if (WeaponId != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(WeaponId);
      }
      if (PreDodgeTime != 0F) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(PreDodgeTime);
      }
      if (AfterDodgeTime != 0F) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(AfterDodgeTime);
      }
      if (WanderRate != 0F) {
        output.WriteRawTag(221, 2);
        output.WriteFloat(WanderRate);
      }
      if (BornAttackCoolDownTime != 0F) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(BornAttackCoolDownTime);
      }
      if (FirePositionHeightDeviation != 0F) {
        output.WriteRawTag(237, 2);
        output.WriteFloat(FirePositionHeightDeviation);
      }
      if (FirePositionAngleDeviation != 0F) {
        output.WriteRawTag(245, 2);
        output.WriteFloat(FirePositionAngleDeviation);
      }
      if (FirePositionDistanceDeviation != 0F) {
        output.WriteRawTag(253, 2);
        output.WriteFloat(FirePositionDistanceDeviation);
      }
      if (AimAtTargetHorizontalMinDeviation != 0F) {
        output.WriteRawTag(133, 3);
        output.WriteFloat(AimAtTargetHorizontalMinDeviation);
      }
      if (AimAtTargetVerticalMinDeviation != 0F) {
        output.WriteRawTag(141, 3);
        output.WriteFloat(AimAtTargetVerticalMinDeviation);
      }
      if (AimAtTargetHorizontalMaxDeviation != 0F) {
        output.WriteRawTag(149, 3);
        output.WriteFloat(AimAtTargetHorizontalMaxDeviation);
      }
      if (AimAtTargetVerticalMaxDeviation != 0F) {
        output.WriteRawTag(157, 3);
        output.WriteFloat(AimAtTargetVerticalMaxDeviation);
      }
      if (RushToEnemyDistanceLimit != 0F) {
        output.WriteRawTag(165, 3);
        output.WriteFloat(RushToEnemyDistanceLimit);
      }
      if (MoveContinueTime != 0F) {
        output.WriteRawTag(173, 3);
        output.WriteFloat(MoveContinueTime);
      }
      if (MoveContinueTimeDeviation != 0F) {
        output.WriteRawTag(181, 3);
        output.WriteFloat(MoveContinueTimeDeviation);
      }
      if (IdleContinueTime != 0F) {
        output.WriteRawTag(189, 3);
        output.WriteFloat(IdleContinueTime);
      }
      if (IdleContinueTimeDeviation != 0F) {
        output.WriteRawTag(197, 3);
        output.WriteFloat(IdleContinueTimeDeviation);
      }
      if (SituPatrolRadius != 0F) {
        output.WriteRawTag(205, 3);
        output.WriteFloat(SituPatrolRadius);
      }
      if (SituPatrolRadiusDeviation != 0F) {
        output.WriteRawTag(213, 3);
        output.WriteFloat(SituPatrolRadiusDeviation);
      }
      if (SituPatrolIdleTime != 0F) {
        output.WriteRawTag(221, 3);
        output.WriteFloat(SituPatrolIdleTime);
      }
      if (SituPatrolIdleTimeDeviation != 0F) {
        output.WriteRawTag(229, 3);
        output.WriteFloat(SituPatrolIdleTimeDeviation);
      }
      if (SituRiggingRadius != 0F) {
        output.WriteRawTag(237, 3);
        output.WriteFloat(SituRiggingRadius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonsterId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (ZombieType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZombieType);
      }
      if (MemorySpan != 0F) {
        size += 1 + 4;
      }
      if (VisionPerceptionTargetAngle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VisionPerceptionTargetAngle);
      }
      if (VisionPerceptionTargetDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VisionPerceptionTargetDistance);
      }
      if (SelectTargetTimeInterval != 0F) {
        size += 1 + 4;
      }
      if (CollectDamegeTimeInterval != 0F) {
        size += 1 + 4;
      }
      if (RotationBeforeWaitTime != 0F) {
        size += 1 + 4;
      }
      if (AngleToAimAtTargetContinueTime != 0F) {
        size += 1 + 4;
      }
      if (DynamicRotationPower != 0F) {
        size += 1 + 4;
      }
      if (AttackDurationTime != 0F) {
        size += 1 + 4;
      }
      if (AttackDurationTimeDeviation != 0F) {
        size += 1 + 4;
      }
      if (AttackCadence != 0F) {
        size += 1 + 4;
      }
      if (AttackCooldownTime != 0F) {
        size += 2 + 4;
      }
      if (AttackCooldownTimeDeviation != 0F) {
        size += 2 + 4;
      }
      if (MinAttackDamageRadius != 0F) {
        size += 2 + 4;
      }
      if (MaxAttackDamageRadius != 0F) {
        size += 2 + 4;
      }
      if (AttackDistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackDistance);
      }
      if (AttackDistanceDeviation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackDistanceDeviation);
      }
      if (MinAttackDamage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MinAttackDamage);
      }
      if (MaxAttackDamage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxAttackDamage);
      }
      if (DecayDamageRateToZombie != 0F) {
        size += 2 + 4;
      }
      if (ExplodeCenter != 0F) {
        size += 2 + 4;
      }
      if (AttackHeight != 0F) {
        size += 2 + 4;
      }
      if (AttackAngle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackAngle);
      }
      if (AttackDamageArmorScale != 0F) {
        size += 2 + 4;
      }
      if (FiltrationZombie != false) {
        size += 2 + 1;
      }
      if (InstantHeadRate != 0F) {
        size += 2 + 4;
      }
      if (InstantBackRate != 0F) {
        size += 2 + 4;
      }
      if (MeleeHurtRate != 0F) {
        size += 2 + 4;
      }
      if (AttackCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackCount);
      }
      if (DodgeIntervalTime != 0F) {
        size += 2 + 4;
      }
      if (DodgeRate != 0F) {
        size += 2 + 4;
      }
      if (DodgeAngleLimit != 0F) {
        size += 2 + 4;
      }
      if (DodgeDistance != 0F) {
        size += 2 + 4;
      }
      if (DodgeCostTime != 0F) {
        size += 2 + 4;
      }
      if (HurtDelay != 0F) {
        size += 2 + 4;
      }
      if (WeaponId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WeaponId);
      }
      if (PreDodgeTime != 0F) {
        size += 2 + 4;
      }
      if (AfterDodgeTime != 0F) {
        size += 2 + 4;
      }
      if (WanderRate != 0F) {
        size += 2 + 4;
      }
      if (BornAttackCoolDownTime != 0F) {
        size += 2 + 4;
      }
      if (FirePositionHeightDeviation != 0F) {
        size += 2 + 4;
      }
      if (FirePositionAngleDeviation != 0F) {
        size += 2 + 4;
      }
      if (FirePositionDistanceDeviation != 0F) {
        size += 2 + 4;
      }
      if (AimAtTargetHorizontalMinDeviation != 0F) {
        size += 2 + 4;
      }
      if (AimAtTargetVerticalMinDeviation != 0F) {
        size += 2 + 4;
      }
      if (AimAtTargetHorizontalMaxDeviation != 0F) {
        size += 2 + 4;
      }
      if (AimAtTargetVerticalMaxDeviation != 0F) {
        size += 2 + 4;
      }
      if (RushToEnemyDistanceLimit != 0F) {
        size += 2 + 4;
      }
      if (MoveContinueTime != 0F) {
        size += 2 + 4;
      }
      if (MoveContinueTimeDeviation != 0F) {
        size += 2 + 4;
      }
      if (IdleContinueTime != 0F) {
        size += 2 + 4;
      }
      if (IdleContinueTimeDeviation != 0F) {
        size += 2 + 4;
      }
      if (SituPatrolRadius != 0F) {
        size += 2 + 4;
      }
      if (SituPatrolRadiusDeviation != 0F) {
        size += 2 + 4;
      }
      if (SituPatrolIdleTime != 0F) {
        size += 2 + 4;
      }
      if (SituPatrolIdleTimeDeviation != 0F) {
        size += 2 + 4;
      }
      if (SituRiggingRadius != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZombieMonsterData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.ZombieType != 0) {
        ZombieType = other.ZombieType;
      }
      if (other.MemorySpan != 0F) {
        MemorySpan = other.MemorySpan;
      }
      if (other.VisionPerceptionTargetAngle != 0) {
        VisionPerceptionTargetAngle = other.VisionPerceptionTargetAngle;
      }
      if (other.VisionPerceptionTargetDistance != 0) {
        VisionPerceptionTargetDistance = other.VisionPerceptionTargetDistance;
      }
      if (other.SelectTargetTimeInterval != 0F) {
        SelectTargetTimeInterval = other.SelectTargetTimeInterval;
      }
      if (other.CollectDamegeTimeInterval != 0F) {
        CollectDamegeTimeInterval = other.CollectDamegeTimeInterval;
      }
      if (other.RotationBeforeWaitTime != 0F) {
        RotationBeforeWaitTime = other.RotationBeforeWaitTime;
      }
      if (other.AngleToAimAtTargetContinueTime != 0F) {
        AngleToAimAtTargetContinueTime = other.AngleToAimAtTargetContinueTime;
      }
      if (other.DynamicRotationPower != 0F) {
        DynamicRotationPower = other.DynamicRotationPower;
      }
      if (other.AttackDurationTime != 0F) {
        AttackDurationTime = other.AttackDurationTime;
      }
      if (other.AttackDurationTimeDeviation != 0F) {
        AttackDurationTimeDeviation = other.AttackDurationTimeDeviation;
      }
      if (other.AttackCadence != 0F) {
        AttackCadence = other.AttackCadence;
      }
      if (other.AttackCooldownTime != 0F) {
        AttackCooldownTime = other.AttackCooldownTime;
      }
      if (other.AttackCooldownTimeDeviation != 0F) {
        AttackCooldownTimeDeviation = other.AttackCooldownTimeDeviation;
      }
      if (other.MinAttackDamageRadius != 0F) {
        MinAttackDamageRadius = other.MinAttackDamageRadius;
      }
      if (other.MaxAttackDamageRadius != 0F) {
        MaxAttackDamageRadius = other.MaxAttackDamageRadius;
      }
      if (other.AttackDistance != 0) {
        AttackDistance = other.AttackDistance;
      }
      if (other.AttackDistanceDeviation != 0) {
        AttackDistanceDeviation = other.AttackDistanceDeviation;
      }
      if (other.MinAttackDamage != 0) {
        MinAttackDamage = other.MinAttackDamage;
      }
      if (other.MaxAttackDamage != 0) {
        MaxAttackDamage = other.MaxAttackDamage;
      }
      if (other.DecayDamageRateToZombie != 0F) {
        DecayDamageRateToZombie = other.DecayDamageRateToZombie;
      }
      if (other.ExplodeCenter != 0F) {
        ExplodeCenter = other.ExplodeCenter;
      }
      if (other.AttackHeight != 0F) {
        AttackHeight = other.AttackHeight;
      }
      if (other.AttackAngle != 0) {
        AttackAngle = other.AttackAngle;
      }
      if (other.AttackDamageArmorScale != 0F) {
        AttackDamageArmorScale = other.AttackDamageArmorScale;
      }
      if (other.FiltrationZombie != false) {
        FiltrationZombie = other.FiltrationZombie;
      }
      if (other.InstantHeadRate != 0F) {
        InstantHeadRate = other.InstantHeadRate;
      }
      if (other.InstantBackRate != 0F) {
        InstantBackRate = other.InstantBackRate;
      }
      if (other.MeleeHurtRate != 0F) {
        MeleeHurtRate = other.MeleeHurtRate;
      }
      if (other.AttackCount != 0) {
        AttackCount = other.AttackCount;
      }
      if (other.DodgeIntervalTime != 0F) {
        DodgeIntervalTime = other.DodgeIntervalTime;
      }
      if (other.DodgeRate != 0F) {
        DodgeRate = other.DodgeRate;
      }
      if (other.DodgeAngleLimit != 0F) {
        DodgeAngleLimit = other.DodgeAngleLimit;
      }
      if (other.DodgeDistance != 0F) {
        DodgeDistance = other.DodgeDistance;
      }
      if (other.DodgeCostTime != 0F) {
        DodgeCostTime = other.DodgeCostTime;
      }
      if (other.HurtDelay != 0F) {
        HurtDelay = other.HurtDelay;
      }
      if (other.WeaponId != 0) {
        WeaponId = other.WeaponId;
      }
      if (other.PreDodgeTime != 0F) {
        PreDodgeTime = other.PreDodgeTime;
      }
      if (other.AfterDodgeTime != 0F) {
        AfterDodgeTime = other.AfterDodgeTime;
      }
      if (other.WanderRate != 0F) {
        WanderRate = other.WanderRate;
      }
      if (other.BornAttackCoolDownTime != 0F) {
        BornAttackCoolDownTime = other.BornAttackCoolDownTime;
      }
      if (other.FirePositionHeightDeviation != 0F) {
        FirePositionHeightDeviation = other.FirePositionHeightDeviation;
      }
      if (other.FirePositionAngleDeviation != 0F) {
        FirePositionAngleDeviation = other.FirePositionAngleDeviation;
      }
      if (other.FirePositionDistanceDeviation != 0F) {
        FirePositionDistanceDeviation = other.FirePositionDistanceDeviation;
      }
      if (other.AimAtTargetHorizontalMinDeviation != 0F) {
        AimAtTargetHorizontalMinDeviation = other.AimAtTargetHorizontalMinDeviation;
      }
      if (other.AimAtTargetVerticalMinDeviation != 0F) {
        AimAtTargetVerticalMinDeviation = other.AimAtTargetVerticalMinDeviation;
      }
      if (other.AimAtTargetHorizontalMaxDeviation != 0F) {
        AimAtTargetHorizontalMaxDeviation = other.AimAtTargetHorizontalMaxDeviation;
      }
      if (other.AimAtTargetVerticalMaxDeviation != 0F) {
        AimAtTargetVerticalMaxDeviation = other.AimAtTargetVerticalMaxDeviation;
      }
      if (other.RushToEnemyDistanceLimit != 0F) {
        RushToEnemyDistanceLimit = other.RushToEnemyDistanceLimit;
      }
      if (other.MoveContinueTime != 0F) {
        MoveContinueTime = other.MoveContinueTime;
      }
      if (other.MoveContinueTimeDeviation != 0F) {
        MoveContinueTimeDeviation = other.MoveContinueTimeDeviation;
      }
      if (other.IdleContinueTime != 0F) {
        IdleContinueTime = other.IdleContinueTime;
      }
      if (other.IdleContinueTimeDeviation != 0F) {
        IdleContinueTimeDeviation = other.IdleContinueTimeDeviation;
      }
      if (other.SituPatrolRadius != 0F) {
        SituPatrolRadius = other.SituPatrolRadius;
      }
      if (other.SituPatrolRadiusDeviation != 0F) {
        SituPatrolRadiusDeviation = other.SituPatrolRadiusDeviation;
      }
      if (other.SituPatrolIdleTime != 0F) {
        SituPatrolIdleTime = other.SituPatrolIdleTime;
      }
      if (other.SituPatrolIdleTimeDeviation != 0F) {
        SituPatrolIdleTimeDeviation = other.SituPatrolIdleTimeDeviation;
      }
      if (other.SituRiggingRadius != 0F) {
        SituRiggingRadius = other.SituRiggingRadius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            MonsterId = input.ReadUInt32();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            ZombieType = input.ReadUInt32();
            break;
          }
          case 45: {
            MemorySpan = input.ReadFloat();
            break;
          }
          case 48: {
            VisionPerceptionTargetAngle = input.ReadUInt32();
            break;
          }
          case 56: {
            VisionPerceptionTargetDistance = input.ReadUInt32();
            break;
          }
          case 69: {
            SelectTargetTimeInterval = input.ReadFloat();
            break;
          }
          case 77: {
            CollectDamegeTimeInterval = input.ReadFloat();
            break;
          }
          case 85: {
            RotationBeforeWaitTime = input.ReadFloat();
            break;
          }
          case 93: {
            AngleToAimAtTargetContinueTime = input.ReadFloat();
            break;
          }
          case 101: {
            DynamicRotationPower = input.ReadFloat();
            break;
          }
          case 109: {
            AttackDurationTime = input.ReadFloat();
            break;
          }
          case 117: {
            AttackDurationTimeDeviation = input.ReadFloat();
            break;
          }
          case 125: {
            AttackCadence = input.ReadFloat();
            break;
          }
          case 133: {
            AttackCooldownTime = input.ReadFloat();
            break;
          }
          case 141: {
            AttackCooldownTimeDeviation = input.ReadFloat();
            break;
          }
          case 149: {
            MinAttackDamageRadius = input.ReadFloat();
            break;
          }
          case 157: {
            MaxAttackDamageRadius = input.ReadFloat();
            break;
          }
          case 160: {
            AttackDistance = input.ReadUInt32();
            break;
          }
          case 168: {
            AttackDistanceDeviation = input.ReadUInt32();
            break;
          }
          case 176: {
            MinAttackDamage = input.ReadUInt32();
            break;
          }
          case 184: {
            MaxAttackDamage = input.ReadUInt32();
            break;
          }
          case 197: {
            DecayDamageRateToZombie = input.ReadFloat();
            break;
          }
          case 205: {
            ExplodeCenter = input.ReadFloat();
            break;
          }
          case 213: {
            AttackHeight = input.ReadFloat();
            break;
          }
          case 216: {
            AttackAngle = input.ReadUInt32();
            break;
          }
          case 229: {
            AttackDamageArmorScale = input.ReadFloat();
            break;
          }
          case 232: {
            FiltrationZombie = input.ReadBool();
            break;
          }
          case 245: {
            InstantHeadRate = input.ReadFloat();
            break;
          }
          case 253: {
            InstantBackRate = input.ReadFloat();
            break;
          }
          case 261: {
            MeleeHurtRate = input.ReadFloat();
            break;
          }
          case 264: {
            AttackCount = input.ReadUInt32();
            break;
          }
          case 277: {
            DodgeIntervalTime = input.ReadFloat();
            break;
          }
          case 285: {
            DodgeRate = input.ReadFloat();
            break;
          }
          case 293: {
            DodgeAngleLimit = input.ReadFloat();
            break;
          }
          case 301: {
            DodgeDistance = input.ReadFloat();
            break;
          }
          case 309: {
            DodgeCostTime = input.ReadFloat();
            break;
          }
          case 317: {
            HurtDelay = input.ReadFloat();
            break;
          }
          case 320: {
            WeaponId = input.ReadUInt32();
            break;
          }
          case 333: {
            PreDodgeTime = input.ReadFloat();
            break;
          }
          case 341: {
            AfterDodgeTime = input.ReadFloat();
            break;
          }
          case 349: {
            WanderRate = input.ReadFloat();
            break;
          }
          case 357: {
            BornAttackCoolDownTime = input.ReadFloat();
            break;
          }
          case 365: {
            FirePositionHeightDeviation = input.ReadFloat();
            break;
          }
          case 373: {
            FirePositionAngleDeviation = input.ReadFloat();
            break;
          }
          case 381: {
            FirePositionDistanceDeviation = input.ReadFloat();
            break;
          }
          case 389: {
            AimAtTargetHorizontalMinDeviation = input.ReadFloat();
            break;
          }
          case 397: {
            AimAtTargetVerticalMinDeviation = input.ReadFloat();
            break;
          }
          case 405: {
            AimAtTargetHorizontalMaxDeviation = input.ReadFloat();
            break;
          }
          case 413: {
            AimAtTargetVerticalMaxDeviation = input.ReadFloat();
            break;
          }
          case 421: {
            RushToEnemyDistanceLimit = input.ReadFloat();
            break;
          }
          case 429: {
            MoveContinueTime = input.ReadFloat();
            break;
          }
          case 437: {
            MoveContinueTimeDeviation = input.ReadFloat();
            break;
          }
          case 445: {
            IdleContinueTime = input.ReadFloat();
            break;
          }
          case 453: {
            IdleContinueTimeDeviation = input.ReadFloat();
            break;
          }
          case 461: {
            SituPatrolRadius = input.ReadFloat();
            break;
          }
          case 469: {
            SituPatrolRadiusDeviation = input.ReadFloat();
            break;
          }
          case 477: {
            SituPatrolIdleTime = input.ReadFloat();
            break;
          }
          case 485: {
            SituPatrolIdleTimeDeviation = input.ReadFloat();
            break;
          }
          case 493: {
            SituRiggingRadius = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ZombieMonsterData_Array : pb::IMessage<ZombieMonsterData_Array> {
    private static readonly pb::MessageParser<ZombieMonsterData_Array> _parser = new pb::MessageParser<ZombieMonsterData_Array>(() => new ZombieMonsterData_Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZombieMonsterData_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pbeans.XlsBeansZombiemonsterdataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZombieMonsterData_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZombieMonsterData_Array(ZombieMonsterData_Array other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZombieMonsterData_Array Clone() {
      return new ZombieMonsterData_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D11.Pbeans.ZombieMonsterData> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D11.Pbeans.ZombieMonsterData.Parser);
    private readonly pbc::RepeatedField<global::D11.Pbeans.ZombieMonsterData> items_ = new pbc::RepeatedField<global::D11.Pbeans.ZombieMonsterData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D11.Pbeans.ZombieMonsterData> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZombieMonsterData_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZombieMonsterData_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZombieMonsterData_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
