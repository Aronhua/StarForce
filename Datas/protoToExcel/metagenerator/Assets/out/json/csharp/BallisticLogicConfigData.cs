// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BallisticLogicConfigData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from BallisticLogicConfigData.proto</summary>
  public static partial class BallisticLogicConfigDataReflection {

    #region Descriptor
    /// <summary>File descriptor for BallisticLogicConfigData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BallisticLogicConfigDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5CYWxsaXN0aWNMb2dpY0NvbmZpZ0RhdGEucHJvdG8SCUQxMS5QanNvbhoO",
            "UGJWZWN0b3IucHJvdG8ipwcKGEJhbGxpc3RpY0xvZ2ljQ29uZmlnRGF0YRIR",
            "CglBc3NldE5hbWUYASABKAkSHAoUQmFsbGlzdGljRWZmZWN0U2NhbGUYAiAB",
            "KAISEAoIU2hvdENvc3QYAyABKAUSEwoLRmx5TGlmZVRpbWUYBCABKAUSHQoV",
            "Q29sbGlzaW9uRHluYW1pY0V2ZW50GAUgASgFEhwKFENvbGxpc2lvblN0YXRp",
            "Y0V2ZW50GAYgASgFEhQKDFRpbWVPdXRFdmVudBgHIAEoBRIrCg1Jbml0UG9z",
            "T2Zmc2V0GAggASgLMhQuRDExLlBqc29uLlBiVmVjdG9yMxIRCglJbml0U3Bl",
            "ZWQYCSABKAISEAoITWF4U3BlZWQYCiABKAISEgoKQWNjZWxTcGVlZBgLIAEo",
            "AhIaChJBY2NlbFNwZWVkRHVyYXRpb24YDCABKAISIQoZR3Jhdml0YXRpb25h",
            "bEFjY2VsZXJhdGlvbhgNIAEoAhIZChFGaXJlRWZmZWN0QXNzZXRGcBgOIAEo",
            "CRIZChFGaXJlRWZmZWN0QXNzZXRUcBgPIAEoCRIYChBGaXJlU291bmRFdmVu",
            "dEZwGBAgASgJEhgKEEZpcmVTb3VuZEV2ZW50VHAYESABKAkSHQoVSGl0U3Rh",
            "dGljT2JqZWN0RWZmZWN0GBIgASgNEhUKDUhpdFBhd25FZmZlY3QYEyABKA0S",
            "GAoQSGl0TW9uc3RlckVmZmVjdBgUIAEoDRIbChNIaXRQYXduU291bmRFdmVu",
            "dFRwGBUgASgJEhsKE0hpdFBhd25Tb3VuZEV2ZW50RnAYFiABKAkSIQoZSGl0",
            "U3RhdGljT2JqZWN0U291bmRFdmVudBgXIAEoCRIeChZIaXRNb25zdGVyU291",
            "bmRFdmVudFRwGBggASgJEh4KFkhpdE1vbnN0ZXJTb3VuZEV2ZW50RnAYGSAB",
            "KAkSFgoOQmFsbGlzdGljQ291bnQYGiABKAUSGgoSUmFuZG9tT2Zmc2V0RmFj",
            "dG9yGBsgASgCEhQKDEZpcmVJbnRlcnZhbBgcIAEoAhIVCg1EZXN0cm95RWZm",
            "ZWN0GB0gASgFEhoKEkRlc3Ryb3lFZmZlY3RTY2FsZRgeIAEoAhIZChFEZXN0",
            "cm95RWZmZWN0TGlmZRgfIAEoAhIZChFEZXN0cm95QXVkaW9FdmVudBggIAEo",
            "CRIYChBEZWNheURhbWFnZUxpbWl0GCEgASgJEhcKD0RlY2F5RGFtYWdlUmF0",
            "ZRgiIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D11.Pjson.PbVectorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.BallisticLogicConfigData), global::D11.Pjson.BallisticLogicConfigData.Parser, new[]{ "AssetName", "BallisticEffectScale", "ShotCost", "FlyLifeTime", "CollisionDynamicEvent", "CollisionStaticEvent", "TimeOutEvent", "InitPosOffset", "InitSpeed", "MaxSpeed", "AccelSpeed", "AccelSpeedDuration", "GravitationalAcceleration", "FireEffectAssetFp", "FireEffectAssetTp", "FireSoundEventFp", "FireSoundEventTp", "HitStaticObjectEffect", "HitPawnEffect", "HitMonsterEffect", "HitPawnSoundEventTp", "HitPawnSoundEventFp", "HitStaticObjectSoundEvent", "HitMonsterSoundEventTp", "HitMonsterSoundEventFp", "BallisticCount", "RandomOffsetFactor", "FireInterval", "DestroyEffect", "DestroyEffectScale", "DestroyEffectLife", "DestroyAudioEvent", "DecayDamageLimit", "DecayDamageRate" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BallisticLogicConfigData : pb::IMessage<BallisticLogicConfigData> {
    private static readonly pb::MessageParser<BallisticLogicConfigData> _parser = new pb::MessageParser<BallisticLogicConfigData>(() => new BallisticLogicConfigData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BallisticLogicConfigData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.BallisticLogicConfigDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallisticLogicConfigData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallisticLogicConfigData(BallisticLogicConfigData other) : this() {
      assetName_ = other.assetName_;
      ballisticEffectScale_ = other.ballisticEffectScale_;
      shotCost_ = other.shotCost_;
      flyLifeTime_ = other.flyLifeTime_;
      collisionDynamicEvent_ = other.collisionDynamicEvent_;
      collisionStaticEvent_ = other.collisionStaticEvent_;
      timeOutEvent_ = other.timeOutEvent_;
      initPosOffset_ = other.initPosOffset_ != null ? other.initPosOffset_.Clone() : null;
      initSpeed_ = other.initSpeed_;
      maxSpeed_ = other.maxSpeed_;
      accelSpeed_ = other.accelSpeed_;
      accelSpeedDuration_ = other.accelSpeedDuration_;
      gravitationalAcceleration_ = other.gravitationalAcceleration_;
      fireEffectAssetFp_ = other.fireEffectAssetFp_;
      fireEffectAssetTp_ = other.fireEffectAssetTp_;
      fireSoundEventFp_ = other.fireSoundEventFp_;
      fireSoundEventTp_ = other.fireSoundEventTp_;
      hitStaticObjectEffect_ = other.hitStaticObjectEffect_;
      hitPawnEffect_ = other.hitPawnEffect_;
      hitMonsterEffect_ = other.hitMonsterEffect_;
      hitPawnSoundEventTp_ = other.hitPawnSoundEventTp_;
      hitPawnSoundEventFp_ = other.hitPawnSoundEventFp_;
      hitStaticObjectSoundEvent_ = other.hitStaticObjectSoundEvent_;
      hitMonsterSoundEventTp_ = other.hitMonsterSoundEventTp_;
      hitMonsterSoundEventFp_ = other.hitMonsterSoundEventFp_;
      ballisticCount_ = other.ballisticCount_;
      randomOffsetFactor_ = other.randomOffsetFactor_;
      fireInterval_ = other.fireInterval_;
      destroyEffect_ = other.destroyEffect_;
      destroyEffectScale_ = other.destroyEffectScale_;
      destroyEffectLife_ = other.destroyEffectLife_;
      destroyAudioEvent_ = other.destroyAudioEvent_;
      decayDamageLimit_ = other.decayDamageLimit_;
      decayDamageRate_ = other.decayDamageRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallisticLogicConfigData Clone() {
      return new BallisticLogicConfigData(this);
    }

    /// <summary>Field number for the "AssetName" field.</summary>
    public const int AssetNameFieldNumber = 1;
    private string assetName_ = "";
    /// <summary>
    /// AssetName 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetName {
      get { return assetName_; }
      set {
        assetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BallisticEffectScale" field.</summary>
    public const int BallisticEffectScaleFieldNumber = 2;
    private float ballisticEffectScale_;
    /// <summary>
    /// 弹道特效缩放系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BallisticEffectScale {
      get { return ballisticEffectScale_; }
      set {
        ballisticEffectScale_ = value;
      }
    }

    /// <summary>Field number for the "ShotCost" field.</summary>
    public const int ShotCostFieldNumber = 3;
    private int shotCost_;
    /// <summary>
    /// 一发消耗子弹数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShotCost {
      get { return shotCost_; }
      set {
        shotCost_ = value;
      }
    }

    /// <summary>Field number for the "FlyLifeTime" field.</summary>
    public const int FlyLifeTimeFieldNumber = 4;
    private int flyLifeTime_;
    /// <summary>
    /// 飞行时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FlyLifeTime {
      get { return flyLifeTime_; }
      set {
        flyLifeTime_ = value;
      }
    }

    /// <summary>Field number for the "CollisionDynamicEvent" field.</summary>
    public const int CollisionDynamicEventFieldNumber = 5;
    private int collisionDynamicEvent_;
    /// <summary>
    /// 碰撞动态物体触发事件（0 无 1 销毁 2爆炸 3 只反弹 4 只分裂  5 反弹分裂） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollisionDynamicEvent {
      get { return collisionDynamicEvent_; }
      set {
        collisionDynamicEvent_ = value;
      }
    }

    /// <summary>Field number for the "CollisionStaticEvent" field.</summary>
    public const int CollisionStaticEventFieldNumber = 6;
    private int collisionStaticEvent_;
    /// <summary>
    /// 碰撞静态物体触发事件（0 无 1 销毁 2爆炸 3 只反弹 4 只分裂 5 反弹分裂） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollisionStaticEvent {
      get { return collisionStaticEvent_; }
      set {
        collisionStaticEvent_ = value;
      }
    }

    /// <summary>Field number for the "TimeOutEvent" field.</summary>
    public const int TimeOutEventFieldNumber = 7;
    private int timeOutEvent_;
    /// <summary>
    /// 飞行时间结束事件（0 无 1 销毁 2爆炸） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeOutEvent {
      get { return timeOutEvent_; }
      set {
        timeOutEvent_ = value;
      }
    }

    /// <summary>Field number for the "InitPosOffset" field.</summary>
    public const int InitPosOffsetFieldNumber = 8;
    private global::D11.Pjson.PbVector3 initPosOffset_;
    /// <summary>
    /// 弹道发射点位置偏移(xyz) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.PbVector3 InitPosOffset {
      get { return initPosOffset_; }
      set {
        initPosOffset_ = value;
      }
    }

    /// <summary>Field number for the "InitSpeed" field.</summary>
    public const int InitSpeedFieldNumber = 9;
    private float initSpeed_;
    /// <summary>
    /// 弹道初始速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitSpeed {
      get { return initSpeed_; }
      set {
        initSpeed_ = value;
      }
    }

    /// <summary>Field number for the "MaxSpeed" field.</summary>
    public const int MaxSpeedFieldNumber = 10;
    private float maxSpeed_;
    /// <summary>
    /// 弹道最大速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxSpeed {
      get { return maxSpeed_; }
      set {
        maxSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AccelSpeed" field.</summary>
    public const int AccelSpeedFieldNumber = 11;
    private float accelSpeed_;
    /// <summary>
    /// 弹道加速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AccelSpeed {
      get { return accelSpeed_; }
      set {
        accelSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AccelSpeedDuration" field.</summary>
    public const int AccelSpeedDurationFieldNumber = 12;
    private float accelSpeedDuration_;
    /// <summary>
    /// 弹道加速度持续时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AccelSpeedDuration {
      get { return accelSpeedDuration_; }
      set {
        accelSpeedDuration_ = value;
      }
    }

    /// <summary>Field number for the "GravitationalAcceleration" field.</summary>
    public const int GravitationalAccelerationFieldNumber = 13;
    private float gravitationalAcceleration_;
    /// <summary>
    /// 弹道重力加速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GravitationalAcceleration {
      get { return gravitationalAcceleration_; }
      set {
        gravitationalAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "FireEffectAssetFp" field.</summary>
    public const int FireEffectAssetFpFieldNumber = 14;
    private string fireEffectAssetFp_ = "";
    /// <summary>
    /// 开火特效FP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireEffectAssetFp {
      get { return fireEffectAssetFp_; }
      set {
        fireEffectAssetFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireEffectAssetTp" field.</summary>
    public const int FireEffectAssetTpFieldNumber = 15;
    private string fireEffectAssetTp_ = "";
    /// <summary>
    /// 开火特效TP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireEffectAssetTp {
      get { return fireEffectAssetTp_; }
      set {
        fireEffectAssetTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireSoundEventFp" field.</summary>
    public const int FireSoundEventFpFieldNumber = 16;
    private string fireSoundEventFp_ = "";
    /// <summary>
    /// 开火音效FP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireSoundEventFp {
      get { return fireSoundEventFp_; }
      set {
        fireSoundEventFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireSoundEventTp" field.</summary>
    public const int FireSoundEventTpFieldNumber = 17;
    private string fireSoundEventTp_ = "";
    /// <summary>
    /// 开火音效TP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireSoundEventTp {
      get { return fireSoundEventTp_; }
      set {
        fireSoundEventTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HitStaticObjectEffect" field.</summary>
    public const int HitStaticObjectEffectFieldNumber = 18;
    private uint hitStaticObjectEffect_;
    /// <summary>
    /// 击中建筑物特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HitStaticObjectEffect {
      get { return hitStaticObjectEffect_; }
      set {
        hitStaticObjectEffect_ = value;
      }
    }

    /// <summary>Field number for the "HitPawnEffect" field.</summary>
    public const int HitPawnEffectFieldNumber = 19;
    private uint hitPawnEffect_;
    /// <summary>
    /// 击中人物特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HitPawnEffect {
      get { return hitPawnEffect_; }
      set {
        hitPawnEffect_ = value;
      }
    }

    /// <summary>Field number for the "HitMonsterEffect" field.</summary>
    public const int HitMonsterEffectFieldNumber = 20;
    private uint hitMonsterEffect_;
    /// <summary>
    /// 击中怪物特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HitMonsterEffect {
      get { return hitMonsterEffect_; }
      set {
        hitMonsterEffect_ = value;
      }
    }

    /// <summary>Field number for the "HitPawnSoundEventTp" field.</summary>
    public const int HitPawnSoundEventTpFieldNumber = 21;
    private string hitPawnSoundEventTp_ = "";
    /// <summary>
    /// 命中人物音效TP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitPawnSoundEventTp {
      get { return hitPawnSoundEventTp_; }
      set {
        hitPawnSoundEventTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HitPawnSoundEventFp" field.</summary>
    public const int HitPawnSoundEventFpFieldNumber = 22;
    private string hitPawnSoundEventFp_ = "";
    /// <summary>
    /// 命中人物音效FP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitPawnSoundEventFp {
      get { return hitPawnSoundEventFp_; }
      set {
        hitPawnSoundEventFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HitStaticObjectSoundEvent" field.</summary>
    public const int HitStaticObjectSoundEventFieldNumber = 23;
    private string hitStaticObjectSoundEvent_ = "";
    /// <summary>
    /// 击中静态物体音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitStaticObjectSoundEvent {
      get { return hitStaticObjectSoundEvent_; }
      set {
        hitStaticObjectSoundEvent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HitMonsterSoundEventTp" field.</summary>
    public const int HitMonsterSoundEventTpFieldNumber = 24;
    private string hitMonsterSoundEventTp_ = "";
    /// <summary>
    /// 击中怪物音效TP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitMonsterSoundEventTp {
      get { return hitMonsterSoundEventTp_; }
      set {
        hitMonsterSoundEventTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HitMonsterSoundEventFp" field.</summary>
    public const int HitMonsterSoundEventFpFieldNumber = 25;
    private string hitMonsterSoundEventFp_ = "";
    /// <summary>
    /// 击中怪物音效FP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitMonsterSoundEventFp {
      get { return hitMonsterSoundEventFp_; }
      set {
        hitMonsterSoundEventFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BallisticCount" field.</summary>
    public const int BallisticCountFieldNumber = 26;
    private int ballisticCount_;
    /// <summary>
    /// 发射个数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BallisticCount {
      get { return ballisticCount_; }
      set {
        ballisticCount_ = value;
      }
    }

    /// <summary>Field number for the "RandomOffsetFactor" field.</summary>
    public const int RandomOffsetFactorFieldNumber = 27;
    private float randomOffsetFactor_;
    /// <summary>
    /// 多个弹道圆内偏移系数 决定分布形状 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RandomOffsetFactor {
      get { return randomOffsetFactor_; }
      set {
        randomOffsetFactor_ = value;
      }
    }

    /// <summary>Field number for the "FireInterval" field.</summary>
    public const int FireIntervalFieldNumber = 28;
    private float fireInterval_;
    /// <summary>
    /// 开火时间间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireInterval {
      get { return fireInterval_; }
      set {
        fireInterval_ = value;
      }
    }

    /// <summary>Field number for the "DestroyEffect" field.</summary>
    public const int DestroyEffectFieldNumber = 29;
    private int destroyEffect_;
    /// <summary>
    /// 消散特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestroyEffect {
      get { return destroyEffect_; }
      set {
        destroyEffect_ = value;
      }
    }

    /// <summary>Field number for the "DestroyEffectScale" field.</summary>
    public const int DestroyEffectScaleFieldNumber = 30;
    private float destroyEffectScale_;
    /// <summary>
    /// 消散特效scale 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DestroyEffectScale {
      get { return destroyEffectScale_; }
      set {
        destroyEffectScale_ = value;
      }
    }

    /// <summary>Field number for the "DestroyEffectLife" field.</summary>
    public const int DestroyEffectLifeFieldNumber = 31;
    private float destroyEffectLife_;
    /// <summary>
    /// 消散特效存活时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DestroyEffectLife {
      get { return destroyEffectLife_; }
      set {
        destroyEffectLife_ = value;
      }
    }

    /// <summary>Field number for the "DestroyAudioEvent" field.</summary>
    public const int DestroyAudioEventFieldNumber = 32;
    private string destroyAudioEvent_ = "";
    /// <summary>
    /// 消散音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestroyAudioEvent {
      get { return destroyAudioEvent_; }
      set {
        destroyAudioEvent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DecayDamageLimit" field.</summary>
    public const int DecayDamageLimitFieldNumber = 33;
    private string decayDamageLimit_ = "";
    /// <summary>
    /// 伤害衰减限制值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DecayDamageLimit {
      get { return decayDamageLimit_; }
      set {
        decayDamageLimit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DecayDamageRate" field.</summary>
    public const int DecayDamageRateFieldNumber = 34;
    private string decayDamageRate_ = "";
    /// <summary>
    /// 伤害衰减比例 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DecayDamageRate {
      get { return decayDamageRate_; }
      set {
        decayDamageRate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BallisticLogicConfigData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BallisticLogicConfigData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssetName != other.AssetName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BallisticEffectScale, other.BallisticEffectScale)) return false;
      if (ShotCost != other.ShotCost) return false;
      if (FlyLifeTime != other.FlyLifeTime) return false;
      if (CollisionDynamicEvent != other.CollisionDynamicEvent) return false;
      if (CollisionStaticEvent != other.CollisionStaticEvent) return false;
      if (TimeOutEvent != other.TimeOutEvent) return false;
      if (!object.Equals(InitPosOffset, other.InitPosOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitSpeed, other.InitSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSpeed, other.MaxSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccelSpeed, other.AccelSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccelSpeedDuration, other.AccelSpeedDuration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GravitationalAcceleration, other.GravitationalAcceleration)) return false;
      if (FireEffectAssetFp != other.FireEffectAssetFp) return false;
      if (FireEffectAssetTp != other.FireEffectAssetTp) return false;
      if (FireSoundEventFp != other.FireSoundEventFp) return false;
      if (FireSoundEventTp != other.FireSoundEventTp) return false;
      if (HitStaticObjectEffect != other.HitStaticObjectEffect) return false;
      if (HitPawnEffect != other.HitPawnEffect) return false;
      if (HitMonsterEffect != other.HitMonsterEffect) return false;
      if (HitPawnSoundEventTp != other.HitPawnSoundEventTp) return false;
      if (HitPawnSoundEventFp != other.HitPawnSoundEventFp) return false;
      if (HitStaticObjectSoundEvent != other.HitStaticObjectSoundEvent) return false;
      if (HitMonsterSoundEventTp != other.HitMonsterSoundEventTp) return false;
      if (HitMonsterSoundEventFp != other.HitMonsterSoundEventFp) return false;
      if (BallisticCount != other.BallisticCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RandomOffsetFactor, other.RandomOffsetFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireInterval, other.FireInterval)) return false;
      if (DestroyEffect != other.DestroyEffect) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DestroyEffectScale, other.DestroyEffectScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DestroyEffectLife, other.DestroyEffectLife)) return false;
      if (DestroyAudioEvent != other.DestroyAudioEvent) return false;
      if (DecayDamageLimit != other.DecayDamageLimit) return false;
      if (DecayDamageRate != other.DecayDamageRate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssetName.Length != 0) hash ^= AssetName.GetHashCode();
      if (BallisticEffectScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BallisticEffectScale);
      if (ShotCost != 0) hash ^= ShotCost.GetHashCode();
      if (FlyLifeTime != 0) hash ^= FlyLifeTime.GetHashCode();
      if (CollisionDynamicEvent != 0) hash ^= CollisionDynamicEvent.GetHashCode();
      if (CollisionStaticEvent != 0) hash ^= CollisionStaticEvent.GetHashCode();
      if (TimeOutEvent != 0) hash ^= TimeOutEvent.GetHashCode();
      if (initPosOffset_ != null) hash ^= InitPosOffset.GetHashCode();
      if (InitSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitSpeed);
      if (MaxSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSpeed);
      if (AccelSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccelSpeed);
      if (AccelSpeedDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccelSpeedDuration);
      if (GravitationalAcceleration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GravitationalAcceleration);
      if (FireEffectAssetFp.Length != 0) hash ^= FireEffectAssetFp.GetHashCode();
      if (FireEffectAssetTp.Length != 0) hash ^= FireEffectAssetTp.GetHashCode();
      if (FireSoundEventFp.Length != 0) hash ^= FireSoundEventFp.GetHashCode();
      if (FireSoundEventTp.Length != 0) hash ^= FireSoundEventTp.GetHashCode();
      if (HitStaticObjectEffect != 0) hash ^= HitStaticObjectEffect.GetHashCode();
      if (HitPawnEffect != 0) hash ^= HitPawnEffect.GetHashCode();
      if (HitMonsterEffect != 0) hash ^= HitMonsterEffect.GetHashCode();
      if (HitPawnSoundEventTp.Length != 0) hash ^= HitPawnSoundEventTp.GetHashCode();
      if (HitPawnSoundEventFp.Length != 0) hash ^= HitPawnSoundEventFp.GetHashCode();
      if (HitStaticObjectSoundEvent.Length != 0) hash ^= HitStaticObjectSoundEvent.GetHashCode();
      if (HitMonsterSoundEventTp.Length != 0) hash ^= HitMonsterSoundEventTp.GetHashCode();
      if (HitMonsterSoundEventFp.Length != 0) hash ^= HitMonsterSoundEventFp.GetHashCode();
      if (BallisticCount != 0) hash ^= BallisticCount.GetHashCode();
      if (RandomOffsetFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RandomOffsetFactor);
      if (FireInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireInterval);
      if (DestroyEffect != 0) hash ^= DestroyEffect.GetHashCode();
      if (DestroyEffectScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DestroyEffectScale);
      if (DestroyEffectLife != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DestroyEffectLife);
      if (DestroyAudioEvent.Length != 0) hash ^= DestroyAudioEvent.GetHashCode();
      if (DecayDamageLimit.Length != 0) hash ^= DecayDamageLimit.GetHashCode();
      if (DecayDamageRate.Length != 0) hash ^= DecayDamageRate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssetName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AssetName);
      }
      if (BallisticEffectScale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BallisticEffectScale);
      }
      if (ShotCost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ShotCost);
      }
      if (FlyLifeTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FlyLifeTime);
      }
      if (CollisionDynamicEvent != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CollisionDynamicEvent);
      }
      if (CollisionStaticEvent != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CollisionStaticEvent);
      }
      if (TimeOutEvent != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TimeOutEvent);
      }
      if (initPosOffset_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(InitPosOffset);
      }
      if (InitSpeed != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(InitSpeed);
      }
      if (MaxSpeed != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MaxSpeed);
      }
      if (AccelSpeed != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(AccelSpeed);
      }
      if (AccelSpeedDuration != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(AccelSpeedDuration);
      }
      if (GravitationalAcceleration != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(GravitationalAcceleration);
      }
      if (FireEffectAssetFp.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(FireEffectAssetFp);
      }
      if (FireEffectAssetTp.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(FireEffectAssetTp);
      }
      if (FireSoundEventFp.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(FireSoundEventFp);
      }
      if (FireSoundEventTp.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(FireSoundEventTp);
      }
      if (HitStaticObjectEffect != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(HitStaticObjectEffect);
      }
      if (HitPawnEffect != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(HitPawnEffect);
      }
      if (HitMonsterEffect != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(HitMonsterEffect);
      }
      if (HitPawnSoundEventTp.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(HitPawnSoundEventTp);
      }
      if (HitPawnSoundEventFp.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(HitPawnSoundEventFp);
      }
      if (HitStaticObjectSoundEvent.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(HitStaticObjectSoundEvent);
      }
      if (HitMonsterSoundEventTp.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(HitMonsterSoundEventTp);
      }
      if (HitMonsterSoundEventFp.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(HitMonsterSoundEventFp);
      }
      if (BallisticCount != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(BallisticCount);
      }
      if (RandomOffsetFactor != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(RandomOffsetFactor);
      }
      if (FireInterval != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(FireInterval);
      }
      if (DestroyEffect != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(DestroyEffect);
      }
      if (DestroyEffectScale != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(DestroyEffectScale);
      }
      if (DestroyEffectLife != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(DestroyEffectLife);
      }
      if (DestroyAudioEvent.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(DestroyAudioEvent);
      }
      if (DecayDamageLimit.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(DecayDamageLimit);
      }
      if (DecayDamageRate.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(DecayDamageRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetName);
      }
      if (BallisticEffectScale != 0F) {
        size += 1 + 4;
      }
      if (ShotCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShotCost);
      }
      if (FlyLifeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FlyLifeTime);
      }
      if (CollisionDynamicEvent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollisionDynamicEvent);
      }
      if (CollisionStaticEvent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollisionStaticEvent);
      }
      if (TimeOutEvent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeOutEvent);
      }
      if (initPosOffset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitPosOffset);
      }
      if (InitSpeed != 0F) {
        size += 1 + 4;
      }
      if (MaxSpeed != 0F) {
        size += 1 + 4;
      }
      if (AccelSpeed != 0F) {
        size += 1 + 4;
      }
      if (AccelSpeedDuration != 0F) {
        size += 1 + 4;
      }
      if (GravitationalAcceleration != 0F) {
        size += 1 + 4;
      }
      if (FireEffectAssetFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FireEffectAssetFp);
      }
      if (FireEffectAssetTp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FireEffectAssetTp);
      }
      if (FireSoundEventFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FireSoundEventFp);
      }
      if (FireSoundEventTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FireSoundEventTp);
      }
      if (HitStaticObjectEffect != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HitStaticObjectEffect);
      }
      if (HitPawnEffect != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HitPawnEffect);
      }
      if (HitMonsterEffect != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HitMonsterEffect);
      }
      if (HitPawnSoundEventTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HitPawnSoundEventTp);
      }
      if (HitPawnSoundEventFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HitPawnSoundEventFp);
      }
      if (HitStaticObjectSoundEvent.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HitStaticObjectSoundEvent);
      }
      if (HitMonsterSoundEventTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HitMonsterSoundEventTp);
      }
      if (HitMonsterSoundEventFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HitMonsterSoundEventFp);
      }
      if (BallisticCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BallisticCount);
      }
      if (RandomOffsetFactor != 0F) {
        size += 2 + 4;
      }
      if (FireInterval != 0F) {
        size += 2 + 4;
      }
      if (DestroyEffect != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DestroyEffect);
      }
      if (DestroyEffectScale != 0F) {
        size += 2 + 4;
      }
      if (DestroyEffectLife != 0F) {
        size += 2 + 4;
      }
      if (DestroyAudioEvent.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DestroyAudioEvent);
      }
      if (DecayDamageLimit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DecayDamageLimit);
      }
      if (DecayDamageRate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DecayDamageRate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BallisticLogicConfigData other) {
      if (other == null) {
        return;
      }
      if (other.AssetName.Length != 0) {
        AssetName = other.AssetName;
      }
      if (other.BallisticEffectScale != 0F) {
        BallisticEffectScale = other.BallisticEffectScale;
      }
      if (other.ShotCost != 0) {
        ShotCost = other.ShotCost;
      }
      if (other.FlyLifeTime != 0) {
        FlyLifeTime = other.FlyLifeTime;
      }
      if (other.CollisionDynamicEvent != 0) {
        CollisionDynamicEvent = other.CollisionDynamicEvent;
      }
      if (other.CollisionStaticEvent != 0) {
        CollisionStaticEvent = other.CollisionStaticEvent;
      }
      if (other.TimeOutEvent != 0) {
        TimeOutEvent = other.TimeOutEvent;
      }
      if (other.initPosOffset_ != null) {
        if (initPosOffset_ == null) {
          InitPosOffset = new global::D11.Pjson.PbVector3();
        }
        InitPosOffset.MergeFrom(other.InitPosOffset);
      }
      if (other.InitSpeed != 0F) {
        InitSpeed = other.InitSpeed;
      }
      if (other.MaxSpeed != 0F) {
        MaxSpeed = other.MaxSpeed;
      }
      if (other.AccelSpeed != 0F) {
        AccelSpeed = other.AccelSpeed;
      }
      if (other.AccelSpeedDuration != 0F) {
        AccelSpeedDuration = other.AccelSpeedDuration;
      }
      if (other.GravitationalAcceleration != 0F) {
        GravitationalAcceleration = other.GravitationalAcceleration;
      }
      if (other.FireEffectAssetFp.Length != 0) {
        FireEffectAssetFp = other.FireEffectAssetFp;
      }
      if (other.FireEffectAssetTp.Length != 0) {
        FireEffectAssetTp = other.FireEffectAssetTp;
      }
      if (other.FireSoundEventFp.Length != 0) {
        FireSoundEventFp = other.FireSoundEventFp;
      }
      if (other.FireSoundEventTp.Length != 0) {
        FireSoundEventTp = other.FireSoundEventTp;
      }
      if (other.HitStaticObjectEffect != 0) {
        HitStaticObjectEffect = other.HitStaticObjectEffect;
      }
      if (other.HitPawnEffect != 0) {
        HitPawnEffect = other.HitPawnEffect;
      }
      if (other.HitMonsterEffect != 0) {
        HitMonsterEffect = other.HitMonsterEffect;
      }
      if (other.HitPawnSoundEventTp.Length != 0) {
        HitPawnSoundEventTp = other.HitPawnSoundEventTp;
      }
      if (other.HitPawnSoundEventFp.Length != 0) {
        HitPawnSoundEventFp = other.HitPawnSoundEventFp;
      }
      if (other.HitStaticObjectSoundEvent.Length != 0) {
        HitStaticObjectSoundEvent = other.HitStaticObjectSoundEvent;
      }
      if (other.HitMonsterSoundEventTp.Length != 0) {
        HitMonsterSoundEventTp = other.HitMonsterSoundEventTp;
      }
      if (other.HitMonsterSoundEventFp.Length != 0) {
        HitMonsterSoundEventFp = other.HitMonsterSoundEventFp;
      }
      if (other.BallisticCount != 0) {
        BallisticCount = other.BallisticCount;
      }
      if (other.RandomOffsetFactor != 0F) {
        RandomOffsetFactor = other.RandomOffsetFactor;
      }
      if (other.FireInterval != 0F) {
        FireInterval = other.FireInterval;
      }
      if (other.DestroyEffect != 0) {
        DestroyEffect = other.DestroyEffect;
      }
      if (other.DestroyEffectScale != 0F) {
        DestroyEffectScale = other.DestroyEffectScale;
      }
      if (other.DestroyEffectLife != 0F) {
        DestroyEffectLife = other.DestroyEffectLife;
      }
      if (other.DestroyAudioEvent.Length != 0) {
        DestroyAudioEvent = other.DestroyAudioEvent;
      }
      if (other.DecayDamageLimit.Length != 0) {
        DecayDamageLimit = other.DecayDamageLimit;
      }
      if (other.DecayDamageRate.Length != 0) {
        DecayDamageRate = other.DecayDamageRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AssetName = input.ReadString();
            break;
          }
          case 21: {
            BallisticEffectScale = input.ReadFloat();
            break;
          }
          case 24: {
            ShotCost = input.ReadInt32();
            break;
          }
          case 32: {
            FlyLifeTime = input.ReadInt32();
            break;
          }
          case 40: {
            CollisionDynamicEvent = input.ReadInt32();
            break;
          }
          case 48: {
            CollisionStaticEvent = input.ReadInt32();
            break;
          }
          case 56: {
            TimeOutEvent = input.ReadInt32();
            break;
          }
          case 66: {
            if (initPosOffset_ == null) {
              InitPosOffset = new global::D11.Pjson.PbVector3();
            }
            input.ReadMessage(InitPosOffset);
            break;
          }
          case 77: {
            InitSpeed = input.ReadFloat();
            break;
          }
          case 85: {
            MaxSpeed = input.ReadFloat();
            break;
          }
          case 93: {
            AccelSpeed = input.ReadFloat();
            break;
          }
          case 101: {
            AccelSpeedDuration = input.ReadFloat();
            break;
          }
          case 109: {
            GravitationalAcceleration = input.ReadFloat();
            break;
          }
          case 114: {
            FireEffectAssetFp = input.ReadString();
            break;
          }
          case 122: {
            FireEffectAssetTp = input.ReadString();
            break;
          }
          case 130: {
            FireSoundEventFp = input.ReadString();
            break;
          }
          case 138: {
            FireSoundEventTp = input.ReadString();
            break;
          }
          case 144: {
            HitStaticObjectEffect = input.ReadUInt32();
            break;
          }
          case 152: {
            HitPawnEffect = input.ReadUInt32();
            break;
          }
          case 160: {
            HitMonsterEffect = input.ReadUInt32();
            break;
          }
          case 170: {
            HitPawnSoundEventTp = input.ReadString();
            break;
          }
          case 178: {
            HitPawnSoundEventFp = input.ReadString();
            break;
          }
          case 186: {
            HitStaticObjectSoundEvent = input.ReadString();
            break;
          }
          case 194: {
            HitMonsterSoundEventTp = input.ReadString();
            break;
          }
          case 202: {
            HitMonsterSoundEventFp = input.ReadString();
            break;
          }
          case 208: {
            BallisticCount = input.ReadInt32();
            break;
          }
          case 221: {
            RandomOffsetFactor = input.ReadFloat();
            break;
          }
          case 229: {
            FireInterval = input.ReadFloat();
            break;
          }
          case 232: {
            DestroyEffect = input.ReadInt32();
            break;
          }
          case 245: {
            DestroyEffectScale = input.ReadFloat();
            break;
          }
          case 253: {
            DestroyEffectLife = input.ReadFloat();
            break;
          }
          case 258: {
            DestroyAudioEvent = input.ReadString();
            break;
          }
          case 266: {
            DecayDamageLimit = input.ReadString();
            break;
          }
          case 274: {
            DecayDamageRate = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
