// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BallisticLogicConfigLineData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from BallisticLogicConfigLineData.proto</summary>
  public static partial class BallisticLogicConfigLineDataReflection {

    #region Descriptor
    /// <summary>File descriptor for BallisticLogicConfigLineData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BallisticLogicConfigLineDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJCYWxsaXN0aWNMb2dpY0NvbmZpZ0xpbmVEYXRhLnByb3RvEglEMTEuUGpz",
            "b24aHkJhbGxpc3RpY0xvZ2ljQ29uZmlnRGF0YS5wcm90byKlAwocQmFsbGlz",
            "dGljTG9naWNDb25maWdMaW5lRGF0YRIbChNNYXhTdHJpa2luZ0Rpc3RhbmNl",
            "GAEgASgFEhMKC0RhbWFnZVZhbHVlGAIgASgFEhYKDk1heEJvdW5jZUNvdW50",
            "GAMgASgFEhoKEkJvdW5jZURhbWFnZUZhY3RvchgEIAEoAhIXCg9TcGF3blNw",
            "bGl0Q291bnQYBSABKAUSEgoKU3BsaXRDb3VudBgGIAEoBRIeChZTcGxpdEFu",
            "Z2xlT2Zmc2V0RmFjdG9yGAcgASgCEhkKEVNwbGl0RGFtYWdlRmFjdG9yGAgg",
            "ASgCEhgKEENoYWluU3BsaXRFYW5ibGUYCSABKAgSFgoOQ2hhaW5TcGxpdFJh",
            "bmcYCiABKAISFQoNTGluZU1vdmVTcGVlZBgLIAEoAhIcChRIaXRJbXBhY3RF",
            "ZmZlY3RBc3NldBgMIAEoCRIbChNIaXRJbXBhY3RFZmZlY3RMaWZlGA0gASgC",
            "EjMKBnBhcmVudBgOIAEoCzIjLkQxMS5QanNvbi5CYWxsaXN0aWNMb2dpY0Nv",
            "bmZpZ0RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D11.Pjson.BallisticLogicConfigDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.BallisticLogicConfigLineData), global::D11.Pjson.BallisticLogicConfigLineData.Parser, new[]{ "MaxStrikingDistance", "DamageValue", "MaxBounceCount", "BounceDamageFactor", "SpawnSplitCount", "SplitCount", "SplitAngleOffsetFactor", "SplitDamageFactor", "ChainSplitEanble", "ChainSplitRang", "LineMoveSpeed", "HitImpactEffectAsset", "HitImpactEffectLife", "Parent" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BallisticLogicConfigLineData : pb::IMessage<BallisticLogicConfigLineData> {
    private static readonly pb::MessageParser<BallisticLogicConfigLineData> _parser = new pb::MessageParser<BallisticLogicConfigLineData>(() => new BallisticLogicConfigLineData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BallisticLogicConfigLineData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.BallisticLogicConfigLineDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallisticLogicConfigLineData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallisticLogicConfigLineData(BallisticLogicConfigLineData other) : this() {
      maxStrikingDistance_ = other.maxStrikingDistance_;
      damageValue_ = other.damageValue_;
      maxBounceCount_ = other.maxBounceCount_;
      bounceDamageFactor_ = other.bounceDamageFactor_;
      spawnSplitCount_ = other.spawnSplitCount_;
      splitCount_ = other.splitCount_;
      splitAngleOffsetFactor_ = other.splitAngleOffsetFactor_;
      splitDamageFactor_ = other.splitDamageFactor_;
      chainSplitEanble_ = other.chainSplitEanble_;
      chainSplitRang_ = other.chainSplitRang_;
      lineMoveSpeed_ = other.lineMoveSpeed_;
      hitImpactEffectAsset_ = other.hitImpactEffectAsset_;
      hitImpactEffectLife_ = other.hitImpactEffectLife_;
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallisticLogicConfigLineData Clone() {
      return new BallisticLogicConfigLineData(this);
    }

    /// <summary>Field number for the "MaxStrikingDistance" field.</summary>
    public const int MaxStrikingDistanceFieldNumber = 1;
    private int maxStrikingDistance_;
    /// <summary>
    /// 攻击最大距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxStrikingDistance {
      get { return maxStrikingDistance_; }
      set {
        maxStrikingDistance_ = value;
      }
    }

    /// <summary>Field number for the "DamageValue" field.</summary>
    public const int DamageValueFieldNumber = 2;
    private int damageValue_;
    /// <summary>
    /// 伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageValue {
      get { return damageValue_; }
      set {
        damageValue_ = value;
      }
    }

    /// <summary>Field number for the "MaxBounceCount" field.</summary>
    public const int MaxBounceCountFieldNumber = 3;
    private int maxBounceCount_;
    /// <summary>
    /// 最大反弹次数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxBounceCount {
      get { return maxBounceCount_; }
      set {
        maxBounceCount_ = value;
      }
    }

    /// <summary>Field number for the "BounceDamageFactor" field.</summary>
    public const int BounceDamageFactorFieldNumber = 4;
    private float bounceDamageFactor_;
    /// <summary>
    /// 反弹次数伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BounceDamageFactor {
      get { return bounceDamageFactor_; }
      set {
        bounceDamageFactor_ = value;
      }
    }

    /// <summary>Field number for the "SpawnSplitCount" field.</summary>
    public const int SpawnSplitCountFieldNumber = 5;
    private int spawnSplitCount_;
    /// <summary>
    /// 反弹生成分裂次数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpawnSplitCount {
      get { return spawnSplitCount_; }
      set {
        spawnSplitCount_ = value;
      }
    }

    /// <summary>Field number for the "SplitCount" field.</summary>
    public const int SplitCountFieldNumber = 6;
    private int splitCount_;
    /// <summary>
    /// 分裂个数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SplitCount {
      get { return splitCount_; }
      set {
        splitCount_ = value;
      }
    }

    /// <summary>Field number for the "SplitAngleOffsetFactor" field.</summary>
    public const int SplitAngleOffsetFactorFieldNumber = 7;
    private float splitAngleOffsetFactor_;
    /// <summary>
    /// 分裂角度系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SplitAngleOffsetFactor {
      get { return splitAngleOffsetFactor_; }
      set {
        splitAngleOffsetFactor_ = value;
      }
    }

    /// <summary>Field number for the "SplitDamageFactor" field.</summary>
    public const int SplitDamageFactorFieldNumber = 8;
    private float splitDamageFactor_;
    /// <summary>
    /// 分裂弹道出生的伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SplitDamageFactor {
      get { return splitDamageFactor_; }
      set {
        splitDamageFactor_ = value;
      }
    }

    /// <summary>Field number for the "ChainSplitEanble" field.</summary>
    public const int ChainSplitEanbleFieldNumber = 9;
    private bool chainSplitEanble_;
    /// <summary>
    /// 连锁分裂伤害类型开关 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChainSplitEanble {
      get { return chainSplitEanble_; }
      set {
        chainSplitEanble_ = value;
      }
    }

    /// <summary>Field number for the "ChainSplitRang" field.</summary>
    public const int ChainSplitRangFieldNumber = 10;
    private float chainSplitRang_;
    /// <summary>
    /// 连锁分裂搜索敌人范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChainSplitRang {
      get { return chainSplitRang_; }
      set {
        chainSplitRang_ = value;
      }
    }

    /// <summary>Field number for the "LineMoveSpeed" field.</summary>
    public const int LineMoveSpeedFieldNumber = 11;
    private float lineMoveSpeed_;
    /// <summary>
    /// 线性弹道飞行速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LineMoveSpeed {
      get { return lineMoveSpeed_; }
      set {
        lineMoveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "HitImpactEffectAsset" field.</summary>
    public const int HitImpactEffectAssetFieldNumber = 12;
    private string hitImpactEffectAsset_ = "";
    /// <summary>
    /// 线性弹道地面受击特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitImpactEffectAsset {
      get { return hitImpactEffectAsset_; }
      set {
        hitImpactEffectAsset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HitImpactEffectLife" field.</summary>
    public const int HitImpactEffectLifeFieldNumber = 13;
    private float hitImpactEffectLife_;
    /// <summary>
    /// 线性弹道地面受击特效存活时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitImpactEffectLife {
      get { return hitImpactEffectLife_; }
      set {
        hitImpactEffectLife_ = value;
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 14;
    private global::D11.Pjson.BallisticLogicConfigData parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.BallisticLogicConfigData Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BallisticLogicConfigLineData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BallisticLogicConfigLineData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxStrikingDistance != other.MaxStrikingDistance) return false;
      if (DamageValue != other.DamageValue) return false;
      if (MaxBounceCount != other.MaxBounceCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BounceDamageFactor, other.BounceDamageFactor)) return false;
      if (SpawnSplitCount != other.SpawnSplitCount) return false;
      if (SplitCount != other.SplitCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SplitAngleOffsetFactor, other.SplitAngleOffsetFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SplitDamageFactor, other.SplitDamageFactor)) return false;
      if (ChainSplitEanble != other.ChainSplitEanble) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChainSplitRang, other.ChainSplitRang)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LineMoveSpeed, other.LineMoveSpeed)) return false;
      if (HitImpactEffectAsset != other.HitImpactEffectAsset) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitImpactEffectLife, other.HitImpactEffectLife)) return false;
      if (!object.Equals(Parent, other.Parent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxStrikingDistance != 0) hash ^= MaxStrikingDistance.GetHashCode();
      if (DamageValue != 0) hash ^= DamageValue.GetHashCode();
      if (MaxBounceCount != 0) hash ^= MaxBounceCount.GetHashCode();
      if (BounceDamageFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BounceDamageFactor);
      if (SpawnSplitCount != 0) hash ^= SpawnSplitCount.GetHashCode();
      if (SplitCount != 0) hash ^= SplitCount.GetHashCode();
      if (SplitAngleOffsetFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SplitAngleOffsetFactor);
      if (SplitDamageFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SplitDamageFactor);
      if (ChainSplitEanble != false) hash ^= ChainSplitEanble.GetHashCode();
      if (ChainSplitRang != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChainSplitRang);
      if (LineMoveSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LineMoveSpeed);
      if (HitImpactEffectAsset.Length != 0) hash ^= HitImpactEffectAsset.GetHashCode();
      if (HitImpactEffectLife != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitImpactEffectLife);
      if (parent_ != null) hash ^= Parent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxStrikingDistance != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxStrikingDistance);
      }
      if (DamageValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DamageValue);
      }
      if (MaxBounceCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxBounceCount);
      }
      if (BounceDamageFactor != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(BounceDamageFactor);
      }
      if (SpawnSplitCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SpawnSplitCount);
      }
      if (SplitCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SplitCount);
      }
      if (SplitAngleOffsetFactor != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(SplitAngleOffsetFactor);
      }
      if (SplitDamageFactor != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(SplitDamageFactor);
      }
      if (ChainSplitEanble != false) {
        output.WriteRawTag(72);
        output.WriteBool(ChainSplitEanble);
      }
      if (ChainSplitRang != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(ChainSplitRang);
      }
      if (LineMoveSpeed != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(LineMoveSpeed);
      }
      if (HitImpactEffectAsset.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(HitImpactEffectAsset);
      }
      if (HitImpactEffectLife != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(HitImpactEffectLife);
      }
      if (parent_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Parent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxStrikingDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxStrikingDistance);
      }
      if (DamageValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageValue);
      }
      if (MaxBounceCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBounceCount);
      }
      if (BounceDamageFactor != 0F) {
        size += 1 + 4;
      }
      if (SpawnSplitCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpawnSplitCount);
      }
      if (SplitCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SplitCount);
      }
      if (SplitAngleOffsetFactor != 0F) {
        size += 1 + 4;
      }
      if (SplitDamageFactor != 0F) {
        size += 1 + 4;
      }
      if (ChainSplitEanble != false) {
        size += 1 + 1;
      }
      if (ChainSplitRang != 0F) {
        size += 1 + 4;
      }
      if (LineMoveSpeed != 0F) {
        size += 1 + 4;
      }
      if (HitImpactEffectAsset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HitImpactEffectAsset);
      }
      if (HitImpactEffectLife != 0F) {
        size += 1 + 4;
      }
      if (parent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BallisticLogicConfigLineData other) {
      if (other == null) {
        return;
      }
      if (other.MaxStrikingDistance != 0) {
        MaxStrikingDistance = other.MaxStrikingDistance;
      }
      if (other.DamageValue != 0) {
        DamageValue = other.DamageValue;
      }
      if (other.MaxBounceCount != 0) {
        MaxBounceCount = other.MaxBounceCount;
      }
      if (other.BounceDamageFactor != 0F) {
        BounceDamageFactor = other.BounceDamageFactor;
      }
      if (other.SpawnSplitCount != 0) {
        SpawnSplitCount = other.SpawnSplitCount;
      }
      if (other.SplitCount != 0) {
        SplitCount = other.SplitCount;
      }
      if (other.SplitAngleOffsetFactor != 0F) {
        SplitAngleOffsetFactor = other.SplitAngleOffsetFactor;
      }
      if (other.SplitDamageFactor != 0F) {
        SplitDamageFactor = other.SplitDamageFactor;
      }
      if (other.ChainSplitEanble != false) {
        ChainSplitEanble = other.ChainSplitEanble;
      }
      if (other.ChainSplitRang != 0F) {
        ChainSplitRang = other.ChainSplitRang;
      }
      if (other.LineMoveSpeed != 0F) {
        LineMoveSpeed = other.LineMoveSpeed;
      }
      if (other.HitImpactEffectAsset.Length != 0) {
        HitImpactEffectAsset = other.HitImpactEffectAsset;
      }
      if (other.HitImpactEffectLife != 0F) {
        HitImpactEffectLife = other.HitImpactEffectLife;
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::D11.Pjson.BallisticLogicConfigData();
        }
        Parent.MergeFrom(other.Parent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxStrikingDistance = input.ReadInt32();
            break;
          }
          case 16: {
            DamageValue = input.ReadInt32();
            break;
          }
          case 24: {
            MaxBounceCount = input.ReadInt32();
            break;
          }
          case 37: {
            BounceDamageFactor = input.ReadFloat();
            break;
          }
          case 40: {
            SpawnSplitCount = input.ReadInt32();
            break;
          }
          case 48: {
            SplitCount = input.ReadInt32();
            break;
          }
          case 61: {
            SplitAngleOffsetFactor = input.ReadFloat();
            break;
          }
          case 69: {
            SplitDamageFactor = input.ReadFloat();
            break;
          }
          case 72: {
            ChainSplitEanble = input.ReadBool();
            break;
          }
          case 85: {
            ChainSplitRang = input.ReadFloat();
            break;
          }
          case 93: {
            LineMoveSpeed = input.ReadFloat();
            break;
          }
          case 98: {
            HitImpactEffectAsset = input.ReadString();
            break;
          }
          case 109: {
            HitImpactEffectLife = input.ReadFloat();
            break;
          }
          case 114: {
            if (parent_ == null) {
              Parent = new global::D11.Pjson.BallisticLogicConfigData();
            }
            input.ReadMessage(Parent);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
