// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BallisticLogicConfigSphereData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from BallisticLogicConfigSphereData.proto</summary>
  public static partial class BallisticLogicConfigSphereDataReflection {

    #region Descriptor
    /// <summary>File descriptor for BallisticLogicConfigSphereData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BallisticLogicConfigSphereDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRCYWxsaXN0aWNMb2dpY0NvbmZpZ1NwaGVyZURhdGEucHJvdG8SCUQxMS5Q",
            "anNvbhoeQmFsbGlzdGljTG9naWNDb25maWdEYXRhLnByb3RvItMECh5CYWxs",
            "aXN0aWNMb2dpY0NvbmZpZ1NwaGVyZURhdGESFwoPQ29sbGlzaW9uUmFkaXVz",
            "GAEgASgCEhIKCkRhbWFnZVR5cGUYAiABKAUSEQoJTWF4RGFtYWdlGAMgASgF",
            "EhEKCU1pbkRhbWFnZRgEIAEoBRIYChBTZWxmRGFtYWdlRmFjdG9yGAUgASgC",
            "EhoKEkZyaWVuZERhbWFnZUZhY3RvchgGIAEoAhIZChFDZW50ZXJEYW1hZ2VS",
            "YWRpdRgHIAEoAhIUCgxEYW1hZ2VSYWRpdXMYCCABKAISFgoORXhwbG9zaW9F",
            "ZmZlY3QYCSABKAUSGgoSRXhwbG9zaW9FZmZlY3RMaWZlGAogASgCEhoKEkV4",
            "cGxvc2lvQXVkaW9FdmVudBgLIAEoCRIOCgZCdWZmaWQYDCABKAUSGQoRU3Bl",
            "bGxBcmVhRHVyYXRpb24YDSABKAISFwoPU3BlbGxBcmVhUmFkaXVzGA4gASgC",
            "Eh8KF1NwZWxsQXJlYURhbWFnZUludGVydmFsGA8gASgCEhcKD1NwZWxsQXJl",
            "YURhbWFnZRgQIAEoBRIcChRTcGVsbEFyZWFFZmZlY3RJbmRleBgRIAEoBRIb",
            "ChNTcGVsbEFyZWFBdWRpb0V2ZW50GBIgASgJEhwKFFNwZWxsQXJlYUVmZmVj",
            "dFNjYWxlGBMgASgCEhsKE1NwZWxsQXJlYUVmZmVjdExpZmUYFCABKAISMwoG",
            "cGFyZW50GBUgASgLMiMuRDExLlBqc29uLkJhbGxpc3RpY0xvZ2ljQ29uZmln",
            "RGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D11.Pjson.BallisticLogicConfigDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.BallisticLogicConfigSphereData), global::D11.Pjson.BallisticLogicConfigSphereData.Parser, new[]{ "CollisionRadius", "DamageType", "MaxDamage", "MinDamage", "SelfDamageFactor", "FriendDamageFactor", "CenterDamageRadiu", "DamageRadius", "ExplosioEffect", "ExplosioEffectLife", "ExplosioAudioEvent", "Buffid", "SpellAreaDuration", "SpellAreaRadius", "SpellAreaDamageInterval", "SpellAreaDamage", "SpellAreaEffectIndex", "SpellAreaAudioEvent", "SpellAreaEffectScale", "SpellAreaEffectLife", "Parent" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BallisticLogicConfigSphereData : pb::IMessage<BallisticLogicConfigSphereData> {
    private static readonly pb::MessageParser<BallisticLogicConfigSphereData> _parser = new pb::MessageParser<BallisticLogicConfigSphereData>(() => new BallisticLogicConfigSphereData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BallisticLogicConfigSphereData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.BallisticLogicConfigSphereDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallisticLogicConfigSphereData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallisticLogicConfigSphereData(BallisticLogicConfigSphereData other) : this() {
      collisionRadius_ = other.collisionRadius_;
      damageType_ = other.damageType_;
      maxDamage_ = other.maxDamage_;
      minDamage_ = other.minDamage_;
      selfDamageFactor_ = other.selfDamageFactor_;
      friendDamageFactor_ = other.friendDamageFactor_;
      centerDamageRadiu_ = other.centerDamageRadiu_;
      damageRadius_ = other.damageRadius_;
      explosioEffect_ = other.explosioEffect_;
      explosioEffectLife_ = other.explosioEffectLife_;
      explosioAudioEvent_ = other.explosioAudioEvent_;
      buffid_ = other.buffid_;
      spellAreaDuration_ = other.spellAreaDuration_;
      spellAreaRadius_ = other.spellAreaRadius_;
      spellAreaDamageInterval_ = other.spellAreaDamageInterval_;
      spellAreaDamage_ = other.spellAreaDamage_;
      spellAreaEffectIndex_ = other.spellAreaEffectIndex_;
      spellAreaAudioEvent_ = other.spellAreaAudioEvent_;
      spellAreaEffectScale_ = other.spellAreaEffectScale_;
      spellAreaEffectLife_ = other.spellAreaEffectLife_;
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallisticLogicConfigSphereData Clone() {
      return new BallisticLogicConfigSphereData(this);
    }

    /// <summary>Field number for the "CollisionRadius" field.</summary>
    public const int CollisionRadiusFieldNumber = 1;
    private float collisionRadius_;
    /// <summary>
    /// 半径大小 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CollisionRadius {
      get { return collisionRadius_; }
      set {
        collisionRadius_ = value;
      }
    }

    /// <summary>Field number for the "DamageType" field.</summary>
    public const int DamageTypeFieldNumber = 2;
    private int damageType_;
    /// <summary>
    /// 伤害类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageType {
      get { return damageType_; }
      set {
        damageType_ = value;
      }
    }

    /// <summary>Field number for the "MaxDamage" field.</summary>
    public const int MaxDamageFieldNumber = 3;
    private int maxDamage_;
    /// <summary>
    /// 伤害最大数值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxDamage {
      get { return maxDamage_; }
      set {
        maxDamage_ = value;
      }
    }

    /// <summary>Field number for the "MinDamage" field.</summary>
    public const int MinDamageFieldNumber = 4;
    private int minDamage_;
    /// <summary>
    /// 伤害最小数值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinDamage {
      get { return minDamage_; }
      set {
        minDamage_ = value;
      }
    }

    /// <summary>Field number for the "SelfDamageFactor" field.</summary>
    public const int SelfDamageFactorFieldNumber = 5;
    private float selfDamageFactor_;
    /// <summary>
    /// 自伤伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SelfDamageFactor {
      get { return selfDamageFactor_; }
      set {
        selfDamageFactor_ = value;
      }
    }

    /// <summary>Field number for the "FriendDamageFactor" field.</summary>
    public const int FriendDamageFactorFieldNumber = 6;
    private float friendDamageFactor_;
    /// <summary>
    /// 友伤伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FriendDamageFactor {
      get { return friendDamageFactor_; }
      set {
        friendDamageFactor_ = value;
      }
    }

    /// <summary>Field number for the "CenterDamageRadiu" field.</summary>
    public const int CenterDamageRadiuFieldNumber = 7;
    private float centerDamageRadiu_;
    /// <summary>
    /// 爆炸中心半径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CenterDamageRadiu {
      get { return centerDamageRadiu_; }
      set {
        centerDamageRadiu_ = value;
      }
    }

    /// <summary>Field number for the "DamageRadius" field.</summary>
    public const int DamageRadiusFieldNumber = 8;
    private float damageRadius_;
    /// <summary>
    /// 爆炸伤害半径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DamageRadius {
      get { return damageRadius_; }
      set {
        damageRadius_ = value;
      }
    }

    /// <summary>Field number for the "ExplosioEffect" field.</summary>
    public const int ExplosioEffectFieldNumber = 9;
    private int explosioEffect_;
    /// <summary>
    /// 爆炸特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExplosioEffect {
      get { return explosioEffect_; }
      set {
        explosioEffect_ = value;
      }
    }

    /// <summary>Field number for the "ExplosioEffectLife" field.</summary>
    public const int ExplosioEffectLifeFieldNumber = 10;
    private float explosioEffectLife_;
    /// <summary>
    /// 爆炸特效存活时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExplosioEffectLife {
      get { return explosioEffectLife_; }
      set {
        explosioEffectLife_ = value;
      }
    }

    /// <summary>Field number for the "ExplosioAudioEvent" field.</summary>
    public const int ExplosioAudioEventFieldNumber = 11;
    private string explosioAudioEvent_ = "";
    /// <summary>
    /// 爆炸音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExplosioAudioEvent {
      get { return explosioAudioEvent_; }
      set {
        explosioAudioEvent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Buffid" field.</summary>
    public const int BuffidFieldNumber = 12;
    private int buffid_;
    /// <summary>
    /// 增加的buff 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Buffid {
      get { return buffid_; }
      set {
        buffid_ = value;
      }
    }

    /// <summary>Field number for the "SpellAreaDuration" field.</summary>
    public const int SpellAreaDurationFieldNumber = 13;
    private float spellAreaDuration_;
    /// <summary>
    /// 法术场时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpellAreaDuration {
      get { return spellAreaDuration_; }
      set {
        spellAreaDuration_ = value;
      }
    }

    /// <summary>Field number for the "SpellAreaRadius" field.</summary>
    public const int SpellAreaRadiusFieldNumber = 14;
    private float spellAreaRadius_;
    /// <summary>
    /// 法术场区域半径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpellAreaRadius {
      get { return spellAreaRadius_; }
      set {
        spellAreaRadius_ = value;
      }
    }

    /// <summary>Field number for the "SpellAreaDamageInterval" field.</summary>
    public const int SpellAreaDamageIntervalFieldNumber = 15;
    private float spellAreaDamageInterval_;
    /// <summary>
    /// 法术场伤害间隔Tick时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpellAreaDamageInterval {
      get { return spellAreaDamageInterval_; }
      set {
        spellAreaDamageInterval_ = value;
      }
    }

    /// <summary>Field number for the "SpellAreaDamage" field.</summary>
    public const int SpellAreaDamageFieldNumber = 16;
    private int spellAreaDamage_;
    /// <summary>
    /// 法术场伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpellAreaDamage {
      get { return spellAreaDamage_; }
      set {
        spellAreaDamage_ = value;
      }
    }

    /// <summary>Field number for the "SpellAreaEffectIndex" field.</summary>
    public const int SpellAreaEffectIndexFieldNumber = 17;
    private int spellAreaEffectIndex_;
    /// <summary>
    /// 法术场特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpellAreaEffectIndex {
      get { return spellAreaEffectIndex_; }
      set {
        spellAreaEffectIndex_ = value;
      }
    }

    /// <summary>Field number for the "SpellAreaAudioEvent" field.</summary>
    public const int SpellAreaAudioEventFieldNumber = 18;
    private string spellAreaAudioEvent_ = "";
    /// <summary>
    /// 法术场音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpellAreaAudioEvent {
      get { return spellAreaAudioEvent_; }
      set {
        spellAreaAudioEvent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SpellAreaEffectScale" field.</summary>
    public const int SpellAreaEffectScaleFieldNumber = 19;
    private float spellAreaEffectScale_;
    /// <summary>
    /// 法术场特效scale 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpellAreaEffectScale {
      get { return spellAreaEffectScale_; }
      set {
        spellAreaEffectScale_ = value;
      }
    }

    /// <summary>Field number for the "SpellAreaEffectLife" field.</summary>
    public const int SpellAreaEffectLifeFieldNumber = 20;
    private float spellAreaEffectLife_;
    /// <summary>
    /// 法术场特效持续时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpellAreaEffectLife {
      get { return spellAreaEffectLife_; }
      set {
        spellAreaEffectLife_ = value;
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 21;
    private global::D11.Pjson.BallisticLogicConfigData parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.BallisticLogicConfigData Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BallisticLogicConfigSphereData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BallisticLogicConfigSphereData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CollisionRadius, other.CollisionRadius)) return false;
      if (DamageType != other.DamageType) return false;
      if (MaxDamage != other.MaxDamage) return false;
      if (MinDamage != other.MinDamage) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SelfDamageFactor, other.SelfDamageFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FriendDamageFactor, other.FriendDamageFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CenterDamageRadiu, other.CenterDamageRadiu)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamageRadius, other.DamageRadius)) return false;
      if (ExplosioEffect != other.ExplosioEffect) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExplosioEffectLife, other.ExplosioEffectLife)) return false;
      if (ExplosioAudioEvent != other.ExplosioAudioEvent) return false;
      if (Buffid != other.Buffid) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpellAreaDuration, other.SpellAreaDuration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpellAreaRadius, other.SpellAreaRadius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpellAreaDamageInterval, other.SpellAreaDamageInterval)) return false;
      if (SpellAreaDamage != other.SpellAreaDamage) return false;
      if (SpellAreaEffectIndex != other.SpellAreaEffectIndex) return false;
      if (SpellAreaAudioEvent != other.SpellAreaAudioEvent) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpellAreaEffectScale, other.SpellAreaEffectScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpellAreaEffectLife, other.SpellAreaEffectLife)) return false;
      if (!object.Equals(Parent, other.Parent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CollisionRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CollisionRadius);
      if (DamageType != 0) hash ^= DamageType.GetHashCode();
      if (MaxDamage != 0) hash ^= MaxDamage.GetHashCode();
      if (MinDamage != 0) hash ^= MinDamage.GetHashCode();
      if (SelfDamageFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SelfDamageFactor);
      if (FriendDamageFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FriendDamageFactor);
      if (CenterDamageRadiu != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CenterDamageRadiu);
      if (DamageRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamageRadius);
      if (ExplosioEffect != 0) hash ^= ExplosioEffect.GetHashCode();
      if (ExplosioEffectLife != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExplosioEffectLife);
      if (ExplosioAudioEvent.Length != 0) hash ^= ExplosioAudioEvent.GetHashCode();
      if (Buffid != 0) hash ^= Buffid.GetHashCode();
      if (SpellAreaDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpellAreaDuration);
      if (SpellAreaRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpellAreaRadius);
      if (SpellAreaDamageInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpellAreaDamageInterval);
      if (SpellAreaDamage != 0) hash ^= SpellAreaDamage.GetHashCode();
      if (SpellAreaEffectIndex != 0) hash ^= SpellAreaEffectIndex.GetHashCode();
      if (SpellAreaAudioEvent.Length != 0) hash ^= SpellAreaAudioEvent.GetHashCode();
      if (SpellAreaEffectScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpellAreaEffectScale);
      if (SpellAreaEffectLife != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpellAreaEffectLife);
      if (parent_ != null) hash ^= Parent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CollisionRadius != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(CollisionRadius);
      }
      if (DamageType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DamageType);
      }
      if (MaxDamage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxDamage);
      }
      if (MinDamage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MinDamage);
      }
      if (SelfDamageFactor != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SelfDamageFactor);
      }
      if (FriendDamageFactor != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(FriendDamageFactor);
      }
      if (CenterDamageRadiu != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(CenterDamageRadiu);
      }
      if (DamageRadius != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(DamageRadius);
      }
      if (ExplosioEffect != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ExplosioEffect);
      }
      if (ExplosioEffectLife != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(ExplosioEffectLife);
      }
      if (ExplosioAudioEvent.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ExplosioAudioEvent);
      }
      if (Buffid != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Buffid);
      }
      if (SpellAreaDuration != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(SpellAreaDuration);
      }
      if (SpellAreaRadius != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(SpellAreaRadius);
      }
      if (SpellAreaDamageInterval != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(SpellAreaDamageInterval);
      }
      if (SpellAreaDamage != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(SpellAreaDamage);
      }
      if (SpellAreaEffectIndex != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SpellAreaEffectIndex);
      }
      if (SpellAreaAudioEvent.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(SpellAreaAudioEvent);
      }
      if (SpellAreaEffectScale != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(SpellAreaEffectScale);
      }
      if (SpellAreaEffectLife != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(SpellAreaEffectLife);
      }
      if (parent_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Parent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CollisionRadius != 0F) {
        size += 1 + 4;
      }
      if (DamageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageType);
      }
      if (MaxDamage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxDamage);
      }
      if (MinDamage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinDamage);
      }
      if (SelfDamageFactor != 0F) {
        size += 1 + 4;
      }
      if (FriendDamageFactor != 0F) {
        size += 1 + 4;
      }
      if (CenterDamageRadiu != 0F) {
        size += 1 + 4;
      }
      if (DamageRadius != 0F) {
        size += 1 + 4;
      }
      if (ExplosioEffect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExplosioEffect);
      }
      if (ExplosioEffectLife != 0F) {
        size += 1 + 4;
      }
      if (ExplosioAudioEvent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExplosioAudioEvent);
      }
      if (Buffid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Buffid);
      }
      if (SpellAreaDuration != 0F) {
        size += 1 + 4;
      }
      if (SpellAreaRadius != 0F) {
        size += 1 + 4;
      }
      if (SpellAreaDamageInterval != 0F) {
        size += 1 + 4;
      }
      if (SpellAreaDamage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellAreaDamage);
      }
      if (SpellAreaEffectIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellAreaEffectIndex);
      }
      if (SpellAreaAudioEvent.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpellAreaAudioEvent);
      }
      if (SpellAreaEffectScale != 0F) {
        size += 2 + 4;
      }
      if (SpellAreaEffectLife != 0F) {
        size += 2 + 4;
      }
      if (parent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BallisticLogicConfigSphereData other) {
      if (other == null) {
        return;
      }
      if (other.CollisionRadius != 0F) {
        CollisionRadius = other.CollisionRadius;
      }
      if (other.DamageType != 0) {
        DamageType = other.DamageType;
      }
      if (other.MaxDamage != 0) {
        MaxDamage = other.MaxDamage;
      }
      if (other.MinDamage != 0) {
        MinDamage = other.MinDamage;
      }
      if (other.SelfDamageFactor != 0F) {
        SelfDamageFactor = other.SelfDamageFactor;
      }
      if (other.FriendDamageFactor != 0F) {
        FriendDamageFactor = other.FriendDamageFactor;
      }
      if (other.CenterDamageRadiu != 0F) {
        CenterDamageRadiu = other.CenterDamageRadiu;
      }
      if (other.DamageRadius != 0F) {
        DamageRadius = other.DamageRadius;
      }
      if (other.ExplosioEffect != 0) {
        ExplosioEffect = other.ExplosioEffect;
      }
      if (other.ExplosioEffectLife != 0F) {
        ExplosioEffectLife = other.ExplosioEffectLife;
      }
      if (other.ExplosioAudioEvent.Length != 0) {
        ExplosioAudioEvent = other.ExplosioAudioEvent;
      }
      if (other.Buffid != 0) {
        Buffid = other.Buffid;
      }
      if (other.SpellAreaDuration != 0F) {
        SpellAreaDuration = other.SpellAreaDuration;
      }
      if (other.SpellAreaRadius != 0F) {
        SpellAreaRadius = other.SpellAreaRadius;
      }
      if (other.SpellAreaDamageInterval != 0F) {
        SpellAreaDamageInterval = other.SpellAreaDamageInterval;
      }
      if (other.SpellAreaDamage != 0) {
        SpellAreaDamage = other.SpellAreaDamage;
      }
      if (other.SpellAreaEffectIndex != 0) {
        SpellAreaEffectIndex = other.SpellAreaEffectIndex;
      }
      if (other.SpellAreaAudioEvent.Length != 0) {
        SpellAreaAudioEvent = other.SpellAreaAudioEvent;
      }
      if (other.SpellAreaEffectScale != 0F) {
        SpellAreaEffectScale = other.SpellAreaEffectScale;
      }
      if (other.SpellAreaEffectLife != 0F) {
        SpellAreaEffectLife = other.SpellAreaEffectLife;
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::D11.Pjson.BallisticLogicConfigData();
        }
        Parent.MergeFrom(other.Parent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            CollisionRadius = input.ReadFloat();
            break;
          }
          case 16: {
            DamageType = input.ReadInt32();
            break;
          }
          case 24: {
            MaxDamage = input.ReadInt32();
            break;
          }
          case 32: {
            MinDamage = input.ReadInt32();
            break;
          }
          case 45: {
            SelfDamageFactor = input.ReadFloat();
            break;
          }
          case 53: {
            FriendDamageFactor = input.ReadFloat();
            break;
          }
          case 61: {
            CenterDamageRadiu = input.ReadFloat();
            break;
          }
          case 69: {
            DamageRadius = input.ReadFloat();
            break;
          }
          case 72: {
            ExplosioEffect = input.ReadInt32();
            break;
          }
          case 85: {
            ExplosioEffectLife = input.ReadFloat();
            break;
          }
          case 90: {
            ExplosioAudioEvent = input.ReadString();
            break;
          }
          case 96: {
            Buffid = input.ReadInt32();
            break;
          }
          case 109: {
            SpellAreaDuration = input.ReadFloat();
            break;
          }
          case 117: {
            SpellAreaRadius = input.ReadFloat();
            break;
          }
          case 125: {
            SpellAreaDamageInterval = input.ReadFloat();
            break;
          }
          case 128: {
            SpellAreaDamage = input.ReadInt32();
            break;
          }
          case 136: {
            SpellAreaEffectIndex = input.ReadInt32();
            break;
          }
          case 146: {
            SpellAreaAudioEvent = input.ReadString();
            break;
          }
          case 157: {
            SpellAreaEffectScale = input.ReadFloat();
            break;
          }
          case 165: {
            SpellAreaEffectLife = input.ReadFloat();
            break;
          }
          case 170: {
            if (parent_ == null) {
              Parent = new global::D11.Pjson.BallisticLogicConfigData();
            }
            input.ReadMessage(Parent);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
