// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BaseBallisticConfigData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from BaseBallisticConfigData.proto</summary>
  public static partial class BaseBallisticConfigDataReflection {

    #region Descriptor
    /// <summary>File descriptor for BaseBallisticConfigData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BaseBallisticConfigDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1CYXNlQmFsbGlzdGljQ29uZmlnRGF0YS5wcm90bxIJRDExLlBqc29uIv8C",
            "ChdCYXNlQmFsbGlzdGljQ29uZmlnRGF0YRISCgpCdWxsZXRDb3N0GAEgASgF",
            "EhkKEUZpcmVFZmZlY3RBc3NldEZwGAIgASgJEhkKEUZpcmVFZmZlY3RBc3Nl",
            "dFRwGAMgASgJEhwKFEZpcmVUcmFja0ZsYXNoQXNzZXRzGAQgAygFEh4KFkZp",
            "cmVUcmFja0ZsYXNoQXNzZXQzUHMYBSADKAUSHAoURmlyZVRyYWNrU21va2VB",
            "c3NldHMYBiADKAUSHgoWRmlyZVRyYWNrU21va2VBc3NldDNQcxgHIAMoBRIR",
            "CglIaXRFZmZlY3QYCCABKAkSGAoQRmlyZVNvdW5kRXZlbnRGcBgJIAEoCRIY",
            "ChBGaXJlU291bmRFdmVudFRwGAogASgJEhQKDEZpcmVJbnRlcnZhbBgLIAEo",
            "AhIOCgZEYW1hZ2UYDCABKAUSGAoQRGVjYXlEYW1hZ2VMaW1pdBgNIAEoCRIX",
            "Cg9EZWNheURhbWFnZVJhdGUYDiABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.BaseBallisticConfigData), global::D11.Pjson.BaseBallisticConfigData.Parser, new[]{ "BulletCost", "FireEffectAssetFp", "FireEffectAssetTp", "FireTrackFlashAssets", "FireTrackFlashAsset3Ps", "FireTrackSmokeAssets", "FireTrackSmokeAsset3Ps", "HitEffect", "FireSoundEventFp", "FireSoundEventTp", "FireInterval", "Damage", "DecayDamageLimit", "DecayDamageRate" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BaseBallisticConfigData : pb::IMessage<BaseBallisticConfigData> {
    private static readonly pb::MessageParser<BaseBallisticConfigData> _parser = new pb::MessageParser<BaseBallisticConfigData>(() => new BaseBallisticConfigData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseBallisticConfigData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.BaseBallisticConfigDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseBallisticConfigData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseBallisticConfigData(BaseBallisticConfigData other) : this() {
      bulletCost_ = other.bulletCost_;
      fireEffectAssetFp_ = other.fireEffectAssetFp_;
      fireEffectAssetTp_ = other.fireEffectAssetTp_;
      fireTrackFlashAssets_ = other.fireTrackFlashAssets_.Clone();
      fireTrackFlashAsset3Ps_ = other.fireTrackFlashAsset3Ps_.Clone();
      fireTrackSmokeAssets_ = other.fireTrackSmokeAssets_.Clone();
      fireTrackSmokeAsset3Ps_ = other.fireTrackSmokeAsset3Ps_.Clone();
      hitEffect_ = other.hitEffect_;
      fireSoundEventFp_ = other.fireSoundEventFp_;
      fireSoundEventTp_ = other.fireSoundEventTp_;
      fireInterval_ = other.fireInterval_;
      damage_ = other.damage_;
      decayDamageLimit_ = other.decayDamageLimit_;
      decayDamageRate_ = other.decayDamageRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseBallisticConfigData Clone() {
      return new BaseBallisticConfigData(this);
    }

    /// <summary>Field number for the "BulletCost" field.</summary>
    public const int BulletCostFieldNumber = 1;
    private int bulletCost_;
    /// <summary>
    /// 子弹消耗 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletCost {
      get { return bulletCost_; }
      set {
        bulletCost_ = value;
      }
    }

    /// <summary>Field number for the "FireEffectAssetFp" field.</summary>
    public const int FireEffectAssetFpFieldNumber = 2;
    private string fireEffectAssetFp_ = "";
    /// <summary>
    /// 开火特效FP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireEffectAssetFp {
      get { return fireEffectAssetFp_; }
      set {
        fireEffectAssetFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireEffectAssetTp" field.</summary>
    public const int FireEffectAssetTpFieldNumber = 3;
    private string fireEffectAssetTp_ = "";
    /// <summary>
    /// 开火特效TP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireEffectAssetTp {
      get { return fireEffectAssetTp_; }
      set {
        fireEffectAssetTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireTrackFlashAssets" field.</summary>
    public const int FireTrackFlashAssetsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_fireTrackFlashAssets_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> fireTrackFlashAssets_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 武器的枪火弹道1p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FireTrackFlashAssets {
      get { return fireTrackFlashAssets_; }
    }

    /// <summary>Field number for the "FireTrackFlashAsset3Ps" field.</summary>
    public const int FireTrackFlashAsset3PsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_fireTrackFlashAsset3Ps_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> fireTrackFlashAsset3Ps_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 武器的枪火弹道3p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FireTrackFlashAsset3Ps {
      get { return fireTrackFlashAsset3Ps_; }
    }

    /// <summary>Field number for the "FireTrackSmokeAssets" field.</summary>
    public const int FireTrackSmokeAssetsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_fireTrackSmokeAssets_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> fireTrackSmokeAssets_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 武器的枪火弹道烟雾 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FireTrackSmokeAssets {
      get { return fireTrackSmokeAssets_; }
    }

    /// <summary>Field number for the "FireTrackSmokeAsset3Ps" field.</summary>
    public const int FireTrackSmokeAsset3PsFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_fireTrackSmokeAsset3Ps_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> fireTrackSmokeAsset3Ps_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 武器的枪火弹道烟雾3P 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FireTrackSmokeAsset3Ps {
      get { return fireTrackSmokeAsset3Ps_; }
    }

    /// <summary>Field number for the "HitEffect" field.</summary>
    public const int HitEffectFieldNumber = 8;
    private string hitEffect_ = "";
    /// <summary>
    /// 命中人物特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitEffect {
      get { return hitEffect_; }
      set {
        hitEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireSoundEventFp" field.</summary>
    public const int FireSoundEventFpFieldNumber = 9;
    private string fireSoundEventFp_ = "";
    /// <summary>
    /// 开火音效FP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireSoundEventFp {
      get { return fireSoundEventFp_; }
      set {
        fireSoundEventFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireSoundEventTp" field.</summary>
    public const int FireSoundEventTpFieldNumber = 10;
    private string fireSoundEventTp_ = "";
    /// <summary>
    /// 开火音效TP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireSoundEventTp {
      get { return fireSoundEventTp_; }
      set {
        fireSoundEventTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireInterval" field.</summary>
    public const int FireIntervalFieldNumber = 11;
    private float fireInterval_;
    /// <summary>
    /// 开火时间间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireInterval {
      get { return fireInterval_; }
      set {
        fireInterval_ = value;
      }
    }

    /// <summary>Field number for the "Damage" field.</summary>
    public const int DamageFieldNumber = 12;
    private int damage_;
    /// <summary>
    /// 伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "DecayDamageLimit" field.</summary>
    public const int DecayDamageLimitFieldNumber = 13;
    private string decayDamageLimit_ = "";
    /// <summary>
    /// 伤害衰减限制值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DecayDamageLimit {
      get { return decayDamageLimit_; }
      set {
        decayDamageLimit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DecayDamageRate" field.</summary>
    public const int DecayDamageRateFieldNumber = 14;
    private string decayDamageRate_ = "";
    /// <summary>
    /// 伤害衰减比例 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DecayDamageRate {
      get { return decayDamageRate_; }
      set {
        decayDamageRate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaseBallisticConfigData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaseBallisticConfigData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BulletCost != other.BulletCost) return false;
      if (FireEffectAssetFp != other.FireEffectAssetFp) return false;
      if (FireEffectAssetTp != other.FireEffectAssetTp) return false;
      if(!fireTrackFlashAssets_.Equals(other.fireTrackFlashAssets_)) return false;
      if(!fireTrackFlashAsset3Ps_.Equals(other.fireTrackFlashAsset3Ps_)) return false;
      if(!fireTrackSmokeAssets_.Equals(other.fireTrackSmokeAssets_)) return false;
      if(!fireTrackSmokeAsset3Ps_.Equals(other.fireTrackSmokeAsset3Ps_)) return false;
      if (HitEffect != other.HitEffect) return false;
      if (FireSoundEventFp != other.FireSoundEventFp) return false;
      if (FireSoundEventTp != other.FireSoundEventTp) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireInterval, other.FireInterval)) return false;
      if (Damage != other.Damage) return false;
      if (DecayDamageLimit != other.DecayDamageLimit) return false;
      if (DecayDamageRate != other.DecayDamageRate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BulletCost != 0) hash ^= BulletCost.GetHashCode();
      if (FireEffectAssetFp.Length != 0) hash ^= FireEffectAssetFp.GetHashCode();
      if (FireEffectAssetTp.Length != 0) hash ^= FireEffectAssetTp.GetHashCode();
      hash ^= fireTrackFlashAssets_.GetHashCode();
      hash ^= fireTrackFlashAsset3Ps_.GetHashCode();
      hash ^= fireTrackSmokeAssets_.GetHashCode();
      hash ^= fireTrackSmokeAsset3Ps_.GetHashCode();
      if (HitEffect.Length != 0) hash ^= HitEffect.GetHashCode();
      if (FireSoundEventFp.Length != 0) hash ^= FireSoundEventFp.GetHashCode();
      if (FireSoundEventTp.Length != 0) hash ^= FireSoundEventTp.GetHashCode();
      if (FireInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireInterval);
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (DecayDamageLimit.Length != 0) hash ^= DecayDamageLimit.GetHashCode();
      if (DecayDamageRate.Length != 0) hash ^= DecayDamageRate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BulletCost != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BulletCost);
      }
      if (FireEffectAssetFp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FireEffectAssetFp);
      }
      if (FireEffectAssetTp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FireEffectAssetTp);
      }
      fireTrackFlashAssets_.WriteTo(output, _repeated_fireTrackFlashAssets_codec);
      fireTrackFlashAsset3Ps_.WriteTo(output, _repeated_fireTrackFlashAsset3Ps_codec);
      fireTrackSmokeAssets_.WriteTo(output, _repeated_fireTrackSmokeAssets_codec);
      fireTrackSmokeAsset3Ps_.WriteTo(output, _repeated_fireTrackSmokeAsset3Ps_codec);
      if (HitEffect.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(HitEffect);
      }
      if (FireSoundEventFp.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(FireSoundEventFp);
      }
      if (FireSoundEventTp.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(FireSoundEventTp);
      }
      if (FireInterval != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(FireInterval);
      }
      if (Damage != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Damage);
      }
      if (DecayDamageLimit.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(DecayDamageLimit);
      }
      if (DecayDamageRate.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(DecayDamageRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BulletCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletCost);
      }
      if (FireEffectAssetFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FireEffectAssetFp);
      }
      if (FireEffectAssetTp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FireEffectAssetTp);
      }
      size += fireTrackFlashAssets_.CalculateSize(_repeated_fireTrackFlashAssets_codec);
      size += fireTrackFlashAsset3Ps_.CalculateSize(_repeated_fireTrackFlashAsset3Ps_codec);
      size += fireTrackSmokeAssets_.CalculateSize(_repeated_fireTrackSmokeAssets_codec);
      size += fireTrackSmokeAsset3Ps_.CalculateSize(_repeated_fireTrackSmokeAsset3Ps_codec);
      if (HitEffect.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HitEffect);
      }
      if (FireSoundEventFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FireSoundEventFp);
      }
      if (FireSoundEventTp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FireSoundEventTp);
      }
      if (FireInterval != 0F) {
        size += 1 + 4;
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (DecayDamageLimit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DecayDamageLimit);
      }
      if (DecayDamageRate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DecayDamageRate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaseBallisticConfigData other) {
      if (other == null) {
        return;
      }
      if (other.BulletCost != 0) {
        BulletCost = other.BulletCost;
      }
      if (other.FireEffectAssetFp.Length != 0) {
        FireEffectAssetFp = other.FireEffectAssetFp;
      }
      if (other.FireEffectAssetTp.Length != 0) {
        FireEffectAssetTp = other.FireEffectAssetTp;
      }
      fireTrackFlashAssets_.Add(other.fireTrackFlashAssets_);
      fireTrackFlashAsset3Ps_.Add(other.fireTrackFlashAsset3Ps_);
      fireTrackSmokeAssets_.Add(other.fireTrackSmokeAssets_);
      fireTrackSmokeAsset3Ps_.Add(other.fireTrackSmokeAsset3Ps_);
      if (other.HitEffect.Length != 0) {
        HitEffect = other.HitEffect;
      }
      if (other.FireSoundEventFp.Length != 0) {
        FireSoundEventFp = other.FireSoundEventFp;
      }
      if (other.FireSoundEventTp.Length != 0) {
        FireSoundEventTp = other.FireSoundEventTp;
      }
      if (other.FireInterval != 0F) {
        FireInterval = other.FireInterval;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.DecayDamageLimit.Length != 0) {
        DecayDamageLimit = other.DecayDamageLimit;
      }
      if (other.DecayDamageRate.Length != 0) {
        DecayDamageRate = other.DecayDamageRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BulletCost = input.ReadInt32();
            break;
          }
          case 18: {
            FireEffectAssetFp = input.ReadString();
            break;
          }
          case 26: {
            FireEffectAssetTp = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            fireTrackFlashAssets_.AddEntriesFrom(input, _repeated_fireTrackFlashAssets_codec);
            break;
          }
          case 42:
          case 40: {
            fireTrackFlashAsset3Ps_.AddEntriesFrom(input, _repeated_fireTrackFlashAsset3Ps_codec);
            break;
          }
          case 50:
          case 48: {
            fireTrackSmokeAssets_.AddEntriesFrom(input, _repeated_fireTrackSmokeAssets_codec);
            break;
          }
          case 58:
          case 56: {
            fireTrackSmokeAsset3Ps_.AddEntriesFrom(input, _repeated_fireTrackSmokeAsset3Ps_codec);
            break;
          }
          case 66: {
            HitEffect = input.ReadString();
            break;
          }
          case 74: {
            FireSoundEventFp = input.ReadString();
            break;
          }
          case 82: {
            FireSoundEventTp = input.ReadString();
            break;
          }
          case 93: {
            FireInterval = input.ReadFloat();
            break;
          }
          case 96: {
            Damage = input.ReadInt32();
            break;
          }
          case 106: {
            DecayDamageLimit = input.ReadString();
            break;
          }
          case 114: {
            DecayDamageRate = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
