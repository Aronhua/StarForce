// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BaseFireLogicConfigData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from BaseFireLogicConfigData.proto</summary>
  public static partial class BaseFireLogicConfigDataReflection {

    #region Descriptor
    /// <summary>File descriptor for BaseFireLogicConfigData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BaseFireLogicConfigDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1CYXNlRmlyZUxvZ2ljQ29uZmlnRGF0YS5wcm90bxIJRDExLlBqc29uItgK",
            "ChdCYXNlRmlyZUxvZ2ljQ29uZmlnRGF0YRIUCgxGaXJlSW50ZXJ2YWwYASAB",
            "KAISGAoQRmlyZUFuaW1JbnRlcnZhbBgCIAEoAhIUCgxGaXJlQW5pbVJhdGUY",
            "AyABKAISGAoQRmlyZVByZUlucHV0VGltZRgEIAEoAhIQCghTaG90Q29zdBgF",
            "IAEoBRIOCgZEYW1hZ2UYBiABKAUSGwoTSW50ZXJhY3REYW1hZ2VTY2FsZRgH",
            "IAEoAhIWCg5DaGFuZ2VDbGlwVGltZRgIIAEoAhIaChJDaGFuZ2VDbGlwTG9v",
            "cFRpbWUYCSABKAISHwoXQ2hhbmdlQ2xpcExvb3BUb3RhbFRpbWUYCiABKAIS",
            "IAoYQ2hhbmdlQ2xpcFN0YXRlVG90YWxUaW1lGAsgASgCEhEKCUVxdWlwVGlt",
            "ZRgMIAEoAhITCgtQcmVwYXJlVGltZRgNIAEoAhIYChBDcm9zc2hhaXJUZXhO",
            "YW1lGA4gASgJEhQKDElzU2luZ2xlU2hvdBgPIAEoCBIbChNFbmFibGVRdWlj",
            "a0ZpcmVTaG90GBAgASgIEhoKEkNoYW5nZUNsaXBBbmltUmF0ZRgRIAEoAhIV",
            "Cg1FcXVpcEFuaW1SYXRlGBIgASgCEhUKDUVxdWlwQWRkaXRpb24YEyABKAIS",
            "FQoNQ2xpcEFtbW9Db3VudBgUIAEoBRIYChBDYXJyaWVkQW1tb0NvdW50GBUg",
            "ASgFEhQKDE1heEFtbW9Db3VudBgWIAEoBRIaChJGcmllbmREYW1hZ2VGYWN0",
            "b3IYFyABKAISFQoNQ3Jvc3NoYWlyVHlwZRgYIAEoBRIZChFDcm9zc2hhaXJC",
            "YXNlRGlmZhgZIAEoAhIgChhDcm9zc0hhaXJCYXNlSHVkSW50ZXJ2ZWwYGiAB",
            "KAISGwoTQ3Jvc3NIYWlyT3V0QW1wbGlmeRgbIAEoAhIiChpDcm9zc0hhaXJD",
            "U0R5bWFpY0luQW1wbGlmeRgcIAEoAhIdChVDcm9zc0hhaXJTaG90SW5TcHJl",
            "YWQYHSABKAISHgoWQ3Jvc3NIYWlyVG90YWxJblNwcmVhZBgeIAEoAhIeChZD",
            "cm9zc0hhaXJTaG90T3V0U3ByZWFkGB8gASgCEh8KF0Nyb3NzSGFpclRvdGFs",
            "T3V0U3ByZWFkGCAgASgCEhoKEkFjY3VtdWxhdGVOZWVkVGltZRghIAEoAhIS",
            "CgpTdGFsZVNwZWVkGCIgASgCEhYKDkZvb3REYW1hZ2VSYXRlGCMgASgCEhYK",
            "DkhhbmREYW1hZ2VSYXRlGCQgASgCEhYKDkJvZHlEYW1hZ2VSYXRlGCUgASgC",
            "EhcKD0JlbGx5RGFtYWdlUmF0ZRgmIAEoAhIWCg5IZWFkRGFtYWdlUmF0ZRgn",
            "IAEoAhIYChBCckZvb3REYW1hZ2VSYXRlGCggASgCEhgKEEJySGFuZERhbWFn",
            "ZVJhdGUYKSABKAISGAoQQnJCb2R5RGFtYWdlUmF0ZRgqIAEoAhIZChFCckJl",
            "bGx5RGFtYWdlUmF0ZRgrIAEoAhIYChBCckhlYWREYW1hZ2VSYXRlGCwgASgC",
            "EhkKEUVuaGFuY2VTaGFrZU9uSGl0GC0gASgCEhgKEFdlYWtlblNoYWtlT25I",
            "aXQYLiABKAISFgoORm9vdFNoYWtlT25IaXQYLyABKAISFgoOSGFuZFNoYWtl",
            "T25IaXQYMCABKAISFgoOQm9keVNoYWtlT25IaXQYMSABKAISFwoPQmVsbHlT",
            "aGFrZU9uSGl0GDIgASgCEhYKDkhlYWRTaGFrZU9uSGl0GDMgASgCEhYKDlF1",
            "aXRTcHJpbnRUaW1lGDQgASgCYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.BaseFireLogicConfigData), global::D11.Pjson.BaseFireLogicConfigData.Parser, new[]{ "FireInterval", "FireAnimInterval", "FireAnimRate", "FirePreInputTime", "ShotCost", "Damage", "InteractDamageScale", "ChangeClipTime", "ChangeClipLoopTime", "ChangeClipLoopTotalTime", "ChangeClipStateTotalTime", "EquipTime", "PrepareTime", "CrosshairTexName", "IsSingleShot", "EnableQuickFireShot", "ChangeClipAnimRate", "EquipAnimRate", "EquipAddition", "ClipAmmoCount", "CarriedAmmoCount", "MaxAmmoCount", "FriendDamageFactor", "CrosshairType", "CrosshairBaseDiff", "CrossHairBaseHudIntervel", "CrossHairOutAmplify", "CrossHairCSDymaicInAmplify", "CrossHairShotInSpread", "CrossHairTotalInSpread", "CrossHairShotOutSpread", "CrossHairTotalOutSpread", "AccumulateNeedTime", "StaleSpeed", "FootDamageRate", "HandDamageRate", "BodyDamageRate", "BellyDamageRate", "HeadDamageRate", "BrFootDamageRate", "BrHandDamageRate", "BrBodyDamageRate", "BrBellyDamageRate", "BrHeadDamageRate", "EnhanceShakeOnHit", "WeakenShakeOnHit", "FootShakeOnHit", "HandShakeOnHit", "BodyShakeOnHit", "BellyShakeOnHit", "HeadShakeOnHit", "QuitSprintTime" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BaseFireLogicConfigData : pb::IMessage<BaseFireLogicConfigData> {
    private static readonly pb::MessageParser<BaseFireLogicConfigData> _parser = new pb::MessageParser<BaseFireLogicConfigData>(() => new BaseFireLogicConfigData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseFireLogicConfigData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.BaseFireLogicConfigDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseFireLogicConfigData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseFireLogicConfigData(BaseFireLogicConfigData other) : this() {
      fireInterval_ = other.fireInterval_;
      fireAnimInterval_ = other.fireAnimInterval_;
      fireAnimRate_ = other.fireAnimRate_;
      firePreInputTime_ = other.firePreInputTime_;
      shotCost_ = other.shotCost_;
      damage_ = other.damage_;
      interactDamageScale_ = other.interactDamageScale_;
      changeClipTime_ = other.changeClipTime_;
      changeClipLoopTime_ = other.changeClipLoopTime_;
      changeClipLoopTotalTime_ = other.changeClipLoopTotalTime_;
      changeClipStateTotalTime_ = other.changeClipStateTotalTime_;
      equipTime_ = other.equipTime_;
      prepareTime_ = other.prepareTime_;
      crosshairTexName_ = other.crosshairTexName_;
      isSingleShot_ = other.isSingleShot_;
      enableQuickFireShot_ = other.enableQuickFireShot_;
      changeClipAnimRate_ = other.changeClipAnimRate_;
      equipAnimRate_ = other.equipAnimRate_;
      equipAddition_ = other.equipAddition_;
      clipAmmoCount_ = other.clipAmmoCount_;
      carriedAmmoCount_ = other.carriedAmmoCount_;
      maxAmmoCount_ = other.maxAmmoCount_;
      friendDamageFactor_ = other.friendDamageFactor_;
      crosshairType_ = other.crosshairType_;
      crosshairBaseDiff_ = other.crosshairBaseDiff_;
      crossHairBaseHudIntervel_ = other.crossHairBaseHudIntervel_;
      crossHairOutAmplify_ = other.crossHairOutAmplify_;
      crossHairCSDymaicInAmplify_ = other.crossHairCSDymaicInAmplify_;
      crossHairShotInSpread_ = other.crossHairShotInSpread_;
      crossHairTotalInSpread_ = other.crossHairTotalInSpread_;
      crossHairShotOutSpread_ = other.crossHairShotOutSpread_;
      crossHairTotalOutSpread_ = other.crossHairTotalOutSpread_;
      accumulateNeedTime_ = other.accumulateNeedTime_;
      staleSpeed_ = other.staleSpeed_;
      footDamageRate_ = other.footDamageRate_;
      handDamageRate_ = other.handDamageRate_;
      bodyDamageRate_ = other.bodyDamageRate_;
      bellyDamageRate_ = other.bellyDamageRate_;
      headDamageRate_ = other.headDamageRate_;
      brFootDamageRate_ = other.brFootDamageRate_;
      brHandDamageRate_ = other.brHandDamageRate_;
      brBodyDamageRate_ = other.brBodyDamageRate_;
      brBellyDamageRate_ = other.brBellyDamageRate_;
      brHeadDamageRate_ = other.brHeadDamageRate_;
      enhanceShakeOnHit_ = other.enhanceShakeOnHit_;
      weakenShakeOnHit_ = other.weakenShakeOnHit_;
      footShakeOnHit_ = other.footShakeOnHit_;
      handShakeOnHit_ = other.handShakeOnHit_;
      bodyShakeOnHit_ = other.bodyShakeOnHit_;
      bellyShakeOnHit_ = other.bellyShakeOnHit_;
      headShakeOnHit_ = other.headShakeOnHit_;
      quitSprintTime_ = other.quitSprintTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseFireLogicConfigData Clone() {
      return new BaseFireLogicConfigData(this);
    }

    /// <summary>Field number for the "FireInterval" field.</summary>
    public const int FireIntervalFieldNumber = 1;
    private float fireInterval_;
    /// <summary>
    /// 开火时间间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireInterval {
      get { return fireInterval_; }
      set {
        fireInterval_ = value;
      }
    }

    /// <summary>Field number for the "FireAnimInterval" field.</summary>
    public const int FireAnimIntervalFieldNumber = 2;
    private float fireAnimInterval_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireAnimInterval {
      get { return fireAnimInterval_; }
      set {
        fireAnimInterval_ = value;
      }
    }

    /// <summary>Field number for the "FireAnimRate" field.</summary>
    public const int FireAnimRateFieldNumber = 3;
    private float fireAnimRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireAnimRate {
      get { return fireAnimRate_; }
      set {
        fireAnimRate_ = value;
      }
    }

    /// <summary>Field number for the "FirePreInputTime" field.</summary>
    public const int FirePreInputTimeFieldNumber = 4;
    private float firePreInputTime_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FirePreInputTime {
      get { return firePreInputTime_; }
      set {
        firePreInputTime_ = value;
      }
    }

    /// <summary>Field number for the "ShotCost" field.</summary>
    public const int ShotCostFieldNumber = 5;
    private int shotCost_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShotCost {
      get { return shotCost_; }
      set {
        shotCost_ = value;
      }
    }

    /// <summary>Field number for the "Damage" field.</summary>
    public const int DamageFieldNumber = 6;
    private int damage_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "InteractDamageScale" field.</summary>
    public const int InteractDamageScaleFieldNumber = 7;
    private float interactDamageScale_;
    /// <summary>
    /// 针对场景动件的伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InteractDamageScale {
      get { return interactDamageScale_; }
      set {
        interactDamageScale_ = value;
      }
    }

    /// <summary>Field number for the "ChangeClipTime" field.</summary>
    public const int ChangeClipTimeFieldNumber = 8;
    private float changeClipTime_;
    /// <summary>
    /// 开始换弹的时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChangeClipTime {
      get { return changeClipTime_; }
      set {
        changeClipTime_ = value;
      }
    }

    /// <summary>Field number for the "ChangeClipLoopTime" field.</summary>
    public const int ChangeClipLoopTimeFieldNumber = 9;
    private float changeClipLoopTime_;
    /// <summary>
    /// 循环换弹的时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChangeClipLoopTime {
      get { return changeClipLoopTime_; }
      set {
        changeClipLoopTime_ = value;
      }
    }

    /// <summary>Field number for the "ChangeClipLoopTotalTime" field.</summary>
    public const int ChangeClipLoopTotalTimeFieldNumber = 10;
    private float changeClipLoopTotalTime_;
    /// <summary>
    /// 循环换弹总时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChangeClipLoopTotalTime {
      get { return changeClipLoopTotalTime_; }
      set {
        changeClipLoopTotalTime_ = value;
      }
    }

    /// <summary>Field number for the "ChangeClipStateTotalTime" field.</summary>
    public const int ChangeClipStateTotalTimeFieldNumber = 11;
    private float changeClipStateTotalTime_;
    /// <summary>
    /// 整个换弹状态的时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChangeClipStateTotalTime {
      get { return changeClipStateTotalTime_; }
      set {
        changeClipStateTotalTime_ = value;
      }
    }

    /// <summary>Field number for the "EquipTime" field.</summary>
    public const int EquipTimeFieldNumber = 12;
    private float equipTime_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EquipTime {
      get { return equipTime_; }
      set {
        equipTime_ = value;
      }
    }

    /// <summary>Field number for the "PrepareTime" field.</summary>
    public const int PrepareTimeFieldNumber = 13;
    private float prepareTime_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PrepareTime {
      get { return prepareTime_; }
      set {
        prepareTime_ = value;
      }
    }

    /// <summary>Field number for the "CrosshairTexName" field.</summary>
    public const int CrosshairTexNameFieldNumber = 14;
    private string crosshairTexName_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CrosshairTexName {
      get { return crosshairTexName_; }
      set {
        crosshairTexName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsSingleShot" field.</summary>
    public const int IsSingleShotFieldNumber = 15;
    private bool isSingleShot_;
    /// <summary>
    /// 单点开火 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSingleShot {
      get { return isSingleShot_; }
      set {
        isSingleShot_ = value;
      }
    }

    /// <summary>Field number for the "EnableQuickFireShot" field.</summary>
    public const int EnableQuickFireShotFieldNumber = 16;
    private bool enableQuickFireShot_;
    /// <summary>
    /// 启用按住等于连续开火功能 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableQuickFireShot {
      get { return enableQuickFireShot_; }
      set {
        enableQuickFireShot_ = value;
      }
    }

    /// <summary>Field number for the "ChangeClipAnimRate" field.</summary>
    public const int ChangeClipAnimRateFieldNumber = 17;
    private float changeClipAnimRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChangeClipAnimRate {
      get { return changeClipAnimRate_; }
      set {
        changeClipAnimRate_ = value;
      }
    }

    /// <summary>Field number for the "EquipAnimRate" field.</summary>
    public const int EquipAnimRateFieldNumber = 18;
    private float equipAnimRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EquipAnimRate {
      get { return equipAnimRate_; }
      set {
        equipAnimRate_ = value;
      }
    }

    /// <summary>Field number for the "EquipAddition" field.</summary>
    public const int EquipAdditionFieldNumber = 19;
    private float equipAddition_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EquipAddition {
      get { return equipAddition_; }
      set {
        equipAddition_ = value;
      }
    }

    /// <summary>Field number for the "ClipAmmoCount" field.</summary>
    public const int ClipAmmoCountFieldNumber = 20;
    private int clipAmmoCount_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClipAmmoCount {
      get { return clipAmmoCount_; }
      set {
        clipAmmoCount_ = value;
      }
    }

    /// <summary>Field number for the "CarriedAmmoCount" field.</summary>
    public const int CarriedAmmoCountFieldNumber = 21;
    private int carriedAmmoCount_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CarriedAmmoCount {
      get { return carriedAmmoCount_; }
      set {
        carriedAmmoCount_ = value;
      }
    }

    /// <summary>Field number for the "MaxAmmoCount" field.</summary>
    public const int MaxAmmoCountFieldNumber = 22;
    private int maxAmmoCount_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxAmmoCount {
      get { return maxAmmoCount_; }
      set {
        maxAmmoCount_ = value;
      }
    }

    /// <summary>Field number for the "FriendDamageFactor" field.</summary>
    public const int FriendDamageFactorFieldNumber = 23;
    private float friendDamageFactor_;
    /// <summary>
    /// 友伤系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FriendDamageFactor {
      get { return friendDamageFactor_; }
      set {
        friendDamageFactor_ = value;
      }
    }

    /// <summary>Field number for the "CrosshairType" field.</summary>
    public const int CrosshairTypeFieldNumber = 24;
    private int crosshairType_;
    /// <summary>
    /// 准星类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CrosshairType {
      get { return crosshairType_; }
      set {
        crosshairType_ = value;
      }
    }

    /// <summary>Field number for the "CrosshairBaseDiff" field.</summary>
    public const int CrosshairBaseDiffFieldNumber = 25;
    private float crosshairBaseDiff_;
    /// <summary>
    /// 准星扩散基础值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrosshairBaseDiff {
      get { return crosshairBaseDiff_; }
      set {
        crosshairBaseDiff_ = value;
      }
    }

    /// <summary>Field number for the "CrossHairBaseHudIntervel" field.</summary>
    public const int CrossHairBaseHudIntervelFieldNumber = 26;
    private float crossHairBaseHudIntervel_;
    /// <summary>
    /// 准星UI基础距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrossHairBaseHudIntervel {
      get { return crossHairBaseHudIntervel_; }
      set {
        crossHairBaseHudIntervel_ = value;
      }
    }

    /// <summary>Field number for the "CrossHairOutAmplify" field.</summary>
    public const int CrossHairOutAmplifyFieldNumber = 27;
    private float crossHairOutAmplify_;
    /// <summary>
    /// 准心外圈放大系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrossHairOutAmplify {
      get { return crossHairOutAmplify_; }
      set {
        crossHairOutAmplify_ = value;
      }
    }

    /// <summary>Field number for the "CrossHairCSDymaicInAmplify" field.</summary>
    public const int CrossHairCSDymaicInAmplifyFieldNumber = 28;
    private float crossHairCSDymaicInAmplify_;
    /// <summary>
    /// CS1.6经典UI内圈放大系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrossHairCSDymaicInAmplify {
      get { return crossHairCSDymaicInAmplify_; }
      set {
        crossHairCSDymaicInAmplify_ = value;
      }
    }

    /// <summary>Field number for the "CrossHairShotInSpread" field.</summary>
    public const int CrossHairShotInSpreadFieldNumber = 29;
    private float crossHairShotInSpread_;
    /// <summary>
    /// 内圈射击扩散系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrossHairShotInSpread {
      get { return crossHairShotInSpread_; }
      set {
        crossHairShotInSpread_ = value;
      }
    }

    /// <summary>Field number for the "CrossHairTotalInSpread" field.</summary>
    public const int CrossHairTotalInSpreadFieldNumber = 30;
    private float crossHairTotalInSpread_;
    /// <summary>
    /// 内圈总扩散系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrossHairTotalInSpread {
      get { return crossHairTotalInSpread_; }
      set {
        crossHairTotalInSpread_ = value;
      }
    }

    /// <summary>Field number for the "CrossHairShotOutSpread" field.</summary>
    public const int CrossHairShotOutSpreadFieldNumber = 31;
    private float crossHairShotOutSpread_;
    /// <summary>
    /// 外圈射击扩散系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrossHairShotOutSpread {
      get { return crossHairShotOutSpread_; }
      set {
        crossHairShotOutSpread_ = value;
      }
    }

    /// <summary>Field number for the "CrossHairTotalOutSpread" field.</summary>
    public const int CrossHairTotalOutSpreadFieldNumber = 32;
    private float crossHairTotalOutSpread_;
    /// <summary>
    /// 外圈总扩散系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrossHairTotalOutSpread {
      get { return crossHairTotalOutSpread_; }
      set {
        crossHairTotalOutSpread_ = value;
      }
    }

    /// <summary>Field number for the "AccumulateNeedTime" field.</summary>
    public const int AccumulateNeedTimeFieldNumber = 33;
    private float accumulateNeedTime_;
    /// <summary>
    /// 蓄力度，每秒1度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AccumulateNeedTime {
      get { return accumulateNeedTime_; }
      set {
        accumulateNeedTime_ = value;
      }
    }

    /// <summary>Field number for the "StaleSpeed" field.</summary>
    public const int StaleSpeedFieldNumber = 34;
    private float staleSpeed_;
    /// <summary>
    /// 泄力速度，/s 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StaleSpeed {
      get { return staleSpeed_; }
      set {
        staleSpeed_ = value;
      }
    }

    /// <summary>Field number for the "FootDamageRate" field.</summary>
    public const int FootDamageRateFieldNumber = 35;
    private float footDamageRate_;
    /// <summary>
    /// 击中 脚 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FootDamageRate {
      get { return footDamageRate_; }
      set {
        footDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "HandDamageRate" field.</summary>
    public const int HandDamageRateFieldNumber = 36;
    private float handDamageRate_;
    /// <summary>
    /// 击中 手 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HandDamageRate {
      get { return handDamageRate_; }
      set {
        handDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "BodyDamageRate" field.</summary>
    public const int BodyDamageRateFieldNumber = 37;
    private float bodyDamageRate_;
    /// <summary>
    /// 击中 身 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BodyDamageRate {
      get { return bodyDamageRate_; }
      set {
        bodyDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "BellyDamageRate" field.</summary>
    public const int BellyDamageRateFieldNumber = 38;
    private float bellyDamageRate_;
    /// <summary>
    /// 击中 腰 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BellyDamageRate {
      get { return bellyDamageRate_; }
      set {
        bellyDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "HeadDamageRate" field.</summary>
    public const int HeadDamageRateFieldNumber = 39;
    private float headDamageRate_;
    /// <summary>
    /// 击中 头 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeadDamageRate {
      get { return headDamageRate_; }
      set {
        headDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "BrFootDamageRate" field.</summary>
    public const int BrFootDamageRateFieldNumber = 40;
    private float brFootDamageRate_;
    /// <summary>
    /// 吃鸡模式击中 脚 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrFootDamageRate {
      get { return brFootDamageRate_; }
      set {
        brFootDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "BrHandDamageRate" field.</summary>
    public const int BrHandDamageRateFieldNumber = 41;
    private float brHandDamageRate_;
    /// <summary>
    /// 吃鸡模式击中 手 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrHandDamageRate {
      get { return brHandDamageRate_; }
      set {
        brHandDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "BrBodyDamageRate" field.</summary>
    public const int BrBodyDamageRateFieldNumber = 42;
    private float brBodyDamageRate_;
    /// <summary>
    /// 吃鸡模式击中 身 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrBodyDamageRate {
      get { return brBodyDamageRate_; }
      set {
        brBodyDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "BrBellyDamageRate" field.</summary>
    public const int BrBellyDamageRateFieldNumber = 43;
    private float brBellyDamageRate_;
    /// <summary>
    /// 吃鸡模式击中 腰 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrBellyDamageRate {
      get { return brBellyDamageRate_; }
      set {
        brBellyDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "BrHeadDamageRate" field.</summary>
    public const int BrHeadDamageRateFieldNumber = 44;
    private float brHeadDamageRate_;
    /// <summary>
    /// 吃鸡模式击中 头 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrHeadDamageRate {
      get { return brHeadDamageRate_; }
      set {
        brHeadDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "EnhanceShakeOnHit" field.</summary>
    public const int EnhanceShakeOnHitFieldNumber = 45;
    private float enhanceShakeOnHit_;
    /// <summary>
    /// 击中时震屏效果增强系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EnhanceShakeOnHit {
      get { return enhanceShakeOnHit_; }
      set {
        enhanceShakeOnHit_ = value;
      }
    }

    /// <summary>Field number for the "WeakenShakeOnHit" field.</summary>
    public const int WeakenShakeOnHitFieldNumber = 46;
    private float weakenShakeOnHit_;
    /// <summary>
    /// 被击中时震屏效果削弱系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeakenShakeOnHit {
      get { return weakenShakeOnHit_; }
      set {
        weakenShakeOnHit_ = value;
      }
    }

    /// <summary>Field number for the "FootShakeOnHit" field.</summary>
    public const int FootShakeOnHitFieldNumber = 47;
    private float footShakeOnHit_;
    /// <summary>
    /// 击中 脚 伤害系数  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FootShakeOnHit {
      get { return footShakeOnHit_; }
      set {
        footShakeOnHit_ = value;
      }
    }

    /// <summary>Field number for the "HandShakeOnHit" field.</summary>
    public const int HandShakeOnHitFieldNumber = 48;
    private float handShakeOnHit_;
    /// <summary>
    /// 击中 手 伤害系数  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HandShakeOnHit {
      get { return handShakeOnHit_; }
      set {
        handShakeOnHit_ = value;
      }
    }

    /// <summary>Field number for the "BodyShakeOnHit" field.</summary>
    public const int BodyShakeOnHitFieldNumber = 49;
    private float bodyShakeOnHit_;
    /// <summary>
    /// 击中 身 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BodyShakeOnHit {
      get { return bodyShakeOnHit_; }
      set {
        bodyShakeOnHit_ = value;
      }
    }

    /// <summary>Field number for the "BellyShakeOnHit" field.</summary>
    public const int BellyShakeOnHitFieldNumber = 50;
    private float bellyShakeOnHit_;
    /// <summary>
    /// 击中 腰 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BellyShakeOnHit {
      get { return bellyShakeOnHit_; }
      set {
        bellyShakeOnHit_ = value;
      }
    }

    /// <summary>Field number for the "HeadShakeOnHit" field.</summary>
    public const int HeadShakeOnHitFieldNumber = 51;
    private float headShakeOnHit_;
    /// <summary>
    /// 击中 头 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeadShakeOnHit {
      get { return headShakeOnHit_; }
      set {
        headShakeOnHit_ = value;
      }
    }

    /// <summary>Field number for the "QuitSprintTime" field.</summary>
    public const int QuitSprintTimeFieldNumber = 52;
    private float quitSprintTime_;
    /// <summary>
    /// 退出疾跑状态所需时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float QuitSprintTime {
      get { return quitSprintTime_; }
      set {
        quitSprintTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaseFireLogicConfigData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaseFireLogicConfigData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireInterval, other.FireInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireAnimInterval, other.FireAnimInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireAnimRate, other.FireAnimRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FirePreInputTime, other.FirePreInputTime)) return false;
      if (ShotCost != other.ShotCost) return false;
      if (Damage != other.Damage) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InteractDamageScale, other.InteractDamageScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChangeClipTime, other.ChangeClipTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChangeClipLoopTime, other.ChangeClipLoopTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChangeClipLoopTotalTime, other.ChangeClipLoopTotalTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChangeClipStateTotalTime, other.ChangeClipStateTotalTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EquipTime, other.EquipTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrepareTime, other.PrepareTime)) return false;
      if (CrosshairTexName != other.CrosshairTexName) return false;
      if (IsSingleShot != other.IsSingleShot) return false;
      if (EnableQuickFireShot != other.EnableQuickFireShot) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChangeClipAnimRate, other.ChangeClipAnimRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EquipAnimRate, other.EquipAnimRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EquipAddition, other.EquipAddition)) return false;
      if (ClipAmmoCount != other.ClipAmmoCount) return false;
      if (CarriedAmmoCount != other.CarriedAmmoCount) return false;
      if (MaxAmmoCount != other.MaxAmmoCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FriendDamageFactor, other.FriendDamageFactor)) return false;
      if (CrosshairType != other.CrosshairType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrosshairBaseDiff, other.CrosshairBaseDiff)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrossHairBaseHudIntervel, other.CrossHairBaseHudIntervel)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrossHairOutAmplify, other.CrossHairOutAmplify)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrossHairCSDymaicInAmplify, other.CrossHairCSDymaicInAmplify)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrossHairShotInSpread, other.CrossHairShotInSpread)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrossHairTotalInSpread, other.CrossHairTotalInSpread)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrossHairShotOutSpread, other.CrossHairShotOutSpread)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrossHairTotalOutSpread, other.CrossHairTotalOutSpread)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccumulateNeedTime, other.AccumulateNeedTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StaleSpeed, other.StaleSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FootDamageRate, other.FootDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HandDamageRate, other.HandDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BodyDamageRate, other.BodyDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BellyDamageRate, other.BellyDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeadDamageRate, other.HeadDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrFootDamageRate, other.BrFootDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrHandDamageRate, other.BrHandDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrBodyDamageRate, other.BrBodyDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrBellyDamageRate, other.BrBellyDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrHeadDamageRate, other.BrHeadDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EnhanceShakeOnHit, other.EnhanceShakeOnHit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WeakenShakeOnHit, other.WeakenShakeOnHit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FootShakeOnHit, other.FootShakeOnHit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HandShakeOnHit, other.HandShakeOnHit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BodyShakeOnHit, other.BodyShakeOnHit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BellyShakeOnHit, other.BellyShakeOnHit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeadShakeOnHit, other.HeadShakeOnHit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(QuitSprintTime, other.QuitSprintTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FireInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireInterval);
      if (FireAnimInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireAnimInterval);
      if (FireAnimRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireAnimRate);
      if (FirePreInputTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FirePreInputTime);
      if (ShotCost != 0) hash ^= ShotCost.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (InteractDamageScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InteractDamageScale);
      if (ChangeClipTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChangeClipTime);
      if (ChangeClipLoopTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChangeClipLoopTime);
      if (ChangeClipLoopTotalTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChangeClipLoopTotalTime);
      if (ChangeClipStateTotalTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChangeClipStateTotalTime);
      if (EquipTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EquipTime);
      if (PrepareTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrepareTime);
      if (CrosshairTexName.Length != 0) hash ^= CrosshairTexName.GetHashCode();
      if (IsSingleShot != false) hash ^= IsSingleShot.GetHashCode();
      if (EnableQuickFireShot != false) hash ^= EnableQuickFireShot.GetHashCode();
      if (ChangeClipAnimRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChangeClipAnimRate);
      if (EquipAnimRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EquipAnimRate);
      if (EquipAddition != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EquipAddition);
      if (ClipAmmoCount != 0) hash ^= ClipAmmoCount.GetHashCode();
      if (CarriedAmmoCount != 0) hash ^= CarriedAmmoCount.GetHashCode();
      if (MaxAmmoCount != 0) hash ^= MaxAmmoCount.GetHashCode();
      if (FriendDamageFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FriendDamageFactor);
      if (CrosshairType != 0) hash ^= CrosshairType.GetHashCode();
      if (CrosshairBaseDiff != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrosshairBaseDiff);
      if (CrossHairBaseHudIntervel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrossHairBaseHudIntervel);
      if (CrossHairOutAmplify != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrossHairOutAmplify);
      if (CrossHairCSDymaicInAmplify != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrossHairCSDymaicInAmplify);
      if (CrossHairShotInSpread != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrossHairShotInSpread);
      if (CrossHairTotalInSpread != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrossHairTotalInSpread);
      if (CrossHairShotOutSpread != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrossHairShotOutSpread);
      if (CrossHairTotalOutSpread != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrossHairTotalOutSpread);
      if (AccumulateNeedTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccumulateNeedTime);
      if (StaleSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StaleSpeed);
      if (FootDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FootDamageRate);
      if (HandDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HandDamageRate);
      if (BodyDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BodyDamageRate);
      if (BellyDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BellyDamageRate);
      if (HeadDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeadDamageRate);
      if (BrFootDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrFootDamageRate);
      if (BrHandDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrHandDamageRate);
      if (BrBodyDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrBodyDamageRate);
      if (BrBellyDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrBellyDamageRate);
      if (BrHeadDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrHeadDamageRate);
      if (EnhanceShakeOnHit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EnhanceShakeOnHit);
      if (WeakenShakeOnHit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WeakenShakeOnHit);
      if (FootShakeOnHit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FootShakeOnHit);
      if (HandShakeOnHit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HandShakeOnHit);
      if (BodyShakeOnHit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BodyShakeOnHit);
      if (BellyShakeOnHit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BellyShakeOnHit);
      if (HeadShakeOnHit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeadShakeOnHit);
      if (QuitSprintTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(QuitSprintTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FireInterval != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(FireInterval);
      }
      if (FireAnimInterval != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(FireAnimInterval);
      }
      if (FireAnimRate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(FireAnimRate);
      }
      if (FirePreInputTime != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(FirePreInputTime);
      }
      if (ShotCost != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ShotCost);
      }
      if (Damage != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Damage);
      }
      if (InteractDamageScale != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(InteractDamageScale);
      }
      if (ChangeClipTime != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ChangeClipTime);
      }
      if (ChangeClipLoopTime != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(ChangeClipLoopTime);
      }
      if (ChangeClipLoopTotalTime != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(ChangeClipLoopTotalTime);
      }
      if (ChangeClipStateTotalTime != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(ChangeClipStateTotalTime);
      }
      if (EquipTime != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(EquipTime);
      }
      if (PrepareTime != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(PrepareTime);
      }
      if (CrosshairTexName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(CrosshairTexName);
      }
      if (IsSingleShot != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsSingleShot);
      }
      if (EnableQuickFireShot != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(EnableQuickFireShot);
      }
      if (ChangeClipAnimRate != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(ChangeClipAnimRate);
      }
      if (EquipAnimRate != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(EquipAnimRate);
      }
      if (EquipAddition != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(EquipAddition);
      }
      if (ClipAmmoCount != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ClipAmmoCount);
      }
      if (CarriedAmmoCount != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(CarriedAmmoCount);
      }
      if (MaxAmmoCount != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(MaxAmmoCount);
      }
      if (FriendDamageFactor != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(FriendDamageFactor);
      }
      if (CrosshairType != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(CrosshairType);
      }
      if (CrosshairBaseDiff != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(CrosshairBaseDiff);
      }
      if (CrossHairBaseHudIntervel != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(CrossHairBaseHudIntervel);
      }
      if (CrossHairOutAmplify != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(CrossHairOutAmplify);
      }
      if (CrossHairCSDymaicInAmplify != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(CrossHairCSDymaicInAmplify);
      }
      if (CrossHairShotInSpread != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(CrossHairShotInSpread);
      }
      if (CrossHairTotalInSpread != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(CrossHairTotalInSpread);
      }
      if (CrossHairShotOutSpread != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(CrossHairShotOutSpread);
      }
      if (CrossHairTotalOutSpread != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(CrossHairTotalOutSpread);
      }
      if (AccumulateNeedTime != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(AccumulateNeedTime);
      }
      if (StaleSpeed != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(StaleSpeed);
      }
      if (FootDamageRate != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(FootDamageRate);
      }
      if (HandDamageRate != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(HandDamageRate);
      }
      if (BodyDamageRate != 0F) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(BodyDamageRate);
      }
      if (BellyDamageRate != 0F) {
        output.WriteRawTag(181, 2);
        output.WriteFloat(BellyDamageRate);
      }
      if (HeadDamageRate != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(HeadDamageRate);
      }
      if (BrFootDamageRate != 0F) {
        output.WriteRawTag(197, 2);
        output.WriteFloat(BrFootDamageRate);
      }
      if (BrHandDamageRate != 0F) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(BrHandDamageRate);
      }
      if (BrBodyDamageRate != 0F) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(BrBodyDamageRate);
      }
      if (BrBellyDamageRate != 0F) {
        output.WriteRawTag(221, 2);
        output.WriteFloat(BrBellyDamageRate);
      }
      if (BrHeadDamageRate != 0F) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(BrHeadDamageRate);
      }
      if (EnhanceShakeOnHit != 0F) {
        output.WriteRawTag(237, 2);
        output.WriteFloat(EnhanceShakeOnHit);
      }
      if (WeakenShakeOnHit != 0F) {
        output.WriteRawTag(245, 2);
        output.WriteFloat(WeakenShakeOnHit);
      }
      if (FootShakeOnHit != 0F) {
        output.WriteRawTag(253, 2);
        output.WriteFloat(FootShakeOnHit);
      }
      if (HandShakeOnHit != 0F) {
        output.WriteRawTag(133, 3);
        output.WriteFloat(HandShakeOnHit);
      }
      if (BodyShakeOnHit != 0F) {
        output.WriteRawTag(141, 3);
        output.WriteFloat(BodyShakeOnHit);
      }
      if (BellyShakeOnHit != 0F) {
        output.WriteRawTag(149, 3);
        output.WriteFloat(BellyShakeOnHit);
      }
      if (HeadShakeOnHit != 0F) {
        output.WriteRawTag(157, 3);
        output.WriteFloat(HeadShakeOnHit);
      }
      if (QuitSprintTime != 0F) {
        output.WriteRawTag(165, 3);
        output.WriteFloat(QuitSprintTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FireInterval != 0F) {
        size += 1 + 4;
      }
      if (FireAnimInterval != 0F) {
        size += 1 + 4;
      }
      if (FireAnimRate != 0F) {
        size += 1 + 4;
      }
      if (FirePreInputTime != 0F) {
        size += 1 + 4;
      }
      if (ShotCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShotCost);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (InteractDamageScale != 0F) {
        size += 1 + 4;
      }
      if (ChangeClipTime != 0F) {
        size += 1 + 4;
      }
      if (ChangeClipLoopTime != 0F) {
        size += 1 + 4;
      }
      if (ChangeClipLoopTotalTime != 0F) {
        size += 1 + 4;
      }
      if (ChangeClipStateTotalTime != 0F) {
        size += 1 + 4;
      }
      if (EquipTime != 0F) {
        size += 1 + 4;
      }
      if (PrepareTime != 0F) {
        size += 1 + 4;
      }
      if (CrosshairTexName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CrosshairTexName);
      }
      if (IsSingleShot != false) {
        size += 1 + 1;
      }
      if (EnableQuickFireShot != false) {
        size += 2 + 1;
      }
      if (ChangeClipAnimRate != 0F) {
        size += 2 + 4;
      }
      if (EquipAnimRate != 0F) {
        size += 2 + 4;
      }
      if (EquipAddition != 0F) {
        size += 2 + 4;
      }
      if (ClipAmmoCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ClipAmmoCount);
      }
      if (CarriedAmmoCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CarriedAmmoCount);
      }
      if (MaxAmmoCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxAmmoCount);
      }
      if (FriendDamageFactor != 0F) {
        size += 2 + 4;
      }
      if (CrosshairType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CrosshairType);
      }
      if (CrosshairBaseDiff != 0F) {
        size += 2 + 4;
      }
      if (CrossHairBaseHudIntervel != 0F) {
        size += 2 + 4;
      }
      if (CrossHairOutAmplify != 0F) {
        size += 2 + 4;
      }
      if (CrossHairCSDymaicInAmplify != 0F) {
        size += 2 + 4;
      }
      if (CrossHairShotInSpread != 0F) {
        size += 2 + 4;
      }
      if (CrossHairTotalInSpread != 0F) {
        size += 2 + 4;
      }
      if (CrossHairShotOutSpread != 0F) {
        size += 2 + 4;
      }
      if (CrossHairTotalOutSpread != 0F) {
        size += 2 + 4;
      }
      if (AccumulateNeedTime != 0F) {
        size += 2 + 4;
      }
      if (StaleSpeed != 0F) {
        size += 2 + 4;
      }
      if (FootDamageRate != 0F) {
        size += 2 + 4;
      }
      if (HandDamageRate != 0F) {
        size += 2 + 4;
      }
      if (BodyDamageRate != 0F) {
        size += 2 + 4;
      }
      if (BellyDamageRate != 0F) {
        size += 2 + 4;
      }
      if (HeadDamageRate != 0F) {
        size += 2 + 4;
      }
      if (BrFootDamageRate != 0F) {
        size += 2 + 4;
      }
      if (BrHandDamageRate != 0F) {
        size += 2 + 4;
      }
      if (BrBodyDamageRate != 0F) {
        size += 2 + 4;
      }
      if (BrBellyDamageRate != 0F) {
        size += 2 + 4;
      }
      if (BrHeadDamageRate != 0F) {
        size += 2 + 4;
      }
      if (EnhanceShakeOnHit != 0F) {
        size += 2 + 4;
      }
      if (WeakenShakeOnHit != 0F) {
        size += 2 + 4;
      }
      if (FootShakeOnHit != 0F) {
        size += 2 + 4;
      }
      if (HandShakeOnHit != 0F) {
        size += 2 + 4;
      }
      if (BodyShakeOnHit != 0F) {
        size += 2 + 4;
      }
      if (BellyShakeOnHit != 0F) {
        size += 2 + 4;
      }
      if (HeadShakeOnHit != 0F) {
        size += 2 + 4;
      }
      if (QuitSprintTime != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaseFireLogicConfigData other) {
      if (other == null) {
        return;
      }
      if (other.FireInterval != 0F) {
        FireInterval = other.FireInterval;
      }
      if (other.FireAnimInterval != 0F) {
        FireAnimInterval = other.FireAnimInterval;
      }
      if (other.FireAnimRate != 0F) {
        FireAnimRate = other.FireAnimRate;
      }
      if (other.FirePreInputTime != 0F) {
        FirePreInputTime = other.FirePreInputTime;
      }
      if (other.ShotCost != 0) {
        ShotCost = other.ShotCost;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.InteractDamageScale != 0F) {
        InteractDamageScale = other.InteractDamageScale;
      }
      if (other.ChangeClipTime != 0F) {
        ChangeClipTime = other.ChangeClipTime;
      }
      if (other.ChangeClipLoopTime != 0F) {
        ChangeClipLoopTime = other.ChangeClipLoopTime;
      }
      if (other.ChangeClipLoopTotalTime != 0F) {
        ChangeClipLoopTotalTime = other.ChangeClipLoopTotalTime;
      }
      if (other.ChangeClipStateTotalTime != 0F) {
        ChangeClipStateTotalTime = other.ChangeClipStateTotalTime;
      }
      if (other.EquipTime != 0F) {
        EquipTime = other.EquipTime;
      }
      if (other.PrepareTime != 0F) {
        PrepareTime = other.PrepareTime;
      }
      if (other.CrosshairTexName.Length != 0) {
        CrosshairTexName = other.CrosshairTexName;
      }
      if (other.IsSingleShot != false) {
        IsSingleShot = other.IsSingleShot;
      }
      if (other.EnableQuickFireShot != false) {
        EnableQuickFireShot = other.EnableQuickFireShot;
      }
      if (other.ChangeClipAnimRate != 0F) {
        ChangeClipAnimRate = other.ChangeClipAnimRate;
      }
      if (other.EquipAnimRate != 0F) {
        EquipAnimRate = other.EquipAnimRate;
      }
      if (other.EquipAddition != 0F) {
        EquipAddition = other.EquipAddition;
      }
      if (other.ClipAmmoCount != 0) {
        ClipAmmoCount = other.ClipAmmoCount;
      }
      if (other.CarriedAmmoCount != 0) {
        CarriedAmmoCount = other.CarriedAmmoCount;
      }
      if (other.MaxAmmoCount != 0) {
        MaxAmmoCount = other.MaxAmmoCount;
      }
      if (other.FriendDamageFactor != 0F) {
        FriendDamageFactor = other.FriendDamageFactor;
      }
      if (other.CrosshairType != 0) {
        CrosshairType = other.CrosshairType;
      }
      if (other.CrosshairBaseDiff != 0F) {
        CrosshairBaseDiff = other.CrosshairBaseDiff;
      }
      if (other.CrossHairBaseHudIntervel != 0F) {
        CrossHairBaseHudIntervel = other.CrossHairBaseHudIntervel;
      }
      if (other.CrossHairOutAmplify != 0F) {
        CrossHairOutAmplify = other.CrossHairOutAmplify;
      }
      if (other.CrossHairCSDymaicInAmplify != 0F) {
        CrossHairCSDymaicInAmplify = other.CrossHairCSDymaicInAmplify;
      }
      if (other.CrossHairShotInSpread != 0F) {
        CrossHairShotInSpread = other.CrossHairShotInSpread;
      }
      if (other.CrossHairTotalInSpread != 0F) {
        CrossHairTotalInSpread = other.CrossHairTotalInSpread;
      }
      if (other.CrossHairShotOutSpread != 0F) {
        CrossHairShotOutSpread = other.CrossHairShotOutSpread;
      }
      if (other.CrossHairTotalOutSpread != 0F) {
        CrossHairTotalOutSpread = other.CrossHairTotalOutSpread;
      }
      if (other.AccumulateNeedTime != 0F) {
        AccumulateNeedTime = other.AccumulateNeedTime;
      }
      if (other.StaleSpeed != 0F) {
        StaleSpeed = other.StaleSpeed;
      }
      if (other.FootDamageRate != 0F) {
        FootDamageRate = other.FootDamageRate;
      }
      if (other.HandDamageRate != 0F) {
        HandDamageRate = other.HandDamageRate;
      }
      if (other.BodyDamageRate != 0F) {
        BodyDamageRate = other.BodyDamageRate;
      }
      if (other.BellyDamageRate != 0F) {
        BellyDamageRate = other.BellyDamageRate;
      }
      if (other.HeadDamageRate != 0F) {
        HeadDamageRate = other.HeadDamageRate;
      }
      if (other.BrFootDamageRate != 0F) {
        BrFootDamageRate = other.BrFootDamageRate;
      }
      if (other.BrHandDamageRate != 0F) {
        BrHandDamageRate = other.BrHandDamageRate;
      }
      if (other.BrBodyDamageRate != 0F) {
        BrBodyDamageRate = other.BrBodyDamageRate;
      }
      if (other.BrBellyDamageRate != 0F) {
        BrBellyDamageRate = other.BrBellyDamageRate;
      }
      if (other.BrHeadDamageRate != 0F) {
        BrHeadDamageRate = other.BrHeadDamageRate;
      }
      if (other.EnhanceShakeOnHit != 0F) {
        EnhanceShakeOnHit = other.EnhanceShakeOnHit;
      }
      if (other.WeakenShakeOnHit != 0F) {
        WeakenShakeOnHit = other.WeakenShakeOnHit;
      }
      if (other.FootShakeOnHit != 0F) {
        FootShakeOnHit = other.FootShakeOnHit;
      }
      if (other.HandShakeOnHit != 0F) {
        HandShakeOnHit = other.HandShakeOnHit;
      }
      if (other.BodyShakeOnHit != 0F) {
        BodyShakeOnHit = other.BodyShakeOnHit;
      }
      if (other.BellyShakeOnHit != 0F) {
        BellyShakeOnHit = other.BellyShakeOnHit;
      }
      if (other.HeadShakeOnHit != 0F) {
        HeadShakeOnHit = other.HeadShakeOnHit;
      }
      if (other.QuitSprintTime != 0F) {
        QuitSprintTime = other.QuitSprintTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            FireInterval = input.ReadFloat();
            break;
          }
          case 21: {
            FireAnimInterval = input.ReadFloat();
            break;
          }
          case 29: {
            FireAnimRate = input.ReadFloat();
            break;
          }
          case 37: {
            FirePreInputTime = input.ReadFloat();
            break;
          }
          case 40: {
            ShotCost = input.ReadInt32();
            break;
          }
          case 48: {
            Damage = input.ReadInt32();
            break;
          }
          case 61: {
            InteractDamageScale = input.ReadFloat();
            break;
          }
          case 69: {
            ChangeClipTime = input.ReadFloat();
            break;
          }
          case 77: {
            ChangeClipLoopTime = input.ReadFloat();
            break;
          }
          case 85: {
            ChangeClipLoopTotalTime = input.ReadFloat();
            break;
          }
          case 93: {
            ChangeClipStateTotalTime = input.ReadFloat();
            break;
          }
          case 101: {
            EquipTime = input.ReadFloat();
            break;
          }
          case 109: {
            PrepareTime = input.ReadFloat();
            break;
          }
          case 114: {
            CrosshairTexName = input.ReadString();
            break;
          }
          case 120: {
            IsSingleShot = input.ReadBool();
            break;
          }
          case 128: {
            EnableQuickFireShot = input.ReadBool();
            break;
          }
          case 141: {
            ChangeClipAnimRate = input.ReadFloat();
            break;
          }
          case 149: {
            EquipAnimRate = input.ReadFloat();
            break;
          }
          case 157: {
            EquipAddition = input.ReadFloat();
            break;
          }
          case 160: {
            ClipAmmoCount = input.ReadInt32();
            break;
          }
          case 168: {
            CarriedAmmoCount = input.ReadInt32();
            break;
          }
          case 176: {
            MaxAmmoCount = input.ReadInt32();
            break;
          }
          case 189: {
            FriendDamageFactor = input.ReadFloat();
            break;
          }
          case 192: {
            CrosshairType = input.ReadInt32();
            break;
          }
          case 205: {
            CrosshairBaseDiff = input.ReadFloat();
            break;
          }
          case 213: {
            CrossHairBaseHudIntervel = input.ReadFloat();
            break;
          }
          case 221: {
            CrossHairOutAmplify = input.ReadFloat();
            break;
          }
          case 229: {
            CrossHairCSDymaicInAmplify = input.ReadFloat();
            break;
          }
          case 237: {
            CrossHairShotInSpread = input.ReadFloat();
            break;
          }
          case 245: {
            CrossHairTotalInSpread = input.ReadFloat();
            break;
          }
          case 253: {
            CrossHairShotOutSpread = input.ReadFloat();
            break;
          }
          case 261: {
            CrossHairTotalOutSpread = input.ReadFloat();
            break;
          }
          case 269: {
            AccumulateNeedTime = input.ReadFloat();
            break;
          }
          case 277: {
            StaleSpeed = input.ReadFloat();
            break;
          }
          case 285: {
            FootDamageRate = input.ReadFloat();
            break;
          }
          case 293: {
            HandDamageRate = input.ReadFloat();
            break;
          }
          case 301: {
            BodyDamageRate = input.ReadFloat();
            break;
          }
          case 309: {
            BellyDamageRate = input.ReadFloat();
            break;
          }
          case 317: {
            HeadDamageRate = input.ReadFloat();
            break;
          }
          case 325: {
            BrFootDamageRate = input.ReadFloat();
            break;
          }
          case 333: {
            BrHandDamageRate = input.ReadFloat();
            break;
          }
          case 341: {
            BrBodyDamageRate = input.ReadFloat();
            break;
          }
          case 349: {
            BrBellyDamageRate = input.ReadFloat();
            break;
          }
          case 357: {
            BrHeadDamageRate = input.ReadFloat();
            break;
          }
          case 365: {
            EnhanceShakeOnHit = input.ReadFloat();
            break;
          }
          case 373: {
            WeakenShakeOnHit = input.ReadFloat();
            break;
          }
          case 381: {
            FootShakeOnHit = input.ReadFloat();
            break;
          }
          case 389: {
            HandShakeOnHit = input.ReadFloat();
            break;
          }
          case 397: {
            BodyShakeOnHit = input.ReadFloat();
            break;
          }
          case 405: {
            BellyShakeOnHit = input.ReadFloat();
            break;
          }
          case 413: {
            HeadShakeOnHit = input.ReadFloat();
            break;
          }
          case 421: {
            QuitSprintTime = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
