// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PlayerPawnPersistenceConfigComponentData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from PlayerPawnPersistenceConfigComponentData.proto</summary>
  public static partial class PlayerPawnPersistenceConfigComponentDataReflection {

    #region Descriptor
    /// <summary>File descriptor for PlayerPawnPersistenceConfigComponentData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerPawnPersistenceConfigComponentDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5QbGF5ZXJQYXduUGVyc2lzdGVuY2VDb25maWdDb21wb25lbnREYXRhLnBy",
            "b3RvEglEMTEuUGpzb24aDlBiVmVjdG9yLnByb3RvIqweCihQbGF5ZXJQYXdu",
            "UGVyc2lzdGVuY2VDb25maWdDb21wb25lbnREYXRhEh0KFVdvcmxkQ2FtZXJh",
            "U29ja2V0TmFtZRgBIAEoCRIaChJGUENhbWVyYURlZmF1bHRGT1YYAiABKAUS",
            "HQoVV29ybGRDYW1lcmFEZWZhdWx0Rk9WGAMgASgFEhoKElRQU0NhbWVyYVhS",
            "b3RhdGlvbhgEIAEoAhItCg9UUFNDYW1lcmFPZmZTZXQYBSABKAsyFC5EMTEu",
            "UGpzb24uUGJWZWN0b3IzEiwKDkZQQ2FtZXJhT2ZmU2V0GAYgASgLMhQuRDEx",
            "LlBqc29uLlBiVmVjdG9yMxIfChdWZXJ0aWNhbFJvYXRpb25MaW1pdE1pbhgH",
            "IAEoAhIfChdWZXJ0aWNhbFJvYXRpb25MaW1pdE1heBgIIAEoAhIhChlIb3Jp",
            "em9udGFsUm9hdGlvbkxpbWl0TWluGAkgASgCEiEKGUhvcml6b250YWxSb2F0",
            "aW9uTGltaXRNYXgYCiABKAISJAocRGVhdGhNYXRjaEFsbG93ZWRNb3ZpbmdS",
            "YW5nZRgLIAEoAhIWCg5Gb290RGFtYWdlUmF0ZRgMIAEoAhIWCg5IYW5kRGFt",
            "YWdlUmF0ZRgNIAEoAhIWCg5Cb2R5RGFtYWdlUmF0ZRgOIAEoAhIXCg9CZWxs",
            "eURhbWFnZVJhdGUYDyABKAISFgoOSGVhZERhbWFnZVJhdGUYECABKAISGAoQ",
            "U2hpZWxkRGFtYWdlUmF0ZRgRIAEoAhIYChBCckZvb3REYW1hZ2VSYXRlGBIg",
            "ASgCEhgKEEJySGFuZERhbWFnZVJhdGUYEyABKAISGAoQQnJCb2R5RGFtYWdl",
            "UmF0ZRgUIAEoAhIZChFCckJlbGx5RGFtYWdlUmF0ZRgVIAEoAhIYChBCckhl",
            "YWREYW1hZ2VSYXRlGBYgASgCEhcKD0Ryb3BXZWFwb25Tb3VuZBgXIAEoCRIQ",
            "CghGcmljdGlvbhgYIAEoAhIQCghNYXhTcGVlZBgZIAEoAhIYChBGYWxsRG93",
            "bk1heFNwZWVkGBogASgCEhAKCE1pblNwZWVkGBsgASgCEhYKDkp1bXBJbml0",
            "WVNwZWVkGBwgASgCEhwKFERvdWJsZUp1bXBJbml0WVNwZWVkGB0gASgCEiIK",
            "GkZhbGxpbmdEYW1nZVNwZWVkVGhyZXNob2xkGB4gASgCEh8KF0ZhbGxpbmdE",
            "YW1nZVNwZWVkUGVySW5jGB8gASgCEg8KB0dyYXZpdHkYICABKAISGAoQR3Jh",
            "dml0eUNyZXNjZW5kbxghIAEoAhIaChJHcmF2aXR5RGVjcmVzY2VuZG8YIiAB",
            "KAISGwoTQ3JvdWNoaW5nU3BlZWRTY2FsZRgjIAEoAhIaChJPbkxhbmRBY2Nl",
            "bGVyYXRpb24YJCABKAISIAoYT25MYW5kU3ByaW50QWNjZWxlcmF0aW9uGCUg",
            "ASgCEhMKC1NsaWRlVGhydXN0GCYgASgCEhUKDVNsaWRlRnJpY3Rpb24YJyAB",
            "KAISGQoRSW5BaXJBY2NlbGVyYXRpb24YKCABKAISFwoPSW5BaXJTcGVlZFJh",
            "dGlvGCkgASgCEiMKG0luQWlyRG91YmxlSnVtcEFjY2VsZXJhdGlvbhgqIAEo",
            "AhIhChlJbkFpckRvdWJsZUp1bXBTcGVlZFJhdGlvGCsgASgCEhoKEkluZXJ0",
            "aWFTZWN0b3JBbmdsZRgsIAEoAhIdChVMYW5kaW5nU3BlZWREcm9wUmF0aW8Y",
            "LSABKAISGQoRU2lsZW50U3BlZWRSYXRpb24YLiABKAISGQoRQ3JvdWNoU3Bl",
            "ZWRSYXRpb24YLyABKAISEwoLTWF4VmVsb2NpdHkYMCABKAISIAoYTWF4VmVs",
            "b2NpdHlBaW1TcGVlZFJhdGlvGDEgASgCEhkKEVN0b3BTcGVlZEZyaWN0aW9u",
            "GDIgASgCEh8KF0Nyb3VjaFN0b3BTcGVlZEZyaWN0aW9uGDMgASgCEhgKEENy",
            "b3VjaEZhdGlndWVJbmMYNCABKAISHQoVQ3JvdWNoRmF0aWd1ZVJlY292ZXJ5",
            "GDUgASgCEhgKEENyb3VjaEZhdGlndWVNYXgYNiABKAISGwoTQ3JvdWNoRmF0",
            "aWd1ZVB1bmlzaBg3IAEoAhIaChJDcm91Y2hBY2NlbGVyYXRpb24YOCABKAIS",
            "GQoRQ3JvdWNoRmlyc3RUaHJ1c3QYOSABKAISHgoWRmFsbFNwZWVkTG9zc1Ro",
            "cmVzaG9sZBg6IAEoAhIaChJGYWxsU3BlZWRMb3NzUmF0aW8YOyABKAISHQoV",
            "RmFsbEZyb21IaWdoVGhyZXNob2xkGDwgASgCEhMKC0hpdERvd25UaW1lGD0g",
            "ASgCEh0KFUhpdERvd25SZWNvdmVyaW5nVGltZRg+IAEoAhIVCg1TZW5zaXRp",
            "dml0eVgxGD8gASgCEhUKDVNlbnNpdGl2aXR5WDIYQCABKAISFQoNU2Vuc2l0",
            "aXZpdHkzUBhBIAEoAhIVCg1TZW5zaXRpdml0eTFQGEIgASgCEh8KF0Rpc2Fi",
            "bGVBdXRvQWltQWZ0ZXJLaWxsGEMgASgCEhYKDkp1bXBEdWNrSGVpZ2h0GEQg",
            "ASgCEhkKEUF0dGFja1BvaW50T2Zmc2V0GEUgASgCEiAKGFBWRUJvc3NBdHRh",
            "Y2tQb2ludE9mZnNldBhGIAEoAhIhChlIb3dpdHplckF0dGFja1BvaW50T2Zm",
            "c2V0GEcgASgCEh8KF0J1bGxldFNoZWxsc1Bpc3RvbFNvdW5kGEggASgJEiAK",
            "GEJ1bGxldFNoZWxsc1Nob3RndW5Tb3VuZBhJIAEoCRIWCg5CdWxsZXRIaXRT",
            "b3VuZBhKIAEoCRIVCg1NZWxlZUhpdFNvdW5kGEsgASgJEhYKDkJ1bGxldEZs",
            "eVNvdW5kGEwgASgJEhYKDkNsaXBFbXB0eVNvdW5kGE0gASgJEhYKDkZpcmVF",
            "bXB0eVNvdW5kGE4gASgJEhkKEUZpcmVFbXB0eVJUUENOYW1lGE8gASgJEhYK",
            "DkRlcGxveUJvbWJUaW1lGFAgASgCEh8KF0RlcGxveUJvbWJBbmltYXRpb25U",
            "aW1lGFEgASgCEhYKDkRlZnVzZUJvbWJUaW1lGFIgASgCEhwKFEJyZWFrZURl",
            "ZnVzZVNhZmVUaW1lGFMgASgCEhkKEUJyZWFrZURlZnVzZUFuZ2xlGFQgASgC",
            "EhcKD0RlZnVzZUZpbmRBbmdsZRhVIAEoAhIZChFTcHJlYWRNZWRpdW1MZXZl",
            "bBhWIAEoAhIXCg9TcHJlYWRIaWdoTGV2ZWwYVyABKAISGAoQQ2xpbWJMYWRk",
            "ZXJTcGVlZBhYIAEoAhIeChZTaWxlbnRDbGltYkxhZGRlclNwZWVkGFkgASgC",
            "Eh4KFkR1Y2tlZENsaW1iTGFkZGVyU3BlZWQYWiABKAISGQoRTGFkZGVyU3By",
            "aW5nU3BlZWQYWyABKAISFwoPU3ByZWFkU3BlZWRNb3ZlGFwgASgCEhkKEVNw",
            "cmVhZFNwZWVkQ3JvdWNoGF0gASgCEhoKElNwcmVhZFNwZWVkU2xpZW5jZRhe",
            "IAEoAhIaChJGbGFtZUhpdEVmZmVjdE5hbWUYXyABKAkSIQoZRmxhbWVIaXRB",
            "bmltYXRpb25JbnRlcnZhbBhgIAEoAhIZChFSYXlQaWNrVXBEaXN0YW5jZRhh",
            "IAEoAhIaChJCb2R5UGlja1VwRGlzdGFuY2UYYiABKAISGwoTQlJSYXlQaWNr",
            "VXBEaXN0YW5jZRhjIAEoAhIcChRCUkJvZHlQaWNrVXBEaXN0YW5jZRhkIAEo",
            "AhIWCg5Qb2lzaW9uSW11bml0eRhlIAEoAhIbChNTaG9ydENsaW1iTWF4SGVp",
            "Z2h0GGYgASgCEhsKE1Nob3J0Q2xpbWJNaW5IZWlnaHQYZyABKAISFwoPU2hv",
            "cnRDbGltYkFuZ2xlGGggASgCEhoKElNob3J0Q2xpbWJJbnRlcnZhbBhpIAEo",
            "AhIXCg9TbGlkZVNsb3BlSW5kZXgYaiABKAISIwobRGVhZERyb3BGdW5jdGlv",
            "bldlYXBvbkNvdW50GGsgASgFEhgKEFNwcmF5UGFpbnRDRFRpbWUYbCABKAIS",
            "GgoSU3ByYXlQYWludFZhbGlkRGlzGG0gASgCEhcKD01pbkZhZGVEaXN0YW5j",
            "ZRhuIAEoAhIdChVNYXhTaG93T3V0bGluRGlzdGFuY2UYbyABKAISGwoTSG9y",
            "aXpvbnRhbFNwZWVkTG9zcxhwIAEoAhIdChVMb3dDb21tb25GaXJlRWZmZWN0",
            "RnAYcSABKAkSHQoVTG93Q29tbW9uRmlyZUVmZmVjdFRwGHIgASgJEh0KFUF1",
            "dG9TaWduT3RoZXJJbnRlcnZhbBhzIAEoAhIdChVTaWduZWRCeU90aGVySW50",
            "ZXJ2YWwYdCABKAISGAoQUFZFSGVhcnRCZWF0UGxheRh1IAEoCRIYChBQVkVI",
            "ZWFydEJlYXRTdG9wGHYgASgJEhMKC0hlYWx0aFBvaW50GHcgASgJEhoKElBW",
            "RUhlYXJ0QmVhdFBsYXlDRBh4IAEoAhImCh5QVkVTdGFydFBsYXlIZWFydEJl",
            "YXRUaHJlc2hvbGQYeSABKAISIAoYUFZFSGVhcnRCZWF0UGxheUxpZmVUaW1l",
            "GHogASgCEhUKDURhbWFnZVNvdW5kMVAYeyABKAkSFQoNS2lsbEtpbmdTb3Vu",
            "ZBh8IAEoCRIeChZLaWxsS2luZ1NvdW5kRGVsYXlQbGF5GH0gASgCEh0KFUJS",
            "X0hwU2hpZWxkQnJlYWtTb3VuZBh+IAEoCRIfChdCUl9IZWFydGJlYXRfUGxh",
            "eV9Tb3VuZBh/IAEoCRIgChdCUl9IZWFydGJlYXRfU3RvcF9Tb3VuZBiAASAB",
            "KAkSGQoQU3ByaW50U2NhbGVTcGVlZBiBASABKAISFgoNQWlyQm9ybmVCb29z",
            "dBiCASABKAISIQoYQWlyQm9ybmVOb1BhcmFzaHV0ZVNwZWVkGIMBIAEoAhIf",
            "ChZBaXJCb3JuZVBhcmFzaHV0ZVNwZWVkGIQBIAEoAhIdChRBaXJCb3JuZVJv",
            "bGxBbmdsZU1heBiFASABKAISJAobQWlyQm9ybmVBdXRvUGFyYXNodXRlSGVp",
            "Z2h0GIYBIAEoAhIjChpBaXJCb3JuZUhpZ2hTcGVlZFRocmVzaG9sZBiHASAB",
            "KAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D11.Pjson.PbVectorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.PlayerPawnPersistenceConfigComponentData), global::D11.Pjson.PlayerPawnPersistenceConfigComponentData.Parser, new[]{ "WorldCameraSocketName", "FPCameraDefaultFOV", "WorldCameraDefaultFOV", "TPSCameraXRotation", "TPSCameraOffSet", "FPCameraOffSet", "VerticalRoationLimitMin", "VerticalRoationLimitMax", "HorizontalRoationLimitMin", "HorizontalRoationLimitMax", "DeathMatchAllowedMovingRange", "FootDamageRate", "HandDamageRate", "BodyDamageRate", "BellyDamageRate", "HeadDamageRate", "ShieldDamageRate", "BrFootDamageRate", "BrHandDamageRate", "BrBodyDamageRate", "BrBellyDamageRate", "BrHeadDamageRate", "DropWeaponSound", "Friction", "MaxSpeed", "FallDownMaxSpeed", "MinSpeed", "JumpInitYSpeed", "DoubleJumpInitYSpeed", "FallingDamgeSpeedThreshold", "FallingDamgeSpeedPerInc", "Gravity", "GravityCrescendo", "GravityDecrescendo", "CrouchingSpeedScale", "OnLandAcceleration", "OnLandSprintAcceleration", "SlideThrust", "SlideFriction", "InAirAcceleration", "InAirSpeedRatio", "InAirDoubleJumpAcceleration", "InAirDoubleJumpSpeedRatio", "InertiaSectorAngle", "LandingSpeedDropRatio", "SilentSpeedRation", "CrouchSpeedRation", "MaxVelocity", "MaxVelocityAimSpeedRatio", "StopSpeedFriction", "CrouchStopSpeedFriction", "CrouchFatigueInc", "CrouchFatigueRecovery", "CrouchFatigueMax", "CrouchFatiguePunish", "CrouchAcceleration", "CrouchFirstThrust", "FallSpeedLossThreshold", "FallSpeedLossRatio", "FallFromHighThreshold", "HitDownTime", "HitDownRecoveringTime", "SensitivityX1", "SensitivityX2", "Sensitivity3P", "Sensitivity1P", "DisableAutoAimAfterKill", "JumpDuckHeight", "AttackPointOffset", "PVEBossAttackPointOffset", "HowitzerAttackPointOffset", "BulletShellsPistolSound", "BulletShellsShotgunSound", "BulletHitSound", "MeleeHitSound", "BulletFlySound", "ClipEmptySound", "FireEmptySound", "FireEmptyRTPCName", "DeployBombTime", "DeployBombAnimationTime", "DefuseBombTime", "BreakeDefuseSafeTime", "BreakeDefuseAngle", "DefuseFindAngle", "SpreadMediumLevel", "SpreadHighLevel", "ClimbLadderSpeed", "SilentClimbLadderSpeed", "DuckedClimbLadderSpeed", "LadderSpringSpeed", "SpreadSpeedMove", "SpreadSpeedCrouch", "SpreadSpeedSlience", "FlameHitEffectName", "FlameHitAnimationInterval", "RayPickUpDistance", "BodyPickUpDistance", "BRRayPickUpDistance", "BRBodyPickUpDistance", "PoisionImunity", "ShortClimbMaxHeight", "ShortClimbMinHeight", "ShortClimbAngle", "ShortClimbInterval", "SlideSlopeIndex", "DeadDropFunctionWeaponCount", "SprayPaintCDTime", "SprayPaintValidDis", "MinFadeDistance", "MaxShowOutlinDistance", "HorizontalSpeedLoss", "LowCommonFireEffectFp", "LowCommonFireEffectTp", "AutoSignOtherInterval", "SignedByOtherInterval", "PVEHeartBeatPlay", "PVEHeartBeatStop", "HealthPoint", "PVEHeartBeatPlayCD", "PVEStartPlayHeartBeatThreshold", "PVEHeartBeatPlayLifeTime", "DamageSound1P", "KillKingSound", "KillKingSoundDelayPlay", "BRHpShieldBreakSound", "BRHeartbeatPlaySound", "BRHeartbeatStopSound", "SprintScaleSpeed", "AirBorneBoost", "AirBorneNoParashuteSpeed", "AirBorneParashuteSpeed", "AirBorneRollAngleMax", "AirBorneAutoParashuteHeight", "AirBorneHighSpeedThreshold" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerPawnPersistenceConfigComponentData : pb::IMessage<PlayerPawnPersistenceConfigComponentData> {
    private static readonly pb::MessageParser<PlayerPawnPersistenceConfigComponentData> _parser = new pb::MessageParser<PlayerPawnPersistenceConfigComponentData>(() => new PlayerPawnPersistenceConfigComponentData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPawnPersistenceConfigComponentData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.PlayerPawnPersistenceConfigComponentDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPawnPersistenceConfigComponentData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPawnPersistenceConfigComponentData(PlayerPawnPersistenceConfigComponentData other) : this() {
      worldCameraSocketName_ = other.worldCameraSocketName_;
      fPCameraDefaultFOV_ = other.fPCameraDefaultFOV_;
      worldCameraDefaultFOV_ = other.worldCameraDefaultFOV_;
      tPSCameraXRotation_ = other.tPSCameraXRotation_;
      tPSCameraOffSet_ = other.tPSCameraOffSet_ != null ? other.tPSCameraOffSet_.Clone() : null;
      fPCameraOffSet_ = other.fPCameraOffSet_ != null ? other.fPCameraOffSet_.Clone() : null;
      verticalRoationLimitMin_ = other.verticalRoationLimitMin_;
      verticalRoationLimitMax_ = other.verticalRoationLimitMax_;
      horizontalRoationLimitMin_ = other.horizontalRoationLimitMin_;
      horizontalRoationLimitMax_ = other.horizontalRoationLimitMax_;
      deathMatchAllowedMovingRange_ = other.deathMatchAllowedMovingRange_;
      footDamageRate_ = other.footDamageRate_;
      handDamageRate_ = other.handDamageRate_;
      bodyDamageRate_ = other.bodyDamageRate_;
      bellyDamageRate_ = other.bellyDamageRate_;
      headDamageRate_ = other.headDamageRate_;
      shieldDamageRate_ = other.shieldDamageRate_;
      brFootDamageRate_ = other.brFootDamageRate_;
      brHandDamageRate_ = other.brHandDamageRate_;
      brBodyDamageRate_ = other.brBodyDamageRate_;
      brBellyDamageRate_ = other.brBellyDamageRate_;
      brHeadDamageRate_ = other.brHeadDamageRate_;
      dropWeaponSound_ = other.dropWeaponSound_;
      friction_ = other.friction_;
      maxSpeed_ = other.maxSpeed_;
      fallDownMaxSpeed_ = other.fallDownMaxSpeed_;
      minSpeed_ = other.minSpeed_;
      jumpInitYSpeed_ = other.jumpInitYSpeed_;
      doubleJumpInitYSpeed_ = other.doubleJumpInitYSpeed_;
      fallingDamgeSpeedThreshold_ = other.fallingDamgeSpeedThreshold_;
      fallingDamgeSpeedPerInc_ = other.fallingDamgeSpeedPerInc_;
      gravity_ = other.gravity_;
      gravityCrescendo_ = other.gravityCrescendo_;
      gravityDecrescendo_ = other.gravityDecrescendo_;
      crouchingSpeedScale_ = other.crouchingSpeedScale_;
      onLandAcceleration_ = other.onLandAcceleration_;
      onLandSprintAcceleration_ = other.onLandSprintAcceleration_;
      slideThrust_ = other.slideThrust_;
      slideFriction_ = other.slideFriction_;
      inAirAcceleration_ = other.inAirAcceleration_;
      inAirSpeedRatio_ = other.inAirSpeedRatio_;
      inAirDoubleJumpAcceleration_ = other.inAirDoubleJumpAcceleration_;
      inAirDoubleJumpSpeedRatio_ = other.inAirDoubleJumpSpeedRatio_;
      inertiaSectorAngle_ = other.inertiaSectorAngle_;
      landingSpeedDropRatio_ = other.landingSpeedDropRatio_;
      silentSpeedRation_ = other.silentSpeedRation_;
      crouchSpeedRation_ = other.crouchSpeedRation_;
      maxVelocity_ = other.maxVelocity_;
      maxVelocityAimSpeedRatio_ = other.maxVelocityAimSpeedRatio_;
      stopSpeedFriction_ = other.stopSpeedFriction_;
      crouchStopSpeedFriction_ = other.crouchStopSpeedFriction_;
      crouchFatigueInc_ = other.crouchFatigueInc_;
      crouchFatigueRecovery_ = other.crouchFatigueRecovery_;
      crouchFatigueMax_ = other.crouchFatigueMax_;
      crouchFatiguePunish_ = other.crouchFatiguePunish_;
      crouchAcceleration_ = other.crouchAcceleration_;
      crouchFirstThrust_ = other.crouchFirstThrust_;
      fallSpeedLossThreshold_ = other.fallSpeedLossThreshold_;
      fallSpeedLossRatio_ = other.fallSpeedLossRatio_;
      fallFromHighThreshold_ = other.fallFromHighThreshold_;
      hitDownTime_ = other.hitDownTime_;
      hitDownRecoveringTime_ = other.hitDownRecoveringTime_;
      sensitivityX1_ = other.sensitivityX1_;
      sensitivityX2_ = other.sensitivityX2_;
      sensitivity3P_ = other.sensitivity3P_;
      sensitivity1P_ = other.sensitivity1P_;
      disableAutoAimAfterKill_ = other.disableAutoAimAfterKill_;
      jumpDuckHeight_ = other.jumpDuckHeight_;
      attackPointOffset_ = other.attackPointOffset_;
      pVEBossAttackPointOffset_ = other.pVEBossAttackPointOffset_;
      howitzerAttackPointOffset_ = other.howitzerAttackPointOffset_;
      bulletShellsPistolSound_ = other.bulletShellsPistolSound_;
      bulletShellsShotgunSound_ = other.bulletShellsShotgunSound_;
      bulletHitSound_ = other.bulletHitSound_;
      meleeHitSound_ = other.meleeHitSound_;
      bulletFlySound_ = other.bulletFlySound_;
      clipEmptySound_ = other.clipEmptySound_;
      fireEmptySound_ = other.fireEmptySound_;
      fireEmptyRTPCName_ = other.fireEmptyRTPCName_;
      deployBombTime_ = other.deployBombTime_;
      deployBombAnimationTime_ = other.deployBombAnimationTime_;
      defuseBombTime_ = other.defuseBombTime_;
      breakeDefuseSafeTime_ = other.breakeDefuseSafeTime_;
      breakeDefuseAngle_ = other.breakeDefuseAngle_;
      defuseFindAngle_ = other.defuseFindAngle_;
      spreadMediumLevel_ = other.spreadMediumLevel_;
      spreadHighLevel_ = other.spreadHighLevel_;
      climbLadderSpeed_ = other.climbLadderSpeed_;
      silentClimbLadderSpeed_ = other.silentClimbLadderSpeed_;
      duckedClimbLadderSpeed_ = other.duckedClimbLadderSpeed_;
      ladderSpringSpeed_ = other.ladderSpringSpeed_;
      spreadSpeedMove_ = other.spreadSpeedMove_;
      spreadSpeedCrouch_ = other.spreadSpeedCrouch_;
      spreadSpeedSlience_ = other.spreadSpeedSlience_;
      flameHitEffectName_ = other.flameHitEffectName_;
      flameHitAnimationInterval_ = other.flameHitAnimationInterval_;
      rayPickUpDistance_ = other.rayPickUpDistance_;
      bodyPickUpDistance_ = other.bodyPickUpDistance_;
      bRRayPickUpDistance_ = other.bRRayPickUpDistance_;
      bRBodyPickUpDistance_ = other.bRBodyPickUpDistance_;
      poisionImunity_ = other.poisionImunity_;
      shortClimbMaxHeight_ = other.shortClimbMaxHeight_;
      shortClimbMinHeight_ = other.shortClimbMinHeight_;
      shortClimbAngle_ = other.shortClimbAngle_;
      shortClimbInterval_ = other.shortClimbInterval_;
      slideSlopeIndex_ = other.slideSlopeIndex_;
      deadDropFunctionWeaponCount_ = other.deadDropFunctionWeaponCount_;
      sprayPaintCDTime_ = other.sprayPaintCDTime_;
      sprayPaintValidDis_ = other.sprayPaintValidDis_;
      minFadeDistance_ = other.minFadeDistance_;
      maxShowOutlinDistance_ = other.maxShowOutlinDistance_;
      horizontalSpeedLoss_ = other.horizontalSpeedLoss_;
      lowCommonFireEffectFp_ = other.lowCommonFireEffectFp_;
      lowCommonFireEffectTp_ = other.lowCommonFireEffectTp_;
      autoSignOtherInterval_ = other.autoSignOtherInterval_;
      signedByOtherInterval_ = other.signedByOtherInterval_;
      pVEHeartBeatPlay_ = other.pVEHeartBeatPlay_;
      pVEHeartBeatStop_ = other.pVEHeartBeatStop_;
      healthPoint_ = other.healthPoint_;
      pVEHeartBeatPlayCD_ = other.pVEHeartBeatPlayCD_;
      pVEStartPlayHeartBeatThreshold_ = other.pVEStartPlayHeartBeatThreshold_;
      pVEHeartBeatPlayLifeTime_ = other.pVEHeartBeatPlayLifeTime_;
      damageSound1P_ = other.damageSound1P_;
      killKingSound_ = other.killKingSound_;
      killKingSoundDelayPlay_ = other.killKingSoundDelayPlay_;
      bRHpShieldBreakSound_ = other.bRHpShieldBreakSound_;
      bRHeartbeatPlaySound_ = other.bRHeartbeatPlaySound_;
      bRHeartbeatStopSound_ = other.bRHeartbeatStopSound_;
      sprintScaleSpeed_ = other.sprintScaleSpeed_;
      airBorneBoost_ = other.airBorneBoost_;
      airBorneNoParashuteSpeed_ = other.airBorneNoParashuteSpeed_;
      airBorneParashuteSpeed_ = other.airBorneParashuteSpeed_;
      airBorneRollAngleMax_ = other.airBorneRollAngleMax_;
      airBorneAutoParashuteHeight_ = other.airBorneAutoParashuteHeight_;
      airBorneHighSpeedThreshold_ = other.airBorneHighSpeedThreshold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPawnPersistenceConfigComponentData Clone() {
      return new PlayerPawnPersistenceConfigComponentData(this);
    }

    /// <summary>Field number for the "WorldCameraSocketName" field.</summary>
    public const int WorldCameraSocketNameFieldNumber = 1;
    private string worldCameraSocketName_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorldCameraSocketName {
      get { return worldCameraSocketName_; }
      set {
        worldCameraSocketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FPCameraDefaultFOV" field.</summary>
    public const int FPCameraDefaultFOVFieldNumber = 2;
    private int fPCameraDefaultFOV_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FPCameraDefaultFOV {
      get { return fPCameraDefaultFOV_; }
      set {
        fPCameraDefaultFOV_ = value;
      }
    }

    /// <summary>Field number for the "WorldCameraDefaultFOV" field.</summary>
    public const int WorldCameraDefaultFOVFieldNumber = 3;
    private int worldCameraDefaultFOV_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorldCameraDefaultFOV {
      get { return worldCameraDefaultFOV_; }
      set {
        worldCameraDefaultFOV_ = value;
      }
    }

    /// <summary>Field number for the "TPSCameraXRotation" field.</summary>
    public const int TPSCameraXRotationFieldNumber = 4;
    private float tPSCameraXRotation_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TPSCameraXRotation {
      get { return tPSCameraXRotation_; }
      set {
        tPSCameraXRotation_ = value;
      }
    }

    /// <summary>Field number for the "TPSCameraOffSet" field.</summary>
    public const int TPSCameraOffSetFieldNumber = 5;
    private global::D11.Pjson.PbVector3 tPSCameraOffSet_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.PbVector3 TPSCameraOffSet {
      get { return tPSCameraOffSet_; }
      set {
        tPSCameraOffSet_ = value;
      }
    }

    /// <summary>Field number for the "FPCameraOffSet" field.</summary>
    public const int FPCameraOffSetFieldNumber = 6;
    private global::D11.Pjson.PbVector3 fPCameraOffSet_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.PbVector3 FPCameraOffSet {
      get { return fPCameraOffSet_; }
      set {
        fPCameraOffSet_ = value;
      }
    }

    /// <summary>Field number for the "VerticalRoationLimitMin" field.</summary>
    public const int VerticalRoationLimitMinFieldNumber = 7;
    private float verticalRoationLimitMin_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VerticalRoationLimitMin {
      get { return verticalRoationLimitMin_; }
      set {
        verticalRoationLimitMin_ = value;
      }
    }

    /// <summary>Field number for the "VerticalRoationLimitMax" field.</summary>
    public const int VerticalRoationLimitMaxFieldNumber = 8;
    private float verticalRoationLimitMax_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VerticalRoationLimitMax {
      get { return verticalRoationLimitMax_; }
      set {
        verticalRoationLimitMax_ = value;
      }
    }

    /// <summary>Field number for the "HorizontalRoationLimitMin" field.</summary>
    public const int HorizontalRoationLimitMinFieldNumber = 9;
    private float horizontalRoationLimitMin_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HorizontalRoationLimitMin {
      get { return horizontalRoationLimitMin_; }
      set {
        horizontalRoationLimitMin_ = value;
      }
    }

    /// <summary>Field number for the "HorizontalRoationLimitMax" field.</summary>
    public const int HorizontalRoationLimitMaxFieldNumber = 10;
    private float horizontalRoationLimitMax_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HorizontalRoationLimitMax {
      get { return horizontalRoationLimitMax_; }
      set {
        horizontalRoationLimitMax_ = value;
      }
    }

    /// <summary>Field number for the "DeathMatchAllowedMovingRange" field.</summary>
    public const int DeathMatchAllowedMovingRangeFieldNumber = 11;
    private float deathMatchAllowedMovingRange_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeathMatchAllowedMovingRange {
      get { return deathMatchAllowedMovingRange_; }
      set {
        deathMatchAllowedMovingRange_ = value;
      }
    }

    /// <summary>Field number for the "FootDamageRate" field.</summary>
    public const int FootDamageRateFieldNumber = 12;
    private float footDamageRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FootDamageRate {
      get { return footDamageRate_; }
      set {
        footDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "HandDamageRate" field.</summary>
    public const int HandDamageRateFieldNumber = 13;
    private float handDamageRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HandDamageRate {
      get { return handDamageRate_; }
      set {
        handDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "BodyDamageRate" field.</summary>
    public const int BodyDamageRateFieldNumber = 14;
    private float bodyDamageRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BodyDamageRate {
      get { return bodyDamageRate_; }
      set {
        bodyDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "BellyDamageRate" field.</summary>
    public const int BellyDamageRateFieldNumber = 15;
    private float bellyDamageRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BellyDamageRate {
      get { return bellyDamageRate_; }
      set {
        bellyDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "HeadDamageRate" field.</summary>
    public const int HeadDamageRateFieldNumber = 16;
    private float headDamageRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeadDamageRate {
      get { return headDamageRate_; }
      set {
        headDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "ShieldDamageRate" field.</summary>
    public const int ShieldDamageRateFieldNumber = 17;
    private float shieldDamageRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShieldDamageRate {
      get { return shieldDamageRate_; }
      set {
        shieldDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "BrFootDamageRate" field.</summary>
    public const int BrFootDamageRateFieldNumber = 18;
    private float brFootDamageRate_;
    /// <summary>
    /// 吃鸡模式击中 脚 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrFootDamageRate {
      get { return brFootDamageRate_; }
      set {
        brFootDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "BrHandDamageRate" field.</summary>
    public const int BrHandDamageRateFieldNumber = 19;
    private float brHandDamageRate_;
    /// <summary>
    /// 吃鸡模式击中 手 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrHandDamageRate {
      get { return brHandDamageRate_; }
      set {
        brHandDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "BrBodyDamageRate" field.</summary>
    public const int BrBodyDamageRateFieldNumber = 20;
    private float brBodyDamageRate_;
    /// <summary>
    /// 吃鸡模式击中 身 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrBodyDamageRate {
      get { return brBodyDamageRate_; }
      set {
        brBodyDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "BrBellyDamageRate" field.</summary>
    public const int BrBellyDamageRateFieldNumber = 21;
    private float brBellyDamageRate_;
    /// <summary>
    /// 吃鸡模式击中 腰 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrBellyDamageRate {
      get { return brBellyDamageRate_; }
      set {
        brBellyDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "BrHeadDamageRate" field.</summary>
    public const int BrHeadDamageRateFieldNumber = 22;
    private float brHeadDamageRate_;
    /// <summary>
    /// 吃鸡模式击中 头 伤害系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BrHeadDamageRate {
      get { return brHeadDamageRate_; }
      set {
        brHeadDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "DropWeaponSound" field.</summary>
    public const int DropWeaponSoundFieldNumber = 23;
    private string dropWeaponSound_ = "";
    /// <summary>
    /// 丢武器的声音 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DropWeaponSound {
      get { return dropWeaponSound_; }
      set {
        dropWeaponSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Friction" field.</summary>
    public const int FrictionFieldNumber = 24;
    private float friction_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Friction {
      get { return friction_; }
      set {
        friction_ = value;
      }
    }

    /// <summary>Field number for the "MaxSpeed" field.</summary>
    public const int MaxSpeedFieldNumber = 25;
    private float maxSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxSpeed {
      get { return maxSpeed_; }
      set {
        maxSpeed_ = value;
      }
    }

    /// <summary>Field number for the "FallDownMaxSpeed" field.</summary>
    public const int FallDownMaxSpeedFieldNumber = 26;
    private float fallDownMaxSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FallDownMaxSpeed {
      get { return fallDownMaxSpeed_; }
      set {
        fallDownMaxSpeed_ = value;
      }
    }

    /// <summary>Field number for the "MinSpeed" field.</summary>
    public const int MinSpeedFieldNumber = 27;
    private float minSpeed_;
    /// <summary>
    /// 减速后的最小速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinSpeed {
      get { return minSpeed_; }
      set {
        minSpeed_ = value;
      }
    }

    /// <summary>Field number for the "JumpInitYSpeed" field.</summary>
    public const int JumpInitYSpeedFieldNumber = 28;
    private float jumpInitYSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float JumpInitYSpeed {
      get { return jumpInitYSpeed_; }
      set {
        jumpInitYSpeed_ = value;
      }
    }

    /// <summary>Field number for the "DoubleJumpInitYSpeed" field.</summary>
    public const int DoubleJumpInitYSpeedFieldNumber = 29;
    private float doubleJumpInitYSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DoubleJumpInitYSpeed {
      get { return doubleJumpInitYSpeed_; }
      set {
        doubleJumpInitYSpeed_ = value;
      }
    }

    /// <summary>Field number for the "FallingDamgeSpeedThreshold" field.</summary>
    public const int FallingDamgeSpeedThresholdFieldNumber = 30;
    private float fallingDamgeSpeedThreshold_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FallingDamgeSpeedThreshold {
      get { return fallingDamgeSpeedThreshold_; }
      set {
        fallingDamgeSpeedThreshold_ = value;
      }
    }

    /// <summary>Field number for the "FallingDamgeSpeedPerInc" field.</summary>
    public const int FallingDamgeSpeedPerIncFieldNumber = 31;
    private float fallingDamgeSpeedPerInc_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FallingDamgeSpeedPerInc {
      get { return fallingDamgeSpeedPerInc_; }
      set {
        fallingDamgeSpeedPerInc_ = value;
      }
    }

    /// <summary>Field number for the "Gravity" field.</summary>
    public const int GravityFieldNumber = 32;
    private float gravity_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Gravity {
      get { return gravity_; }
      set {
        gravity_ = value;
      }
    }

    /// <summary>Field number for the "GravityCrescendo" field.</summary>
    public const int GravityCrescendoFieldNumber = 33;
    private float gravityCrescendo_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GravityCrescendo {
      get { return gravityCrescendo_; }
      set {
        gravityCrescendo_ = value;
      }
    }

    /// <summary>Field number for the "GravityDecrescendo" field.</summary>
    public const int GravityDecrescendoFieldNumber = 34;
    private float gravityDecrescendo_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GravityDecrescendo {
      get { return gravityDecrescendo_; }
      set {
        gravityDecrescendo_ = value;
      }
    }

    /// <summary>Field number for the "CrouchingSpeedScale" field.</summary>
    public const int CrouchingSpeedScaleFieldNumber = 35;
    private float crouchingSpeedScale_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrouchingSpeedScale {
      get { return crouchingSpeedScale_; }
      set {
        crouchingSpeedScale_ = value;
      }
    }

    /// <summary>Field number for the "OnLandAcceleration" field.</summary>
    public const int OnLandAccelerationFieldNumber = 36;
    private float onLandAcceleration_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OnLandAcceleration {
      get { return onLandAcceleration_; }
      set {
        onLandAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "OnLandSprintAcceleration" field.</summary>
    public const int OnLandSprintAccelerationFieldNumber = 37;
    private float onLandSprintAcceleration_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OnLandSprintAcceleration {
      get { return onLandSprintAcceleration_; }
      set {
        onLandSprintAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "SlideThrust" field.</summary>
    public const int SlideThrustFieldNumber = 38;
    private float slideThrust_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SlideThrust {
      get { return slideThrust_; }
      set {
        slideThrust_ = value;
      }
    }

    /// <summary>Field number for the "SlideFriction" field.</summary>
    public const int SlideFrictionFieldNumber = 39;
    private float slideFriction_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SlideFriction {
      get { return slideFriction_; }
      set {
        slideFriction_ = value;
      }
    }

    /// <summary>Field number for the "InAirAcceleration" field.</summary>
    public const int InAirAccelerationFieldNumber = 40;
    private float inAirAcceleration_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InAirAcceleration {
      get { return inAirAcceleration_; }
      set {
        inAirAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "InAirSpeedRatio" field.</summary>
    public const int InAirSpeedRatioFieldNumber = 41;
    private float inAirSpeedRatio_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InAirSpeedRatio {
      get { return inAirSpeedRatio_; }
      set {
        inAirSpeedRatio_ = value;
      }
    }

    /// <summary>Field number for the "InAirDoubleJumpAcceleration" field.</summary>
    public const int InAirDoubleJumpAccelerationFieldNumber = 42;
    private float inAirDoubleJumpAcceleration_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InAirDoubleJumpAcceleration {
      get { return inAirDoubleJumpAcceleration_; }
      set {
        inAirDoubleJumpAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "InAirDoubleJumpSpeedRatio" field.</summary>
    public const int InAirDoubleJumpSpeedRatioFieldNumber = 43;
    private float inAirDoubleJumpSpeedRatio_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InAirDoubleJumpSpeedRatio {
      get { return inAirDoubleJumpSpeedRatio_; }
      set {
        inAirDoubleJumpSpeedRatio_ = value;
      }
    }

    /// <summary>Field number for the "InertiaSectorAngle" field.</summary>
    public const int InertiaSectorAngleFieldNumber = 44;
    private float inertiaSectorAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InertiaSectorAngle {
      get { return inertiaSectorAngle_; }
      set {
        inertiaSectorAngle_ = value;
      }
    }

    /// <summary>Field number for the "LandingSpeedDropRatio" field.</summary>
    public const int LandingSpeedDropRatioFieldNumber = 45;
    private float landingSpeedDropRatio_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LandingSpeedDropRatio {
      get { return landingSpeedDropRatio_; }
      set {
        landingSpeedDropRatio_ = value;
      }
    }

    /// <summary>Field number for the "SilentSpeedRation" field.</summary>
    public const int SilentSpeedRationFieldNumber = 46;
    private float silentSpeedRation_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SilentSpeedRation {
      get { return silentSpeedRation_; }
      set {
        silentSpeedRation_ = value;
      }
    }

    /// <summary>Field number for the "CrouchSpeedRation" field.</summary>
    public const int CrouchSpeedRationFieldNumber = 47;
    private float crouchSpeedRation_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrouchSpeedRation {
      get { return crouchSpeedRation_; }
      set {
        crouchSpeedRation_ = value;
      }
    }

    /// <summary>Field number for the "MaxVelocity" field.</summary>
    public const int MaxVelocityFieldNumber = 48;
    private float maxVelocity_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxVelocity {
      get { return maxVelocity_; }
      set {
        maxVelocity_ = value;
      }
    }

    /// <summary>Field number for the "MaxVelocityAimSpeedRatio" field.</summary>
    public const int MaxVelocityAimSpeedRatioFieldNumber = 49;
    private float maxVelocityAimSpeedRatio_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxVelocityAimSpeedRatio {
      get { return maxVelocityAimSpeedRatio_; }
      set {
        maxVelocityAimSpeedRatio_ = value;
      }
    }

    /// <summary>Field number for the "StopSpeedFriction" field.</summary>
    public const int StopSpeedFrictionFieldNumber = 50;
    private float stopSpeedFriction_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StopSpeedFriction {
      get { return stopSpeedFriction_; }
      set {
        stopSpeedFriction_ = value;
      }
    }

    /// <summary>Field number for the "CrouchStopSpeedFriction" field.</summary>
    public const int CrouchStopSpeedFrictionFieldNumber = 51;
    private float crouchStopSpeedFriction_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrouchStopSpeedFriction {
      get { return crouchStopSpeedFriction_; }
      set {
        crouchStopSpeedFriction_ = value;
      }
    }

    /// <summary>Field number for the "CrouchFatigueInc" field.</summary>
    public const int CrouchFatigueIncFieldNumber = 52;
    private float crouchFatigueInc_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrouchFatigueInc {
      get { return crouchFatigueInc_; }
      set {
        crouchFatigueInc_ = value;
      }
    }

    /// <summary>Field number for the "CrouchFatigueRecovery" field.</summary>
    public const int CrouchFatigueRecoveryFieldNumber = 53;
    private float crouchFatigueRecovery_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrouchFatigueRecovery {
      get { return crouchFatigueRecovery_; }
      set {
        crouchFatigueRecovery_ = value;
      }
    }

    /// <summary>Field number for the "CrouchFatigueMax" field.</summary>
    public const int CrouchFatigueMaxFieldNumber = 54;
    private float crouchFatigueMax_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrouchFatigueMax {
      get { return crouchFatigueMax_; }
      set {
        crouchFatigueMax_ = value;
      }
    }

    /// <summary>Field number for the "CrouchFatiguePunish" field.</summary>
    public const int CrouchFatiguePunishFieldNumber = 55;
    private float crouchFatiguePunish_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrouchFatiguePunish {
      get { return crouchFatiguePunish_; }
      set {
        crouchFatiguePunish_ = value;
      }
    }

    /// <summary>Field number for the "CrouchAcceleration" field.</summary>
    public const int CrouchAccelerationFieldNumber = 56;
    private float crouchAcceleration_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrouchAcceleration {
      get { return crouchAcceleration_; }
      set {
        crouchAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "CrouchFirstThrust" field.</summary>
    public const int CrouchFirstThrustFieldNumber = 57;
    private float crouchFirstThrust_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrouchFirstThrust {
      get { return crouchFirstThrust_; }
      set {
        crouchFirstThrust_ = value;
      }
    }

    /// <summary>Field number for the "FallSpeedLossThreshold" field.</summary>
    public const int FallSpeedLossThresholdFieldNumber = 58;
    private float fallSpeedLossThreshold_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FallSpeedLossThreshold {
      get { return fallSpeedLossThreshold_; }
      set {
        fallSpeedLossThreshold_ = value;
      }
    }

    /// <summary>Field number for the "FallSpeedLossRatio" field.</summary>
    public const int FallSpeedLossRatioFieldNumber = 59;
    private float fallSpeedLossRatio_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FallSpeedLossRatio {
      get { return fallSpeedLossRatio_; }
      set {
        fallSpeedLossRatio_ = value;
      }
    }

    /// <summary>Field number for the "FallFromHighThreshold" field.</summary>
    public const int FallFromHighThresholdFieldNumber = 60;
    private float fallFromHighThreshold_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FallFromHighThreshold {
      get { return fallFromHighThreshold_; }
      set {
        fallFromHighThreshold_ = value;
      }
    }

    /// <summary>Field number for the "HitDownTime" field.</summary>
    public const int HitDownTimeFieldNumber = 61;
    private float hitDownTime_;
    /// <summary>
    /// 倒地镜头表现时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitDownTime {
      get { return hitDownTime_; }
      set {
        hitDownTime_ = value;
      }
    }

    /// <summary>Field number for the "HitDownRecoveringTime" field.</summary>
    public const int HitDownRecoveringTimeFieldNumber = 62;
    private float hitDownRecoveringTime_;
    /// <summary>
    /// 被救起镜头表现时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitDownRecoveringTime {
      get { return hitDownRecoveringTime_; }
      set {
        hitDownRecoveringTime_ = value;
      }
    }

    /// <summary>Field number for the "SensitivityX1" field.</summary>
    public const int SensitivityX1FieldNumber = 63;
    private float sensitivityX1_;
    /// <summary>
    /// 灵敏度倍数X1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SensitivityX1 {
      get { return sensitivityX1_; }
      set {
        sensitivityX1_ = value;
      }
    }

    /// <summary>Field number for the "SensitivityX2" field.</summary>
    public const int SensitivityX2FieldNumber = 64;
    private float sensitivityX2_;
    /// <summary>
    /// 灵敏度倍数X2 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SensitivityX2 {
      get { return sensitivityX2_; }
      set {
        sensitivityX2_ = value;
      }
    }

    /// <summary>Field number for the "Sensitivity3P" field.</summary>
    public const int Sensitivity3PFieldNumber = 65;
    private float sensitivity3P_;
    /// <summary>
    /// 灵敏度倍数3P 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Sensitivity3P {
      get { return sensitivity3P_; }
      set {
        sensitivity3P_ = value;
      }
    }

    /// <summary>Field number for the "Sensitivity1P" field.</summary>
    public const int Sensitivity1PFieldNumber = 66;
    private float sensitivity1P_;
    /// <summary>
    /// 灵敏度倍数1P 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Sensitivity1P {
      get { return sensitivity1P_; }
      set {
        sensitivity1P_ = value;
      }
    }

    /// <summary>Field number for the "DisableAutoAimAfterKill" field.</summary>
    public const int DisableAutoAimAfterKillFieldNumber = 67;
    private float disableAutoAimAfterKill_;
    /// <summary>
    /// 杀敌后禁用辅助秒准的时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DisableAutoAimAfterKill {
      get { return disableAutoAimAfterKill_; }
      set {
        disableAutoAimAfterKill_ = value;
      }
    }

    /// <summary>Field number for the "JumpDuckHeight" field.</summary>
    public const int JumpDuckHeightFieldNumber = 68;
    private float jumpDuckHeight_;
    /// <summary>
    /// 跳蹲向上偏移高度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float JumpDuckHeight {
      get { return jumpDuckHeight_; }
      set {
        jumpDuckHeight_ = value;
      }
    }

    /// <summary>Field number for the "AttackPointOffset" field.</summary>
    public const int AttackPointOffsetFieldNumber = 69;
    private float attackPointOffset_;
    /// <summary>
    /// 攻击射线检测起始点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackPointOffset {
      get { return attackPointOffset_; }
      set {
        attackPointOffset_ = value;
      }
    }

    /// <summary>Field number for the "PVEBossAttackPointOffset" field.</summary>
    public const int PVEBossAttackPointOffsetFieldNumber = 70;
    private float pVEBossAttackPointOffset_;
    /// <summary>
    /// PVE Boss战 攻击射线检测起始点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PVEBossAttackPointOffset {
      get { return pVEBossAttackPointOffset_; }
      set {
        pVEBossAttackPointOffset_ = value;
      }
    }

    /// <summary>Field number for the "HowitzerAttackPointOffset" field.</summary>
    public const int HowitzerAttackPointOffsetFieldNumber = 71;
    private float howitzerAttackPointOffset_;
    /// <summary>
    /// 榴弹炮攻击射线检测摄像机起始点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HowitzerAttackPointOffset {
      get { return howitzerAttackPointOffset_; }
      set {
        howitzerAttackPointOffset_ = value;
      }
    }

    /// <summary>Field number for the "BulletShellsPistolSound" field.</summary>
    public const int BulletShellsPistolSoundFieldNumber = 72;
    private string bulletShellsPistolSound_ = "";
    /// <summary>
    /// 子弹落地(手枪) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BulletShellsPistolSound {
      get { return bulletShellsPistolSound_; }
      set {
        bulletShellsPistolSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BulletShellsShotgunSound" field.</summary>
    public const int BulletShellsShotgunSoundFieldNumber = 73;
    private string bulletShellsShotgunSound_ = "";
    /// <summary>
    /// 子弹落地(步枪) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BulletShellsShotgunSound {
      get { return bulletShellsShotgunSound_; }
      set {
        bulletShellsShotgunSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BulletHitSound" field.</summary>
    public const int BulletHitSoundFieldNumber = 74;
    private string bulletHitSound_ = "";
    /// <summary>
    /// 子弹击中 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BulletHitSound {
      get { return bulletHitSound_; }
      set {
        bulletHitSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MeleeHitSound" field.</summary>
    public const int MeleeHitSoundFieldNumber = 75;
    private string meleeHitSound_ = "";
    /// <summary>
    /// 近战击中 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeleeHitSound {
      get { return meleeHitSound_; }
      set {
        meleeHitSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BulletFlySound" field.</summary>
    public const int BulletFlySoundFieldNumber = 76;
    private string bulletFlySound_ = "";
    /// <summary>
    /// 子弹飞行 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BulletFlySound {
      get { return bulletFlySound_; }
      set {
        bulletFlySound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClipEmptySound" field.</summary>
    public const int ClipEmptySoundFieldNumber = 77;
    private string clipEmptySound_ = "";
    /// <summary>
    /// 空弹（卡枪没子弹） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClipEmptySound {
      get { return clipEmptySound_; }
      set {
        clipEmptySound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireEmptySound" field.</summary>
    public const int FireEmptySoundFieldNumber = 78;
    private string fireEmptySound_ = "";
    /// <summary>
    /// 低弹量提示 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireEmptySound {
      get { return fireEmptySound_; }
      set {
        fireEmptySound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireEmptyRTPCName" field.</summary>
    public const int FireEmptyRTPCNameFieldNumber = 79;
    private string fireEmptyRTPCName_ = "";
    /// <summary>
    /// 低弹量提示RTPC控制变量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireEmptyRTPCName {
      get { return fireEmptyRTPCName_; }
      set {
        fireEmptyRTPCName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeployBombTime" field.</summary>
    public const int DeployBombTimeFieldNumber = 80;
    private float deployBombTime_;
    /// <summary>
    /// 装包所需时间（基本弃用 现用模式） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeployBombTime {
      get { return deployBombTime_; }
      set {
        deployBombTime_ = value;
      }
    }

    /// <summary>Field number for the "DeployBombAnimationTime" field.</summary>
    public const int DeployBombAnimationTimeFieldNumber = 81;
    private float deployBombAnimationTime_;
    /// <summary>
    /// 装包动画时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeployBombAnimationTime {
      get { return deployBombAnimationTime_; }
      set {
        deployBombAnimationTime_ = value;
      }
    }

    /// <summary>Field number for the "DefuseBombTime" field.</summary>
    public const int DefuseBombTimeFieldNumber = 82;
    private float defuseBombTime_;
    /// <summary>
    /// 拆包所需时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefuseBombTime {
      get { return defuseBombTime_; }
      set {
        defuseBombTime_ = value;
      }
    }

    /// <summary>Field number for the "BreakeDefuseSafeTime" field.</summary>
    public const int BreakeDefuseSafeTimeFieldNumber = 83;
    private float breakeDefuseSafeTime_;
    /// <summary>
    /// 拆弹中断安全时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BreakeDefuseSafeTime {
      get { return breakeDefuseSafeTime_; }
      set {
        breakeDefuseSafeTime_ = value;
      }
    }

    /// <summary>Field number for the "BreakeDefuseAngle" field.</summary>
    public const int BreakeDefuseAngleFieldNumber = 84;
    private float breakeDefuseAngle_;
    /// <summary>
    /// 拆弹不在拆弹视角 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BreakeDefuseAngle {
      get { return breakeDefuseAngle_; }
      set {
        breakeDefuseAngle_ = value;
      }
    }

    /// <summary>Field number for the "DefuseFindAngle" field.</summary>
    public const int DefuseFindAngleFieldNumber = 85;
    private float defuseFindAngle_;
    /// <summary>
    /// 拆弹起始不能拆弹角度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefuseFindAngle {
      get { return defuseFindAngle_; }
      set {
        defuseFindAngle_ = value;
      }
    }

    /// <summary>Field number for the "SpreadMediumLevel" field.</summary>
    public const int SpreadMediumLevelFieldNumber = 86;
    private float spreadMediumLevel_;
    /// <summary>
    /// 散发中等级别 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpreadMediumLevel {
      get { return spreadMediumLevel_; }
      set {
        spreadMediumLevel_ = value;
      }
    }

    /// <summary>Field number for the "SpreadHighLevel" field.</summary>
    public const int SpreadHighLevelFieldNumber = 87;
    private float spreadHighLevel_;
    /// <summary>
    /// 散发高等级别 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpreadHighLevel {
      get { return spreadHighLevel_; }
      set {
        spreadHighLevel_ = value;
      }
    }

    /// <summary>Field number for the "ClimbLadderSpeed" field.</summary>
    public const int ClimbLadderSpeedFieldNumber = 88;
    private float climbLadderSpeed_;
    /// <summary>
    /// 爬梯子的速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ClimbLadderSpeed {
      get { return climbLadderSpeed_; }
      set {
        climbLadderSpeed_ = value;
      }
    }

    /// <summary>Field number for the "SilentClimbLadderSpeed" field.</summary>
    public const int SilentClimbLadderSpeedFieldNumber = 89;
    private float silentClimbLadderSpeed_;
    /// <summary>
    /// 静步爬梯子的速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SilentClimbLadderSpeed {
      get { return silentClimbLadderSpeed_; }
      set {
        silentClimbLadderSpeed_ = value;
      }
    }

    /// <summary>Field number for the "DuckedClimbLadderSpeed" field.</summary>
    public const int DuckedClimbLadderSpeedFieldNumber = 90;
    private float duckedClimbLadderSpeed_;
    /// <summary>
    /// 蹲下爬梯子的速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DuckedClimbLadderSpeed {
      get { return duckedClimbLadderSpeed_; }
      set {
        duckedClimbLadderSpeed_ = value;
      }
    }

    /// <summary>Field number for the "LadderSpringSpeed" field.</summary>
    public const int LadderSpringSpeedFieldNumber = 91;
    private float ladderSpringSpeed_;
    /// <summary>
    /// 梯子跳跃的弹射速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LadderSpringSpeed {
      get { return ladderSpringSpeed_; }
      set {
        ladderSpringSpeed_ = value;
      }
    }

    /// <summary>Field number for the "SpreadSpeedMove" field.</summary>
    public const int SpreadSpeedMoveFieldNumber = 92;
    private float spreadSpeedMove_;
    /// <summary>
    /// 跑动的最小散发速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpreadSpeedMove {
      get { return spreadSpeedMove_; }
      set {
        spreadSpeedMove_ = value;
      }
    }

    /// <summary>Field number for the "SpreadSpeedCrouch" field.</summary>
    public const int SpreadSpeedCrouchFieldNumber = 93;
    private float spreadSpeedCrouch_;
    /// <summary>
    /// 下蹲的最小散发速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpreadSpeedCrouch {
      get { return spreadSpeedCrouch_; }
      set {
        spreadSpeedCrouch_ = value;
      }
    }

    /// <summary>Field number for the "SpreadSpeedSlience" field.</summary>
    public const int SpreadSpeedSlienceFieldNumber = 94;
    private float spreadSpeedSlience_;
    /// <summary>
    /// 静步的最小散发速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpreadSpeedSlience {
      get { return spreadSpeedSlience_; }
      set {
        spreadSpeedSlience_ = value;
      }
    }

    /// <summary>Field number for the "FlameHitEffectName" field.</summary>
    public const int FlameHitEffectNameFieldNumber = 95;
    private string flameHitEffectName_ = "";
    /// <summary>
    /// 火焰燃燒命中特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FlameHitEffectName {
      get { return flameHitEffectName_; }
      set {
        flameHitEffectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FlameHitAnimationInterval" field.</summary>
    public const int FlameHitAnimationIntervalFieldNumber = 96;
    private float flameHitAnimationInterval_;
    /// <summary>
    /// 火焰燃烧动作间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FlameHitAnimationInterval {
      get { return flameHitAnimationInterval_; }
      set {
        flameHitAnimationInterval_ = value;
      }
    }

    /// <summary>Field number for the "RayPickUpDistance" field.</summary>
    public const int RayPickUpDistanceFieldNumber = 97;
    private float rayPickUpDistance_;
    /// <summary>
    /// 射线检测武器的距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RayPickUpDistance {
      get { return rayPickUpDistance_; }
      set {
        rayPickUpDistance_ = value;
      }
    }

    /// <summary>Field number for the "BodyPickUpDistance" field.</summary>
    public const int BodyPickUpDistanceFieldNumber = 98;
    private float bodyPickUpDistance_;
    /// <summary>
    /// 碰撞捡拾武器的距离平方 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BodyPickUpDistance {
      get { return bodyPickUpDistance_; }
      set {
        bodyPickUpDistance_ = value;
      }
    }

    /// <summary>Field number for the "BRRayPickUpDistance" field.</summary>
    public const int BRRayPickUpDistanceFieldNumber = 99;
    private float bRRayPickUpDistance_;
    /// <summary>
    /// BR射线检测武器的距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BRRayPickUpDistance {
      get { return bRRayPickUpDistance_; }
      set {
        bRRayPickUpDistance_ = value;
      }
    }

    /// <summary>Field number for the "BRBodyPickUpDistance" field.</summary>
    public const int BRBodyPickUpDistanceFieldNumber = 100;
    private float bRBodyPickUpDistance_;
    /// <summary>
    /// BR碰撞捡拾武器的距离平方 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BRBodyPickUpDistance {
      get { return bRBodyPickUpDistance_; }
      set {
        bRBodyPickUpDistance_ = value;
      }
    }

    /// <summary>Field number for the "PoisionImunity" field.</summary>
    public const int PoisionImunityFieldNumber = 101;
    private float poisionImunity_;
    /// <summary>
    /// 毒圈免疫值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PoisionImunity {
      get { return poisionImunity_; }
      set {
        poisionImunity_ = value;
      }
    }

    /// <summary>Field number for the "ShortClimbMaxHeight" field.</summary>
    public const int ShortClimbMaxHeightFieldNumber = 102;
    private float shortClimbMaxHeight_;
    /// <summary>
    /// 翻越最大高度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShortClimbMaxHeight {
      get { return shortClimbMaxHeight_; }
      set {
        shortClimbMaxHeight_ = value;
      }
    }

    /// <summary>Field number for the "ShortClimbMinHeight" field.</summary>
    public const int ShortClimbMinHeightFieldNumber = 103;
    private float shortClimbMinHeight_;
    /// <summary>
    /// 翻越最小高度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShortClimbMinHeight {
      get { return shortClimbMinHeight_; }
      set {
        shortClimbMinHeight_ = value;
      }
    }

    /// <summary>Field number for the "ShortClimbAngle" field.</summary>
    public const int ShortClimbAngleFieldNumber = 104;
    private float shortClimbAngle_;
    /// <summary>
    /// 翻越面朝墙体角度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShortClimbAngle {
      get { return shortClimbAngle_; }
      set {
        shortClimbAngle_ = value;
      }
    }

    /// <summary>Field number for the "ShortClimbInterval" field.</summary>
    public const int ShortClimbIntervalFieldNumber = 105;
    private float shortClimbInterval_;
    /// <summary>
    /// 翻越时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShortClimbInterval {
      get { return shortClimbInterval_; }
      set {
        shortClimbInterval_ = value;
      }
    }

    /// <summary>Field number for the "SlideSlopeIndex" field.</summary>
    public const int SlideSlopeIndexFieldNumber = 106;
    private float slideSlopeIndex_;
    /// <summary>
    /// 滑铲坡度系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SlideSlopeIndex {
      get { return slideSlopeIndex_; }
      set {
        slideSlopeIndex_ = value;
      }
    }

    /// <summary>Field number for the "DeadDropFunctionWeaponCount" field.</summary>
    public const int DeadDropFunctionWeaponCountFieldNumber = 107;
    private int deadDropFunctionWeaponCount_;
    /// <summary>
    /// 死亡掉落功能武器的数量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeadDropFunctionWeaponCount {
      get { return deadDropFunctionWeaponCount_; }
      set {
        deadDropFunctionWeaponCount_ = value;
      }
    }

    /// <summary>Field number for the "SprayPaintCDTime" field.</summary>
    public const int SprayPaintCDTimeFieldNumber = 108;
    private float sprayPaintCDTime_;
    /// <summary>
    /// 喷漆CD 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SprayPaintCDTime {
      get { return sprayPaintCDTime_; }
      set {
        sprayPaintCDTime_ = value;
      }
    }

    /// <summary>Field number for the "SprayPaintValidDis" field.</summary>
    public const int SprayPaintValidDisFieldNumber = 109;
    private float sprayPaintValidDis_;
    /// <summary>
    /// 喷漆最远有效距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SprayPaintValidDis {
      get { return sprayPaintValidDis_; }
      set {
        sprayPaintValidDis_ = value;
      }
    }

    /// <summary>Field number for the "MinFadeDistance" field.</summary>
    public const int MinFadeDistanceFieldNumber = 110;
    private float minFadeDistance_;
    /// <summary>
    /// 最小的透明度衰减距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinFadeDistance {
      get { return minFadeDistance_; }
      set {
        minFadeDistance_ = value;
      }
    }

    /// <summary>Field number for the "MaxShowOutlinDistance" field.</summary>
    public const int MaxShowOutlinDistanceFieldNumber = 111;
    private float maxShowOutlinDistance_;
    /// <summary>
    /// 最大的显示描边距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxShowOutlinDistance {
      get { return maxShowOutlinDistance_; }
      set {
        maxShowOutlinDistance_ = value;
      }
    }

    /// <summary>Field number for the "HorizontalSpeedLoss" field.</summary>
    public const int HorizontalSpeedLossFieldNumber = 112;
    private float horizontalSpeedLoss_;
    /// <summary>
    /// 横向速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HorizontalSpeedLoss {
      get { return horizontalSpeedLoss_; }
      set {
        horizontalSpeedLoss_ = value;
      }
    }

    /// <summary>Field number for the "LowCommonFireEffectFp" field.</summary>
    public const int LowCommonFireEffectFpFieldNumber = 113;
    private string lowCommonFireEffectFp_ = "";
    /// <summary>
    /// 低设备通用开火特效FP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LowCommonFireEffectFp {
      get { return lowCommonFireEffectFp_; }
      set {
        lowCommonFireEffectFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LowCommonFireEffectTp" field.</summary>
    public const int LowCommonFireEffectTpFieldNumber = 114;
    private string lowCommonFireEffectTp_ = "";
    /// <summary>
    /// 低设备通用开火特效TP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LowCommonFireEffectTp {
      get { return lowCommonFireEffectTp_; }
      set {
        lowCommonFireEffectTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AutoSignOtherInterval" field.</summary>
    public const int AutoSignOtherIntervalFieldNumber = 115;
    private float autoSignOtherInterval_;
    /// <summary>
    /// 自动标记他人的时间间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AutoSignOtherInterval {
      get { return autoSignOtherInterval_; }
      set {
        autoSignOtherInterval_ = value;
      }
    }

    /// <summary>Field number for the "SignedByOtherInterval" field.</summary>
    public const int SignedByOtherIntervalFieldNumber = 116;
    private float signedByOtherInterval_;
    /// <summary>
    /// 被他人自动标记的时间间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SignedByOtherInterval {
      get { return signedByOtherInterval_; }
      set {
        signedByOtherInterval_ = value;
      }
    }

    /// <summary>Field number for the "PVEHeartBeatPlay" field.</summary>
    public const int PVEHeartBeatPlayFieldNumber = 117;
    private string pVEHeartBeatPlay_ = "";
    /// <summary>
    /// PVE开始播放重伤音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PVEHeartBeatPlay {
      get { return pVEHeartBeatPlay_; }
      set {
        pVEHeartBeatPlay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PVEHeartBeatStop" field.</summary>
    public const int PVEHeartBeatStopFieldNumber = 118;
    private string pVEHeartBeatStop_ = "";
    /// <summary>
    /// PVE停止播放重伤音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PVEHeartBeatStop {
      get { return pVEHeartBeatStop_; }
      set {
        pVEHeartBeatStop_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HealthPoint" field.</summary>
    public const int HealthPointFieldNumber = 119;
    private string healthPoint_ = "";
    /// <summary>
    /// PVE_血量RTPC 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HealthPoint {
      get { return healthPoint_; }
      set {
        healthPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PVEHeartBeatPlayCD" field.</summary>
    public const int PVEHeartBeatPlayCDFieldNumber = 120;
    private float pVEHeartBeatPlayCD_;
    /// <summary>
    /// PVE播放重伤音效CD 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PVEHeartBeatPlayCD {
      get { return pVEHeartBeatPlayCD_; }
      set {
        pVEHeartBeatPlayCD_ = value;
      }
    }

    /// <summary>Field number for the "PVEStartPlayHeartBeatThreshold" field.</summary>
    public const int PVEStartPlayHeartBeatThresholdFieldNumber = 121;
    private float pVEStartPlayHeartBeatThreshold_;
    /// <summary>
    /// PVE血量低于该阈值时开始播放重伤音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PVEStartPlayHeartBeatThreshold {
      get { return pVEStartPlayHeartBeatThreshold_; }
      set {
        pVEStartPlayHeartBeatThreshold_ = value;
      }
    }

    /// <summary>Field number for the "PVEHeartBeatPlayLifeTime" field.</summary>
    public const int PVEHeartBeatPlayLifeTimeFieldNumber = 122;
    private float pVEHeartBeatPlayLifeTime_;
    /// <summary>
    /// PVE重伤音效存在时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PVEHeartBeatPlayLifeTime {
      get { return pVEHeartBeatPlayLifeTime_; }
      set {
        pVEHeartBeatPlayLifeTime_ = value;
      }
    }

    /// <summary>Field number for the "DamageSound1P" field.</summary>
    public const int DamageSound1PFieldNumber = 123;
    private string damageSound1P_ = "";
    /// <summary>
    /// Fp受击音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DamageSound1P {
      get { return damageSound1P_; }
      set {
        damageSound1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "KillKingSound" field.</summary>
    public const int KillKingSoundFieldNumber = 124;
    private string killKingSound_ = "";
    /// <summary>
    /// 击杀王音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KillKingSound {
      get { return killKingSound_; }
      set {
        killKingSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "KillKingSoundDelayPlay" field.</summary>
    public const int KillKingSoundDelayPlayFieldNumber = 125;
    private float killKingSoundDelayPlay_;
    /// <summary>
    /// 击杀王音效延迟多长播放 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float KillKingSoundDelayPlay {
      get { return killKingSoundDelayPlay_; }
      set {
        killKingSoundDelayPlay_ = value;
      }
    }

    /// <summary>Field number for the "BR_HpShieldBreakSound" field.</summary>
    public const int BRHpShieldBreakSoundFieldNumber = 126;
    private string bRHpShieldBreakSound_ = "";
    /// <summary>
    /// BR模式护甲板碎甲音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BRHpShieldBreakSound {
      get { return bRHpShieldBreakSound_; }
      set {
        bRHpShieldBreakSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BR_Heartbeat_Play_Sound" field.</summary>
    public const int BRHeartbeatPlaySoundFieldNumber = 127;
    private string bRHeartbeatPlaySound_ = "";
    /// <summary>
    /// BR模式播放扣血音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BRHeartbeatPlaySound {
      get { return bRHeartbeatPlaySound_; }
      set {
        bRHeartbeatPlaySound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BR_Heartbeat_Stop_Sound" field.</summary>
    public const int BRHeartbeatStopSoundFieldNumber = 128;
    private string bRHeartbeatStopSound_ = "";
    /// <summary>
    /// BR模式停止扣血音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BRHeartbeatStopSound {
      get { return bRHeartbeatStopSound_; }
      set {
        bRHeartbeatStopSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SprintScaleSpeed" field.</summary>
    public const int SprintScaleSpeedFieldNumber = 129;
    private float sprintScaleSpeed_;
    /// <summary>
    /// 疾跑速度加成 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SprintScaleSpeed {
      get { return sprintScaleSpeed_; }
      set {
        sprintScaleSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AirBorneBoost" field.</summary>
    public const int AirBorneBoostFieldNumber = 130;
    private float airBorneBoost_;
    /// <summary>
    /// 空降时喷射背包力度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AirBorneBoost {
      get { return airBorneBoost_; }
      set {
        airBorneBoost_ = value;
      }
    }

    /// <summary>Field number for the "AirBorneNoParashuteSpeed" field.</summary>
    public const int AirBorneNoParashuteSpeedFieldNumber = 131;
    private float airBorneNoParashuteSpeed_;
    /// <summary>
    /// 未开降落伞时最大速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AirBorneNoParashuteSpeed {
      get { return airBorneNoParashuteSpeed_; }
      set {
        airBorneNoParashuteSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AirBorneParashuteSpeed" field.</summary>
    public const int AirBorneParashuteSpeedFieldNumber = 132;
    private float airBorneParashuteSpeed_;
    /// <summary>
    /// 开降落伞时最大速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AirBorneParashuteSpeed {
      get { return airBorneParashuteSpeed_; }
      set {
        airBorneParashuteSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AirBorneRollAngleMax" field.</summary>
    public const int AirBorneRollAngleMaxFieldNumber = 133;
    private float airBorneRollAngleMax_;
    /// <summary>
    /// 自动开伞时滚动角极值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AirBorneRollAngleMax {
      get { return airBorneRollAngleMax_; }
      set {
        airBorneRollAngleMax_ = value;
      }
    }

    /// <summary>Field number for the "AirBorneAutoParashuteHeight" field.</summary>
    public const int AirBorneAutoParashuteHeightFieldNumber = 134;
    private float airBorneAutoParashuteHeight_;
    /// <summary>
    /// 自动开伞时高度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AirBorneAutoParashuteHeight {
      get { return airBorneAutoParashuteHeight_; }
      set {
        airBorneAutoParashuteHeight_ = value;
      }
    }

    /// <summary>Field number for the "AirBorneHighSpeedThreshold" field.</summary>
    public const int AirBorneHighSpeedThresholdFieldNumber = 135;
    private float airBorneHighSpeedThreshold_;
    /// <summary>
    /// 高速滞空状态极值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AirBorneHighSpeedThreshold {
      get { return airBorneHighSpeedThreshold_; }
      set {
        airBorneHighSpeedThreshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPawnPersistenceConfigComponentData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPawnPersistenceConfigComponentData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorldCameraSocketName != other.WorldCameraSocketName) return false;
      if (FPCameraDefaultFOV != other.FPCameraDefaultFOV) return false;
      if (WorldCameraDefaultFOV != other.WorldCameraDefaultFOV) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TPSCameraXRotation, other.TPSCameraXRotation)) return false;
      if (!object.Equals(TPSCameraOffSet, other.TPSCameraOffSet)) return false;
      if (!object.Equals(FPCameraOffSet, other.FPCameraOffSet)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VerticalRoationLimitMin, other.VerticalRoationLimitMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VerticalRoationLimitMax, other.VerticalRoationLimitMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HorizontalRoationLimitMin, other.HorizontalRoationLimitMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HorizontalRoationLimitMax, other.HorizontalRoationLimitMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeathMatchAllowedMovingRange, other.DeathMatchAllowedMovingRange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FootDamageRate, other.FootDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HandDamageRate, other.HandDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BodyDamageRate, other.BodyDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BellyDamageRate, other.BellyDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeadDamageRate, other.HeadDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShieldDamageRate, other.ShieldDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrFootDamageRate, other.BrFootDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrHandDamageRate, other.BrHandDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrBodyDamageRate, other.BrBodyDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrBellyDamageRate, other.BrBellyDamageRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrHeadDamageRate, other.BrHeadDamageRate)) return false;
      if (DropWeaponSound != other.DropWeaponSound) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Friction, other.Friction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSpeed, other.MaxSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FallDownMaxSpeed, other.FallDownMaxSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinSpeed, other.MinSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(JumpInitYSpeed, other.JumpInitYSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DoubleJumpInitYSpeed, other.DoubleJumpInitYSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FallingDamgeSpeedThreshold, other.FallingDamgeSpeedThreshold)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FallingDamgeSpeedPerInc, other.FallingDamgeSpeedPerInc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Gravity, other.Gravity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GravityCrescendo, other.GravityCrescendo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GravityDecrescendo, other.GravityDecrescendo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrouchingSpeedScale, other.CrouchingSpeedScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OnLandAcceleration, other.OnLandAcceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OnLandSprintAcceleration, other.OnLandSprintAcceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SlideThrust, other.SlideThrust)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SlideFriction, other.SlideFriction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InAirAcceleration, other.InAirAcceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InAirSpeedRatio, other.InAirSpeedRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InAirDoubleJumpAcceleration, other.InAirDoubleJumpAcceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InAirDoubleJumpSpeedRatio, other.InAirDoubleJumpSpeedRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InertiaSectorAngle, other.InertiaSectorAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LandingSpeedDropRatio, other.LandingSpeedDropRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SilentSpeedRation, other.SilentSpeedRation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrouchSpeedRation, other.CrouchSpeedRation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxVelocity, other.MaxVelocity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxVelocityAimSpeedRatio, other.MaxVelocityAimSpeedRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StopSpeedFriction, other.StopSpeedFriction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrouchStopSpeedFriction, other.CrouchStopSpeedFriction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrouchFatigueInc, other.CrouchFatigueInc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrouchFatigueRecovery, other.CrouchFatigueRecovery)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrouchFatigueMax, other.CrouchFatigueMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrouchFatiguePunish, other.CrouchFatiguePunish)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrouchAcceleration, other.CrouchAcceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrouchFirstThrust, other.CrouchFirstThrust)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FallSpeedLossThreshold, other.FallSpeedLossThreshold)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FallSpeedLossRatio, other.FallSpeedLossRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FallFromHighThreshold, other.FallFromHighThreshold)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitDownTime, other.HitDownTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitDownRecoveringTime, other.HitDownRecoveringTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SensitivityX1, other.SensitivityX1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SensitivityX2, other.SensitivityX2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sensitivity3P, other.Sensitivity3P)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sensitivity1P, other.Sensitivity1P)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisableAutoAimAfterKill, other.DisableAutoAimAfterKill)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(JumpDuckHeight, other.JumpDuckHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackPointOffset, other.AttackPointOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PVEBossAttackPointOffset, other.PVEBossAttackPointOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HowitzerAttackPointOffset, other.HowitzerAttackPointOffset)) return false;
      if (BulletShellsPistolSound != other.BulletShellsPistolSound) return false;
      if (BulletShellsShotgunSound != other.BulletShellsShotgunSound) return false;
      if (BulletHitSound != other.BulletHitSound) return false;
      if (MeleeHitSound != other.MeleeHitSound) return false;
      if (BulletFlySound != other.BulletFlySound) return false;
      if (ClipEmptySound != other.ClipEmptySound) return false;
      if (FireEmptySound != other.FireEmptySound) return false;
      if (FireEmptyRTPCName != other.FireEmptyRTPCName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeployBombTime, other.DeployBombTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeployBombAnimationTime, other.DeployBombAnimationTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefuseBombTime, other.DefuseBombTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BreakeDefuseSafeTime, other.BreakeDefuseSafeTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BreakeDefuseAngle, other.BreakeDefuseAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefuseFindAngle, other.DefuseFindAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpreadMediumLevel, other.SpreadMediumLevel)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpreadHighLevel, other.SpreadHighLevel)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ClimbLadderSpeed, other.ClimbLadderSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SilentClimbLadderSpeed, other.SilentClimbLadderSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DuckedClimbLadderSpeed, other.DuckedClimbLadderSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LadderSpringSpeed, other.LadderSpringSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpreadSpeedMove, other.SpreadSpeedMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpreadSpeedCrouch, other.SpreadSpeedCrouch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpreadSpeedSlience, other.SpreadSpeedSlience)) return false;
      if (FlameHitEffectName != other.FlameHitEffectName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FlameHitAnimationInterval, other.FlameHitAnimationInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RayPickUpDistance, other.RayPickUpDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BodyPickUpDistance, other.BodyPickUpDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BRRayPickUpDistance, other.BRRayPickUpDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BRBodyPickUpDistance, other.BRBodyPickUpDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PoisionImunity, other.PoisionImunity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShortClimbMaxHeight, other.ShortClimbMaxHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShortClimbMinHeight, other.ShortClimbMinHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShortClimbAngle, other.ShortClimbAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShortClimbInterval, other.ShortClimbInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SlideSlopeIndex, other.SlideSlopeIndex)) return false;
      if (DeadDropFunctionWeaponCount != other.DeadDropFunctionWeaponCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SprayPaintCDTime, other.SprayPaintCDTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SprayPaintValidDis, other.SprayPaintValidDis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinFadeDistance, other.MinFadeDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxShowOutlinDistance, other.MaxShowOutlinDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HorizontalSpeedLoss, other.HorizontalSpeedLoss)) return false;
      if (LowCommonFireEffectFp != other.LowCommonFireEffectFp) return false;
      if (LowCommonFireEffectTp != other.LowCommonFireEffectTp) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AutoSignOtherInterval, other.AutoSignOtherInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SignedByOtherInterval, other.SignedByOtherInterval)) return false;
      if (PVEHeartBeatPlay != other.PVEHeartBeatPlay) return false;
      if (PVEHeartBeatStop != other.PVEHeartBeatStop) return false;
      if (HealthPoint != other.HealthPoint) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PVEHeartBeatPlayCD, other.PVEHeartBeatPlayCD)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PVEStartPlayHeartBeatThreshold, other.PVEStartPlayHeartBeatThreshold)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PVEHeartBeatPlayLifeTime, other.PVEHeartBeatPlayLifeTime)) return false;
      if (DamageSound1P != other.DamageSound1P) return false;
      if (KillKingSound != other.KillKingSound) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(KillKingSoundDelayPlay, other.KillKingSoundDelayPlay)) return false;
      if (BRHpShieldBreakSound != other.BRHpShieldBreakSound) return false;
      if (BRHeartbeatPlaySound != other.BRHeartbeatPlaySound) return false;
      if (BRHeartbeatStopSound != other.BRHeartbeatStopSound) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SprintScaleSpeed, other.SprintScaleSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AirBorneBoost, other.AirBorneBoost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AirBorneNoParashuteSpeed, other.AirBorneNoParashuteSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AirBorneParashuteSpeed, other.AirBorneParashuteSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AirBorneRollAngleMax, other.AirBorneRollAngleMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AirBorneAutoParashuteHeight, other.AirBorneAutoParashuteHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AirBorneHighSpeedThreshold, other.AirBorneHighSpeedThreshold)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorldCameraSocketName.Length != 0) hash ^= WorldCameraSocketName.GetHashCode();
      if (FPCameraDefaultFOV != 0) hash ^= FPCameraDefaultFOV.GetHashCode();
      if (WorldCameraDefaultFOV != 0) hash ^= WorldCameraDefaultFOV.GetHashCode();
      if (TPSCameraXRotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TPSCameraXRotation);
      if (tPSCameraOffSet_ != null) hash ^= TPSCameraOffSet.GetHashCode();
      if (fPCameraOffSet_ != null) hash ^= FPCameraOffSet.GetHashCode();
      if (VerticalRoationLimitMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VerticalRoationLimitMin);
      if (VerticalRoationLimitMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VerticalRoationLimitMax);
      if (HorizontalRoationLimitMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HorizontalRoationLimitMin);
      if (HorizontalRoationLimitMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HorizontalRoationLimitMax);
      if (DeathMatchAllowedMovingRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeathMatchAllowedMovingRange);
      if (FootDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FootDamageRate);
      if (HandDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HandDamageRate);
      if (BodyDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BodyDamageRate);
      if (BellyDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BellyDamageRate);
      if (HeadDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeadDamageRate);
      if (ShieldDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShieldDamageRate);
      if (BrFootDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrFootDamageRate);
      if (BrHandDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrHandDamageRate);
      if (BrBodyDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrBodyDamageRate);
      if (BrBellyDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrBellyDamageRate);
      if (BrHeadDamageRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrHeadDamageRate);
      if (DropWeaponSound.Length != 0) hash ^= DropWeaponSound.GetHashCode();
      if (Friction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Friction);
      if (MaxSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSpeed);
      if (FallDownMaxSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FallDownMaxSpeed);
      if (MinSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinSpeed);
      if (JumpInitYSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(JumpInitYSpeed);
      if (DoubleJumpInitYSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DoubleJumpInitYSpeed);
      if (FallingDamgeSpeedThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FallingDamgeSpeedThreshold);
      if (FallingDamgeSpeedPerInc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FallingDamgeSpeedPerInc);
      if (Gravity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Gravity);
      if (GravityCrescendo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GravityCrescendo);
      if (GravityDecrescendo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GravityDecrescendo);
      if (CrouchingSpeedScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrouchingSpeedScale);
      if (OnLandAcceleration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OnLandAcceleration);
      if (OnLandSprintAcceleration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OnLandSprintAcceleration);
      if (SlideThrust != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SlideThrust);
      if (SlideFriction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SlideFriction);
      if (InAirAcceleration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InAirAcceleration);
      if (InAirSpeedRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InAirSpeedRatio);
      if (InAirDoubleJumpAcceleration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InAirDoubleJumpAcceleration);
      if (InAirDoubleJumpSpeedRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InAirDoubleJumpSpeedRatio);
      if (InertiaSectorAngle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InertiaSectorAngle);
      if (LandingSpeedDropRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LandingSpeedDropRatio);
      if (SilentSpeedRation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SilentSpeedRation);
      if (CrouchSpeedRation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrouchSpeedRation);
      if (MaxVelocity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxVelocity);
      if (MaxVelocityAimSpeedRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxVelocityAimSpeedRatio);
      if (StopSpeedFriction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StopSpeedFriction);
      if (CrouchStopSpeedFriction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrouchStopSpeedFriction);
      if (CrouchFatigueInc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrouchFatigueInc);
      if (CrouchFatigueRecovery != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrouchFatigueRecovery);
      if (CrouchFatigueMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrouchFatigueMax);
      if (CrouchFatiguePunish != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrouchFatiguePunish);
      if (CrouchAcceleration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrouchAcceleration);
      if (CrouchFirstThrust != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrouchFirstThrust);
      if (FallSpeedLossThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FallSpeedLossThreshold);
      if (FallSpeedLossRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FallSpeedLossRatio);
      if (FallFromHighThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FallFromHighThreshold);
      if (HitDownTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitDownTime);
      if (HitDownRecoveringTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitDownRecoveringTime);
      if (SensitivityX1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SensitivityX1);
      if (SensitivityX2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SensitivityX2);
      if (Sensitivity3P != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sensitivity3P);
      if (Sensitivity1P != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sensitivity1P);
      if (DisableAutoAimAfterKill != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisableAutoAimAfterKill);
      if (JumpDuckHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(JumpDuckHeight);
      if (AttackPointOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackPointOffset);
      if (PVEBossAttackPointOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PVEBossAttackPointOffset);
      if (HowitzerAttackPointOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HowitzerAttackPointOffset);
      if (BulletShellsPistolSound.Length != 0) hash ^= BulletShellsPistolSound.GetHashCode();
      if (BulletShellsShotgunSound.Length != 0) hash ^= BulletShellsShotgunSound.GetHashCode();
      if (BulletHitSound.Length != 0) hash ^= BulletHitSound.GetHashCode();
      if (MeleeHitSound.Length != 0) hash ^= MeleeHitSound.GetHashCode();
      if (BulletFlySound.Length != 0) hash ^= BulletFlySound.GetHashCode();
      if (ClipEmptySound.Length != 0) hash ^= ClipEmptySound.GetHashCode();
      if (FireEmptySound.Length != 0) hash ^= FireEmptySound.GetHashCode();
      if (FireEmptyRTPCName.Length != 0) hash ^= FireEmptyRTPCName.GetHashCode();
      if (DeployBombTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeployBombTime);
      if (DeployBombAnimationTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeployBombAnimationTime);
      if (DefuseBombTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefuseBombTime);
      if (BreakeDefuseSafeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BreakeDefuseSafeTime);
      if (BreakeDefuseAngle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BreakeDefuseAngle);
      if (DefuseFindAngle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefuseFindAngle);
      if (SpreadMediumLevel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpreadMediumLevel);
      if (SpreadHighLevel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpreadHighLevel);
      if (ClimbLadderSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ClimbLadderSpeed);
      if (SilentClimbLadderSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SilentClimbLadderSpeed);
      if (DuckedClimbLadderSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DuckedClimbLadderSpeed);
      if (LadderSpringSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LadderSpringSpeed);
      if (SpreadSpeedMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpreadSpeedMove);
      if (SpreadSpeedCrouch != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpreadSpeedCrouch);
      if (SpreadSpeedSlience != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpreadSpeedSlience);
      if (FlameHitEffectName.Length != 0) hash ^= FlameHitEffectName.GetHashCode();
      if (FlameHitAnimationInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FlameHitAnimationInterval);
      if (RayPickUpDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RayPickUpDistance);
      if (BodyPickUpDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BodyPickUpDistance);
      if (BRRayPickUpDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BRRayPickUpDistance);
      if (BRBodyPickUpDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BRBodyPickUpDistance);
      if (PoisionImunity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PoisionImunity);
      if (ShortClimbMaxHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShortClimbMaxHeight);
      if (ShortClimbMinHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShortClimbMinHeight);
      if (ShortClimbAngle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShortClimbAngle);
      if (ShortClimbInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShortClimbInterval);
      if (SlideSlopeIndex != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SlideSlopeIndex);
      if (DeadDropFunctionWeaponCount != 0) hash ^= DeadDropFunctionWeaponCount.GetHashCode();
      if (SprayPaintCDTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SprayPaintCDTime);
      if (SprayPaintValidDis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SprayPaintValidDis);
      if (MinFadeDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinFadeDistance);
      if (MaxShowOutlinDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxShowOutlinDistance);
      if (HorizontalSpeedLoss != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HorizontalSpeedLoss);
      if (LowCommonFireEffectFp.Length != 0) hash ^= LowCommonFireEffectFp.GetHashCode();
      if (LowCommonFireEffectTp.Length != 0) hash ^= LowCommonFireEffectTp.GetHashCode();
      if (AutoSignOtherInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AutoSignOtherInterval);
      if (SignedByOtherInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SignedByOtherInterval);
      if (PVEHeartBeatPlay.Length != 0) hash ^= PVEHeartBeatPlay.GetHashCode();
      if (PVEHeartBeatStop.Length != 0) hash ^= PVEHeartBeatStop.GetHashCode();
      if (HealthPoint.Length != 0) hash ^= HealthPoint.GetHashCode();
      if (PVEHeartBeatPlayCD != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PVEHeartBeatPlayCD);
      if (PVEStartPlayHeartBeatThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PVEStartPlayHeartBeatThreshold);
      if (PVEHeartBeatPlayLifeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PVEHeartBeatPlayLifeTime);
      if (DamageSound1P.Length != 0) hash ^= DamageSound1P.GetHashCode();
      if (KillKingSound.Length != 0) hash ^= KillKingSound.GetHashCode();
      if (KillKingSoundDelayPlay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(KillKingSoundDelayPlay);
      if (BRHpShieldBreakSound.Length != 0) hash ^= BRHpShieldBreakSound.GetHashCode();
      if (BRHeartbeatPlaySound.Length != 0) hash ^= BRHeartbeatPlaySound.GetHashCode();
      if (BRHeartbeatStopSound.Length != 0) hash ^= BRHeartbeatStopSound.GetHashCode();
      if (SprintScaleSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SprintScaleSpeed);
      if (AirBorneBoost != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AirBorneBoost);
      if (AirBorneNoParashuteSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AirBorneNoParashuteSpeed);
      if (AirBorneParashuteSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AirBorneParashuteSpeed);
      if (AirBorneRollAngleMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AirBorneRollAngleMax);
      if (AirBorneAutoParashuteHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AirBorneAutoParashuteHeight);
      if (AirBorneHighSpeedThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AirBorneHighSpeedThreshold);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorldCameraSocketName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WorldCameraSocketName);
      }
      if (FPCameraDefaultFOV != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FPCameraDefaultFOV);
      }
      if (WorldCameraDefaultFOV != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WorldCameraDefaultFOV);
      }
      if (TPSCameraXRotation != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(TPSCameraXRotation);
      }
      if (tPSCameraOffSet_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TPSCameraOffSet);
      }
      if (fPCameraOffSet_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FPCameraOffSet);
      }
      if (VerticalRoationLimitMin != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(VerticalRoationLimitMin);
      }
      if (VerticalRoationLimitMax != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(VerticalRoationLimitMax);
      }
      if (HorizontalRoationLimitMin != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(HorizontalRoationLimitMin);
      }
      if (HorizontalRoationLimitMax != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(HorizontalRoationLimitMax);
      }
      if (DeathMatchAllowedMovingRange != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(DeathMatchAllowedMovingRange);
      }
      if (FootDamageRate != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(FootDamageRate);
      }
      if (HandDamageRate != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(HandDamageRate);
      }
      if (BodyDamageRate != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(BodyDamageRate);
      }
      if (BellyDamageRate != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(BellyDamageRate);
      }
      if (HeadDamageRate != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(HeadDamageRate);
      }
      if (ShieldDamageRate != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(ShieldDamageRate);
      }
      if (BrFootDamageRate != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(BrFootDamageRate);
      }
      if (BrHandDamageRate != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(BrHandDamageRate);
      }
      if (BrBodyDamageRate != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(BrBodyDamageRate);
      }
      if (BrBellyDamageRate != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(BrBellyDamageRate);
      }
      if (BrHeadDamageRate != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(BrHeadDamageRate);
      }
      if (DropWeaponSound.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(DropWeaponSound);
      }
      if (Friction != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(Friction);
      }
      if (MaxSpeed != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(MaxSpeed);
      }
      if (FallDownMaxSpeed != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(FallDownMaxSpeed);
      }
      if (MinSpeed != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(MinSpeed);
      }
      if (JumpInitYSpeed != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(JumpInitYSpeed);
      }
      if (DoubleJumpInitYSpeed != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(DoubleJumpInitYSpeed);
      }
      if (FallingDamgeSpeedThreshold != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(FallingDamgeSpeedThreshold);
      }
      if (FallingDamgeSpeedPerInc != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(FallingDamgeSpeedPerInc);
      }
      if (Gravity != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(Gravity);
      }
      if (GravityCrescendo != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(GravityCrescendo);
      }
      if (GravityDecrescendo != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(GravityDecrescendo);
      }
      if (CrouchingSpeedScale != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(CrouchingSpeedScale);
      }
      if (OnLandAcceleration != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(OnLandAcceleration);
      }
      if (OnLandSprintAcceleration != 0F) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(OnLandSprintAcceleration);
      }
      if (SlideThrust != 0F) {
        output.WriteRawTag(181, 2);
        output.WriteFloat(SlideThrust);
      }
      if (SlideFriction != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(SlideFriction);
      }
      if (InAirAcceleration != 0F) {
        output.WriteRawTag(197, 2);
        output.WriteFloat(InAirAcceleration);
      }
      if (InAirSpeedRatio != 0F) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(InAirSpeedRatio);
      }
      if (InAirDoubleJumpAcceleration != 0F) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(InAirDoubleJumpAcceleration);
      }
      if (InAirDoubleJumpSpeedRatio != 0F) {
        output.WriteRawTag(221, 2);
        output.WriteFloat(InAirDoubleJumpSpeedRatio);
      }
      if (InertiaSectorAngle != 0F) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(InertiaSectorAngle);
      }
      if (LandingSpeedDropRatio != 0F) {
        output.WriteRawTag(237, 2);
        output.WriteFloat(LandingSpeedDropRatio);
      }
      if (SilentSpeedRation != 0F) {
        output.WriteRawTag(245, 2);
        output.WriteFloat(SilentSpeedRation);
      }
      if (CrouchSpeedRation != 0F) {
        output.WriteRawTag(253, 2);
        output.WriteFloat(CrouchSpeedRation);
      }
      if (MaxVelocity != 0F) {
        output.WriteRawTag(133, 3);
        output.WriteFloat(MaxVelocity);
      }
      if (MaxVelocityAimSpeedRatio != 0F) {
        output.WriteRawTag(141, 3);
        output.WriteFloat(MaxVelocityAimSpeedRatio);
      }
      if (StopSpeedFriction != 0F) {
        output.WriteRawTag(149, 3);
        output.WriteFloat(StopSpeedFriction);
      }
      if (CrouchStopSpeedFriction != 0F) {
        output.WriteRawTag(157, 3);
        output.WriteFloat(CrouchStopSpeedFriction);
      }
      if (CrouchFatigueInc != 0F) {
        output.WriteRawTag(165, 3);
        output.WriteFloat(CrouchFatigueInc);
      }
      if (CrouchFatigueRecovery != 0F) {
        output.WriteRawTag(173, 3);
        output.WriteFloat(CrouchFatigueRecovery);
      }
      if (CrouchFatigueMax != 0F) {
        output.WriteRawTag(181, 3);
        output.WriteFloat(CrouchFatigueMax);
      }
      if (CrouchFatiguePunish != 0F) {
        output.WriteRawTag(189, 3);
        output.WriteFloat(CrouchFatiguePunish);
      }
      if (CrouchAcceleration != 0F) {
        output.WriteRawTag(197, 3);
        output.WriteFloat(CrouchAcceleration);
      }
      if (CrouchFirstThrust != 0F) {
        output.WriteRawTag(205, 3);
        output.WriteFloat(CrouchFirstThrust);
      }
      if (FallSpeedLossThreshold != 0F) {
        output.WriteRawTag(213, 3);
        output.WriteFloat(FallSpeedLossThreshold);
      }
      if (FallSpeedLossRatio != 0F) {
        output.WriteRawTag(221, 3);
        output.WriteFloat(FallSpeedLossRatio);
      }
      if (FallFromHighThreshold != 0F) {
        output.WriteRawTag(229, 3);
        output.WriteFloat(FallFromHighThreshold);
      }
      if (HitDownTime != 0F) {
        output.WriteRawTag(237, 3);
        output.WriteFloat(HitDownTime);
      }
      if (HitDownRecoveringTime != 0F) {
        output.WriteRawTag(245, 3);
        output.WriteFloat(HitDownRecoveringTime);
      }
      if (SensitivityX1 != 0F) {
        output.WriteRawTag(253, 3);
        output.WriteFloat(SensitivityX1);
      }
      if (SensitivityX2 != 0F) {
        output.WriteRawTag(133, 4);
        output.WriteFloat(SensitivityX2);
      }
      if (Sensitivity3P != 0F) {
        output.WriteRawTag(141, 4);
        output.WriteFloat(Sensitivity3P);
      }
      if (Sensitivity1P != 0F) {
        output.WriteRawTag(149, 4);
        output.WriteFloat(Sensitivity1P);
      }
      if (DisableAutoAimAfterKill != 0F) {
        output.WriteRawTag(157, 4);
        output.WriteFloat(DisableAutoAimAfterKill);
      }
      if (JumpDuckHeight != 0F) {
        output.WriteRawTag(165, 4);
        output.WriteFloat(JumpDuckHeight);
      }
      if (AttackPointOffset != 0F) {
        output.WriteRawTag(173, 4);
        output.WriteFloat(AttackPointOffset);
      }
      if (PVEBossAttackPointOffset != 0F) {
        output.WriteRawTag(181, 4);
        output.WriteFloat(PVEBossAttackPointOffset);
      }
      if (HowitzerAttackPointOffset != 0F) {
        output.WriteRawTag(189, 4);
        output.WriteFloat(HowitzerAttackPointOffset);
      }
      if (BulletShellsPistolSound.Length != 0) {
        output.WriteRawTag(194, 4);
        output.WriteString(BulletShellsPistolSound);
      }
      if (BulletShellsShotgunSound.Length != 0) {
        output.WriteRawTag(202, 4);
        output.WriteString(BulletShellsShotgunSound);
      }
      if (BulletHitSound.Length != 0) {
        output.WriteRawTag(210, 4);
        output.WriteString(BulletHitSound);
      }
      if (MeleeHitSound.Length != 0) {
        output.WriteRawTag(218, 4);
        output.WriteString(MeleeHitSound);
      }
      if (BulletFlySound.Length != 0) {
        output.WriteRawTag(226, 4);
        output.WriteString(BulletFlySound);
      }
      if (ClipEmptySound.Length != 0) {
        output.WriteRawTag(234, 4);
        output.WriteString(ClipEmptySound);
      }
      if (FireEmptySound.Length != 0) {
        output.WriteRawTag(242, 4);
        output.WriteString(FireEmptySound);
      }
      if (FireEmptyRTPCName.Length != 0) {
        output.WriteRawTag(250, 4);
        output.WriteString(FireEmptyRTPCName);
      }
      if (DeployBombTime != 0F) {
        output.WriteRawTag(133, 5);
        output.WriteFloat(DeployBombTime);
      }
      if (DeployBombAnimationTime != 0F) {
        output.WriteRawTag(141, 5);
        output.WriteFloat(DeployBombAnimationTime);
      }
      if (DefuseBombTime != 0F) {
        output.WriteRawTag(149, 5);
        output.WriteFloat(DefuseBombTime);
      }
      if (BreakeDefuseSafeTime != 0F) {
        output.WriteRawTag(157, 5);
        output.WriteFloat(BreakeDefuseSafeTime);
      }
      if (BreakeDefuseAngle != 0F) {
        output.WriteRawTag(165, 5);
        output.WriteFloat(BreakeDefuseAngle);
      }
      if (DefuseFindAngle != 0F) {
        output.WriteRawTag(173, 5);
        output.WriteFloat(DefuseFindAngle);
      }
      if (SpreadMediumLevel != 0F) {
        output.WriteRawTag(181, 5);
        output.WriteFloat(SpreadMediumLevel);
      }
      if (SpreadHighLevel != 0F) {
        output.WriteRawTag(189, 5);
        output.WriteFloat(SpreadHighLevel);
      }
      if (ClimbLadderSpeed != 0F) {
        output.WriteRawTag(197, 5);
        output.WriteFloat(ClimbLadderSpeed);
      }
      if (SilentClimbLadderSpeed != 0F) {
        output.WriteRawTag(205, 5);
        output.WriteFloat(SilentClimbLadderSpeed);
      }
      if (DuckedClimbLadderSpeed != 0F) {
        output.WriteRawTag(213, 5);
        output.WriteFloat(DuckedClimbLadderSpeed);
      }
      if (LadderSpringSpeed != 0F) {
        output.WriteRawTag(221, 5);
        output.WriteFloat(LadderSpringSpeed);
      }
      if (SpreadSpeedMove != 0F) {
        output.WriteRawTag(229, 5);
        output.WriteFloat(SpreadSpeedMove);
      }
      if (SpreadSpeedCrouch != 0F) {
        output.WriteRawTag(237, 5);
        output.WriteFloat(SpreadSpeedCrouch);
      }
      if (SpreadSpeedSlience != 0F) {
        output.WriteRawTag(245, 5);
        output.WriteFloat(SpreadSpeedSlience);
      }
      if (FlameHitEffectName.Length != 0) {
        output.WriteRawTag(250, 5);
        output.WriteString(FlameHitEffectName);
      }
      if (FlameHitAnimationInterval != 0F) {
        output.WriteRawTag(133, 6);
        output.WriteFloat(FlameHitAnimationInterval);
      }
      if (RayPickUpDistance != 0F) {
        output.WriteRawTag(141, 6);
        output.WriteFloat(RayPickUpDistance);
      }
      if (BodyPickUpDistance != 0F) {
        output.WriteRawTag(149, 6);
        output.WriteFloat(BodyPickUpDistance);
      }
      if (BRRayPickUpDistance != 0F) {
        output.WriteRawTag(157, 6);
        output.WriteFloat(BRRayPickUpDistance);
      }
      if (BRBodyPickUpDistance != 0F) {
        output.WriteRawTag(165, 6);
        output.WriteFloat(BRBodyPickUpDistance);
      }
      if (PoisionImunity != 0F) {
        output.WriteRawTag(173, 6);
        output.WriteFloat(PoisionImunity);
      }
      if (ShortClimbMaxHeight != 0F) {
        output.WriteRawTag(181, 6);
        output.WriteFloat(ShortClimbMaxHeight);
      }
      if (ShortClimbMinHeight != 0F) {
        output.WriteRawTag(189, 6);
        output.WriteFloat(ShortClimbMinHeight);
      }
      if (ShortClimbAngle != 0F) {
        output.WriteRawTag(197, 6);
        output.WriteFloat(ShortClimbAngle);
      }
      if (ShortClimbInterval != 0F) {
        output.WriteRawTag(205, 6);
        output.WriteFloat(ShortClimbInterval);
      }
      if (SlideSlopeIndex != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(SlideSlopeIndex);
      }
      if (DeadDropFunctionWeaponCount != 0) {
        output.WriteRawTag(216, 6);
        output.WriteInt32(DeadDropFunctionWeaponCount);
      }
      if (SprayPaintCDTime != 0F) {
        output.WriteRawTag(229, 6);
        output.WriteFloat(SprayPaintCDTime);
      }
      if (SprayPaintValidDis != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(SprayPaintValidDis);
      }
      if (MinFadeDistance != 0F) {
        output.WriteRawTag(245, 6);
        output.WriteFloat(MinFadeDistance);
      }
      if (MaxShowOutlinDistance != 0F) {
        output.WriteRawTag(253, 6);
        output.WriteFloat(MaxShowOutlinDistance);
      }
      if (HorizontalSpeedLoss != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(HorizontalSpeedLoss);
      }
      if (LowCommonFireEffectFp.Length != 0) {
        output.WriteRawTag(138, 7);
        output.WriteString(LowCommonFireEffectFp);
      }
      if (LowCommonFireEffectTp.Length != 0) {
        output.WriteRawTag(146, 7);
        output.WriteString(LowCommonFireEffectTp);
      }
      if (AutoSignOtherInterval != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(AutoSignOtherInterval);
      }
      if (SignedByOtherInterval != 0F) {
        output.WriteRawTag(165, 7);
        output.WriteFloat(SignedByOtherInterval);
      }
      if (PVEHeartBeatPlay.Length != 0) {
        output.WriteRawTag(170, 7);
        output.WriteString(PVEHeartBeatPlay);
      }
      if (PVEHeartBeatStop.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(PVEHeartBeatStop);
      }
      if (HealthPoint.Length != 0) {
        output.WriteRawTag(186, 7);
        output.WriteString(HealthPoint);
      }
      if (PVEHeartBeatPlayCD != 0F) {
        output.WriteRawTag(197, 7);
        output.WriteFloat(PVEHeartBeatPlayCD);
      }
      if (PVEStartPlayHeartBeatThreshold != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(PVEStartPlayHeartBeatThreshold);
      }
      if (PVEHeartBeatPlayLifeTime != 0F) {
        output.WriteRawTag(213, 7);
        output.WriteFloat(PVEHeartBeatPlayLifeTime);
      }
      if (DamageSound1P.Length != 0) {
        output.WriteRawTag(218, 7);
        output.WriteString(DamageSound1P);
      }
      if (KillKingSound.Length != 0) {
        output.WriteRawTag(226, 7);
        output.WriteString(KillKingSound);
      }
      if (KillKingSoundDelayPlay != 0F) {
        output.WriteRawTag(237, 7);
        output.WriteFloat(KillKingSoundDelayPlay);
      }
      if (BRHpShieldBreakSound.Length != 0) {
        output.WriteRawTag(242, 7);
        output.WriteString(BRHpShieldBreakSound);
      }
      if (BRHeartbeatPlaySound.Length != 0) {
        output.WriteRawTag(250, 7);
        output.WriteString(BRHeartbeatPlaySound);
      }
      if (BRHeartbeatStopSound.Length != 0) {
        output.WriteRawTag(130, 8);
        output.WriteString(BRHeartbeatStopSound);
      }
      if (SprintScaleSpeed != 0F) {
        output.WriteRawTag(141, 8);
        output.WriteFloat(SprintScaleSpeed);
      }
      if (AirBorneBoost != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(AirBorneBoost);
      }
      if (AirBorneNoParashuteSpeed != 0F) {
        output.WriteRawTag(157, 8);
        output.WriteFloat(AirBorneNoParashuteSpeed);
      }
      if (AirBorneParashuteSpeed != 0F) {
        output.WriteRawTag(165, 8);
        output.WriteFloat(AirBorneParashuteSpeed);
      }
      if (AirBorneRollAngleMax != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(AirBorneRollAngleMax);
      }
      if (AirBorneAutoParashuteHeight != 0F) {
        output.WriteRawTag(181, 8);
        output.WriteFloat(AirBorneAutoParashuteHeight);
      }
      if (AirBorneHighSpeedThreshold != 0F) {
        output.WriteRawTag(189, 8);
        output.WriteFloat(AirBorneHighSpeedThreshold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorldCameraSocketName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorldCameraSocketName);
      }
      if (FPCameraDefaultFOV != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FPCameraDefaultFOV);
      }
      if (WorldCameraDefaultFOV != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorldCameraDefaultFOV);
      }
      if (TPSCameraXRotation != 0F) {
        size += 1 + 4;
      }
      if (tPSCameraOffSet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TPSCameraOffSet);
      }
      if (fPCameraOffSet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FPCameraOffSet);
      }
      if (VerticalRoationLimitMin != 0F) {
        size += 1 + 4;
      }
      if (VerticalRoationLimitMax != 0F) {
        size += 1 + 4;
      }
      if (HorizontalRoationLimitMin != 0F) {
        size += 1 + 4;
      }
      if (HorizontalRoationLimitMax != 0F) {
        size += 1 + 4;
      }
      if (DeathMatchAllowedMovingRange != 0F) {
        size += 1 + 4;
      }
      if (FootDamageRate != 0F) {
        size += 1 + 4;
      }
      if (HandDamageRate != 0F) {
        size += 1 + 4;
      }
      if (BodyDamageRate != 0F) {
        size += 1 + 4;
      }
      if (BellyDamageRate != 0F) {
        size += 1 + 4;
      }
      if (HeadDamageRate != 0F) {
        size += 2 + 4;
      }
      if (ShieldDamageRate != 0F) {
        size += 2 + 4;
      }
      if (BrFootDamageRate != 0F) {
        size += 2 + 4;
      }
      if (BrHandDamageRate != 0F) {
        size += 2 + 4;
      }
      if (BrBodyDamageRate != 0F) {
        size += 2 + 4;
      }
      if (BrBellyDamageRate != 0F) {
        size += 2 + 4;
      }
      if (BrHeadDamageRate != 0F) {
        size += 2 + 4;
      }
      if (DropWeaponSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DropWeaponSound);
      }
      if (Friction != 0F) {
        size += 2 + 4;
      }
      if (MaxSpeed != 0F) {
        size += 2 + 4;
      }
      if (FallDownMaxSpeed != 0F) {
        size += 2 + 4;
      }
      if (MinSpeed != 0F) {
        size += 2 + 4;
      }
      if (JumpInitYSpeed != 0F) {
        size += 2 + 4;
      }
      if (DoubleJumpInitYSpeed != 0F) {
        size += 2 + 4;
      }
      if (FallingDamgeSpeedThreshold != 0F) {
        size += 2 + 4;
      }
      if (FallingDamgeSpeedPerInc != 0F) {
        size += 2 + 4;
      }
      if (Gravity != 0F) {
        size += 2 + 4;
      }
      if (GravityCrescendo != 0F) {
        size += 2 + 4;
      }
      if (GravityDecrescendo != 0F) {
        size += 2 + 4;
      }
      if (CrouchingSpeedScale != 0F) {
        size += 2 + 4;
      }
      if (OnLandAcceleration != 0F) {
        size += 2 + 4;
      }
      if (OnLandSprintAcceleration != 0F) {
        size += 2 + 4;
      }
      if (SlideThrust != 0F) {
        size += 2 + 4;
      }
      if (SlideFriction != 0F) {
        size += 2 + 4;
      }
      if (InAirAcceleration != 0F) {
        size += 2 + 4;
      }
      if (InAirSpeedRatio != 0F) {
        size += 2 + 4;
      }
      if (InAirDoubleJumpAcceleration != 0F) {
        size += 2 + 4;
      }
      if (InAirDoubleJumpSpeedRatio != 0F) {
        size += 2 + 4;
      }
      if (InertiaSectorAngle != 0F) {
        size += 2 + 4;
      }
      if (LandingSpeedDropRatio != 0F) {
        size += 2 + 4;
      }
      if (SilentSpeedRation != 0F) {
        size += 2 + 4;
      }
      if (CrouchSpeedRation != 0F) {
        size += 2 + 4;
      }
      if (MaxVelocity != 0F) {
        size += 2 + 4;
      }
      if (MaxVelocityAimSpeedRatio != 0F) {
        size += 2 + 4;
      }
      if (StopSpeedFriction != 0F) {
        size += 2 + 4;
      }
      if (CrouchStopSpeedFriction != 0F) {
        size += 2 + 4;
      }
      if (CrouchFatigueInc != 0F) {
        size += 2 + 4;
      }
      if (CrouchFatigueRecovery != 0F) {
        size += 2 + 4;
      }
      if (CrouchFatigueMax != 0F) {
        size += 2 + 4;
      }
      if (CrouchFatiguePunish != 0F) {
        size += 2 + 4;
      }
      if (CrouchAcceleration != 0F) {
        size += 2 + 4;
      }
      if (CrouchFirstThrust != 0F) {
        size += 2 + 4;
      }
      if (FallSpeedLossThreshold != 0F) {
        size += 2 + 4;
      }
      if (FallSpeedLossRatio != 0F) {
        size += 2 + 4;
      }
      if (FallFromHighThreshold != 0F) {
        size += 2 + 4;
      }
      if (HitDownTime != 0F) {
        size += 2 + 4;
      }
      if (HitDownRecoveringTime != 0F) {
        size += 2 + 4;
      }
      if (SensitivityX1 != 0F) {
        size += 2 + 4;
      }
      if (SensitivityX2 != 0F) {
        size += 2 + 4;
      }
      if (Sensitivity3P != 0F) {
        size += 2 + 4;
      }
      if (Sensitivity1P != 0F) {
        size += 2 + 4;
      }
      if (DisableAutoAimAfterKill != 0F) {
        size += 2 + 4;
      }
      if (JumpDuckHeight != 0F) {
        size += 2 + 4;
      }
      if (AttackPointOffset != 0F) {
        size += 2 + 4;
      }
      if (PVEBossAttackPointOffset != 0F) {
        size += 2 + 4;
      }
      if (HowitzerAttackPointOffset != 0F) {
        size += 2 + 4;
      }
      if (BulletShellsPistolSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BulletShellsPistolSound);
      }
      if (BulletShellsShotgunSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BulletShellsShotgunSound);
      }
      if (BulletHitSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BulletHitSound);
      }
      if (MeleeHitSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MeleeHitSound);
      }
      if (BulletFlySound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BulletFlySound);
      }
      if (ClipEmptySound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClipEmptySound);
      }
      if (FireEmptySound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FireEmptySound);
      }
      if (FireEmptyRTPCName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FireEmptyRTPCName);
      }
      if (DeployBombTime != 0F) {
        size += 2 + 4;
      }
      if (DeployBombAnimationTime != 0F) {
        size += 2 + 4;
      }
      if (DefuseBombTime != 0F) {
        size += 2 + 4;
      }
      if (BreakeDefuseSafeTime != 0F) {
        size += 2 + 4;
      }
      if (BreakeDefuseAngle != 0F) {
        size += 2 + 4;
      }
      if (DefuseFindAngle != 0F) {
        size += 2 + 4;
      }
      if (SpreadMediumLevel != 0F) {
        size += 2 + 4;
      }
      if (SpreadHighLevel != 0F) {
        size += 2 + 4;
      }
      if (ClimbLadderSpeed != 0F) {
        size += 2 + 4;
      }
      if (SilentClimbLadderSpeed != 0F) {
        size += 2 + 4;
      }
      if (DuckedClimbLadderSpeed != 0F) {
        size += 2 + 4;
      }
      if (LadderSpringSpeed != 0F) {
        size += 2 + 4;
      }
      if (SpreadSpeedMove != 0F) {
        size += 2 + 4;
      }
      if (SpreadSpeedCrouch != 0F) {
        size += 2 + 4;
      }
      if (SpreadSpeedSlience != 0F) {
        size += 2 + 4;
      }
      if (FlameHitEffectName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FlameHitEffectName);
      }
      if (FlameHitAnimationInterval != 0F) {
        size += 2 + 4;
      }
      if (RayPickUpDistance != 0F) {
        size += 2 + 4;
      }
      if (BodyPickUpDistance != 0F) {
        size += 2 + 4;
      }
      if (BRRayPickUpDistance != 0F) {
        size += 2 + 4;
      }
      if (BRBodyPickUpDistance != 0F) {
        size += 2 + 4;
      }
      if (PoisionImunity != 0F) {
        size += 2 + 4;
      }
      if (ShortClimbMaxHeight != 0F) {
        size += 2 + 4;
      }
      if (ShortClimbMinHeight != 0F) {
        size += 2 + 4;
      }
      if (ShortClimbAngle != 0F) {
        size += 2 + 4;
      }
      if (ShortClimbInterval != 0F) {
        size += 2 + 4;
      }
      if (SlideSlopeIndex != 0F) {
        size += 2 + 4;
      }
      if (DeadDropFunctionWeaponCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeadDropFunctionWeaponCount);
      }
      if (SprayPaintCDTime != 0F) {
        size += 2 + 4;
      }
      if (SprayPaintValidDis != 0F) {
        size += 2 + 4;
      }
      if (MinFadeDistance != 0F) {
        size += 2 + 4;
      }
      if (MaxShowOutlinDistance != 0F) {
        size += 2 + 4;
      }
      if (HorizontalSpeedLoss != 0F) {
        size += 2 + 4;
      }
      if (LowCommonFireEffectFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LowCommonFireEffectFp);
      }
      if (LowCommonFireEffectTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LowCommonFireEffectTp);
      }
      if (AutoSignOtherInterval != 0F) {
        size += 2 + 4;
      }
      if (SignedByOtherInterval != 0F) {
        size += 2 + 4;
      }
      if (PVEHeartBeatPlay.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PVEHeartBeatPlay);
      }
      if (PVEHeartBeatStop.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PVEHeartBeatStop);
      }
      if (HealthPoint.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HealthPoint);
      }
      if (PVEHeartBeatPlayCD != 0F) {
        size += 2 + 4;
      }
      if (PVEStartPlayHeartBeatThreshold != 0F) {
        size += 2 + 4;
      }
      if (PVEHeartBeatPlayLifeTime != 0F) {
        size += 2 + 4;
      }
      if (DamageSound1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DamageSound1P);
      }
      if (KillKingSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(KillKingSound);
      }
      if (KillKingSoundDelayPlay != 0F) {
        size += 2 + 4;
      }
      if (BRHpShieldBreakSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BRHpShieldBreakSound);
      }
      if (BRHeartbeatPlaySound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BRHeartbeatPlaySound);
      }
      if (BRHeartbeatStopSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BRHeartbeatStopSound);
      }
      if (SprintScaleSpeed != 0F) {
        size += 2 + 4;
      }
      if (AirBorneBoost != 0F) {
        size += 2 + 4;
      }
      if (AirBorneNoParashuteSpeed != 0F) {
        size += 2 + 4;
      }
      if (AirBorneParashuteSpeed != 0F) {
        size += 2 + 4;
      }
      if (AirBorneRollAngleMax != 0F) {
        size += 2 + 4;
      }
      if (AirBorneAutoParashuteHeight != 0F) {
        size += 2 + 4;
      }
      if (AirBorneHighSpeedThreshold != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPawnPersistenceConfigComponentData other) {
      if (other == null) {
        return;
      }
      if (other.WorldCameraSocketName.Length != 0) {
        WorldCameraSocketName = other.WorldCameraSocketName;
      }
      if (other.FPCameraDefaultFOV != 0) {
        FPCameraDefaultFOV = other.FPCameraDefaultFOV;
      }
      if (other.WorldCameraDefaultFOV != 0) {
        WorldCameraDefaultFOV = other.WorldCameraDefaultFOV;
      }
      if (other.TPSCameraXRotation != 0F) {
        TPSCameraXRotation = other.TPSCameraXRotation;
      }
      if (other.tPSCameraOffSet_ != null) {
        if (tPSCameraOffSet_ == null) {
          TPSCameraOffSet = new global::D11.Pjson.PbVector3();
        }
        TPSCameraOffSet.MergeFrom(other.TPSCameraOffSet);
      }
      if (other.fPCameraOffSet_ != null) {
        if (fPCameraOffSet_ == null) {
          FPCameraOffSet = new global::D11.Pjson.PbVector3();
        }
        FPCameraOffSet.MergeFrom(other.FPCameraOffSet);
      }
      if (other.VerticalRoationLimitMin != 0F) {
        VerticalRoationLimitMin = other.VerticalRoationLimitMin;
      }
      if (other.VerticalRoationLimitMax != 0F) {
        VerticalRoationLimitMax = other.VerticalRoationLimitMax;
      }
      if (other.HorizontalRoationLimitMin != 0F) {
        HorizontalRoationLimitMin = other.HorizontalRoationLimitMin;
      }
      if (other.HorizontalRoationLimitMax != 0F) {
        HorizontalRoationLimitMax = other.HorizontalRoationLimitMax;
      }
      if (other.DeathMatchAllowedMovingRange != 0F) {
        DeathMatchAllowedMovingRange = other.DeathMatchAllowedMovingRange;
      }
      if (other.FootDamageRate != 0F) {
        FootDamageRate = other.FootDamageRate;
      }
      if (other.HandDamageRate != 0F) {
        HandDamageRate = other.HandDamageRate;
      }
      if (other.BodyDamageRate != 0F) {
        BodyDamageRate = other.BodyDamageRate;
      }
      if (other.BellyDamageRate != 0F) {
        BellyDamageRate = other.BellyDamageRate;
      }
      if (other.HeadDamageRate != 0F) {
        HeadDamageRate = other.HeadDamageRate;
      }
      if (other.ShieldDamageRate != 0F) {
        ShieldDamageRate = other.ShieldDamageRate;
      }
      if (other.BrFootDamageRate != 0F) {
        BrFootDamageRate = other.BrFootDamageRate;
      }
      if (other.BrHandDamageRate != 0F) {
        BrHandDamageRate = other.BrHandDamageRate;
      }
      if (other.BrBodyDamageRate != 0F) {
        BrBodyDamageRate = other.BrBodyDamageRate;
      }
      if (other.BrBellyDamageRate != 0F) {
        BrBellyDamageRate = other.BrBellyDamageRate;
      }
      if (other.BrHeadDamageRate != 0F) {
        BrHeadDamageRate = other.BrHeadDamageRate;
      }
      if (other.DropWeaponSound.Length != 0) {
        DropWeaponSound = other.DropWeaponSound;
      }
      if (other.Friction != 0F) {
        Friction = other.Friction;
      }
      if (other.MaxSpeed != 0F) {
        MaxSpeed = other.MaxSpeed;
      }
      if (other.FallDownMaxSpeed != 0F) {
        FallDownMaxSpeed = other.FallDownMaxSpeed;
      }
      if (other.MinSpeed != 0F) {
        MinSpeed = other.MinSpeed;
      }
      if (other.JumpInitYSpeed != 0F) {
        JumpInitYSpeed = other.JumpInitYSpeed;
      }
      if (other.DoubleJumpInitYSpeed != 0F) {
        DoubleJumpInitYSpeed = other.DoubleJumpInitYSpeed;
      }
      if (other.FallingDamgeSpeedThreshold != 0F) {
        FallingDamgeSpeedThreshold = other.FallingDamgeSpeedThreshold;
      }
      if (other.FallingDamgeSpeedPerInc != 0F) {
        FallingDamgeSpeedPerInc = other.FallingDamgeSpeedPerInc;
      }
      if (other.Gravity != 0F) {
        Gravity = other.Gravity;
      }
      if (other.GravityCrescendo != 0F) {
        GravityCrescendo = other.GravityCrescendo;
      }
      if (other.GravityDecrescendo != 0F) {
        GravityDecrescendo = other.GravityDecrescendo;
      }
      if (other.CrouchingSpeedScale != 0F) {
        CrouchingSpeedScale = other.CrouchingSpeedScale;
      }
      if (other.OnLandAcceleration != 0F) {
        OnLandAcceleration = other.OnLandAcceleration;
      }
      if (other.OnLandSprintAcceleration != 0F) {
        OnLandSprintAcceleration = other.OnLandSprintAcceleration;
      }
      if (other.SlideThrust != 0F) {
        SlideThrust = other.SlideThrust;
      }
      if (other.SlideFriction != 0F) {
        SlideFriction = other.SlideFriction;
      }
      if (other.InAirAcceleration != 0F) {
        InAirAcceleration = other.InAirAcceleration;
      }
      if (other.InAirSpeedRatio != 0F) {
        InAirSpeedRatio = other.InAirSpeedRatio;
      }
      if (other.InAirDoubleJumpAcceleration != 0F) {
        InAirDoubleJumpAcceleration = other.InAirDoubleJumpAcceleration;
      }
      if (other.InAirDoubleJumpSpeedRatio != 0F) {
        InAirDoubleJumpSpeedRatio = other.InAirDoubleJumpSpeedRatio;
      }
      if (other.InertiaSectorAngle != 0F) {
        InertiaSectorAngle = other.InertiaSectorAngle;
      }
      if (other.LandingSpeedDropRatio != 0F) {
        LandingSpeedDropRatio = other.LandingSpeedDropRatio;
      }
      if (other.SilentSpeedRation != 0F) {
        SilentSpeedRation = other.SilentSpeedRation;
      }
      if (other.CrouchSpeedRation != 0F) {
        CrouchSpeedRation = other.CrouchSpeedRation;
      }
      if (other.MaxVelocity != 0F) {
        MaxVelocity = other.MaxVelocity;
      }
      if (other.MaxVelocityAimSpeedRatio != 0F) {
        MaxVelocityAimSpeedRatio = other.MaxVelocityAimSpeedRatio;
      }
      if (other.StopSpeedFriction != 0F) {
        StopSpeedFriction = other.StopSpeedFriction;
      }
      if (other.CrouchStopSpeedFriction != 0F) {
        CrouchStopSpeedFriction = other.CrouchStopSpeedFriction;
      }
      if (other.CrouchFatigueInc != 0F) {
        CrouchFatigueInc = other.CrouchFatigueInc;
      }
      if (other.CrouchFatigueRecovery != 0F) {
        CrouchFatigueRecovery = other.CrouchFatigueRecovery;
      }
      if (other.CrouchFatigueMax != 0F) {
        CrouchFatigueMax = other.CrouchFatigueMax;
      }
      if (other.CrouchFatiguePunish != 0F) {
        CrouchFatiguePunish = other.CrouchFatiguePunish;
      }
      if (other.CrouchAcceleration != 0F) {
        CrouchAcceleration = other.CrouchAcceleration;
      }
      if (other.CrouchFirstThrust != 0F) {
        CrouchFirstThrust = other.CrouchFirstThrust;
      }
      if (other.FallSpeedLossThreshold != 0F) {
        FallSpeedLossThreshold = other.FallSpeedLossThreshold;
      }
      if (other.FallSpeedLossRatio != 0F) {
        FallSpeedLossRatio = other.FallSpeedLossRatio;
      }
      if (other.FallFromHighThreshold != 0F) {
        FallFromHighThreshold = other.FallFromHighThreshold;
      }
      if (other.HitDownTime != 0F) {
        HitDownTime = other.HitDownTime;
      }
      if (other.HitDownRecoveringTime != 0F) {
        HitDownRecoveringTime = other.HitDownRecoveringTime;
      }
      if (other.SensitivityX1 != 0F) {
        SensitivityX1 = other.SensitivityX1;
      }
      if (other.SensitivityX2 != 0F) {
        SensitivityX2 = other.SensitivityX2;
      }
      if (other.Sensitivity3P != 0F) {
        Sensitivity3P = other.Sensitivity3P;
      }
      if (other.Sensitivity1P != 0F) {
        Sensitivity1P = other.Sensitivity1P;
      }
      if (other.DisableAutoAimAfterKill != 0F) {
        DisableAutoAimAfterKill = other.DisableAutoAimAfterKill;
      }
      if (other.JumpDuckHeight != 0F) {
        JumpDuckHeight = other.JumpDuckHeight;
      }
      if (other.AttackPointOffset != 0F) {
        AttackPointOffset = other.AttackPointOffset;
      }
      if (other.PVEBossAttackPointOffset != 0F) {
        PVEBossAttackPointOffset = other.PVEBossAttackPointOffset;
      }
      if (other.HowitzerAttackPointOffset != 0F) {
        HowitzerAttackPointOffset = other.HowitzerAttackPointOffset;
      }
      if (other.BulletShellsPistolSound.Length != 0) {
        BulletShellsPistolSound = other.BulletShellsPistolSound;
      }
      if (other.BulletShellsShotgunSound.Length != 0) {
        BulletShellsShotgunSound = other.BulletShellsShotgunSound;
      }
      if (other.BulletHitSound.Length != 0) {
        BulletHitSound = other.BulletHitSound;
      }
      if (other.MeleeHitSound.Length != 0) {
        MeleeHitSound = other.MeleeHitSound;
      }
      if (other.BulletFlySound.Length != 0) {
        BulletFlySound = other.BulletFlySound;
      }
      if (other.ClipEmptySound.Length != 0) {
        ClipEmptySound = other.ClipEmptySound;
      }
      if (other.FireEmptySound.Length != 0) {
        FireEmptySound = other.FireEmptySound;
      }
      if (other.FireEmptyRTPCName.Length != 0) {
        FireEmptyRTPCName = other.FireEmptyRTPCName;
      }
      if (other.DeployBombTime != 0F) {
        DeployBombTime = other.DeployBombTime;
      }
      if (other.DeployBombAnimationTime != 0F) {
        DeployBombAnimationTime = other.DeployBombAnimationTime;
      }
      if (other.DefuseBombTime != 0F) {
        DefuseBombTime = other.DefuseBombTime;
      }
      if (other.BreakeDefuseSafeTime != 0F) {
        BreakeDefuseSafeTime = other.BreakeDefuseSafeTime;
      }
      if (other.BreakeDefuseAngle != 0F) {
        BreakeDefuseAngle = other.BreakeDefuseAngle;
      }
      if (other.DefuseFindAngle != 0F) {
        DefuseFindAngle = other.DefuseFindAngle;
      }
      if (other.SpreadMediumLevel != 0F) {
        SpreadMediumLevel = other.SpreadMediumLevel;
      }
      if (other.SpreadHighLevel != 0F) {
        SpreadHighLevel = other.SpreadHighLevel;
      }
      if (other.ClimbLadderSpeed != 0F) {
        ClimbLadderSpeed = other.ClimbLadderSpeed;
      }
      if (other.SilentClimbLadderSpeed != 0F) {
        SilentClimbLadderSpeed = other.SilentClimbLadderSpeed;
      }
      if (other.DuckedClimbLadderSpeed != 0F) {
        DuckedClimbLadderSpeed = other.DuckedClimbLadderSpeed;
      }
      if (other.LadderSpringSpeed != 0F) {
        LadderSpringSpeed = other.LadderSpringSpeed;
      }
      if (other.SpreadSpeedMove != 0F) {
        SpreadSpeedMove = other.SpreadSpeedMove;
      }
      if (other.SpreadSpeedCrouch != 0F) {
        SpreadSpeedCrouch = other.SpreadSpeedCrouch;
      }
      if (other.SpreadSpeedSlience != 0F) {
        SpreadSpeedSlience = other.SpreadSpeedSlience;
      }
      if (other.FlameHitEffectName.Length != 0) {
        FlameHitEffectName = other.FlameHitEffectName;
      }
      if (other.FlameHitAnimationInterval != 0F) {
        FlameHitAnimationInterval = other.FlameHitAnimationInterval;
      }
      if (other.RayPickUpDistance != 0F) {
        RayPickUpDistance = other.RayPickUpDistance;
      }
      if (other.BodyPickUpDistance != 0F) {
        BodyPickUpDistance = other.BodyPickUpDistance;
      }
      if (other.BRRayPickUpDistance != 0F) {
        BRRayPickUpDistance = other.BRRayPickUpDistance;
      }
      if (other.BRBodyPickUpDistance != 0F) {
        BRBodyPickUpDistance = other.BRBodyPickUpDistance;
      }
      if (other.PoisionImunity != 0F) {
        PoisionImunity = other.PoisionImunity;
      }
      if (other.ShortClimbMaxHeight != 0F) {
        ShortClimbMaxHeight = other.ShortClimbMaxHeight;
      }
      if (other.ShortClimbMinHeight != 0F) {
        ShortClimbMinHeight = other.ShortClimbMinHeight;
      }
      if (other.ShortClimbAngle != 0F) {
        ShortClimbAngle = other.ShortClimbAngle;
      }
      if (other.ShortClimbInterval != 0F) {
        ShortClimbInterval = other.ShortClimbInterval;
      }
      if (other.SlideSlopeIndex != 0F) {
        SlideSlopeIndex = other.SlideSlopeIndex;
      }
      if (other.DeadDropFunctionWeaponCount != 0) {
        DeadDropFunctionWeaponCount = other.DeadDropFunctionWeaponCount;
      }
      if (other.SprayPaintCDTime != 0F) {
        SprayPaintCDTime = other.SprayPaintCDTime;
      }
      if (other.SprayPaintValidDis != 0F) {
        SprayPaintValidDis = other.SprayPaintValidDis;
      }
      if (other.MinFadeDistance != 0F) {
        MinFadeDistance = other.MinFadeDistance;
      }
      if (other.MaxShowOutlinDistance != 0F) {
        MaxShowOutlinDistance = other.MaxShowOutlinDistance;
      }
      if (other.HorizontalSpeedLoss != 0F) {
        HorizontalSpeedLoss = other.HorizontalSpeedLoss;
      }
      if (other.LowCommonFireEffectFp.Length != 0) {
        LowCommonFireEffectFp = other.LowCommonFireEffectFp;
      }
      if (other.LowCommonFireEffectTp.Length != 0) {
        LowCommonFireEffectTp = other.LowCommonFireEffectTp;
      }
      if (other.AutoSignOtherInterval != 0F) {
        AutoSignOtherInterval = other.AutoSignOtherInterval;
      }
      if (other.SignedByOtherInterval != 0F) {
        SignedByOtherInterval = other.SignedByOtherInterval;
      }
      if (other.PVEHeartBeatPlay.Length != 0) {
        PVEHeartBeatPlay = other.PVEHeartBeatPlay;
      }
      if (other.PVEHeartBeatStop.Length != 0) {
        PVEHeartBeatStop = other.PVEHeartBeatStop;
      }
      if (other.HealthPoint.Length != 0) {
        HealthPoint = other.HealthPoint;
      }
      if (other.PVEHeartBeatPlayCD != 0F) {
        PVEHeartBeatPlayCD = other.PVEHeartBeatPlayCD;
      }
      if (other.PVEStartPlayHeartBeatThreshold != 0F) {
        PVEStartPlayHeartBeatThreshold = other.PVEStartPlayHeartBeatThreshold;
      }
      if (other.PVEHeartBeatPlayLifeTime != 0F) {
        PVEHeartBeatPlayLifeTime = other.PVEHeartBeatPlayLifeTime;
      }
      if (other.DamageSound1P.Length != 0) {
        DamageSound1P = other.DamageSound1P;
      }
      if (other.KillKingSound.Length != 0) {
        KillKingSound = other.KillKingSound;
      }
      if (other.KillKingSoundDelayPlay != 0F) {
        KillKingSoundDelayPlay = other.KillKingSoundDelayPlay;
      }
      if (other.BRHpShieldBreakSound.Length != 0) {
        BRHpShieldBreakSound = other.BRHpShieldBreakSound;
      }
      if (other.BRHeartbeatPlaySound.Length != 0) {
        BRHeartbeatPlaySound = other.BRHeartbeatPlaySound;
      }
      if (other.BRHeartbeatStopSound.Length != 0) {
        BRHeartbeatStopSound = other.BRHeartbeatStopSound;
      }
      if (other.SprintScaleSpeed != 0F) {
        SprintScaleSpeed = other.SprintScaleSpeed;
      }
      if (other.AirBorneBoost != 0F) {
        AirBorneBoost = other.AirBorneBoost;
      }
      if (other.AirBorneNoParashuteSpeed != 0F) {
        AirBorneNoParashuteSpeed = other.AirBorneNoParashuteSpeed;
      }
      if (other.AirBorneParashuteSpeed != 0F) {
        AirBorneParashuteSpeed = other.AirBorneParashuteSpeed;
      }
      if (other.AirBorneRollAngleMax != 0F) {
        AirBorneRollAngleMax = other.AirBorneRollAngleMax;
      }
      if (other.AirBorneAutoParashuteHeight != 0F) {
        AirBorneAutoParashuteHeight = other.AirBorneAutoParashuteHeight;
      }
      if (other.AirBorneHighSpeedThreshold != 0F) {
        AirBorneHighSpeedThreshold = other.AirBorneHighSpeedThreshold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            WorldCameraSocketName = input.ReadString();
            break;
          }
          case 16: {
            FPCameraDefaultFOV = input.ReadInt32();
            break;
          }
          case 24: {
            WorldCameraDefaultFOV = input.ReadInt32();
            break;
          }
          case 37: {
            TPSCameraXRotation = input.ReadFloat();
            break;
          }
          case 42: {
            if (tPSCameraOffSet_ == null) {
              TPSCameraOffSet = new global::D11.Pjson.PbVector3();
            }
            input.ReadMessage(TPSCameraOffSet);
            break;
          }
          case 50: {
            if (fPCameraOffSet_ == null) {
              FPCameraOffSet = new global::D11.Pjson.PbVector3();
            }
            input.ReadMessage(FPCameraOffSet);
            break;
          }
          case 61: {
            VerticalRoationLimitMin = input.ReadFloat();
            break;
          }
          case 69: {
            VerticalRoationLimitMax = input.ReadFloat();
            break;
          }
          case 77: {
            HorizontalRoationLimitMin = input.ReadFloat();
            break;
          }
          case 85: {
            HorizontalRoationLimitMax = input.ReadFloat();
            break;
          }
          case 93: {
            DeathMatchAllowedMovingRange = input.ReadFloat();
            break;
          }
          case 101: {
            FootDamageRate = input.ReadFloat();
            break;
          }
          case 109: {
            HandDamageRate = input.ReadFloat();
            break;
          }
          case 117: {
            BodyDamageRate = input.ReadFloat();
            break;
          }
          case 125: {
            BellyDamageRate = input.ReadFloat();
            break;
          }
          case 133: {
            HeadDamageRate = input.ReadFloat();
            break;
          }
          case 141: {
            ShieldDamageRate = input.ReadFloat();
            break;
          }
          case 149: {
            BrFootDamageRate = input.ReadFloat();
            break;
          }
          case 157: {
            BrHandDamageRate = input.ReadFloat();
            break;
          }
          case 165: {
            BrBodyDamageRate = input.ReadFloat();
            break;
          }
          case 173: {
            BrBellyDamageRate = input.ReadFloat();
            break;
          }
          case 181: {
            BrHeadDamageRate = input.ReadFloat();
            break;
          }
          case 186: {
            DropWeaponSound = input.ReadString();
            break;
          }
          case 197: {
            Friction = input.ReadFloat();
            break;
          }
          case 205: {
            MaxSpeed = input.ReadFloat();
            break;
          }
          case 213: {
            FallDownMaxSpeed = input.ReadFloat();
            break;
          }
          case 221: {
            MinSpeed = input.ReadFloat();
            break;
          }
          case 229: {
            JumpInitYSpeed = input.ReadFloat();
            break;
          }
          case 237: {
            DoubleJumpInitYSpeed = input.ReadFloat();
            break;
          }
          case 245: {
            FallingDamgeSpeedThreshold = input.ReadFloat();
            break;
          }
          case 253: {
            FallingDamgeSpeedPerInc = input.ReadFloat();
            break;
          }
          case 261: {
            Gravity = input.ReadFloat();
            break;
          }
          case 269: {
            GravityCrescendo = input.ReadFloat();
            break;
          }
          case 277: {
            GravityDecrescendo = input.ReadFloat();
            break;
          }
          case 285: {
            CrouchingSpeedScale = input.ReadFloat();
            break;
          }
          case 293: {
            OnLandAcceleration = input.ReadFloat();
            break;
          }
          case 301: {
            OnLandSprintAcceleration = input.ReadFloat();
            break;
          }
          case 309: {
            SlideThrust = input.ReadFloat();
            break;
          }
          case 317: {
            SlideFriction = input.ReadFloat();
            break;
          }
          case 325: {
            InAirAcceleration = input.ReadFloat();
            break;
          }
          case 333: {
            InAirSpeedRatio = input.ReadFloat();
            break;
          }
          case 341: {
            InAirDoubleJumpAcceleration = input.ReadFloat();
            break;
          }
          case 349: {
            InAirDoubleJumpSpeedRatio = input.ReadFloat();
            break;
          }
          case 357: {
            InertiaSectorAngle = input.ReadFloat();
            break;
          }
          case 365: {
            LandingSpeedDropRatio = input.ReadFloat();
            break;
          }
          case 373: {
            SilentSpeedRation = input.ReadFloat();
            break;
          }
          case 381: {
            CrouchSpeedRation = input.ReadFloat();
            break;
          }
          case 389: {
            MaxVelocity = input.ReadFloat();
            break;
          }
          case 397: {
            MaxVelocityAimSpeedRatio = input.ReadFloat();
            break;
          }
          case 405: {
            StopSpeedFriction = input.ReadFloat();
            break;
          }
          case 413: {
            CrouchStopSpeedFriction = input.ReadFloat();
            break;
          }
          case 421: {
            CrouchFatigueInc = input.ReadFloat();
            break;
          }
          case 429: {
            CrouchFatigueRecovery = input.ReadFloat();
            break;
          }
          case 437: {
            CrouchFatigueMax = input.ReadFloat();
            break;
          }
          case 445: {
            CrouchFatiguePunish = input.ReadFloat();
            break;
          }
          case 453: {
            CrouchAcceleration = input.ReadFloat();
            break;
          }
          case 461: {
            CrouchFirstThrust = input.ReadFloat();
            break;
          }
          case 469: {
            FallSpeedLossThreshold = input.ReadFloat();
            break;
          }
          case 477: {
            FallSpeedLossRatio = input.ReadFloat();
            break;
          }
          case 485: {
            FallFromHighThreshold = input.ReadFloat();
            break;
          }
          case 493: {
            HitDownTime = input.ReadFloat();
            break;
          }
          case 501: {
            HitDownRecoveringTime = input.ReadFloat();
            break;
          }
          case 509: {
            SensitivityX1 = input.ReadFloat();
            break;
          }
          case 517: {
            SensitivityX2 = input.ReadFloat();
            break;
          }
          case 525: {
            Sensitivity3P = input.ReadFloat();
            break;
          }
          case 533: {
            Sensitivity1P = input.ReadFloat();
            break;
          }
          case 541: {
            DisableAutoAimAfterKill = input.ReadFloat();
            break;
          }
          case 549: {
            JumpDuckHeight = input.ReadFloat();
            break;
          }
          case 557: {
            AttackPointOffset = input.ReadFloat();
            break;
          }
          case 565: {
            PVEBossAttackPointOffset = input.ReadFloat();
            break;
          }
          case 573: {
            HowitzerAttackPointOffset = input.ReadFloat();
            break;
          }
          case 578: {
            BulletShellsPistolSound = input.ReadString();
            break;
          }
          case 586: {
            BulletShellsShotgunSound = input.ReadString();
            break;
          }
          case 594: {
            BulletHitSound = input.ReadString();
            break;
          }
          case 602: {
            MeleeHitSound = input.ReadString();
            break;
          }
          case 610: {
            BulletFlySound = input.ReadString();
            break;
          }
          case 618: {
            ClipEmptySound = input.ReadString();
            break;
          }
          case 626: {
            FireEmptySound = input.ReadString();
            break;
          }
          case 634: {
            FireEmptyRTPCName = input.ReadString();
            break;
          }
          case 645: {
            DeployBombTime = input.ReadFloat();
            break;
          }
          case 653: {
            DeployBombAnimationTime = input.ReadFloat();
            break;
          }
          case 661: {
            DefuseBombTime = input.ReadFloat();
            break;
          }
          case 669: {
            BreakeDefuseSafeTime = input.ReadFloat();
            break;
          }
          case 677: {
            BreakeDefuseAngle = input.ReadFloat();
            break;
          }
          case 685: {
            DefuseFindAngle = input.ReadFloat();
            break;
          }
          case 693: {
            SpreadMediumLevel = input.ReadFloat();
            break;
          }
          case 701: {
            SpreadHighLevel = input.ReadFloat();
            break;
          }
          case 709: {
            ClimbLadderSpeed = input.ReadFloat();
            break;
          }
          case 717: {
            SilentClimbLadderSpeed = input.ReadFloat();
            break;
          }
          case 725: {
            DuckedClimbLadderSpeed = input.ReadFloat();
            break;
          }
          case 733: {
            LadderSpringSpeed = input.ReadFloat();
            break;
          }
          case 741: {
            SpreadSpeedMove = input.ReadFloat();
            break;
          }
          case 749: {
            SpreadSpeedCrouch = input.ReadFloat();
            break;
          }
          case 757: {
            SpreadSpeedSlience = input.ReadFloat();
            break;
          }
          case 762: {
            FlameHitEffectName = input.ReadString();
            break;
          }
          case 773: {
            FlameHitAnimationInterval = input.ReadFloat();
            break;
          }
          case 781: {
            RayPickUpDistance = input.ReadFloat();
            break;
          }
          case 789: {
            BodyPickUpDistance = input.ReadFloat();
            break;
          }
          case 797: {
            BRRayPickUpDistance = input.ReadFloat();
            break;
          }
          case 805: {
            BRBodyPickUpDistance = input.ReadFloat();
            break;
          }
          case 813: {
            PoisionImunity = input.ReadFloat();
            break;
          }
          case 821: {
            ShortClimbMaxHeight = input.ReadFloat();
            break;
          }
          case 829: {
            ShortClimbMinHeight = input.ReadFloat();
            break;
          }
          case 837: {
            ShortClimbAngle = input.ReadFloat();
            break;
          }
          case 845: {
            ShortClimbInterval = input.ReadFloat();
            break;
          }
          case 853: {
            SlideSlopeIndex = input.ReadFloat();
            break;
          }
          case 856: {
            DeadDropFunctionWeaponCount = input.ReadInt32();
            break;
          }
          case 869: {
            SprayPaintCDTime = input.ReadFloat();
            break;
          }
          case 877: {
            SprayPaintValidDis = input.ReadFloat();
            break;
          }
          case 885: {
            MinFadeDistance = input.ReadFloat();
            break;
          }
          case 893: {
            MaxShowOutlinDistance = input.ReadFloat();
            break;
          }
          case 901: {
            HorizontalSpeedLoss = input.ReadFloat();
            break;
          }
          case 906: {
            LowCommonFireEffectFp = input.ReadString();
            break;
          }
          case 914: {
            LowCommonFireEffectTp = input.ReadString();
            break;
          }
          case 925: {
            AutoSignOtherInterval = input.ReadFloat();
            break;
          }
          case 933: {
            SignedByOtherInterval = input.ReadFloat();
            break;
          }
          case 938: {
            PVEHeartBeatPlay = input.ReadString();
            break;
          }
          case 946: {
            PVEHeartBeatStop = input.ReadString();
            break;
          }
          case 954: {
            HealthPoint = input.ReadString();
            break;
          }
          case 965: {
            PVEHeartBeatPlayCD = input.ReadFloat();
            break;
          }
          case 973: {
            PVEStartPlayHeartBeatThreshold = input.ReadFloat();
            break;
          }
          case 981: {
            PVEHeartBeatPlayLifeTime = input.ReadFloat();
            break;
          }
          case 986: {
            DamageSound1P = input.ReadString();
            break;
          }
          case 994: {
            KillKingSound = input.ReadString();
            break;
          }
          case 1005: {
            KillKingSoundDelayPlay = input.ReadFloat();
            break;
          }
          case 1010: {
            BRHpShieldBreakSound = input.ReadString();
            break;
          }
          case 1018: {
            BRHeartbeatPlaySound = input.ReadString();
            break;
          }
          case 1026: {
            BRHeartbeatStopSound = input.ReadString();
            break;
          }
          case 1037: {
            SprintScaleSpeed = input.ReadFloat();
            break;
          }
          case 1045: {
            AirBorneBoost = input.ReadFloat();
            break;
          }
          case 1053: {
            AirBorneNoParashuteSpeed = input.ReadFloat();
            break;
          }
          case 1061: {
            AirBorneParashuteSpeed = input.ReadFloat();
            break;
          }
          case 1069: {
            AirBorneRollAngleMax = input.ReadFloat();
            break;
          }
          case 1077: {
            AirBorneAutoParashuteHeight = input.ReadFloat();
            break;
          }
          case 1085: {
            AirBorneHighSpeedThreshold = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
