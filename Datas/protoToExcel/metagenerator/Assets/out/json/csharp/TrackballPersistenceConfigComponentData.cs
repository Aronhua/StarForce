// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TrackballPersistenceConfigComponentData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from TrackballPersistenceConfigComponentData.proto</summary>
  public static partial class TrackballPersistenceConfigComponentDataReflection {

    #region Descriptor
    /// <summary>File descriptor for TrackballPersistenceConfigComponentData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TrackballPersistenceConfigComponentDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1UcmFja2JhbGxQZXJzaXN0ZW5jZUNvbmZpZ0NvbXBvbmVudERhdGEucHJv",
            "dG8SCUQxMS5QanNvbhoOUGJWZWN0b3IucHJvdG8ikwMKJ1RyYWNrYmFsbFBl",
            "cnNpc3RlbmNlQ29uZmlnQ29tcG9uZW50RGF0YRIRCglBc3NldE5hbWUYASAB",
            "KAkSEgoKSW5zdGFuY2VJRBgCIAEoBRIqCgxJbml0UG9zaXRpb24YAyABKAsy",
            "FC5EMTEuUGpzb24uUGJWZWN0b3IzEioKDEluaXRSb3RhdGlvbhgEIAEoCzIU",
            "LkQxMS5QanNvbi5QYlZlY3RvcjMSDQoFTWF4SHAYBSABKAISEAoITWluU3Bl",
            "ZWQYBiABKAISEAoITWF4U3BlZWQYByABKAISGwoTQWNjZWxlcmF0ZWRWZWxv",
            "Y2l0eRgIIAEoAhIVCg1DaGVja0Rpc3RhbmNlGAkgASgCEhMKC1RyYWNrSGVp",
            "Z2h0GAogASgCEhcKD1dhbGxCb3VuY2VTb3VuZBgLIAEoCRITCgtMb2NrRnBT",
            "b3VuZBgMIAEoCRISCgpIaXRGcFNvdW5kGA0gASgJEhIKCkhpdFRwU291bmQY",
            "DiABKAkSFwoPVGFrZURhbWFnZURlbGF5GA8gASgCYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D11.Pjson.PbVectorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.TrackballPersistenceConfigComponentData), global::D11.Pjson.TrackballPersistenceConfigComponentData.Parser, new[]{ "AssetName", "InstanceID", "InitPosition", "InitRotation", "MaxHp", "MinSpeed", "MaxSpeed", "AcceleratedVelocity", "CheckDistance", "TrackHeight", "WallBounceSound", "LockFpSound", "HitFpSound", "HitTpSound", "TakeDamageDelay" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TrackballPersistenceConfigComponentData : pb::IMessage<TrackballPersistenceConfigComponentData> {
    private static readonly pb::MessageParser<TrackballPersistenceConfigComponentData> _parser = new pb::MessageParser<TrackballPersistenceConfigComponentData>(() => new TrackballPersistenceConfigComponentData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackballPersistenceConfigComponentData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.TrackballPersistenceConfigComponentDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackballPersistenceConfigComponentData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackballPersistenceConfigComponentData(TrackballPersistenceConfigComponentData other) : this() {
      assetName_ = other.assetName_;
      instanceID_ = other.instanceID_;
      initPosition_ = other.initPosition_ != null ? other.initPosition_.Clone() : null;
      initRotation_ = other.initRotation_ != null ? other.initRotation_.Clone() : null;
      maxHp_ = other.maxHp_;
      minSpeed_ = other.minSpeed_;
      maxSpeed_ = other.maxSpeed_;
      acceleratedVelocity_ = other.acceleratedVelocity_;
      checkDistance_ = other.checkDistance_;
      trackHeight_ = other.trackHeight_;
      wallBounceSound_ = other.wallBounceSound_;
      lockFpSound_ = other.lockFpSound_;
      hitFpSound_ = other.hitFpSound_;
      hitTpSound_ = other.hitTpSound_;
      takeDamageDelay_ = other.takeDamageDelay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackballPersistenceConfigComponentData Clone() {
      return new TrackballPersistenceConfigComponentData(this);
    }

    /// <summary>Field number for the "AssetName" field.</summary>
    public const int AssetNameFieldNumber = 1;
    private string assetName_ = "";
    /// <summary>
    /// Asset资源名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetName {
      get { return assetName_; }
      set {
        assetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InstanceID" field.</summary>
    public const int InstanceIDFieldNumber = 2;
    private int instanceID_;
    /// <summary>
    /// InstanceID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstanceID {
      get { return instanceID_; }
      set {
        instanceID_ = value;
      }
    }

    /// <summary>Field number for the "InitPosition" field.</summary>
    public const int InitPositionFieldNumber = 3;
    private global::D11.Pjson.PbVector3 initPosition_;
    /// <summary>
    /// 初始坐标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.PbVector3 InitPosition {
      get { return initPosition_; }
      set {
        initPosition_ = value;
      }
    }

    /// <summary>Field number for the "InitRotation" field.</summary>
    public const int InitRotationFieldNumber = 4;
    private global::D11.Pjson.PbVector3 initRotation_;
    /// <summary>
    /// 初始角度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.PbVector3 InitRotation {
      get { return initRotation_; }
      set {
        initRotation_ = value;
      }
    }

    /// <summary>Field number for the "MaxHp" field.</summary>
    public const int MaxHpFieldNumber = 5;
    private float maxHp_;
    /// <summary>
    /// 最大生命值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "MinSpeed" field.</summary>
    public const int MinSpeedFieldNumber = 6;
    private float minSpeed_;
    /// <summary>
    /// 最小速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinSpeed {
      get { return minSpeed_; }
      set {
        minSpeed_ = value;
      }
    }

    /// <summary>Field number for the "MaxSpeed" field.</summary>
    public const int MaxSpeedFieldNumber = 7;
    private float maxSpeed_;
    /// <summary>
    /// 最大速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxSpeed {
      get { return maxSpeed_; }
      set {
        maxSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AcceleratedVelocity" field.</summary>
    public const int AcceleratedVelocityFieldNumber = 8;
    private float acceleratedVelocity_;
    /// <summary>
    /// 每秒加速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AcceleratedVelocity {
      get { return acceleratedVelocity_; }
      set {
        acceleratedVelocity_ = value;
      }
    }

    /// <summary>Field number for the "CheckDistance" field.</summary>
    public const int CheckDistanceFieldNumber = 9;
    private float checkDistance_;
    /// <summary>
    /// 检测碰撞距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CheckDistance {
      get { return checkDistance_; }
      set {
        checkDistance_ = value;
      }
    }

    /// <summary>Field number for the "TrackHeight" field.</summary>
    public const int TrackHeightFieldNumber = 10;
    private float trackHeight_;
    /// <summary>
    /// 追踪高度(起点是身体高度) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TrackHeight {
      get { return trackHeight_; }
      set {
        trackHeight_ = value;
      }
    }

    /// <summary>Field number for the "WallBounceSound" field.</summary>
    public const int WallBounceSoundFieldNumber = 11;
    private string wallBounceSound_ = "";
    /// <summary>
    /// 碰撞墙面音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WallBounceSound {
      get { return wallBounceSound_; }
      set {
        wallBounceSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LockFpSound" field.</summary>
    public const int LockFpSoundFieldNumber = 12;
    private string lockFpSound_ = "";
    /// <summary>
    /// 锁定1p音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LockFpSound {
      get { return lockFpSound_; }
      set {
        lockFpSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HitFpSound" field.</summary>
    public const int HitFpSoundFieldNumber = 13;
    private string hitFpSound_ = "";
    /// <summary>
    /// 击中1p音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitFpSound {
      get { return hitFpSound_; }
      set {
        hitFpSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HitTpSound" field.</summary>
    public const int HitTpSoundFieldNumber = 14;
    private string hitTpSound_ = "";
    /// <summary>
    /// 击中3p音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitTpSound {
      get { return hitTpSound_; }
      set {
        hitTpSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TakeDamageDelay" field.</summary>
    public const int TakeDamageDelayFieldNumber = 15;
    private float takeDamageDelay_;
    /// <summary>
    /// 延迟伤害结算时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TakeDamageDelay {
      get { return takeDamageDelay_; }
      set {
        takeDamageDelay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackballPersistenceConfigComponentData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackballPersistenceConfigComponentData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssetName != other.AssetName) return false;
      if (InstanceID != other.InstanceID) return false;
      if (!object.Equals(InitPosition, other.InitPosition)) return false;
      if (!object.Equals(InitRotation, other.InitRotation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxHp, other.MaxHp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinSpeed, other.MinSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSpeed, other.MaxSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AcceleratedVelocity, other.AcceleratedVelocity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CheckDistance, other.CheckDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrackHeight, other.TrackHeight)) return false;
      if (WallBounceSound != other.WallBounceSound) return false;
      if (LockFpSound != other.LockFpSound) return false;
      if (HitFpSound != other.HitFpSound) return false;
      if (HitTpSound != other.HitTpSound) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeDamageDelay, other.TakeDamageDelay)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssetName.Length != 0) hash ^= AssetName.GetHashCode();
      if (InstanceID != 0) hash ^= InstanceID.GetHashCode();
      if (initPosition_ != null) hash ^= InitPosition.GetHashCode();
      if (initRotation_ != null) hash ^= InitRotation.GetHashCode();
      if (MaxHp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxHp);
      if (MinSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinSpeed);
      if (MaxSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSpeed);
      if (AcceleratedVelocity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AcceleratedVelocity);
      if (CheckDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CheckDistance);
      if (TrackHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrackHeight);
      if (WallBounceSound.Length != 0) hash ^= WallBounceSound.GetHashCode();
      if (LockFpSound.Length != 0) hash ^= LockFpSound.GetHashCode();
      if (HitFpSound.Length != 0) hash ^= HitFpSound.GetHashCode();
      if (HitTpSound.Length != 0) hash ^= HitTpSound.GetHashCode();
      if (TakeDamageDelay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeDamageDelay);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssetName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AssetName);
      }
      if (InstanceID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InstanceID);
      }
      if (initPosition_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InitPosition);
      }
      if (initRotation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(InitRotation);
      }
      if (MaxHp != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MaxHp);
      }
      if (MinSpeed != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(MinSpeed);
      }
      if (MaxSpeed != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(MaxSpeed);
      }
      if (AcceleratedVelocity != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(AcceleratedVelocity);
      }
      if (CheckDistance != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(CheckDistance);
      }
      if (TrackHeight != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(TrackHeight);
      }
      if (WallBounceSound.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(WallBounceSound);
      }
      if (LockFpSound.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(LockFpSound);
      }
      if (HitFpSound.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(HitFpSound);
      }
      if (HitTpSound.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(HitTpSound);
      }
      if (TakeDamageDelay != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(TakeDamageDelay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetName);
      }
      if (InstanceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceID);
      }
      if (initPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitPosition);
      }
      if (initRotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitRotation);
      }
      if (MaxHp != 0F) {
        size += 1 + 4;
      }
      if (MinSpeed != 0F) {
        size += 1 + 4;
      }
      if (MaxSpeed != 0F) {
        size += 1 + 4;
      }
      if (AcceleratedVelocity != 0F) {
        size += 1 + 4;
      }
      if (CheckDistance != 0F) {
        size += 1 + 4;
      }
      if (TrackHeight != 0F) {
        size += 1 + 4;
      }
      if (WallBounceSound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WallBounceSound);
      }
      if (LockFpSound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LockFpSound);
      }
      if (HitFpSound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HitFpSound);
      }
      if (HitTpSound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HitTpSound);
      }
      if (TakeDamageDelay != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackballPersistenceConfigComponentData other) {
      if (other == null) {
        return;
      }
      if (other.AssetName.Length != 0) {
        AssetName = other.AssetName;
      }
      if (other.InstanceID != 0) {
        InstanceID = other.InstanceID;
      }
      if (other.initPosition_ != null) {
        if (initPosition_ == null) {
          InitPosition = new global::D11.Pjson.PbVector3();
        }
        InitPosition.MergeFrom(other.InitPosition);
      }
      if (other.initRotation_ != null) {
        if (initRotation_ == null) {
          InitRotation = new global::D11.Pjson.PbVector3();
        }
        InitRotation.MergeFrom(other.InitRotation);
      }
      if (other.MaxHp != 0F) {
        MaxHp = other.MaxHp;
      }
      if (other.MinSpeed != 0F) {
        MinSpeed = other.MinSpeed;
      }
      if (other.MaxSpeed != 0F) {
        MaxSpeed = other.MaxSpeed;
      }
      if (other.AcceleratedVelocity != 0F) {
        AcceleratedVelocity = other.AcceleratedVelocity;
      }
      if (other.CheckDistance != 0F) {
        CheckDistance = other.CheckDistance;
      }
      if (other.TrackHeight != 0F) {
        TrackHeight = other.TrackHeight;
      }
      if (other.WallBounceSound.Length != 0) {
        WallBounceSound = other.WallBounceSound;
      }
      if (other.LockFpSound.Length != 0) {
        LockFpSound = other.LockFpSound;
      }
      if (other.HitFpSound.Length != 0) {
        HitFpSound = other.HitFpSound;
      }
      if (other.HitTpSound.Length != 0) {
        HitTpSound = other.HitTpSound;
      }
      if (other.TakeDamageDelay != 0F) {
        TakeDamageDelay = other.TakeDamageDelay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AssetName = input.ReadString();
            break;
          }
          case 16: {
            InstanceID = input.ReadInt32();
            break;
          }
          case 26: {
            if (initPosition_ == null) {
              InitPosition = new global::D11.Pjson.PbVector3();
            }
            input.ReadMessage(InitPosition);
            break;
          }
          case 34: {
            if (initRotation_ == null) {
              InitRotation = new global::D11.Pjson.PbVector3();
            }
            input.ReadMessage(InitRotation);
            break;
          }
          case 45: {
            MaxHp = input.ReadFloat();
            break;
          }
          case 53: {
            MinSpeed = input.ReadFloat();
            break;
          }
          case 61: {
            MaxSpeed = input.ReadFloat();
            break;
          }
          case 69: {
            AcceleratedVelocity = input.ReadFloat();
            break;
          }
          case 77: {
            CheckDistance = input.ReadFloat();
            break;
          }
          case 85: {
            TrackHeight = input.ReadFloat();
            break;
          }
          case 90: {
            WallBounceSound = input.ReadString();
            break;
          }
          case 98: {
            LockFpSound = input.ReadString();
            break;
          }
          case 106: {
            HitFpSound = input.ReadString();
            break;
          }
          case 114: {
            HitTpSound = input.ReadString();
            break;
          }
          case 125: {
            TakeDamageDelay = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
