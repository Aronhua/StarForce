// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WeaponAdditionFireLogicAPSData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from WeaponAdditionFireLogicAPSData.proto</summary>
  public static partial class WeaponAdditionFireLogicAPSDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WeaponAdditionFireLogicAPSData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeaponAdditionFireLogicAPSDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRXZWFwb25BZGRpdGlvbkZpcmVMb2dpY0FQU0RhdGEucHJvdG8SCUQxMS5Q",
            "anNvbiKRAgoeV2VhcG9uQWRkaXRpb25GaXJlTG9naWNBUFNEYXRhEgoKAkhw",
            "GAEgASgCEhsKE0xpbWl0RGV0ZWN0aW9uQ291bnQYAiABKAISFwoPRGV0ZWN0",
            "aW9uUmFkaXVzGAMgASgCEhoKEkRldGVjdGlvbkFsbEVuYWJsZRgEIAEoCBIS",
            "CgpQbGFudFJhbmdlGAUgASgCEhwKFEF0dGFja1NvdW5kRXZlbnROYW1lGAYg",
            "ASgJEhsKE1BsYW50U291bmRFdmVudE5hbWUYByABKAkSIAoYUGxheVNlYXJj",
            "aFNvdW5kRXZlbnROYW1lGAggASgJEiAKGFN0b3BTZWFyY2hTb3VuZEV2ZW50",
            "TmFtZRgJIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.WeaponAdditionFireLogicAPSData), global::D11.Pjson.WeaponAdditionFireLogicAPSData.Parser, new[]{ "Hp", "LimitDetectionCount", "DetectionRadius", "DetectionAllEnable", "PlantRange", "AttackSoundEventName", "PlantSoundEventName", "PlaySearchSoundEventName", "StopSearchSoundEventName" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponAdditionFireLogicAPSData : pb::IMessage<WeaponAdditionFireLogicAPSData> {
    private static readonly pb::MessageParser<WeaponAdditionFireLogicAPSData> _parser = new pb::MessageParser<WeaponAdditionFireLogicAPSData>(() => new WeaponAdditionFireLogicAPSData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponAdditionFireLogicAPSData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.WeaponAdditionFireLogicAPSDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponAdditionFireLogicAPSData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponAdditionFireLogicAPSData(WeaponAdditionFireLogicAPSData other) : this() {
      hp_ = other.hp_;
      limitDetectionCount_ = other.limitDetectionCount_;
      detectionRadius_ = other.detectionRadius_;
      detectionAllEnable_ = other.detectionAllEnable_;
      plantRange_ = other.plantRange_;
      attackSoundEventName_ = other.attackSoundEventName_;
      plantSoundEventName_ = other.plantSoundEventName_;
      playSearchSoundEventName_ = other.playSearchSoundEventName_;
      stopSearchSoundEventName_ = other.stopSearchSoundEventName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponAdditionFireLogicAPSData Clone() {
      return new WeaponAdditionFireLogicAPSData(this);
    }

    /// <summary>Field number for the "Hp" field.</summary>
    public const int HpFieldNumber = 1;
    private float hp_;
    /// <summary>
    /// 血量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "LimitDetectionCount" field.</summary>
    public const int LimitDetectionCountFieldNumber = 2;
    private float limitDetectionCount_;
    /// <summary>
    /// 检测N个投掷物上限 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LimitDetectionCount {
      get { return limitDetectionCount_; }
      set {
        limitDetectionCount_ = value;
      }
    }

    /// <summary>Field number for the "DetectionRadius" field.</summary>
    public const int DetectionRadiusFieldNumber = 3;
    private float detectionRadius_;
    /// <summary>
    /// 侦查半径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DetectionRadius {
      get { return detectionRadius_; }
      set {
        detectionRadius_ = value;
      }
    }

    /// <summary>Field number for the "DetectionAllEnable" field.</summary>
    public const int DetectionAllEnableFieldNumber = 4;
    private bool detectionAllEnable_;
    /// <summary>
    /// 开启全体防御 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DetectionAllEnable {
      get { return detectionAllEnable_; }
      set {
        detectionAllEnable_ = value;
      }
    }

    /// <summary>Field number for the "PlantRange" field.</summary>
    public const int PlantRangeFieldNumber = 5;
    private float plantRange_;
    /// <summary>
    /// 安装范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlantRange {
      get { return plantRange_; }
      set {
        plantRange_ = value;
      }
    }

    /// <summary>Field number for the "AttackSoundEventName" field.</summary>
    public const int AttackSoundEventNameFieldNumber = 6;
    private string attackSoundEventName_ = "";
    /// <summary>
    /// 攻击音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AttackSoundEventName {
      get { return attackSoundEventName_; }
      set {
        attackSoundEventName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlantSoundEventName" field.</summary>
    public const int PlantSoundEventNameFieldNumber = 7;
    private string plantSoundEventName_ = "";
    /// <summary>
    /// 安装落地音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlantSoundEventName {
      get { return plantSoundEventName_; }
      set {
        plantSoundEventName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlaySearchSoundEventName" field.</summary>
    public const int PlaySearchSoundEventNameFieldNumber = 8;
    private string playSearchSoundEventName_ = "";
    /// <summary>
    /// 搜索play音效（工作） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlaySearchSoundEventName {
      get { return playSearchSoundEventName_; }
      set {
        playSearchSoundEventName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopSearchSoundEventName" field.</summary>
    public const int StopSearchSoundEventNameFieldNumber = 9;
    private string stopSearchSoundEventName_ = "";
    /// <summary>
    /// 搜索stop音效（工作） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopSearchSoundEventName {
      get { return stopSearchSoundEventName_; }
      set {
        stopSearchSoundEventName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponAdditionFireLogicAPSData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponAdditionFireLogicAPSData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Hp, other.Hp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LimitDetectionCount, other.LimitDetectionCount)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DetectionRadius, other.DetectionRadius)) return false;
      if (DetectionAllEnable != other.DetectionAllEnable) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlantRange, other.PlantRange)) return false;
      if (AttackSoundEventName != other.AttackSoundEventName) return false;
      if (PlantSoundEventName != other.PlantSoundEventName) return false;
      if (PlaySearchSoundEventName != other.PlaySearchSoundEventName) return false;
      if (StopSearchSoundEventName != other.StopSearchSoundEventName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Hp);
      if (LimitDetectionCount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LimitDetectionCount);
      if (DetectionRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DetectionRadius);
      if (DetectionAllEnable != false) hash ^= DetectionAllEnable.GetHashCode();
      if (PlantRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlantRange);
      if (AttackSoundEventName.Length != 0) hash ^= AttackSoundEventName.GetHashCode();
      if (PlantSoundEventName.Length != 0) hash ^= PlantSoundEventName.GetHashCode();
      if (PlaySearchSoundEventName.Length != 0) hash ^= PlaySearchSoundEventName.GetHashCode();
      if (StopSearchSoundEventName.Length != 0) hash ^= StopSearchSoundEventName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hp != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Hp);
      }
      if (LimitDetectionCount != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(LimitDetectionCount);
      }
      if (DetectionRadius != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DetectionRadius);
      }
      if (DetectionAllEnable != false) {
        output.WriteRawTag(32);
        output.WriteBool(DetectionAllEnable);
      }
      if (PlantRange != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PlantRange);
      }
      if (AttackSoundEventName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AttackSoundEventName);
      }
      if (PlantSoundEventName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PlantSoundEventName);
      }
      if (PlaySearchSoundEventName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PlaySearchSoundEventName);
      }
      if (StopSearchSoundEventName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(StopSearchSoundEventName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hp != 0F) {
        size += 1 + 4;
      }
      if (LimitDetectionCount != 0F) {
        size += 1 + 4;
      }
      if (DetectionRadius != 0F) {
        size += 1 + 4;
      }
      if (DetectionAllEnable != false) {
        size += 1 + 1;
      }
      if (PlantRange != 0F) {
        size += 1 + 4;
      }
      if (AttackSoundEventName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AttackSoundEventName);
      }
      if (PlantSoundEventName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlantSoundEventName);
      }
      if (PlaySearchSoundEventName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlaySearchSoundEventName);
      }
      if (StopSearchSoundEventName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StopSearchSoundEventName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponAdditionFireLogicAPSData other) {
      if (other == null) {
        return;
      }
      if (other.Hp != 0F) {
        Hp = other.Hp;
      }
      if (other.LimitDetectionCount != 0F) {
        LimitDetectionCount = other.LimitDetectionCount;
      }
      if (other.DetectionRadius != 0F) {
        DetectionRadius = other.DetectionRadius;
      }
      if (other.DetectionAllEnable != false) {
        DetectionAllEnable = other.DetectionAllEnable;
      }
      if (other.PlantRange != 0F) {
        PlantRange = other.PlantRange;
      }
      if (other.AttackSoundEventName.Length != 0) {
        AttackSoundEventName = other.AttackSoundEventName;
      }
      if (other.PlantSoundEventName.Length != 0) {
        PlantSoundEventName = other.PlantSoundEventName;
      }
      if (other.PlaySearchSoundEventName.Length != 0) {
        PlaySearchSoundEventName = other.PlaySearchSoundEventName;
      }
      if (other.StopSearchSoundEventName.Length != 0) {
        StopSearchSoundEventName = other.StopSearchSoundEventName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Hp = input.ReadFloat();
            break;
          }
          case 21: {
            LimitDetectionCount = input.ReadFloat();
            break;
          }
          case 29: {
            DetectionRadius = input.ReadFloat();
            break;
          }
          case 32: {
            DetectionAllEnable = input.ReadBool();
            break;
          }
          case 45: {
            PlantRange = input.ReadFloat();
            break;
          }
          case 50: {
            AttackSoundEventName = input.ReadString();
            break;
          }
          case 58: {
            PlantSoundEventName = input.ReadString();
            break;
          }
          case 66: {
            PlaySearchSoundEventName = input.ReadString();
            break;
          }
          case 74: {
            StopSearchSoundEventName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
