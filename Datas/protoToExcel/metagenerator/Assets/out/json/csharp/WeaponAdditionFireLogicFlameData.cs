// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WeaponAdditionFireLogicFlameData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from WeaponAdditionFireLogicFlameData.proto</summary>
  public static partial class WeaponAdditionFireLogicFlameDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WeaponAdditionFireLogicFlameData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeaponAdditionFireLogicFlameDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZXZWFwb25BZGRpdGlvbkZpcmVMb2dpY0ZsYW1lRGF0YS5wcm90bxIJRDEx",
            "LlBqc29uIpoGCiBXZWFwb25BZGRpdGlvbkZpcmVMb2dpY0ZsYW1lRGF0YRIX",
            "Cg9Jc0dyZW5hZGVCb3R0bGUYASABKAgSGAoQTWF4RGV0b25hdGVTbG9wZRgC",
            "IAEoAhIWCg5EYW1hZ2VUaWNrVGltZRgDIAEoAhIUCgxGaXJlTGlmZVRpbWUY",
            "BCABKAISHAoUbUZsYW1lRWZmZWN0TGlmZVRpbWUYBSABKAISGgoSRmlyZURh",
            "bWFnZUxpZmVUaW1lGAYgASgCEhwKFERldG9uYXRlSWdub3JlSGVpZ2h0GAcg",
            "ASgCEhQKDE1heEZpcmVDb3VudBgIIAEoAhIUCgxGaXJlTWF4UmFuZ2UYCSAB",
            "KAISGQoRRmlyZVN1cmZhY2VPZmZzZXQYCiABKAISHwoXRmlyZUZpeERhbWFn",
            "ZVBlclNlY29uZHMYCyABKAISEwoLRmlyZVJ1blRpbWUYDCABKAISHgoWU3By",
            "ZWFkRmlyZVdpdGhTbW9rZURpcxgNIAEoAhIYChBGaXJlV2l0aFNtb2tlRGlz",
            "GA4gASgCEh0KFW1JbmZlcm5vRmlyZUhhbGZXaWR0aBgPIAEoAhIeChZtSW5m",
            "ZXJub0ZpcmVGdWxsSGVpZ2h0GBAgASgCEh4KFm1QZXJGbGFtZVNwYXduRHVy",
            "YXRpb24YESABKAISHQoVbUluaXRpYWxTcGF3bkludGVydmFsGBIgASgCEhcK",
            "D1NwcmVhZEZpcmVTb3VuZBgTIAEoCRIbChNTdG9wU3ByZWFkRmlyZVNvdW5k",
            "GBQgASgJEhsKE01vbG90b3ZFeHBsb2RlU291bmQYFSABKAkSHwoXU3RvcE1v",
            "bG90b3ZFeHBsb2RlU291bmQYFiABKAkSIQoZTWFpbkZsYW1lRWZmZWN0QXNz",
            "ZXRJbmRleBgXIAEoBRIjChtTcHJlYWRGbGFtZUVmZmVjdEFzc2V0SW5kZXgY",
            "GCABKAUSJAocRGlzcGF0Y2hGaXJlRWZmZWN0QXNzZXRJbmRleBgZIAEoBRIm",
            "Ch5GbGFtZUhpdERhbWFnZUVmZmVjdEFzc2V0SW5kZXgYGiABKAViBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.WeaponAdditionFireLogicFlameData), global::D11.Pjson.WeaponAdditionFireLogicFlameData.Parser, new[]{ "IsGrenadeBottle", "MaxDetonateSlope", "DamageTickTime", "FireLifeTime", "MFlameEffectLifeTime", "FireDamageLifeTime", "DetonateIgnoreHeight", "MaxFireCount", "FireMaxRange", "FireSurfaceOffset", "FireFixDamagePerSeconds", "FireRunTime", "SpreadFireWithSmokeDis", "FireWithSmokeDis", "MInfernoFireHalfWidth", "MInfernoFireFullHeight", "MPerFlameSpawnDuration", "MInitialSpawnInterval", "SpreadFireSound", "StopSpreadFireSound", "MolotovExplodeSound", "StopMolotovExplodeSound", "MainFlameEffectAssetIndex", "SpreadFlameEffectAssetIndex", "DispatchFireEffectAssetIndex", "FlameHitDamageEffectAssetIndex" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponAdditionFireLogicFlameData : pb::IMessage<WeaponAdditionFireLogicFlameData> {
    private static readonly pb::MessageParser<WeaponAdditionFireLogicFlameData> _parser = new pb::MessageParser<WeaponAdditionFireLogicFlameData>(() => new WeaponAdditionFireLogicFlameData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponAdditionFireLogicFlameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.WeaponAdditionFireLogicFlameDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponAdditionFireLogicFlameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponAdditionFireLogicFlameData(WeaponAdditionFireLogicFlameData other) : this() {
      isGrenadeBottle_ = other.isGrenadeBottle_;
      maxDetonateSlope_ = other.maxDetonateSlope_;
      damageTickTime_ = other.damageTickTime_;
      fireLifeTime_ = other.fireLifeTime_;
      mFlameEffectLifeTime_ = other.mFlameEffectLifeTime_;
      fireDamageLifeTime_ = other.fireDamageLifeTime_;
      detonateIgnoreHeight_ = other.detonateIgnoreHeight_;
      maxFireCount_ = other.maxFireCount_;
      fireMaxRange_ = other.fireMaxRange_;
      fireSurfaceOffset_ = other.fireSurfaceOffset_;
      fireFixDamagePerSeconds_ = other.fireFixDamagePerSeconds_;
      fireRunTime_ = other.fireRunTime_;
      spreadFireWithSmokeDis_ = other.spreadFireWithSmokeDis_;
      fireWithSmokeDis_ = other.fireWithSmokeDis_;
      mInfernoFireHalfWidth_ = other.mInfernoFireHalfWidth_;
      mInfernoFireFullHeight_ = other.mInfernoFireFullHeight_;
      mPerFlameSpawnDuration_ = other.mPerFlameSpawnDuration_;
      mInitialSpawnInterval_ = other.mInitialSpawnInterval_;
      spreadFireSound_ = other.spreadFireSound_;
      stopSpreadFireSound_ = other.stopSpreadFireSound_;
      molotovExplodeSound_ = other.molotovExplodeSound_;
      stopMolotovExplodeSound_ = other.stopMolotovExplodeSound_;
      mainFlameEffectAssetIndex_ = other.mainFlameEffectAssetIndex_;
      spreadFlameEffectAssetIndex_ = other.spreadFlameEffectAssetIndex_;
      dispatchFireEffectAssetIndex_ = other.dispatchFireEffectAssetIndex_;
      flameHitDamageEffectAssetIndex_ = other.flameHitDamageEffectAssetIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponAdditionFireLogicFlameData Clone() {
      return new WeaponAdditionFireLogicFlameData(this);
    }

    /// <summary>Field number for the "IsGrenadeBottle" field.</summary>
    public const int IsGrenadeBottleFieldNumber = 1;
    private bool isGrenadeBottle_;
    /// <summary>
    /// 燃烧弹类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGrenadeBottle {
      get { return isGrenadeBottle_; }
      set {
        isGrenadeBottle_ = value;
      }
    }

    /// <summary>Field number for the "MaxDetonateSlope" field.</summary>
    public const int MaxDetonateSlopeFieldNumber = 2;
    private float maxDetonateSlope_;
    /// <summary>
    /// 最大判定爆炸倾斜角() 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxDetonateSlope {
      get { return maxDetonateSlope_; }
      set {
        maxDetonateSlope_ = value;
      }
    }

    /// <summary>Field number for the "DamageTickTime" field.</summary>
    public const int DamageTickTimeFieldNumber = 3;
    private float damageTickTime_;
    /// <summary>
    /// 伤害检测Tick间隔时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DamageTickTime {
      get { return damageTickTime_; }
      set {
        damageTickTime_ = value;
      }
    }

    /// <summary>Field number for the "FireLifeTime" field.</summary>
    public const int FireLifeTimeFieldNumber = 4;
    private float fireLifeTime_;
    /// <summary>
    /// 火焰life时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireLifeTime {
      get { return fireLifeTime_; }
      set {
        fireLifeTime_ = value;
      }
    }

    /// <summary>Field number for the "mFlameEffectLifeTime" field.</summary>
    public const int MFlameEffectLifeTimeFieldNumber = 5;
    private float mFlameEffectLifeTime_;
    /// <summary>
    /// 火焰特效生命 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MFlameEffectLifeTime {
      get { return mFlameEffectLifeTime_; }
      set {
        mFlameEffectLifeTime_ = value;
      }
    }

    /// <summary>Field number for the "FireDamageLifeTime" field.</summary>
    public const int FireDamageLifeTimeFieldNumber = 6;
    private float fireDamageLifeTime_;
    /// <summary>
    /// 伤害检测life时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireDamageLifeTime {
      get { return fireDamageLifeTime_; }
      set {
        fireDamageLifeTime_ = value;
      }
    }

    /// <summary>Field number for the "DetonateIgnoreHeight" field.</summary>
    public const int DetonateIgnoreHeightFieldNumber = 7;
    private float detonateIgnoreHeight_;
    /// <summary>
    /// 爆炸忽略高度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DetonateIgnoreHeight {
      get { return detonateIgnoreHeight_; }
      set {
        detonateIgnoreHeight_ = value;
      }
    }

    /// <summary>Field number for the "MaxFireCount" field.</summary>
    public const int MaxFireCountFieldNumber = 8;
    private float maxFireCount_;
    /// <summary>
    /// 喷溅火焰面数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxFireCount {
      get { return maxFireCount_; }
      set {
        maxFireCount_ = value;
      }
    }

    /// <summary>Field number for the "FireMaxRange" field.</summary>
    public const int FireMaxRangeFieldNumber = 9;
    private float fireMaxRange_;
    /// <summary>
    /// 火焰最大区域 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireMaxRange {
      get { return fireMaxRange_; }
      set {
        fireMaxRange_ = value;
      }
    }

    /// <summary>Field number for the "FireSurfaceOffset" field.</summary>
    public const int FireSurfaceOffsetFieldNumber = 10;
    private float fireSurfaceOffset_;
    /// <summary>
    /// 火焰表面偏移 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireSurfaceOffset {
      get { return fireSurfaceOffset_; }
      set {
        fireSurfaceOffset_ = value;
      }
    }

    /// <summary>Field number for the "FireFixDamagePerSeconds" field.</summary>
    public const int FireFixDamagePerSecondsFieldNumber = 11;
    private float fireFixDamagePerSeconds_;
    /// <summary>
    /// 火焰每秒固定伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireFixDamagePerSeconds {
      get { return fireFixDamagePerSeconds_; }
      set {
        fireFixDamagePerSeconds_ = value;
      }
    }

    /// <summary>Field number for the "FireRunTime" field.</summary>
    public const int FireRunTimeFieldNumber = 12;
    private float fireRunTime_;
    /// <summary>
    /// 玩家逃跑时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireRunTime {
      get { return fireRunTime_; }
      set {
        fireRunTime_ = value;
      }
    }

    /// <summary>Field number for the "SpreadFireWithSmokeDis" field.</summary>
    public const int SpreadFireWithSmokeDisFieldNumber = 13;
    private float spreadFireWithSmokeDis_;
    /// <summary>
    /// 蔓延火与烟雾弹灭掉的距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpreadFireWithSmokeDis {
      get { return spreadFireWithSmokeDis_; }
      set {
        spreadFireWithSmokeDis_ = value;
      }
    }

    /// <summary>Field number for the "FireWithSmokeDis" field.</summary>
    public const int FireWithSmokeDisFieldNumber = 14;
    private float fireWithSmokeDis_;
    /// <summary>
    /// 火焰与烟雾弹灭掉的距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireWithSmokeDis {
      get { return fireWithSmokeDis_; }
      set {
        fireWithSmokeDis_ = value;
      }
    }

    /// <summary>Field number for the "mInfernoFireHalfWidth" field.</summary>
    public const int MInfernoFireHalfWidthFieldNumber = 15;
    private float mInfernoFireHalfWidth_;
    /// <summary>
    /// 火焰半宽(半径) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MInfernoFireHalfWidth {
      get { return mInfernoFireHalfWidth_; }
      set {
        mInfernoFireHalfWidth_ = value;
      }
    }

    /// <summary>Field number for the "mInfernoFireFullHeight" field.</summary>
    public const int MInfernoFireFullHeightFieldNumber = 16;
    private float mInfernoFireFullHeight_;
    /// <summary>
    /// 火焰全高 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MInfernoFireFullHeight {
      get { return mInfernoFireFullHeight_; }
      set {
        mInfernoFireFullHeight_ = value;
      }
    }

    /// <summary>Field number for the "mPerFlameSpawnDuration" field.</summary>
    public const int MPerFlameSpawnDurationFieldNumber = 17;
    private float mPerFlameSpawnDuration_;
    /// <summary>
    /// 火焰出生持续时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MPerFlameSpawnDuration {
      get { return mPerFlameSpawnDuration_; }
      set {
        mPerFlameSpawnDuration_ = value;
      }
    }

    /// <summary>Field number for the "mInitialSpawnInterval" field.</summary>
    public const int MInitialSpawnIntervalFieldNumber = 18;
    private float mInitialSpawnInterval_;
    /// <summary>
    /// 火焰初始生成间隔时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MInitialSpawnInterval {
      get { return mInitialSpawnInterval_; }
      set {
        mInitialSpawnInterval_ = value;
      }
    }

    /// <summary>Field number for the "SpreadFireSound" field.</summary>
    public const int SpreadFireSoundFieldNumber = 19;
    private string spreadFireSound_ = "";
    /// <summary>
    /// 燃烧弹蔓延音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpreadFireSound {
      get { return spreadFireSound_; }
      set {
        spreadFireSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopSpreadFireSound" field.</summary>
    public const int StopSpreadFireSoundFieldNumber = 20;
    private string stopSpreadFireSound_ = "";
    /// <summary>
    /// Stop燃烧弹蔓延音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopSpreadFireSound {
      get { return stopSpreadFireSound_; }
      set {
        stopSpreadFireSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MolotovExplodeSound" field.</summary>
    public const int MolotovExplodeSoundFieldNumber = 21;
    private string molotovExplodeSound_ = "";
    /// <summary>
    /// 爆炸+燃烧 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MolotovExplodeSound {
      get { return molotovExplodeSound_; }
      set {
        molotovExplodeSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopMolotovExplodeSound" field.</summary>
    public const int StopMolotovExplodeSoundFieldNumber = 22;
    private string stopMolotovExplodeSound_ = "";
    /// <summary>
    /// Stop爆炸+燃烧 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopMolotovExplodeSound {
      get { return stopMolotovExplodeSound_; }
      set {
        stopMolotovExplodeSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MainFlameEffectAssetIndex" field.</summary>
    public const int MainFlameEffectAssetIndexFieldNumber = 23;
    private int mainFlameEffectAssetIndex_;
    /// <summary>
    /// 主火特效下标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainFlameEffectAssetIndex {
      get { return mainFlameEffectAssetIndex_; }
      set {
        mainFlameEffectAssetIndex_ = value;
      }
    }

    /// <summary>Field number for the "SpreadFlameEffectAssetIndex" field.</summary>
    public const int SpreadFlameEffectAssetIndexFieldNumber = 24;
    private int spreadFlameEffectAssetIndex_;
    /// <summary>
    /// 蔓延火下标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpreadFlameEffectAssetIndex {
      get { return spreadFlameEffectAssetIndex_; }
      set {
        spreadFlameEffectAssetIndex_ = value;
      }
    }

    /// <summary>Field number for the "DispatchFireEffectAssetIndex" field.</summary>
    public const int DispatchFireEffectAssetIndexFieldNumber = 25;
    private int dispatchFireEffectAssetIndex_;
    /// <summary>
    /// 烟灭火火焰特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DispatchFireEffectAssetIndex {
      get { return dispatchFireEffectAssetIndex_; }
      set {
        dispatchFireEffectAssetIndex_ = value;
      }
    }

    /// <summary>Field number for the "FlameHitDamageEffectAssetIndex" field.</summary>
    public const int FlameHitDamageEffectAssetIndexFieldNumber = 26;
    private int flameHitDamageEffectAssetIndex_;
    /// <summary>
    /// 3p火焰受击特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FlameHitDamageEffectAssetIndex {
      get { return flameHitDamageEffectAssetIndex_; }
      set {
        flameHitDamageEffectAssetIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponAdditionFireLogicFlameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponAdditionFireLogicFlameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsGrenadeBottle != other.IsGrenadeBottle) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDetonateSlope, other.MaxDetonateSlope)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamageTickTime, other.DamageTickTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireLifeTime, other.FireLifeTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MFlameEffectLifeTime, other.MFlameEffectLifeTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireDamageLifeTime, other.FireDamageLifeTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DetonateIgnoreHeight, other.DetonateIgnoreHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxFireCount, other.MaxFireCount)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireMaxRange, other.FireMaxRange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireSurfaceOffset, other.FireSurfaceOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireFixDamagePerSeconds, other.FireFixDamagePerSeconds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireRunTime, other.FireRunTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpreadFireWithSmokeDis, other.SpreadFireWithSmokeDis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireWithSmokeDis, other.FireWithSmokeDis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MInfernoFireHalfWidth, other.MInfernoFireHalfWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MInfernoFireFullHeight, other.MInfernoFireFullHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MPerFlameSpawnDuration, other.MPerFlameSpawnDuration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MInitialSpawnInterval, other.MInitialSpawnInterval)) return false;
      if (SpreadFireSound != other.SpreadFireSound) return false;
      if (StopSpreadFireSound != other.StopSpreadFireSound) return false;
      if (MolotovExplodeSound != other.MolotovExplodeSound) return false;
      if (StopMolotovExplodeSound != other.StopMolotovExplodeSound) return false;
      if (MainFlameEffectAssetIndex != other.MainFlameEffectAssetIndex) return false;
      if (SpreadFlameEffectAssetIndex != other.SpreadFlameEffectAssetIndex) return false;
      if (DispatchFireEffectAssetIndex != other.DispatchFireEffectAssetIndex) return false;
      if (FlameHitDamageEffectAssetIndex != other.FlameHitDamageEffectAssetIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsGrenadeBottle != false) hash ^= IsGrenadeBottle.GetHashCode();
      if (MaxDetonateSlope != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDetonateSlope);
      if (DamageTickTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamageTickTime);
      if (FireLifeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireLifeTime);
      if (MFlameEffectLifeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MFlameEffectLifeTime);
      if (FireDamageLifeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireDamageLifeTime);
      if (DetonateIgnoreHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DetonateIgnoreHeight);
      if (MaxFireCount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxFireCount);
      if (FireMaxRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireMaxRange);
      if (FireSurfaceOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireSurfaceOffset);
      if (FireFixDamagePerSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireFixDamagePerSeconds);
      if (FireRunTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireRunTime);
      if (SpreadFireWithSmokeDis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpreadFireWithSmokeDis);
      if (FireWithSmokeDis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireWithSmokeDis);
      if (MInfernoFireHalfWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MInfernoFireHalfWidth);
      if (MInfernoFireFullHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MInfernoFireFullHeight);
      if (MPerFlameSpawnDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MPerFlameSpawnDuration);
      if (MInitialSpawnInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MInitialSpawnInterval);
      if (SpreadFireSound.Length != 0) hash ^= SpreadFireSound.GetHashCode();
      if (StopSpreadFireSound.Length != 0) hash ^= StopSpreadFireSound.GetHashCode();
      if (MolotovExplodeSound.Length != 0) hash ^= MolotovExplodeSound.GetHashCode();
      if (StopMolotovExplodeSound.Length != 0) hash ^= StopMolotovExplodeSound.GetHashCode();
      if (MainFlameEffectAssetIndex != 0) hash ^= MainFlameEffectAssetIndex.GetHashCode();
      if (SpreadFlameEffectAssetIndex != 0) hash ^= SpreadFlameEffectAssetIndex.GetHashCode();
      if (DispatchFireEffectAssetIndex != 0) hash ^= DispatchFireEffectAssetIndex.GetHashCode();
      if (FlameHitDamageEffectAssetIndex != 0) hash ^= FlameHitDamageEffectAssetIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsGrenadeBottle != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsGrenadeBottle);
      }
      if (MaxDetonateSlope != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxDetonateSlope);
      }
      if (DamageTickTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DamageTickTime);
      }
      if (FireLifeTime != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(FireLifeTime);
      }
      if (MFlameEffectLifeTime != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MFlameEffectLifeTime);
      }
      if (FireDamageLifeTime != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(FireDamageLifeTime);
      }
      if (DetonateIgnoreHeight != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(DetonateIgnoreHeight);
      }
      if (MaxFireCount != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(MaxFireCount);
      }
      if (FireMaxRange != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(FireMaxRange);
      }
      if (FireSurfaceOffset != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(FireSurfaceOffset);
      }
      if (FireFixDamagePerSeconds != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(FireFixDamagePerSeconds);
      }
      if (FireRunTime != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(FireRunTime);
      }
      if (SpreadFireWithSmokeDis != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(SpreadFireWithSmokeDis);
      }
      if (FireWithSmokeDis != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(FireWithSmokeDis);
      }
      if (MInfernoFireHalfWidth != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(MInfernoFireHalfWidth);
      }
      if (MInfernoFireFullHeight != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(MInfernoFireFullHeight);
      }
      if (MPerFlameSpawnDuration != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(MPerFlameSpawnDuration);
      }
      if (MInitialSpawnInterval != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(MInitialSpawnInterval);
      }
      if (SpreadFireSound.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(SpreadFireSound);
      }
      if (StopSpreadFireSound.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(StopSpreadFireSound);
      }
      if (MolotovExplodeSound.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(MolotovExplodeSound);
      }
      if (StopMolotovExplodeSound.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(StopMolotovExplodeSound);
      }
      if (MainFlameEffectAssetIndex != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(MainFlameEffectAssetIndex);
      }
      if (SpreadFlameEffectAssetIndex != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(SpreadFlameEffectAssetIndex);
      }
      if (DispatchFireEffectAssetIndex != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(DispatchFireEffectAssetIndex);
      }
      if (FlameHitDamageEffectAssetIndex != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(FlameHitDamageEffectAssetIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsGrenadeBottle != false) {
        size += 1 + 1;
      }
      if (MaxDetonateSlope != 0F) {
        size += 1 + 4;
      }
      if (DamageTickTime != 0F) {
        size += 1 + 4;
      }
      if (FireLifeTime != 0F) {
        size += 1 + 4;
      }
      if (MFlameEffectLifeTime != 0F) {
        size += 1 + 4;
      }
      if (FireDamageLifeTime != 0F) {
        size += 1 + 4;
      }
      if (DetonateIgnoreHeight != 0F) {
        size += 1 + 4;
      }
      if (MaxFireCount != 0F) {
        size += 1 + 4;
      }
      if (FireMaxRange != 0F) {
        size += 1 + 4;
      }
      if (FireSurfaceOffset != 0F) {
        size += 1 + 4;
      }
      if (FireFixDamagePerSeconds != 0F) {
        size += 1 + 4;
      }
      if (FireRunTime != 0F) {
        size += 1 + 4;
      }
      if (SpreadFireWithSmokeDis != 0F) {
        size += 1 + 4;
      }
      if (FireWithSmokeDis != 0F) {
        size += 1 + 4;
      }
      if (MInfernoFireHalfWidth != 0F) {
        size += 1 + 4;
      }
      if (MInfernoFireFullHeight != 0F) {
        size += 2 + 4;
      }
      if (MPerFlameSpawnDuration != 0F) {
        size += 2 + 4;
      }
      if (MInitialSpawnInterval != 0F) {
        size += 2 + 4;
      }
      if (SpreadFireSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpreadFireSound);
      }
      if (StopSpreadFireSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StopSpreadFireSound);
      }
      if (MolotovExplodeSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MolotovExplodeSound);
      }
      if (StopMolotovExplodeSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StopMolotovExplodeSound);
      }
      if (MainFlameEffectAssetIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MainFlameEffectAssetIndex);
      }
      if (SpreadFlameEffectAssetIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpreadFlameEffectAssetIndex);
      }
      if (DispatchFireEffectAssetIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DispatchFireEffectAssetIndex);
      }
      if (FlameHitDamageEffectAssetIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FlameHitDamageEffectAssetIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponAdditionFireLogicFlameData other) {
      if (other == null) {
        return;
      }
      if (other.IsGrenadeBottle != false) {
        IsGrenadeBottle = other.IsGrenadeBottle;
      }
      if (other.MaxDetonateSlope != 0F) {
        MaxDetonateSlope = other.MaxDetonateSlope;
      }
      if (other.DamageTickTime != 0F) {
        DamageTickTime = other.DamageTickTime;
      }
      if (other.FireLifeTime != 0F) {
        FireLifeTime = other.FireLifeTime;
      }
      if (other.MFlameEffectLifeTime != 0F) {
        MFlameEffectLifeTime = other.MFlameEffectLifeTime;
      }
      if (other.FireDamageLifeTime != 0F) {
        FireDamageLifeTime = other.FireDamageLifeTime;
      }
      if (other.DetonateIgnoreHeight != 0F) {
        DetonateIgnoreHeight = other.DetonateIgnoreHeight;
      }
      if (other.MaxFireCount != 0F) {
        MaxFireCount = other.MaxFireCount;
      }
      if (other.FireMaxRange != 0F) {
        FireMaxRange = other.FireMaxRange;
      }
      if (other.FireSurfaceOffset != 0F) {
        FireSurfaceOffset = other.FireSurfaceOffset;
      }
      if (other.FireFixDamagePerSeconds != 0F) {
        FireFixDamagePerSeconds = other.FireFixDamagePerSeconds;
      }
      if (other.FireRunTime != 0F) {
        FireRunTime = other.FireRunTime;
      }
      if (other.SpreadFireWithSmokeDis != 0F) {
        SpreadFireWithSmokeDis = other.SpreadFireWithSmokeDis;
      }
      if (other.FireWithSmokeDis != 0F) {
        FireWithSmokeDis = other.FireWithSmokeDis;
      }
      if (other.MInfernoFireHalfWidth != 0F) {
        MInfernoFireHalfWidth = other.MInfernoFireHalfWidth;
      }
      if (other.MInfernoFireFullHeight != 0F) {
        MInfernoFireFullHeight = other.MInfernoFireFullHeight;
      }
      if (other.MPerFlameSpawnDuration != 0F) {
        MPerFlameSpawnDuration = other.MPerFlameSpawnDuration;
      }
      if (other.MInitialSpawnInterval != 0F) {
        MInitialSpawnInterval = other.MInitialSpawnInterval;
      }
      if (other.SpreadFireSound.Length != 0) {
        SpreadFireSound = other.SpreadFireSound;
      }
      if (other.StopSpreadFireSound.Length != 0) {
        StopSpreadFireSound = other.StopSpreadFireSound;
      }
      if (other.MolotovExplodeSound.Length != 0) {
        MolotovExplodeSound = other.MolotovExplodeSound;
      }
      if (other.StopMolotovExplodeSound.Length != 0) {
        StopMolotovExplodeSound = other.StopMolotovExplodeSound;
      }
      if (other.MainFlameEffectAssetIndex != 0) {
        MainFlameEffectAssetIndex = other.MainFlameEffectAssetIndex;
      }
      if (other.SpreadFlameEffectAssetIndex != 0) {
        SpreadFlameEffectAssetIndex = other.SpreadFlameEffectAssetIndex;
      }
      if (other.DispatchFireEffectAssetIndex != 0) {
        DispatchFireEffectAssetIndex = other.DispatchFireEffectAssetIndex;
      }
      if (other.FlameHitDamageEffectAssetIndex != 0) {
        FlameHitDamageEffectAssetIndex = other.FlameHitDamageEffectAssetIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsGrenadeBottle = input.ReadBool();
            break;
          }
          case 21: {
            MaxDetonateSlope = input.ReadFloat();
            break;
          }
          case 29: {
            DamageTickTime = input.ReadFloat();
            break;
          }
          case 37: {
            FireLifeTime = input.ReadFloat();
            break;
          }
          case 45: {
            MFlameEffectLifeTime = input.ReadFloat();
            break;
          }
          case 53: {
            FireDamageLifeTime = input.ReadFloat();
            break;
          }
          case 61: {
            DetonateIgnoreHeight = input.ReadFloat();
            break;
          }
          case 69: {
            MaxFireCount = input.ReadFloat();
            break;
          }
          case 77: {
            FireMaxRange = input.ReadFloat();
            break;
          }
          case 85: {
            FireSurfaceOffset = input.ReadFloat();
            break;
          }
          case 93: {
            FireFixDamagePerSeconds = input.ReadFloat();
            break;
          }
          case 101: {
            FireRunTime = input.ReadFloat();
            break;
          }
          case 109: {
            SpreadFireWithSmokeDis = input.ReadFloat();
            break;
          }
          case 117: {
            FireWithSmokeDis = input.ReadFloat();
            break;
          }
          case 125: {
            MInfernoFireHalfWidth = input.ReadFloat();
            break;
          }
          case 133: {
            MInfernoFireFullHeight = input.ReadFloat();
            break;
          }
          case 141: {
            MPerFlameSpawnDuration = input.ReadFloat();
            break;
          }
          case 149: {
            MInitialSpawnInterval = input.ReadFloat();
            break;
          }
          case 154: {
            SpreadFireSound = input.ReadString();
            break;
          }
          case 162: {
            StopSpreadFireSound = input.ReadString();
            break;
          }
          case 170: {
            MolotovExplodeSound = input.ReadString();
            break;
          }
          case 178: {
            StopMolotovExplodeSound = input.ReadString();
            break;
          }
          case 184: {
            MainFlameEffectAssetIndex = input.ReadInt32();
            break;
          }
          case 192: {
            SpreadFlameEffectAssetIndex = input.ReadInt32();
            break;
          }
          case 200: {
            DispatchFireEffectAssetIndex = input.ReadInt32();
            break;
          }
          case 208: {
            FlameHitDamageEffectAssetIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
