// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WeaponAdditionFireLogicGasData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from WeaponAdditionFireLogicGasData.proto</summary>
  public static partial class WeaponAdditionFireLogicGasDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WeaponAdditionFireLogicGasData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeaponAdditionFireLogicGasDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRXZWFwb25BZGRpdGlvbkZpcmVMb2dpY0dhc0RhdGEucHJvdG8SCUQxMS5Q",
            "anNvbiKoAQoeV2VhcG9uQWRkaXRpb25GaXJlTG9naWNHYXNEYXRhEhcKD0dh",
            "c0RlY2VsZXJhdGlvbhgBIAEoAhIYChBHYXNMb2dpY0xpZmVUaW1lGAIgASgC",
            "EhkKEUdhc0RhbWFnZVRpY2tUaW1lGAMgASgCEh4KFkdhc0ZpeERhbWFnZVBl",
            "clNlY29uZHMYBCABKAISGAoQR2FzU291bmRUaWNrVGltZRgFIAEoAmIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.WeaponAdditionFireLogicGasData), global::D11.Pjson.WeaponAdditionFireLogicGasData.Parser, new[]{ "GasDeceleration", "GasLogicLifeTime", "GasDamageTickTime", "GasFixDamagePerSeconds", "GasSoundTickTime" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponAdditionFireLogicGasData : pb::IMessage<WeaponAdditionFireLogicGasData> {
    private static readonly pb::MessageParser<WeaponAdditionFireLogicGasData> _parser = new pb::MessageParser<WeaponAdditionFireLogicGasData>(() => new WeaponAdditionFireLogicGasData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponAdditionFireLogicGasData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.WeaponAdditionFireLogicGasDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponAdditionFireLogicGasData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponAdditionFireLogicGasData(WeaponAdditionFireLogicGasData other) : this() {
      gasDeceleration_ = other.gasDeceleration_;
      gasLogicLifeTime_ = other.gasLogicLifeTime_;
      gasDamageTickTime_ = other.gasDamageTickTime_;
      gasFixDamagePerSeconds_ = other.gasFixDamagePerSeconds_;
      gasSoundTickTime_ = other.gasSoundTickTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponAdditionFireLogicGasData Clone() {
      return new WeaponAdditionFireLogicGasData(this);
    }

    /// <summary>Field number for the "GasDeceleration" field.</summary>
    public const int GasDecelerationFieldNumber = 1;
    private float gasDeceleration_;
    /// <summary>
    /// 特殊开火方式导致的命中减速比例，不减速为0 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GasDeceleration {
      get { return gasDeceleration_; }
      set {
        gasDeceleration_ = value;
      }
    }

    /// <summary>Field number for the "GasLogicLifeTime" field.</summary>
    public const int GasLogicLifeTimeFieldNumber = 2;
    private float gasLogicLifeTime_;
    /// <summary>
    /// GasLogicLifeTime 持续时间,如毒气弹持续伤害时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GasLogicLifeTime {
      get { return gasLogicLifeTime_; }
      set {
        gasLogicLifeTime_ = value;
      }
    }

    /// <summary>Field number for the "GasDamageTickTime" field.</summary>
    public const int GasDamageTickTimeFieldNumber = 3;
    private float gasDamageTickTime_;
    /// <summary>
    /// 如毒气弹内伤害间隔时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GasDamageTickTime {
      get { return gasDamageTickTime_; }
      set {
        gasDamageTickTime_ = value;
      }
    }

    /// <summary>Field number for the "GasFixDamagePerSeconds" field.</summary>
    public const int GasFixDamagePerSecondsFieldNumber = 4;
    private float gasFixDamagePerSeconds_;
    /// <summary>
    /// 毒气弹每秒固定伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GasFixDamagePerSeconds {
      get { return gasFixDamagePerSeconds_; }
      set {
        gasFixDamagePerSeconds_ = value;
      }
    }

    /// <summary>Field number for the "GasSoundTickTime" field.</summary>
    public const int GasSoundTickTimeFieldNumber = 5;
    private float gasSoundTickTime_;
    /// <summary>
    /// 毒气弹音效播放间隔时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GasSoundTickTime {
      get { return gasSoundTickTime_; }
      set {
        gasSoundTickTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponAdditionFireLogicGasData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponAdditionFireLogicGasData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GasDeceleration, other.GasDeceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GasLogicLifeTime, other.GasLogicLifeTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GasDamageTickTime, other.GasDamageTickTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GasFixDamagePerSeconds, other.GasFixDamagePerSeconds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GasSoundTickTime, other.GasSoundTickTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GasDeceleration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GasDeceleration);
      if (GasLogicLifeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GasLogicLifeTime);
      if (GasDamageTickTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GasDamageTickTime);
      if (GasFixDamagePerSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GasFixDamagePerSeconds);
      if (GasSoundTickTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GasSoundTickTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GasDeceleration != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(GasDeceleration);
      }
      if (GasLogicLifeTime != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(GasLogicLifeTime);
      }
      if (GasDamageTickTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(GasDamageTickTime);
      }
      if (GasFixDamagePerSeconds != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(GasFixDamagePerSeconds);
      }
      if (GasSoundTickTime != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(GasSoundTickTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GasDeceleration != 0F) {
        size += 1 + 4;
      }
      if (GasLogicLifeTime != 0F) {
        size += 1 + 4;
      }
      if (GasDamageTickTime != 0F) {
        size += 1 + 4;
      }
      if (GasFixDamagePerSeconds != 0F) {
        size += 1 + 4;
      }
      if (GasSoundTickTime != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponAdditionFireLogicGasData other) {
      if (other == null) {
        return;
      }
      if (other.GasDeceleration != 0F) {
        GasDeceleration = other.GasDeceleration;
      }
      if (other.GasLogicLifeTime != 0F) {
        GasLogicLifeTime = other.GasLogicLifeTime;
      }
      if (other.GasDamageTickTime != 0F) {
        GasDamageTickTime = other.GasDamageTickTime;
      }
      if (other.GasFixDamagePerSeconds != 0F) {
        GasFixDamagePerSeconds = other.GasFixDamagePerSeconds;
      }
      if (other.GasSoundTickTime != 0F) {
        GasSoundTickTime = other.GasSoundTickTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            GasDeceleration = input.ReadFloat();
            break;
          }
          case 21: {
            GasLogicLifeTime = input.ReadFloat();
            break;
          }
          case 29: {
            GasDamageTickTime = input.ReadFloat();
            break;
          }
          case 37: {
            GasFixDamagePerSeconds = input.ReadFloat();
            break;
          }
          case 45: {
            GasSoundTickTime = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
