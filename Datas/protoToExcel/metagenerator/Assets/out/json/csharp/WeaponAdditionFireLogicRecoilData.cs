// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WeaponAdditionFireLogicRecoilData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from WeaponAdditionFireLogicRecoilData.proto</summary>
  public static partial class WeaponAdditionFireLogicRecoilDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WeaponAdditionFireLogicRecoilData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeaponAdditionFireLogicRecoilDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CidXZWFwb25BZGRpdGlvbkZpcmVMb2dpY1JlY29pbERhdGEucHJvdG8SCUQx",
            "MS5QanNvbiKxCgohV2VhcG9uQWRkaXRpb25GaXJlTG9naWNSZWNvaWxEYXRh",
            "EhgKEERlY2F5U3ByZWFkU3BlZWQYASABKAISFAoMRGlzcGVyc2VCYXNlGAIg",
            "ASgCEhcKD0luYWNjdXJhY3lTdGFuZBgDIAEoAhIYChBJbmFjY3VyYWN5Q3Jv",
            "dWNoGAQgASgCEhgKEEluYWNjdXJhY3lMYWRkZXIYBSABKAISFgoOSW5hY2N1",
            "cmFjeUxhbmQYBiABKAISFgoOSW5hY2N1cmFjeU1vdmUYByABKAISHAoUSW5h",
            "Y2N1cmFjeVNsaWVudFN0ZXAYCCABKAISFgoOSW5hY2N1cmFjeUp1bXAYCSAB",
            "KAISHwoXSW5hY2N1cmFjeU1vdmVJbml0VmFsdWUYCiABKAISHgoWSW5hY2N1",
            "cmFjeVZlbG9jaXR5TW92ZRgLIAEoAhIhChlJbmFjY3VyYWN5VmVsb2NpdHlN",
            "b3ZlTWF4GAwgASgCEiEKGUluYWNjdXJhY3lWZWxvY2l0eU1vdmVNaW4YDSAB",
            "KAISHwoXSW5hY2N1cmFjeUp1bXBJbml0VmFsdWUYDiABKAISHgoWSW5hY2N1",
            "cmFjeVZlbG9jaXR5SnVtcBgPIAEoAhIhChlJbmFjY3VyYWN5VmVsb2NpdHlK",
            "dW1wTWF4GBAgASgCEiUKHUluYWNjdXJhY3lTbGllbnRTdGVwSW5pdFZhbHVl",
            "GBEgASgCEiQKHEluYWNjdXJhY3lWZWxvY2l0eVNsaWVudFN0ZXAYEiABKAIS",
            "JwofSW5hY2N1cmFjeVZlbG9jaXR5U2xpZW50U3RlcE1heBgTIAEoAhIeChZJ",
            "bmFjY3VyYWN5VmVsb2NpdHlCYXNlGBQgASgCEh8KF1B1bmNoQW5nbGVSZWNv",
            "dmVyeVNwZWVkGBUgASgCEhkKEVB1bmNoQW5nbGVEdW1waW5nGBYgASgCEiAK",
            "GFB1bmNoQW5nbGVGaXJlRGVjYXlSYXRpbxgXIAEoAhIgChhEZWNheVNwcmFk",
            "TGFuZFZhbHVlU3BlZWQYGCABKAISFAoMUmVjb2lsVXBCYXNlGBkgASgCEhgK",
            "EFJlY29pbFVwTW9kaWZpZXIYGiABKAISEwoLUmVjb2lsVXBNYXgYGyABKAIS",
            "EgoKUHVuY2hBbmdsZRgcIAMoAhIhChlDcm9zc2hhaXJNb3ZlQnlQdW5jaEFu",
            "Z2xlGB0gAygCEhMKC09mZlNldEFuZ2xlGB4gAygCEhwKFENyb3NzaGFpck1h",
            "eERpc3RhbmNlGB8gASgCEhIKClJlY29pbFR5cGUYICABKAUSEgoKU3ByZWFk",
            "VHlwZRghIAEoBRIiChpEZWNheU1pcnJvck9wZW5TcHJlYWRTcGVlZBgiIAEo",
            "AhIaChJPbmVTaG90QnVsbGV0Q291bnQYIyABKAUSGgoSVHJpcGxlRmlyZUlu",
            "dGVydmFsGCQgASgCEhoKElJlY3ljbGVSZWNvaWxJbmRleBglIAEoBRIZChFT",
            "ZWN0b3JSZWNvaWxBbmdsZRgmIAEoAhIcChRGaXJlQ29udGludWVJbnRlcm5l",
            "bBgnIAEoAhIbChNJc0NvbnRpbnVlRmlyZUNvdW50GCggASgIEhcKD0ZpcmVD",
            "b250aW51ZU1heBgpIAEoBRIjChtNaWRkbGVBbmdsZUVuaGFuY2VtZW50UmF0",
            "aW8YKiABKAISIgoaUmlnaHRBbmdsZUVuaGFuY2VtZW50UmF0aW8YKyABKAIS",
            "IQoZTGVmdEFuZ2xlRW5oYW5jZW1lbnRSYXRpbxgsIAEoAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.WeaponAdditionFireLogicRecoilData), global::D11.Pjson.WeaponAdditionFireLogicRecoilData.Parser, new[]{ "DecaySpreadSpeed", "DisperseBase", "InaccuracyStand", "InaccuracyCrouch", "InaccuracyLadder", "InaccuracyLand", "InaccuracyMove", "InaccuracySlientStep", "InaccuracyJump", "InaccuracyMoveInitValue", "InaccuracyVelocityMove", "InaccuracyVelocityMoveMax", "InaccuracyVelocityMoveMin", "InaccuracyJumpInitValue", "InaccuracyVelocityJump", "InaccuracyVelocityJumpMax", "InaccuracySlientStepInitValue", "InaccuracyVelocitySlientStep", "InaccuracyVelocitySlientStepMax", "InaccuracyVelocityBase", "PunchAngleRecoverySpeed", "PunchAngleDumping", "PunchAngleFireDecayRatio", "DecaySpradLandValueSpeed", "RecoilUpBase", "RecoilUpModifier", "RecoilUpMax", "PunchAngle", "CrosshairMoveByPunchAngle", "OffSetAngle", "CrosshairMaxDistance", "RecoilType", "SpreadType", "DecayMirrorOpenSpreadSpeed", "OneShotBulletCount", "TripleFireInterval", "RecycleRecoilIndex", "SectorRecoilAngle", "FireContinueInternel", "IsContinueFireCount", "FireContinueMax", "MiddleAngleEnhancementRatio", "RightAngleEnhancementRatio", "LeftAngleEnhancementRatio" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponAdditionFireLogicRecoilData : pb::IMessage<WeaponAdditionFireLogicRecoilData> {
    private static readonly pb::MessageParser<WeaponAdditionFireLogicRecoilData> _parser = new pb::MessageParser<WeaponAdditionFireLogicRecoilData>(() => new WeaponAdditionFireLogicRecoilData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponAdditionFireLogicRecoilData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.WeaponAdditionFireLogicRecoilDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponAdditionFireLogicRecoilData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponAdditionFireLogicRecoilData(WeaponAdditionFireLogicRecoilData other) : this() {
      decaySpreadSpeed_ = other.decaySpreadSpeed_;
      disperseBase_ = other.disperseBase_;
      inaccuracyStand_ = other.inaccuracyStand_;
      inaccuracyCrouch_ = other.inaccuracyCrouch_;
      inaccuracyLadder_ = other.inaccuracyLadder_;
      inaccuracyLand_ = other.inaccuracyLand_;
      inaccuracyMove_ = other.inaccuracyMove_;
      inaccuracySlientStep_ = other.inaccuracySlientStep_;
      inaccuracyJump_ = other.inaccuracyJump_;
      inaccuracyMoveInitValue_ = other.inaccuracyMoveInitValue_;
      inaccuracyVelocityMove_ = other.inaccuracyVelocityMove_;
      inaccuracyVelocityMoveMax_ = other.inaccuracyVelocityMoveMax_;
      inaccuracyVelocityMoveMin_ = other.inaccuracyVelocityMoveMin_;
      inaccuracyJumpInitValue_ = other.inaccuracyJumpInitValue_;
      inaccuracyVelocityJump_ = other.inaccuracyVelocityJump_;
      inaccuracyVelocityJumpMax_ = other.inaccuracyVelocityJumpMax_;
      inaccuracySlientStepInitValue_ = other.inaccuracySlientStepInitValue_;
      inaccuracyVelocitySlientStep_ = other.inaccuracyVelocitySlientStep_;
      inaccuracyVelocitySlientStepMax_ = other.inaccuracyVelocitySlientStepMax_;
      inaccuracyVelocityBase_ = other.inaccuracyVelocityBase_;
      punchAngleRecoverySpeed_ = other.punchAngleRecoverySpeed_;
      punchAngleDumping_ = other.punchAngleDumping_;
      punchAngleFireDecayRatio_ = other.punchAngleFireDecayRatio_;
      decaySpradLandValueSpeed_ = other.decaySpradLandValueSpeed_;
      recoilUpBase_ = other.recoilUpBase_;
      recoilUpModifier_ = other.recoilUpModifier_;
      recoilUpMax_ = other.recoilUpMax_;
      punchAngle_ = other.punchAngle_.Clone();
      crosshairMoveByPunchAngle_ = other.crosshairMoveByPunchAngle_.Clone();
      offSetAngle_ = other.offSetAngle_.Clone();
      crosshairMaxDistance_ = other.crosshairMaxDistance_;
      recoilType_ = other.recoilType_;
      spreadType_ = other.spreadType_;
      decayMirrorOpenSpreadSpeed_ = other.decayMirrorOpenSpreadSpeed_;
      oneShotBulletCount_ = other.oneShotBulletCount_;
      tripleFireInterval_ = other.tripleFireInterval_;
      recycleRecoilIndex_ = other.recycleRecoilIndex_;
      sectorRecoilAngle_ = other.sectorRecoilAngle_;
      fireContinueInternel_ = other.fireContinueInternel_;
      isContinueFireCount_ = other.isContinueFireCount_;
      fireContinueMax_ = other.fireContinueMax_;
      middleAngleEnhancementRatio_ = other.middleAngleEnhancementRatio_;
      rightAngleEnhancementRatio_ = other.rightAngleEnhancementRatio_;
      leftAngleEnhancementRatio_ = other.leftAngleEnhancementRatio_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponAdditionFireLogicRecoilData Clone() {
      return new WeaponAdditionFireLogicRecoilData(this);
    }

    /// <summary>Field number for the "DecaySpreadSpeed" field.</summary>
    public const int DecaySpreadSpeedFieldNumber = 1;
    private float decaySpreadSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DecaySpreadSpeed {
      get { return decaySpreadSpeed_; }
      set {
        decaySpreadSpeed_ = value;
      }
    }

    /// <summary>Field number for the "DisperseBase" field.</summary>
    public const int DisperseBaseFieldNumber = 2;
    private float disperseBase_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DisperseBase {
      get { return disperseBase_; }
      set {
        disperseBase_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyStand" field.</summary>
    public const int InaccuracyStandFieldNumber = 3;
    private float inaccuracyStand_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyStand {
      get { return inaccuracyStand_; }
      set {
        inaccuracyStand_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyCrouch" field.</summary>
    public const int InaccuracyCrouchFieldNumber = 4;
    private float inaccuracyCrouch_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyCrouch {
      get { return inaccuracyCrouch_; }
      set {
        inaccuracyCrouch_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyLadder" field.</summary>
    public const int InaccuracyLadderFieldNumber = 5;
    private float inaccuracyLadder_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyLadder {
      get { return inaccuracyLadder_; }
      set {
        inaccuracyLadder_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyLand" field.</summary>
    public const int InaccuracyLandFieldNumber = 6;
    private float inaccuracyLand_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyLand {
      get { return inaccuracyLand_; }
      set {
        inaccuracyLand_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyMove" field.</summary>
    public const int InaccuracyMoveFieldNumber = 7;
    private float inaccuracyMove_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyMove {
      get { return inaccuracyMove_; }
      set {
        inaccuracyMove_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracySlientStep" field.</summary>
    public const int InaccuracySlientStepFieldNumber = 8;
    private float inaccuracySlientStep_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracySlientStep {
      get { return inaccuracySlientStep_; }
      set {
        inaccuracySlientStep_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyJump" field.</summary>
    public const int InaccuracyJumpFieldNumber = 9;
    private float inaccuracyJump_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyJump {
      get { return inaccuracyJump_; }
      set {
        inaccuracyJump_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyMoveInitValue" field.</summary>
    public const int InaccuracyMoveInitValueFieldNumber = 10;
    private float inaccuracyMoveInitValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyMoveInitValue {
      get { return inaccuracyMoveInitValue_; }
      set {
        inaccuracyMoveInitValue_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyVelocityMove" field.</summary>
    public const int InaccuracyVelocityMoveFieldNumber = 11;
    private float inaccuracyVelocityMove_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyVelocityMove {
      get { return inaccuracyVelocityMove_; }
      set {
        inaccuracyVelocityMove_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyVelocityMoveMax" field.</summary>
    public const int InaccuracyVelocityMoveMaxFieldNumber = 12;
    private float inaccuracyVelocityMoveMax_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyVelocityMoveMax {
      get { return inaccuracyVelocityMoveMax_; }
      set {
        inaccuracyVelocityMoveMax_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyVelocityMoveMin" field.</summary>
    public const int InaccuracyVelocityMoveMinFieldNumber = 13;
    private float inaccuracyVelocityMoveMin_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyVelocityMoveMin {
      get { return inaccuracyVelocityMoveMin_; }
      set {
        inaccuracyVelocityMoveMin_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyJumpInitValue" field.</summary>
    public const int InaccuracyJumpInitValueFieldNumber = 14;
    private float inaccuracyJumpInitValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyJumpInitValue {
      get { return inaccuracyJumpInitValue_; }
      set {
        inaccuracyJumpInitValue_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyVelocityJump" field.</summary>
    public const int InaccuracyVelocityJumpFieldNumber = 15;
    private float inaccuracyVelocityJump_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyVelocityJump {
      get { return inaccuracyVelocityJump_; }
      set {
        inaccuracyVelocityJump_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyVelocityJumpMax" field.</summary>
    public const int InaccuracyVelocityJumpMaxFieldNumber = 16;
    private float inaccuracyVelocityJumpMax_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyVelocityJumpMax {
      get { return inaccuracyVelocityJumpMax_; }
      set {
        inaccuracyVelocityJumpMax_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracySlientStepInitValue" field.</summary>
    public const int InaccuracySlientStepInitValueFieldNumber = 17;
    private float inaccuracySlientStepInitValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracySlientStepInitValue {
      get { return inaccuracySlientStepInitValue_; }
      set {
        inaccuracySlientStepInitValue_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyVelocitySlientStep" field.</summary>
    public const int InaccuracyVelocitySlientStepFieldNumber = 18;
    private float inaccuracyVelocitySlientStep_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyVelocitySlientStep {
      get { return inaccuracyVelocitySlientStep_; }
      set {
        inaccuracyVelocitySlientStep_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyVelocitySlientStepMax" field.</summary>
    public const int InaccuracyVelocitySlientStepMaxFieldNumber = 19;
    private float inaccuracyVelocitySlientStepMax_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyVelocitySlientStepMax {
      get { return inaccuracyVelocitySlientStepMax_; }
      set {
        inaccuracyVelocitySlientStepMax_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyVelocityBase" field.</summary>
    public const int InaccuracyVelocityBaseFieldNumber = 20;
    private float inaccuracyVelocityBase_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyVelocityBase {
      get { return inaccuracyVelocityBase_; }
      set {
        inaccuracyVelocityBase_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleRecoverySpeed" field.</summary>
    public const int PunchAngleRecoverySpeedFieldNumber = 21;
    private float punchAngleRecoverySpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleRecoverySpeed {
      get { return punchAngleRecoverySpeed_; }
      set {
        punchAngleRecoverySpeed_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleDumping" field.</summary>
    public const int PunchAngleDumpingFieldNumber = 22;
    private float punchAngleDumping_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleDumping {
      get { return punchAngleDumping_; }
      set {
        punchAngleDumping_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleFireDecayRatio" field.</summary>
    public const int PunchAngleFireDecayRatioFieldNumber = 23;
    private float punchAngleFireDecayRatio_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleFireDecayRatio {
      get { return punchAngleFireDecayRatio_; }
      set {
        punchAngleFireDecayRatio_ = value;
      }
    }

    /// <summary>Field number for the "DecaySpradLandValueSpeed" field.</summary>
    public const int DecaySpradLandValueSpeedFieldNumber = 24;
    private float decaySpradLandValueSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DecaySpradLandValueSpeed {
      get { return decaySpradLandValueSpeed_; }
      set {
        decaySpradLandValueSpeed_ = value;
      }
    }

    /// <summary>Field number for the "RecoilUpBase" field.</summary>
    public const int RecoilUpBaseFieldNumber = 25;
    private float recoilUpBase_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilUpBase {
      get { return recoilUpBase_; }
      set {
        recoilUpBase_ = value;
      }
    }

    /// <summary>Field number for the "RecoilUpModifier" field.</summary>
    public const int RecoilUpModifierFieldNumber = 26;
    private float recoilUpModifier_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilUpModifier {
      get { return recoilUpModifier_; }
      set {
        recoilUpModifier_ = value;
      }
    }

    /// <summary>Field number for the "RecoilUpMax" field.</summary>
    public const int RecoilUpMaxFieldNumber = 27;
    private float recoilUpMax_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilUpMax {
      get { return recoilUpMax_; }
      set {
        recoilUpMax_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngle" field.</summary>
    public const int PunchAngleFieldNumber = 28;
    private static readonly pb::FieldCodec<float> _repeated_punchAngle_codec
        = pb::FieldCodec.ForFloat(226);
    private readonly pbc::RepeatedField<float> punchAngle_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 连发射击点角度数组 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> PunchAngle {
      get { return punchAngle_; }
    }

    /// <summary>Field number for the "CrosshairMoveByPunchAngle" field.</summary>
    public const int CrosshairMoveByPunchAngleFieldNumber = 29;
    private static readonly pb::FieldCodec<float> _repeated_crosshairMoveByPunchAngle_codec
        = pb::FieldCodec.ForFloat(234);
    private readonly pbc::RepeatedField<float> crosshairMoveByPunchAngle_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 准心随后座力移动比例数组 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> CrosshairMoveByPunchAngle {
      get { return crosshairMoveByPunchAngle_; }
    }

    /// <summary>Field number for the "OffSetAngle" field.</summary>
    public const int OffSetAngleFieldNumber = 30;
    private static readonly pb::FieldCodec<float> _repeated_offSetAngle_codec
        = pb::FieldCodec.ForFloat(242);
    private readonly pbc::RepeatedField<float> offSetAngle_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 每次射击的所有子弹偏移角度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> OffSetAngle {
      get { return offSetAngle_; }
    }

    /// <summary>Field number for the "CrosshairMaxDistance" field.</summary>
    public const int CrosshairMaxDistanceFieldNumber = 31;
    private float crosshairMaxDistance_;
    /// <summary>
    /// 准心单次最大移动距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrosshairMaxDistance {
      get { return crosshairMaxDistance_; }
      set {
        crosshairMaxDistance_ = value;
      }
    }

    /// <summary>Field number for the "RecoilType" field.</summary>
    public const int RecoilTypeFieldNumber = 32;
    private int recoilType_;
    /// <summary>
    /// 后座力类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecoilType {
      get { return recoilType_; }
      set {
        recoilType_ = value;
      }
    }

    /// <summary>Field number for the "SpreadType" field.</summary>
    public const int SpreadTypeFieldNumber = 33;
    private int spreadType_;
    /// <summary>
    /// 散发类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpreadType {
      get { return spreadType_; }
      set {
        spreadType_ = value;
      }
    }

    /// <summary>Field number for the "DecayMirrorOpenSpreadSpeed" field.</summary>
    public const int DecayMirrorOpenSpreadSpeedFieldNumber = 34;
    private float decayMirrorOpenSpreadSpeed_;
    /// <summary>
    /// 开镜散发回复速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DecayMirrorOpenSpreadSpeed {
      get { return decayMirrorOpenSpreadSpeed_; }
      set {
        decayMirrorOpenSpreadSpeed_ = value;
      }
    }

    /// <summary>Field number for the "OneShotBulletCount" field.</summary>
    public const int OneShotBulletCountFieldNumber = 35;
    private int oneShotBulletCount_;
    /// <summary>
    /// 一次射击子弹数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OneShotBulletCount {
      get { return oneShotBulletCount_; }
      set {
        oneShotBulletCount_ = value;
      }
    }

    /// <summary>Field number for the "TripleFireInterval" field.</summary>
    public const int TripleFireIntervalFieldNumber = 36;
    private float tripleFireInterval_;
    /// <summary>
    /// 三连发攻击间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TripleFireInterval {
      get { return tripleFireInterval_; }
      set {
        tripleFireInterval_ = value;
      }
    }

    /// <summary>Field number for the "RecycleRecoilIndex" field.</summary>
    public const int RecycleRecoilIndexFieldNumber = 37;
    private int recycleRecoilIndex_;
    /// <summary>
    /// 循环后座力的开始位置 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecycleRecoilIndex {
      get { return recycleRecoilIndex_; }
      set {
        recycleRecoilIndex_ = value;
      }
    }

    /// <summary>Field number for the "SectorRecoilAngle" field.</summary>
    public const int SectorRecoilAngleFieldNumber = 38;
    private float sectorRecoilAngle_;
    /// <summary>
    /// 扇形后座力的角度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SectorRecoilAngle {
      get { return sectorRecoilAngle_; }
      set {
        sectorRecoilAngle_ = value;
      }
    }

    /// <summary>Field number for the "FireContinueInternel" field.</summary>
    public const int FireContinueInternelFieldNumber = 39;
    private float fireContinueInternel_;
    /// <summary>
    /// 连发回复间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireContinueInternel {
      get { return fireContinueInternel_; }
      set {
        fireContinueInternel_ = value;
      }
    }

    /// <summary>Field number for the "IsContinueFireCount" field.</summary>
    public const int IsContinueFireCountFieldNumber = 40;
    private bool isContinueFireCount_;
    /// <summary>
    /// 连发连续变化 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsContinueFireCount {
      get { return isContinueFireCount_; }
      set {
        isContinueFireCount_ = value;
      }
    }

    /// <summary>Field number for the "FireContinueMax" field.</summary>
    public const int FireContinueMaxFieldNumber = 41;
    private int fireContinueMax_;
    /// <summary>
    /// 连续散发最大值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FireContinueMax {
      get { return fireContinueMax_; }
      set {
        fireContinueMax_ = value;
      }
    }

    /// <summary>Field number for the "MiddleAngleEnhancementRatio" field.</summary>
    public const int MiddleAngleEnhancementRatioFieldNumber = 42;
    private float middleAngleEnhancementRatio_;
    /// <summary>
    /// 居中镜头晃动比例 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MiddleAngleEnhancementRatio {
      get { return middleAngleEnhancementRatio_; }
      set {
        middleAngleEnhancementRatio_ = value;
      }
    }

    /// <summary>Field number for the "RightAngleEnhancementRatio" field.</summary>
    public const int RightAngleEnhancementRatioFieldNumber = 43;
    private float rightAngleEnhancementRatio_;
    /// <summary>
    /// 居右镜头晃动比例 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RightAngleEnhancementRatio {
      get { return rightAngleEnhancementRatio_; }
      set {
        rightAngleEnhancementRatio_ = value;
      }
    }

    /// <summary>Field number for the "LeftAngleEnhancementRatio" field.</summary>
    public const int LeftAngleEnhancementRatioFieldNumber = 44;
    private float leftAngleEnhancementRatio_;
    /// <summary>
    /// 居左镜头晃动比例 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LeftAngleEnhancementRatio {
      get { return leftAngleEnhancementRatio_; }
      set {
        leftAngleEnhancementRatio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponAdditionFireLogicRecoilData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponAdditionFireLogicRecoilData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DecaySpreadSpeed, other.DecaySpreadSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisperseBase, other.DisperseBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyStand, other.InaccuracyStand)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyCrouch, other.InaccuracyCrouch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyLadder, other.InaccuracyLadder)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyLand, other.InaccuracyLand)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyMove, other.InaccuracyMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracySlientStep, other.InaccuracySlientStep)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyJump, other.InaccuracyJump)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyMoveInitValue, other.InaccuracyMoveInitValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyVelocityMove, other.InaccuracyVelocityMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyVelocityMoveMax, other.InaccuracyVelocityMoveMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyVelocityMoveMin, other.InaccuracyVelocityMoveMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyJumpInitValue, other.InaccuracyJumpInitValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyVelocityJump, other.InaccuracyVelocityJump)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyVelocityJumpMax, other.InaccuracyVelocityJumpMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracySlientStepInitValue, other.InaccuracySlientStepInitValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyVelocitySlientStep, other.InaccuracyVelocitySlientStep)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyVelocitySlientStepMax, other.InaccuracyVelocitySlientStepMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyVelocityBase, other.InaccuracyVelocityBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleRecoverySpeed, other.PunchAngleRecoverySpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleDumping, other.PunchAngleDumping)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleFireDecayRatio, other.PunchAngleFireDecayRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DecaySpradLandValueSpeed, other.DecaySpradLandValueSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilUpBase, other.RecoilUpBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilUpModifier, other.RecoilUpModifier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilUpMax, other.RecoilUpMax)) return false;
      if(!punchAngle_.Equals(other.punchAngle_)) return false;
      if(!crosshairMoveByPunchAngle_.Equals(other.crosshairMoveByPunchAngle_)) return false;
      if(!offSetAngle_.Equals(other.offSetAngle_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrosshairMaxDistance, other.CrosshairMaxDistance)) return false;
      if (RecoilType != other.RecoilType) return false;
      if (SpreadType != other.SpreadType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DecayMirrorOpenSpreadSpeed, other.DecayMirrorOpenSpreadSpeed)) return false;
      if (OneShotBulletCount != other.OneShotBulletCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TripleFireInterval, other.TripleFireInterval)) return false;
      if (RecycleRecoilIndex != other.RecycleRecoilIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SectorRecoilAngle, other.SectorRecoilAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireContinueInternel, other.FireContinueInternel)) return false;
      if (IsContinueFireCount != other.IsContinueFireCount) return false;
      if (FireContinueMax != other.FireContinueMax) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MiddleAngleEnhancementRatio, other.MiddleAngleEnhancementRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RightAngleEnhancementRatio, other.RightAngleEnhancementRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LeftAngleEnhancementRatio, other.LeftAngleEnhancementRatio)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DecaySpreadSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DecaySpreadSpeed);
      if (DisperseBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisperseBase);
      if (InaccuracyStand != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyStand);
      if (InaccuracyCrouch != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyCrouch);
      if (InaccuracyLadder != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyLadder);
      if (InaccuracyLand != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyLand);
      if (InaccuracyMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyMove);
      if (InaccuracySlientStep != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracySlientStep);
      if (InaccuracyJump != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyJump);
      if (InaccuracyMoveInitValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyMoveInitValue);
      if (InaccuracyVelocityMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyVelocityMove);
      if (InaccuracyVelocityMoveMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyVelocityMoveMax);
      if (InaccuracyVelocityMoveMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyVelocityMoveMin);
      if (InaccuracyJumpInitValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyJumpInitValue);
      if (InaccuracyVelocityJump != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyVelocityJump);
      if (InaccuracyVelocityJumpMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyVelocityJumpMax);
      if (InaccuracySlientStepInitValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracySlientStepInitValue);
      if (InaccuracyVelocitySlientStep != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyVelocitySlientStep);
      if (InaccuracyVelocitySlientStepMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyVelocitySlientStepMax);
      if (InaccuracyVelocityBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyVelocityBase);
      if (PunchAngleRecoverySpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleRecoverySpeed);
      if (PunchAngleDumping != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleDumping);
      if (PunchAngleFireDecayRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleFireDecayRatio);
      if (DecaySpradLandValueSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DecaySpradLandValueSpeed);
      if (RecoilUpBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilUpBase);
      if (RecoilUpModifier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilUpModifier);
      if (RecoilUpMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilUpMax);
      hash ^= punchAngle_.GetHashCode();
      hash ^= crosshairMoveByPunchAngle_.GetHashCode();
      hash ^= offSetAngle_.GetHashCode();
      if (CrosshairMaxDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrosshairMaxDistance);
      if (RecoilType != 0) hash ^= RecoilType.GetHashCode();
      if (SpreadType != 0) hash ^= SpreadType.GetHashCode();
      if (DecayMirrorOpenSpreadSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DecayMirrorOpenSpreadSpeed);
      if (OneShotBulletCount != 0) hash ^= OneShotBulletCount.GetHashCode();
      if (TripleFireInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TripleFireInterval);
      if (RecycleRecoilIndex != 0) hash ^= RecycleRecoilIndex.GetHashCode();
      if (SectorRecoilAngle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SectorRecoilAngle);
      if (FireContinueInternel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireContinueInternel);
      if (IsContinueFireCount != false) hash ^= IsContinueFireCount.GetHashCode();
      if (FireContinueMax != 0) hash ^= FireContinueMax.GetHashCode();
      if (MiddleAngleEnhancementRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MiddleAngleEnhancementRatio);
      if (RightAngleEnhancementRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RightAngleEnhancementRatio);
      if (LeftAngleEnhancementRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LeftAngleEnhancementRatio);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DecaySpreadSpeed != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(DecaySpreadSpeed);
      }
      if (DisperseBase != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(DisperseBase);
      }
      if (InaccuracyStand != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(InaccuracyStand);
      }
      if (InaccuracyCrouch != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(InaccuracyCrouch);
      }
      if (InaccuracyLadder != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(InaccuracyLadder);
      }
      if (InaccuracyLand != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(InaccuracyLand);
      }
      if (InaccuracyMove != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(InaccuracyMove);
      }
      if (InaccuracySlientStep != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(InaccuracySlientStep);
      }
      if (InaccuracyJump != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(InaccuracyJump);
      }
      if (InaccuracyMoveInitValue != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(InaccuracyMoveInitValue);
      }
      if (InaccuracyVelocityMove != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(InaccuracyVelocityMove);
      }
      if (InaccuracyVelocityMoveMax != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(InaccuracyVelocityMoveMax);
      }
      if (InaccuracyVelocityMoveMin != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(InaccuracyVelocityMoveMin);
      }
      if (InaccuracyJumpInitValue != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(InaccuracyJumpInitValue);
      }
      if (InaccuracyVelocityJump != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(InaccuracyVelocityJump);
      }
      if (InaccuracyVelocityJumpMax != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(InaccuracyVelocityJumpMax);
      }
      if (InaccuracySlientStepInitValue != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(InaccuracySlientStepInitValue);
      }
      if (InaccuracyVelocitySlientStep != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(InaccuracyVelocitySlientStep);
      }
      if (InaccuracyVelocitySlientStepMax != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(InaccuracyVelocitySlientStepMax);
      }
      if (InaccuracyVelocityBase != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(InaccuracyVelocityBase);
      }
      if (PunchAngleRecoverySpeed != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(PunchAngleRecoverySpeed);
      }
      if (PunchAngleDumping != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(PunchAngleDumping);
      }
      if (PunchAngleFireDecayRatio != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(PunchAngleFireDecayRatio);
      }
      if (DecaySpradLandValueSpeed != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(DecaySpradLandValueSpeed);
      }
      if (RecoilUpBase != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(RecoilUpBase);
      }
      if (RecoilUpModifier != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(RecoilUpModifier);
      }
      if (RecoilUpMax != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(RecoilUpMax);
      }
      punchAngle_.WriteTo(output, _repeated_punchAngle_codec);
      crosshairMoveByPunchAngle_.WriteTo(output, _repeated_crosshairMoveByPunchAngle_codec);
      offSetAngle_.WriteTo(output, _repeated_offSetAngle_codec);
      if (CrosshairMaxDistance != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(CrosshairMaxDistance);
      }
      if (RecoilType != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(RecoilType);
      }
      if (SpreadType != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(SpreadType);
      }
      if (DecayMirrorOpenSpreadSpeed != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(DecayMirrorOpenSpreadSpeed);
      }
      if (OneShotBulletCount != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(OneShotBulletCount);
      }
      if (TripleFireInterval != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(TripleFireInterval);
      }
      if (RecycleRecoilIndex != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(RecycleRecoilIndex);
      }
      if (SectorRecoilAngle != 0F) {
        output.WriteRawTag(181, 2);
        output.WriteFloat(SectorRecoilAngle);
      }
      if (FireContinueInternel != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(FireContinueInternel);
      }
      if (IsContinueFireCount != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(IsContinueFireCount);
      }
      if (FireContinueMax != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(FireContinueMax);
      }
      if (MiddleAngleEnhancementRatio != 0F) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(MiddleAngleEnhancementRatio);
      }
      if (RightAngleEnhancementRatio != 0F) {
        output.WriteRawTag(221, 2);
        output.WriteFloat(RightAngleEnhancementRatio);
      }
      if (LeftAngleEnhancementRatio != 0F) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(LeftAngleEnhancementRatio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DecaySpreadSpeed != 0F) {
        size += 1 + 4;
      }
      if (DisperseBase != 0F) {
        size += 1 + 4;
      }
      if (InaccuracyStand != 0F) {
        size += 1 + 4;
      }
      if (InaccuracyCrouch != 0F) {
        size += 1 + 4;
      }
      if (InaccuracyLadder != 0F) {
        size += 1 + 4;
      }
      if (InaccuracyLand != 0F) {
        size += 1 + 4;
      }
      if (InaccuracyMove != 0F) {
        size += 1 + 4;
      }
      if (InaccuracySlientStep != 0F) {
        size += 1 + 4;
      }
      if (InaccuracyJump != 0F) {
        size += 1 + 4;
      }
      if (InaccuracyMoveInitValue != 0F) {
        size += 1 + 4;
      }
      if (InaccuracyVelocityMove != 0F) {
        size += 1 + 4;
      }
      if (InaccuracyVelocityMoveMax != 0F) {
        size += 1 + 4;
      }
      if (InaccuracyVelocityMoveMin != 0F) {
        size += 1 + 4;
      }
      if (InaccuracyJumpInitValue != 0F) {
        size += 1 + 4;
      }
      if (InaccuracyVelocityJump != 0F) {
        size += 1 + 4;
      }
      if (InaccuracyVelocityJumpMax != 0F) {
        size += 2 + 4;
      }
      if (InaccuracySlientStepInitValue != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyVelocitySlientStep != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyVelocitySlientStepMax != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyVelocityBase != 0F) {
        size += 2 + 4;
      }
      if (PunchAngleRecoverySpeed != 0F) {
        size += 2 + 4;
      }
      if (PunchAngleDumping != 0F) {
        size += 2 + 4;
      }
      if (PunchAngleFireDecayRatio != 0F) {
        size += 2 + 4;
      }
      if (DecaySpradLandValueSpeed != 0F) {
        size += 2 + 4;
      }
      if (RecoilUpBase != 0F) {
        size += 2 + 4;
      }
      if (RecoilUpModifier != 0F) {
        size += 2 + 4;
      }
      if (RecoilUpMax != 0F) {
        size += 2 + 4;
      }
      size += punchAngle_.CalculateSize(_repeated_punchAngle_codec);
      size += crosshairMoveByPunchAngle_.CalculateSize(_repeated_crosshairMoveByPunchAngle_codec);
      size += offSetAngle_.CalculateSize(_repeated_offSetAngle_codec);
      if (CrosshairMaxDistance != 0F) {
        size += 2 + 4;
      }
      if (RecoilType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RecoilType);
      }
      if (SpreadType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpreadType);
      }
      if (DecayMirrorOpenSpreadSpeed != 0F) {
        size += 2 + 4;
      }
      if (OneShotBulletCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OneShotBulletCount);
      }
      if (TripleFireInterval != 0F) {
        size += 2 + 4;
      }
      if (RecycleRecoilIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RecycleRecoilIndex);
      }
      if (SectorRecoilAngle != 0F) {
        size += 2 + 4;
      }
      if (FireContinueInternel != 0F) {
        size += 2 + 4;
      }
      if (IsContinueFireCount != false) {
        size += 2 + 1;
      }
      if (FireContinueMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FireContinueMax);
      }
      if (MiddleAngleEnhancementRatio != 0F) {
        size += 2 + 4;
      }
      if (RightAngleEnhancementRatio != 0F) {
        size += 2 + 4;
      }
      if (LeftAngleEnhancementRatio != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponAdditionFireLogicRecoilData other) {
      if (other == null) {
        return;
      }
      if (other.DecaySpreadSpeed != 0F) {
        DecaySpreadSpeed = other.DecaySpreadSpeed;
      }
      if (other.DisperseBase != 0F) {
        DisperseBase = other.DisperseBase;
      }
      if (other.InaccuracyStand != 0F) {
        InaccuracyStand = other.InaccuracyStand;
      }
      if (other.InaccuracyCrouch != 0F) {
        InaccuracyCrouch = other.InaccuracyCrouch;
      }
      if (other.InaccuracyLadder != 0F) {
        InaccuracyLadder = other.InaccuracyLadder;
      }
      if (other.InaccuracyLand != 0F) {
        InaccuracyLand = other.InaccuracyLand;
      }
      if (other.InaccuracyMove != 0F) {
        InaccuracyMove = other.InaccuracyMove;
      }
      if (other.InaccuracySlientStep != 0F) {
        InaccuracySlientStep = other.InaccuracySlientStep;
      }
      if (other.InaccuracyJump != 0F) {
        InaccuracyJump = other.InaccuracyJump;
      }
      if (other.InaccuracyMoveInitValue != 0F) {
        InaccuracyMoveInitValue = other.InaccuracyMoveInitValue;
      }
      if (other.InaccuracyVelocityMove != 0F) {
        InaccuracyVelocityMove = other.InaccuracyVelocityMove;
      }
      if (other.InaccuracyVelocityMoveMax != 0F) {
        InaccuracyVelocityMoveMax = other.InaccuracyVelocityMoveMax;
      }
      if (other.InaccuracyVelocityMoveMin != 0F) {
        InaccuracyVelocityMoveMin = other.InaccuracyVelocityMoveMin;
      }
      if (other.InaccuracyJumpInitValue != 0F) {
        InaccuracyJumpInitValue = other.InaccuracyJumpInitValue;
      }
      if (other.InaccuracyVelocityJump != 0F) {
        InaccuracyVelocityJump = other.InaccuracyVelocityJump;
      }
      if (other.InaccuracyVelocityJumpMax != 0F) {
        InaccuracyVelocityJumpMax = other.InaccuracyVelocityJumpMax;
      }
      if (other.InaccuracySlientStepInitValue != 0F) {
        InaccuracySlientStepInitValue = other.InaccuracySlientStepInitValue;
      }
      if (other.InaccuracyVelocitySlientStep != 0F) {
        InaccuracyVelocitySlientStep = other.InaccuracyVelocitySlientStep;
      }
      if (other.InaccuracyVelocitySlientStepMax != 0F) {
        InaccuracyVelocitySlientStepMax = other.InaccuracyVelocitySlientStepMax;
      }
      if (other.InaccuracyVelocityBase != 0F) {
        InaccuracyVelocityBase = other.InaccuracyVelocityBase;
      }
      if (other.PunchAngleRecoverySpeed != 0F) {
        PunchAngleRecoverySpeed = other.PunchAngleRecoverySpeed;
      }
      if (other.PunchAngleDumping != 0F) {
        PunchAngleDumping = other.PunchAngleDumping;
      }
      if (other.PunchAngleFireDecayRatio != 0F) {
        PunchAngleFireDecayRatio = other.PunchAngleFireDecayRatio;
      }
      if (other.DecaySpradLandValueSpeed != 0F) {
        DecaySpradLandValueSpeed = other.DecaySpradLandValueSpeed;
      }
      if (other.RecoilUpBase != 0F) {
        RecoilUpBase = other.RecoilUpBase;
      }
      if (other.RecoilUpModifier != 0F) {
        RecoilUpModifier = other.RecoilUpModifier;
      }
      if (other.RecoilUpMax != 0F) {
        RecoilUpMax = other.RecoilUpMax;
      }
      punchAngle_.Add(other.punchAngle_);
      crosshairMoveByPunchAngle_.Add(other.crosshairMoveByPunchAngle_);
      offSetAngle_.Add(other.offSetAngle_);
      if (other.CrosshairMaxDistance != 0F) {
        CrosshairMaxDistance = other.CrosshairMaxDistance;
      }
      if (other.RecoilType != 0) {
        RecoilType = other.RecoilType;
      }
      if (other.SpreadType != 0) {
        SpreadType = other.SpreadType;
      }
      if (other.DecayMirrorOpenSpreadSpeed != 0F) {
        DecayMirrorOpenSpreadSpeed = other.DecayMirrorOpenSpreadSpeed;
      }
      if (other.OneShotBulletCount != 0) {
        OneShotBulletCount = other.OneShotBulletCount;
      }
      if (other.TripleFireInterval != 0F) {
        TripleFireInterval = other.TripleFireInterval;
      }
      if (other.RecycleRecoilIndex != 0) {
        RecycleRecoilIndex = other.RecycleRecoilIndex;
      }
      if (other.SectorRecoilAngle != 0F) {
        SectorRecoilAngle = other.SectorRecoilAngle;
      }
      if (other.FireContinueInternel != 0F) {
        FireContinueInternel = other.FireContinueInternel;
      }
      if (other.IsContinueFireCount != false) {
        IsContinueFireCount = other.IsContinueFireCount;
      }
      if (other.FireContinueMax != 0) {
        FireContinueMax = other.FireContinueMax;
      }
      if (other.MiddleAngleEnhancementRatio != 0F) {
        MiddleAngleEnhancementRatio = other.MiddleAngleEnhancementRatio;
      }
      if (other.RightAngleEnhancementRatio != 0F) {
        RightAngleEnhancementRatio = other.RightAngleEnhancementRatio;
      }
      if (other.LeftAngleEnhancementRatio != 0F) {
        LeftAngleEnhancementRatio = other.LeftAngleEnhancementRatio;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            DecaySpreadSpeed = input.ReadFloat();
            break;
          }
          case 21: {
            DisperseBase = input.ReadFloat();
            break;
          }
          case 29: {
            InaccuracyStand = input.ReadFloat();
            break;
          }
          case 37: {
            InaccuracyCrouch = input.ReadFloat();
            break;
          }
          case 45: {
            InaccuracyLadder = input.ReadFloat();
            break;
          }
          case 53: {
            InaccuracyLand = input.ReadFloat();
            break;
          }
          case 61: {
            InaccuracyMove = input.ReadFloat();
            break;
          }
          case 69: {
            InaccuracySlientStep = input.ReadFloat();
            break;
          }
          case 77: {
            InaccuracyJump = input.ReadFloat();
            break;
          }
          case 85: {
            InaccuracyMoveInitValue = input.ReadFloat();
            break;
          }
          case 93: {
            InaccuracyVelocityMove = input.ReadFloat();
            break;
          }
          case 101: {
            InaccuracyVelocityMoveMax = input.ReadFloat();
            break;
          }
          case 109: {
            InaccuracyVelocityMoveMin = input.ReadFloat();
            break;
          }
          case 117: {
            InaccuracyJumpInitValue = input.ReadFloat();
            break;
          }
          case 125: {
            InaccuracyVelocityJump = input.ReadFloat();
            break;
          }
          case 133: {
            InaccuracyVelocityJumpMax = input.ReadFloat();
            break;
          }
          case 141: {
            InaccuracySlientStepInitValue = input.ReadFloat();
            break;
          }
          case 149: {
            InaccuracyVelocitySlientStep = input.ReadFloat();
            break;
          }
          case 157: {
            InaccuracyVelocitySlientStepMax = input.ReadFloat();
            break;
          }
          case 165: {
            InaccuracyVelocityBase = input.ReadFloat();
            break;
          }
          case 173: {
            PunchAngleRecoverySpeed = input.ReadFloat();
            break;
          }
          case 181: {
            PunchAngleDumping = input.ReadFloat();
            break;
          }
          case 189: {
            PunchAngleFireDecayRatio = input.ReadFloat();
            break;
          }
          case 197: {
            DecaySpradLandValueSpeed = input.ReadFloat();
            break;
          }
          case 205: {
            RecoilUpBase = input.ReadFloat();
            break;
          }
          case 213: {
            RecoilUpModifier = input.ReadFloat();
            break;
          }
          case 221: {
            RecoilUpMax = input.ReadFloat();
            break;
          }
          case 226:
          case 229: {
            punchAngle_.AddEntriesFrom(input, _repeated_punchAngle_codec);
            break;
          }
          case 234:
          case 237: {
            crosshairMoveByPunchAngle_.AddEntriesFrom(input, _repeated_crosshairMoveByPunchAngle_codec);
            break;
          }
          case 242:
          case 245: {
            offSetAngle_.AddEntriesFrom(input, _repeated_offSetAngle_codec);
            break;
          }
          case 253: {
            CrosshairMaxDistance = input.ReadFloat();
            break;
          }
          case 256: {
            RecoilType = input.ReadInt32();
            break;
          }
          case 264: {
            SpreadType = input.ReadInt32();
            break;
          }
          case 277: {
            DecayMirrorOpenSpreadSpeed = input.ReadFloat();
            break;
          }
          case 280: {
            OneShotBulletCount = input.ReadInt32();
            break;
          }
          case 293: {
            TripleFireInterval = input.ReadFloat();
            break;
          }
          case 296: {
            RecycleRecoilIndex = input.ReadInt32();
            break;
          }
          case 309: {
            SectorRecoilAngle = input.ReadFloat();
            break;
          }
          case 317: {
            FireContinueInternel = input.ReadFloat();
            break;
          }
          case 320: {
            IsContinueFireCount = input.ReadBool();
            break;
          }
          case 328: {
            FireContinueMax = input.ReadInt32();
            break;
          }
          case 341: {
            MiddleAngleEnhancementRatio = input.ReadFloat();
            break;
          }
          case 349: {
            RightAngleEnhancementRatio = input.ReadFloat();
            break;
          }
          case 357: {
            LeftAngleEnhancementRatio = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
