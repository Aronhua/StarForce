// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WeaponFireLogicHpShieldConfigData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from WeaponFireLogicHpShieldConfigData.proto</summary>
  public static partial class WeaponFireLogicHpShieldConfigDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WeaponFireLogicHpShieldConfigData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeaponFireLogicHpShieldConfigDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CidXZWFwb25GaXJlTG9naWNIcFNoaWVsZENvbmZpZ0RhdGEucHJvdG8SCUQx",
            "MS5QanNvbhodQmFzZUZpcmVMb2dpY0NvbmZpZ0RhdGEucHJvdG8i2AEKIVdl",
            "YXBvbkZpcmVMb2dpY0hwU2hpZWxkQ29uZmlnRGF0YRIUCgxUaW1lVG9FZmZl",
            "Y3QYASABKAISFQoNVGltZVRvRGlzY2FyZBgCIAEoAhIOCgZCdWZmSUQYAyAB",
            "KA0SEgoKU2NhblJhZGl1cxgEIAEoBRIUCgxTY2FuSW50ZXJ2YWwYBSABKAUS",
            "GAoQU2NhbkNvbnRpbnVlVGltZRgGIAEoBRIyCgZwYXJlbnQYByABKAsyIi5E",
            "MTEuUGpzb24uQmFzZUZpcmVMb2dpY0NvbmZpZ0RhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D11.Pjson.BaseFireLogicConfigDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.WeaponFireLogicHpShieldConfigData), global::D11.Pjson.WeaponFireLogicHpShieldConfigData.Parser, new[]{ "TimeToEffect", "TimeToDiscard", "BuffID", "ScanRadius", "ScanInterval", "ScanContinueTime", "Parent" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponFireLogicHpShieldConfigData : pb::IMessage<WeaponFireLogicHpShieldConfigData> {
    private static readonly pb::MessageParser<WeaponFireLogicHpShieldConfigData> _parser = new pb::MessageParser<WeaponFireLogicHpShieldConfigData>(() => new WeaponFireLogicHpShieldConfigData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponFireLogicHpShieldConfigData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.WeaponFireLogicHpShieldConfigDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicHpShieldConfigData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicHpShieldConfigData(WeaponFireLogicHpShieldConfigData other) : this() {
      timeToEffect_ = other.timeToEffect_;
      timeToDiscard_ = other.timeToDiscard_;
      buffID_ = other.buffID_;
      scanRadius_ = other.scanRadius_;
      scanInterval_ = other.scanInterval_;
      scanContinueTime_ = other.scanContinueTime_;
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicHpShieldConfigData Clone() {
      return new WeaponFireLogicHpShieldConfigData(this);
    }

    /// <summary>Field number for the "TimeToEffect" field.</summary>
    public const int TimeToEffectFieldNumber = 1;
    private float timeToEffect_;
    /// <summary>
    /// 使用生效的时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimeToEffect {
      get { return timeToEffect_; }
      set {
        timeToEffect_ = value;
      }
    }

    /// <summary>Field number for the "TimeToDiscard" field.</summary>
    public const int TimeToDiscardFieldNumber = 2;
    private float timeToDiscard_;
    /// <summary>
    /// 使用后丢弃的时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimeToDiscard {
      get { return timeToDiscard_; }
      set {
        timeToDiscard_ = value;
      }
    }

    /// <summary>Field number for the "BuffID" field.</summary>
    public const int BuffIDFieldNumber = 3;
    private uint buffID_;
    /// <summary>
    /// 使用后添加的BuffID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuffID {
      get { return buffID_; }
      set {
        buffID_ = value;
      }
    }

    /// <summary>Field number for the "ScanRadius" field.</summary>
    public const int ScanRadiusFieldNumber = 4;
    private int scanRadius_;
    /// <summary>
    /// 电子侦察装置扫描半径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScanRadius {
      get { return scanRadius_; }
      set {
        scanRadius_ = value;
      }
    }

    /// <summary>Field number for the "ScanInterval" field.</summary>
    public const int ScanIntervalFieldNumber = 5;
    private int scanInterval_;
    /// <summary>
    /// 电子侦察装置扫描间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScanInterval {
      get { return scanInterval_; }
      set {
        scanInterval_ = value;
      }
    }

    /// <summary>Field number for the "ScanContinueTime" field.</summary>
    public const int ScanContinueTimeFieldNumber = 6;
    private int scanContinueTime_;
    /// <summary>
    /// 电子侦察装置持续时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScanContinueTime {
      get { return scanContinueTime_; }
      set {
        scanContinueTime_ = value;
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 7;
    private global::D11.Pjson.BaseFireLogicConfigData parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.BaseFireLogicConfigData Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponFireLogicHpShieldConfigData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponFireLogicHpShieldConfigData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimeToEffect, other.TimeToEffect)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimeToDiscard, other.TimeToDiscard)) return false;
      if (BuffID != other.BuffID) return false;
      if (ScanRadius != other.ScanRadius) return false;
      if (ScanInterval != other.ScanInterval) return false;
      if (ScanContinueTime != other.ScanContinueTime) return false;
      if (!object.Equals(Parent, other.Parent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeToEffect != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimeToEffect);
      if (TimeToDiscard != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimeToDiscard);
      if (BuffID != 0) hash ^= BuffID.GetHashCode();
      if (ScanRadius != 0) hash ^= ScanRadius.GetHashCode();
      if (ScanInterval != 0) hash ^= ScanInterval.GetHashCode();
      if (ScanContinueTime != 0) hash ^= ScanContinueTime.GetHashCode();
      if (parent_ != null) hash ^= Parent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeToEffect != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(TimeToEffect);
      }
      if (TimeToDiscard != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(TimeToDiscard);
      }
      if (BuffID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BuffID);
      }
      if (ScanRadius != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ScanRadius);
      }
      if (ScanInterval != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ScanInterval);
      }
      if (ScanContinueTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ScanContinueTime);
      }
      if (parent_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Parent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeToEffect != 0F) {
        size += 1 + 4;
      }
      if (TimeToDiscard != 0F) {
        size += 1 + 4;
      }
      if (BuffID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuffID);
      }
      if (ScanRadius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScanRadius);
      }
      if (ScanInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScanInterval);
      }
      if (ScanContinueTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScanContinueTime);
      }
      if (parent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponFireLogicHpShieldConfigData other) {
      if (other == null) {
        return;
      }
      if (other.TimeToEffect != 0F) {
        TimeToEffect = other.TimeToEffect;
      }
      if (other.TimeToDiscard != 0F) {
        TimeToDiscard = other.TimeToDiscard;
      }
      if (other.BuffID != 0) {
        BuffID = other.BuffID;
      }
      if (other.ScanRadius != 0) {
        ScanRadius = other.ScanRadius;
      }
      if (other.ScanInterval != 0) {
        ScanInterval = other.ScanInterval;
      }
      if (other.ScanContinueTime != 0) {
        ScanContinueTime = other.ScanContinueTime;
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::D11.Pjson.BaseFireLogicConfigData();
        }
        Parent.MergeFrom(other.Parent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            TimeToEffect = input.ReadFloat();
            break;
          }
          case 21: {
            TimeToDiscard = input.ReadFloat();
            break;
          }
          case 24: {
            BuffID = input.ReadUInt32();
            break;
          }
          case 32: {
            ScanRadius = input.ReadInt32();
            break;
          }
          case 40: {
            ScanInterval = input.ReadInt32();
            break;
          }
          case 48: {
            ScanContinueTime = input.ReadInt32();
            break;
          }
          case 58: {
            if (parent_ == null) {
              Parent = new global::D11.Pjson.BaseFireLogicConfigData();
            }
            input.ReadMessage(Parent);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
