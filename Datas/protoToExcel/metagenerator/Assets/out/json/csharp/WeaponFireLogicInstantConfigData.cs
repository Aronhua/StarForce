// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WeaponFireLogicInstantConfigData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from WeaponFireLogicInstantConfigData.proto</summary>
  public static partial class WeaponFireLogicInstantConfigDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WeaponFireLogicInstantConfigData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeaponFireLogicInstantConfigDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZXZWFwb25GaXJlTG9naWNJbnN0YW50Q29uZmlnRGF0YS5wcm90bxIJRDEx",
            "LlBqc29uGh1CYXNlRmlyZUxvZ2ljQ29uZmlnRGF0YS5wcm90byKQFgogV2Vh",
            "cG9uRmlyZUxvZ2ljSW5zdGFudENvbmZpZ0RhdGESFQoNTWF4U2hvdHNGaXJl",
            "ZBgBIAEoBRIVCg1NaW5JbmFjY3VyYWN5GAIgASgCEhUKDU1heEluYWNjdXJh",
            "Y3kYAyABKAISIAoYRGlzcGVyc2VNb2RpZmllclN0YW5kaW5nGAQgASgCEh8K",
            "F0Rpc3BlcnNlTW9kaWZpZXJKdW1waW5nGAUgASgCEh8KF0Rpc3BlcnNlTW9k",
            "aWZpZXJXYWxraW5nGAYgASgCEh8KF1B1bmNoQW5nbGVYRGVjcmVzZVNwZWVk",
            "GAcgASgCEh8KF1B1bmNoQW5nbGVZRGVjcmVzZVNwZWVkGAggASgCEhQKDFJl",
            "Y29pbFVwQmFzZRgJIAEoAhIYChBSZWNvaWxVcE1vZGlmaWVyGAogASgCEhMK",
            "C1JlY29pbFVwTWF4GAsgASgCEhkKEVJlY29pbExhdGVyYWxCYXNlGAwgASgC",
            "Eh0KFVJlY29pbExhdGVyYWxNb2RpZmllchgNIAEoAhIYChBSZWNvaWxMYXRl",
            "cmFsTWF4GA4gASgCEhsKE1JlY29pbFNjYWxlU3RhbmRpbmcYDyABKAISGgoS",
            "UmVjb2lsU2NhbGVXYWxraW5nGBAgASgCEhoKElJlY29pbFNjYWxlSnVtcGlu",
            "ZxgRIAEoAhIjChtSZWFjaE1heERpcmVjdGlvbkNoYW5nZVBlcmMYEiABKAIS",
            "JQodVW5yZWFjaE1heERpcmVjdGlvbkNoYW5nZVBlcmMYEyABKAISGQoRR2V0",
            "SGl0UHVuY2hBbmdsZVgYFCABKAISJQodR2V0SGl0UHVuY2hBbmdsZVhEZWNy",
            "ZXNlU3BlZWQYFSABKAISIQoZUGVuZXRyYXRpb25EYW1hZ2VNb2RpZmllchgW",
            "IAEoAhIWCg5NYXhUaHJvdWdoV2FsbBgXIAEoBRIcChRFbmFibGVDb250aW51",
            "b3VzRmlyZRgYIAEoCBIYChBEZWNheVNwcmVhZFNwZWVkGBkgASgCEiEKGU5v",
            "dEZpcmluZ0RlY2F5U3ByZWFkU3BlZWQYGiABKAISFAoMRGlzcGVyc2VCYXNl",
            "GBsgASgCEhYKDkluYWNjdXJhY3lGaXJlGBwgASgCEhkKEUluYWNjdXJhY3lG",
            "aXJlTWF4GB0gASgCEhkKEUluYWNjdXJhY3lGaXJlTWluGB4gASgCEiAKGElu",
            "YWNjdXJhY3lGaXJlTGltaXRDb3VudBgfIAEoAhIXCg9JbmFjY3VyYWN5U3Rh",
            "bmQYICABKAISGAoQSW5hY2N1cmFjeUNyb3VjaBghIAEoAhIYChBJbmFjY3Vy",
            "YWN5TGFkZGVyGCIgASgCEhYKDkluYWNjdXJhY3lMYW5kGCMgASgCEhYKDklu",
            "YWNjdXJhY3lNb3ZlGCQgASgCEhwKFEluYWNjdXJhY3lTbGllbnRTdGVwGCUg",
            "ASgCEhYKDkluYWNjdXJhY3lKdW1wGCYgASgCEh8KF0luYWNjdXJhY3lNb3Zl",
            "SW5pdFZhbHVlGCcgASgCEh4KFkluYWNjdXJhY3lWZWxvY2l0eU1vdmUYKCAB",
            "KAISIQoZSW5hY2N1cmFjeVZlbG9jaXR5TW92ZU1heBgpIAEoAhIhChlJbmFj",
            "Y3VyYWN5VmVsb2NpdHlNb3ZlTWluGCogASgCEh8KF0luYWNjdXJhY3lKdW1w",
            "SW5pdFZhbHVlGCsgASgCEh4KFkluYWNjdXJhY3lWZWxvY2l0eUp1bXAYLCAB",
            "KAISIQoZSW5hY2N1cmFjeVZlbG9jaXR5SnVtcE1heBgtIAEoAhIlCh1JbmFj",
            "Y3VyYWN5U2xpZW50U3RlcEluaXRWYWx1ZRguIAEoAhIkChxJbmFjY3VyYWN5",
            "VmVsb2NpdHlTbGllbnRTdGVwGC8gASgCEicKH0luYWNjdXJhY3lWZWxvY2l0",
            "eVNsaWVudFN0ZXBNYXgYMCABKAISHgoWSW5hY2N1cmFjeVZlbG9jaXR5QmFz",
            "ZRgxIAEoAhIOCgZTcHJlYWQYMiABKAISFwoPVXNlUmFuZG9tUmVjb2luGDMg",
            "ASgIEhUKDU1heFNob3RTcHJlYWQYNCABKAISHwoXUHVuY2hBbmdsZVJlY292",
            "ZXJ5U3BlZWQYNSABKAISGQoRUHVuY2hBbmdsZUR1bXBpbmcYNiABKAISGwoT",
            "UHVuY2hBbmdsZVJhZGl1c1Blchg3IAEoAhIbChNQdW5jaEFuZ2xlUmFkaXVz",
            "TWF4GDggASgCEhsKE1B1bmNoQW5nbGVSYWRpdXNNaW4YOSABKAISIgoaUHVu",
            "Y2hBbmdsZVJhZGl1c0RlY2F5U3BlZWQYOiABKAISIAoYUHVuY2hBbmdsZUZp",
            "cmVEZWNheVJhdGlvGDsgASgCEiAKGFB1bmNoQW5nbGVab29tRmFjdG9yTW92",
            "ZRg8IAEoAhImCh5QdW5jaEFuZ2xlWm9vbUZhY3RvclNsaWVudFN0ZXAYPSAB",
            "KAISIgoaUHVuY2hBbmdsZVpvb21GYWN0b3JDcm91Y2gYPiABKAISHAoUUHVu",
            "Y2hBbmdsZVpvb21GYWN0b3IYPyABKAISHQoVUHVuY2hBbmdsZVpvb21GYWN0",
            "b3JYGEAgASgCEh0KFVB1bmNoQW5nbGVab29tRmFjdG9yWRhBIAEoAhIgChhE",
            "ZWNheVNwcmFkTGFuZFZhbHVlU3BlZWQYQiABKAISHAoUQ3Jvc3NoYWlyTWF4",
            "RGlzdGFuY2UYQyABKAISEgoKUmVjb2lsVHlwZRhEIAEoBRISCgpTcHJlYWRU",
            "eXBlGEUgASgFEiIKGkRlY2F5TWlycm9yT3BlblNwcmVhZFNwZWVkGEYgASgC",
            "EhoKEk9uZVNob3RCdWxsZXRDb3VudBhHIAEoBRIaChJUcmlwbGVGaXJlSW50",
            "ZXJ2YWwYSCABKAISEgoKUHVuY2hBbmdsZRhJIAMoAhIhChlDcm9zc2hhaXJN",
            "b3ZlQnlQdW5jaEFuZ2xlGEogAygCEhMKC09mZlNldEFuZ2xlGEsgAygCEhoK",
            "ElJlY3ljbGVSZWNvaWxJbmRleBhMIAEoBRIZChFTZWN0b3JSZWNvaWxBbmds",
            "ZRhNIAEoAhIcChRGaXJlQ29udGludWVJbnRlcm5lbBhOIAEoAhIbChNJc0Nv",
            "bnRpbnVlRmlyZUNvdW50GE8gASgIEhcKD0ZpcmVDb250aW51ZU1heBhQIAEo",
            "BRIjChtNaWRkbGVBbmdsZUVuaGFuY2VtZW50UmF0aW8YUSABKAISIgoaUmln",
            "aHRBbmdsZUVuaGFuY2VtZW50UmF0aW8YUiABKAISIQoZTGVmdEFuZ2xlRW5o",
            "YW5jZW1lbnRSYXRpbxhTIAEoAhIfChdFbmFibGVPcGVuTWlycm9yQW5kRmly",
            "ZRhUIAEoCBIiChpTbmlwZXJNaXJyb3JDbG9zZURlbGF5VGltZRhVIAEoAhIc",
            "ChRTbmlwZXJNaXJyb3JDbG9zZU9mZhhWIAEoCBIcChRBdHRlbnVhdGlvbkRp",
            "c3RhbmNlcxhXIAMoAhIbChNBdHRlbnVhdGlvblBlcmNlbnRzGFggAygCEh4K",
            "FkJSQXR0ZW51YXRpb25EaXN0YW5jZXMYWSADKAISHQoVQlJBdHRlbnVhdGlv",
            "blBlcmNlbnRzGFogAygCEhgKEFBlbmV0cmF0aW9uVmFsdWUYWyABKAISIAoY",
            "UGVuZXRyYXRpb25NYXRlcmlhbFZhbHVlGFwgASgCEjIKBnBhcmVudBhdIAEo",
            "CzIiLkQxMS5QanNvbi5CYXNlRmlyZUxvZ2ljQ29uZmlnRGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D11.Pjson.BaseFireLogicConfigDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.WeaponFireLogicInstantConfigData), global::D11.Pjson.WeaponFireLogicInstantConfigData.Parser, new[]{ "MaxShotsFired", "MinInaccuracy", "MaxInaccuracy", "DisperseModifierStanding", "DisperseModifierJumping", "DisperseModifierWalking", "PunchAngleXDecreseSpeed", "PunchAngleYDecreseSpeed", "RecoilUpBase", "RecoilUpModifier", "RecoilUpMax", "RecoilLateralBase", "RecoilLateralModifier", "RecoilLateralMax", "RecoilScaleStanding", "RecoilScaleWalking", "RecoilScaleJumping", "ReachMaxDirectionChangePerc", "UnreachMaxDirectionChangePerc", "GetHitPunchAngleX", "GetHitPunchAngleXDecreseSpeed", "PenetrationDamageModifier", "MaxThroughWall", "EnableContinuousFire", "DecaySpreadSpeed", "NotFiringDecaySpreadSpeed", "DisperseBase", "InaccuracyFire", "InaccuracyFireMax", "InaccuracyFireMin", "InaccuracyFireLimitCount", "InaccuracyStand", "InaccuracyCrouch", "InaccuracyLadder", "InaccuracyLand", "InaccuracyMove", "InaccuracySlientStep", "InaccuracyJump", "InaccuracyMoveInitValue", "InaccuracyVelocityMove", "InaccuracyVelocityMoveMax", "InaccuracyVelocityMoveMin", "InaccuracyJumpInitValue", "InaccuracyVelocityJump", "InaccuracyVelocityJumpMax", "InaccuracySlientStepInitValue", "InaccuracyVelocitySlientStep", "InaccuracyVelocitySlientStepMax", "InaccuracyVelocityBase", "Spread", "UseRandomRecoin", "MaxShotSpread", "PunchAngleRecoverySpeed", "PunchAngleDumping", "PunchAngleRadiusPer", "PunchAngleRadiusMax", "PunchAngleRadiusMin", "PunchAngleRadiusDecaySpeed", "PunchAngleFireDecayRatio", "PunchAngleZoomFactorMove", "PunchAngleZoomFactorSlientStep", "PunchAngleZoomFactorCrouch", "PunchAngleZoomFactor", "PunchAngleZoomFactorX", "PunchAngleZoomFactorY", "DecaySpradLandValueSpeed", "CrosshairMaxDistance", "RecoilType", "SpreadType", "DecayMirrorOpenSpreadSpeed", "OneShotBulletCount", "TripleFireInterval", "PunchAngle", "CrosshairMoveByPunchAngle", "OffSetAngle", "RecycleRecoilIndex", "SectorRecoilAngle", "FireContinueInternel", "IsContinueFireCount", "FireContinueMax", "MiddleAngleEnhancementRatio", "RightAngleEnhancementRatio", "LeftAngleEnhancementRatio", "EnableOpenMirrorAndFire", "SniperMirrorCloseDelayTime", "SniperMirrorCloseOff", "AttenuationDistances", "AttenuationPercents", "BRAttenuationDistances", "BRAttenuationPercents", "PenetrationValue", "PenetrationMaterialValue", "Parent" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponFireLogicInstantConfigData : pb::IMessage<WeaponFireLogicInstantConfigData> {
    private static readonly pb::MessageParser<WeaponFireLogicInstantConfigData> _parser = new pb::MessageParser<WeaponFireLogicInstantConfigData>(() => new WeaponFireLogicInstantConfigData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponFireLogicInstantConfigData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.WeaponFireLogicInstantConfigDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicInstantConfigData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicInstantConfigData(WeaponFireLogicInstantConfigData other) : this() {
      maxShotsFired_ = other.maxShotsFired_;
      minInaccuracy_ = other.minInaccuracy_;
      maxInaccuracy_ = other.maxInaccuracy_;
      disperseModifierStanding_ = other.disperseModifierStanding_;
      disperseModifierJumping_ = other.disperseModifierJumping_;
      disperseModifierWalking_ = other.disperseModifierWalking_;
      punchAngleXDecreseSpeed_ = other.punchAngleXDecreseSpeed_;
      punchAngleYDecreseSpeed_ = other.punchAngleYDecreseSpeed_;
      recoilUpBase_ = other.recoilUpBase_;
      recoilUpModifier_ = other.recoilUpModifier_;
      recoilUpMax_ = other.recoilUpMax_;
      recoilLateralBase_ = other.recoilLateralBase_;
      recoilLateralModifier_ = other.recoilLateralModifier_;
      recoilLateralMax_ = other.recoilLateralMax_;
      recoilScaleStanding_ = other.recoilScaleStanding_;
      recoilScaleWalking_ = other.recoilScaleWalking_;
      recoilScaleJumping_ = other.recoilScaleJumping_;
      reachMaxDirectionChangePerc_ = other.reachMaxDirectionChangePerc_;
      unreachMaxDirectionChangePerc_ = other.unreachMaxDirectionChangePerc_;
      getHitPunchAngleX_ = other.getHitPunchAngleX_;
      getHitPunchAngleXDecreseSpeed_ = other.getHitPunchAngleXDecreseSpeed_;
      penetrationDamageModifier_ = other.penetrationDamageModifier_;
      maxThroughWall_ = other.maxThroughWall_;
      enableContinuousFire_ = other.enableContinuousFire_;
      decaySpreadSpeed_ = other.decaySpreadSpeed_;
      notFiringDecaySpreadSpeed_ = other.notFiringDecaySpreadSpeed_;
      disperseBase_ = other.disperseBase_;
      inaccuracyFire_ = other.inaccuracyFire_;
      inaccuracyFireMax_ = other.inaccuracyFireMax_;
      inaccuracyFireMin_ = other.inaccuracyFireMin_;
      inaccuracyFireLimitCount_ = other.inaccuracyFireLimitCount_;
      inaccuracyStand_ = other.inaccuracyStand_;
      inaccuracyCrouch_ = other.inaccuracyCrouch_;
      inaccuracyLadder_ = other.inaccuracyLadder_;
      inaccuracyLand_ = other.inaccuracyLand_;
      inaccuracyMove_ = other.inaccuracyMove_;
      inaccuracySlientStep_ = other.inaccuracySlientStep_;
      inaccuracyJump_ = other.inaccuracyJump_;
      inaccuracyMoveInitValue_ = other.inaccuracyMoveInitValue_;
      inaccuracyVelocityMove_ = other.inaccuracyVelocityMove_;
      inaccuracyVelocityMoveMax_ = other.inaccuracyVelocityMoveMax_;
      inaccuracyVelocityMoveMin_ = other.inaccuracyVelocityMoveMin_;
      inaccuracyJumpInitValue_ = other.inaccuracyJumpInitValue_;
      inaccuracyVelocityJump_ = other.inaccuracyVelocityJump_;
      inaccuracyVelocityJumpMax_ = other.inaccuracyVelocityJumpMax_;
      inaccuracySlientStepInitValue_ = other.inaccuracySlientStepInitValue_;
      inaccuracyVelocitySlientStep_ = other.inaccuracyVelocitySlientStep_;
      inaccuracyVelocitySlientStepMax_ = other.inaccuracyVelocitySlientStepMax_;
      inaccuracyVelocityBase_ = other.inaccuracyVelocityBase_;
      spread_ = other.spread_;
      useRandomRecoin_ = other.useRandomRecoin_;
      maxShotSpread_ = other.maxShotSpread_;
      punchAngleRecoverySpeed_ = other.punchAngleRecoverySpeed_;
      punchAngleDumping_ = other.punchAngleDumping_;
      punchAngleRadiusPer_ = other.punchAngleRadiusPer_;
      punchAngleRadiusMax_ = other.punchAngleRadiusMax_;
      punchAngleRadiusMin_ = other.punchAngleRadiusMin_;
      punchAngleRadiusDecaySpeed_ = other.punchAngleRadiusDecaySpeed_;
      punchAngleFireDecayRatio_ = other.punchAngleFireDecayRatio_;
      punchAngleZoomFactorMove_ = other.punchAngleZoomFactorMove_;
      punchAngleZoomFactorSlientStep_ = other.punchAngleZoomFactorSlientStep_;
      punchAngleZoomFactorCrouch_ = other.punchAngleZoomFactorCrouch_;
      punchAngleZoomFactor_ = other.punchAngleZoomFactor_;
      punchAngleZoomFactorX_ = other.punchAngleZoomFactorX_;
      punchAngleZoomFactorY_ = other.punchAngleZoomFactorY_;
      decaySpradLandValueSpeed_ = other.decaySpradLandValueSpeed_;
      crosshairMaxDistance_ = other.crosshairMaxDistance_;
      recoilType_ = other.recoilType_;
      spreadType_ = other.spreadType_;
      decayMirrorOpenSpreadSpeed_ = other.decayMirrorOpenSpreadSpeed_;
      oneShotBulletCount_ = other.oneShotBulletCount_;
      tripleFireInterval_ = other.tripleFireInterval_;
      punchAngle_ = other.punchAngle_.Clone();
      crosshairMoveByPunchAngle_ = other.crosshairMoveByPunchAngle_.Clone();
      offSetAngle_ = other.offSetAngle_.Clone();
      recycleRecoilIndex_ = other.recycleRecoilIndex_;
      sectorRecoilAngle_ = other.sectorRecoilAngle_;
      fireContinueInternel_ = other.fireContinueInternel_;
      isContinueFireCount_ = other.isContinueFireCount_;
      fireContinueMax_ = other.fireContinueMax_;
      middleAngleEnhancementRatio_ = other.middleAngleEnhancementRatio_;
      rightAngleEnhancementRatio_ = other.rightAngleEnhancementRatio_;
      leftAngleEnhancementRatio_ = other.leftAngleEnhancementRatio_;
      enableOpenMirrorAndFire_ = other.enableOpenMirrorAndFire_;
      sniperMirrorCloseDelayTime_ = other.sniperMirrorCloseDelayTime_;
      sniperMirrorCloseOff_ = other.sniperMirrorCloseOff_;
      attenuationDistances_ = other.attenuationDistances_.Clone();
      attenuationPercents_ = other.attenuationPercents_.Clone();
      bRAttenuationDistances_ = other.bRAttenuationDistances_.Clone();
      bRAttenuationPercents_ = other.bRAttenuationPercents_.Clone();
      penetrationValue_ = other.penetrationValue_;
      penetrationMaterialValue_ = other.penetrationMaterialValue_;
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicInstantConfigData Clone() {
      return new WeaponFireLogicInstantConfigData(this);
    }

    /// <summary>Field number for the "MaxShotsFired" field.</summary>
    public const int MaxShotsFiredFieldNumber = 1;
    private int maxShotsFired_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxShotsFired {
      get { return maxShotsFired_; }
      set {
        maxShotsFired_ = value;
      }
    }

    /// <summary>Field number for the "MinInaccuracy" field.</summary>
    public const int MinInaccuracyFieldNumber = 2;
    private float minInaccuracy_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinInaccuracy {
      get { return minInaccuracy_; }
      set {
        minInaccuracy_ = value;
      }
    }

    /// <summary>Field number for the "MaxInaccuracy" field.</summary>
    public const int MaxInaccuracyFieldNumber = 3;
    private float maxInaccuracy_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxInaccuracy {
      get { return maxInaccuracy_; }
      set {
        maxInaccuracy_ = value;
      }
    }

    /// <summary>Field number for the "DisperseModifierStanding" field.</summary>
    public const int DisperseModifierStandingFieldNumber = 4;
    private float disperseModifierStanding_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DisperseModifierStanding {
      get { return disperseModifierStanding_; }
      set {
        disperseModifierStanding_ = value;
      }
    }

    /// <summary>Field number for the "DisperseModifierJumping" field.</summary>
    public const int DisperseModifierJumpingFieldNumber = 5;
    private float disperseModifierJumping_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DisperseModifierJumping {
      get { return disperseModifierJumping_; }
      set {
        disperseModifierJumping_ = value;
      }
    }

    /// <summary>Field number for the "DisperseModifierWalking" field.</summary>
    public const int DisperseModifierWalkingFieldNumber = 6;
    private float disperseModifierWalking_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DisperseModifierWalking {
      get { return disperseModifierWalking_; }
      set {
        disperseModifierWalking_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleXDecreseSpeed" field.</summary>
    public const int PunchAngleXDecreseSpeedFieldNumber = 7;
    private float punchAngleXDecreseSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleXDecreseSpeed {
      get { return punchAngleXDecreseSpeed_; }
      set {
        punchAngleXDecreseSpeed_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleYDecreseSpeed" field.</summary>
    public const int PunchAngleYDecreseSpeedFieldNumber = 8;
    private float punchAngleYDecreseSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleYDecreseSpeed {
      get { return punchAngleYDecreseSpeed_; }
      set {
        punchAngleYDecreseSpeed_ = value;
      }
    }

    /// <summary>Field number for the "RecoilUpBase" field.</summary>
    public const int RecoilUpBaseFieldNumber = 9;
    private float recoilUpBase_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilUpBase {
      get { return recoilUpBase_; }
      set {
        recoilUpBase_ = value;
      }
    }

    /// <summary>Field number for the "RecoilUpModifier" field.</summary>
    public const int RecoilUpModifierFieldNumber = 10;
    private float recoilUpModifier_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilUpModifier {
      get { return recoilUpModifier_; }
      set {
        recoilUpModifier_ = value;
      }
    }

    /// <summary>Field number for the "RecoilUpMax" field.</summary>
    public const int RecoilUpMaxFieldNumber = 11;
    private float recoilUpMax_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilUpMax {
      get { return recoilUpMax_; }
      set {
        recoilUpMax_ = value;
      }
    }

    /// <summary>Field number for the "RecoilLateralBase" field.</summary>
    public const int RecoilLateralBaseFieldNumber = 12;
    private float recoilLateralBase_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilLateralBase {
      get { return recoilLateralBase_; }
      set {
        recoilLateralBase_ = value;
      }
    }

    /// <summary>Field number for the "RecoilLateralModifier" field.</summary>
    public const int RecoilLateralModifierFieldNumber = 13;
    private float recoilLateralModifier_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilLateralModifier {
      get { return recoilLateralModifier_; }
      set {
        recoilLateralModifier_ = value;
      }
    }

    /// <summary>Field number for the "RecoilLateralMax" field.</summary>
    public const int RecoilLateralMaxFieldNumber = 14;
    private float recoilLateralMax_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilLateralMax {
      get { return recoilLateralMax_; }
      set {
        recoilLateralMax_ = value;
      }
    }

    /// <summary>Field number for the "RecoilScaleStanding" field.</summary>
    public const int RecoilScaleStandingFieldNumber = 15;
    private float recoilScaleStanding_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilScaleStanding {
      get { return recoilScaleStanding_; }
      set {
        recoilScaleStanding_ = value;
      }
    }

    /// <summary>Field number for the "RecoilScaleWalking" field.</summary>
    public const int RecoilScaleWalkingFieldNumber = 16;
    private float recoilScaleWalking_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilScaleWalking {
      get { return recoilScaleWalking_; }
      set {
        recoilScaleWalking_ = value;
      }
    }

    /// <summary>Field number for the "RecoilScaleJumping" field.</summary>
    public const int RecoilScaleJumpingFieldNumber = 17;
    private float recoilScaleJumping_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilScaleJumping {
      get { return recoilScaleJumping_; }
      set {
        recoilScaleJumping_ = value;
      }
    }

    /// <summary>Field number for the "ReachMaxDirectionChangePerc" field.</summary>
    public const int ReachMaxDirectionChangePercFieldNumber = 18;
    private float reachMaxDirectionChangePerc_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ReachMaxDirectionChangePerc {
      get { return reachMaxDirectionChangePerc_; }
      set {
        reachMaxDirectionChangePerc_ = value;
      }
    }

    /// <summary>Field number for the "UnreachMaxDirectionChangePerc" field.</summary>
    public const int UnreachMaxDirectionChangePercFieldNumber = 19;
    private float unreachMaxDirectionChangePerc_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UnreachMaxDirectionChangePerc {
      get { return unreachMaxDirectionChangePerc_; }
      set {
        unreachMaxDirectionChangePerc_ = value;
      }
    }

    /// <summary>Field number for the "GetHitPunchAngleX" field.</summary>
    public const int GetHitPunchAngleXFieldNumber = 20;
    private float getHitPunchAngleX_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GetHitPunchAngleX {
      get { return getHitPunchAngleX_; }
      set {
        getHitPunchAngleX_ = value;
      }
    }

    /// <summary>Field number for the "GetHitPunchAngleXDecreseSpeed" field.</summary>
    public const int GetHitPunchAngleXDecreseSpeedFieldNumber = 21;
    private float getHitPunchAngleXDecreseSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GetHitPunchAngleXDecreseSpeed {
      get { return getHitPunchAngleXDecreseSpeed_; }
      set {
        getHitPunchAngleXDecreseSpeed_ = value;
      }
    }

    /// <summary>Field number for the "PenetrationDamageModifier" field.</summary>
    public const int PenetrationDamageModifierFieldNumber = 22;
    private float penetrationDamageModifier_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PenetrationDamageModifier {
      get { return penetrationDamageModifier_; }
      set {
        penetrationDamageModifier_ = value;
      }
    }

    /// <summary>Field number for the "MaxThroughWall" field.</summary>
    public const int MaxThroughWallFieldNumber = 23;
    private int maxThroughWall_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxThroughWall {
      get { return maxThroughWall_; }
      set {
        maxThroughWall_ = value;
      }
    }

    /// <summary>Field number for the "EnableContinuousFire" field.</summary>
    public const int EnableContinuousFireFieldNumber = 24;
    private bool enableContinuousFire_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableContinuousFire {
      get { return enableContinuousFire_; }
      set {
        enableContinuousFire_ = value;
      }
    }

    /// <summary>Field number for the "DecaySpreadSpeed" field.</summary>
    public const int DecaySpreadSpeedFieldNumber = 25;
    private float decaySpreadSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DecaySpreadSpeed {
      get { return decaySpreadSpeed_; }
      set {
        decaySpreadSpeed_ = value;
      }
    }

    /// <summary>Field number for the "NotFiringDecaySpreadSpeed" field.</summary>
    public const int NotFiringDecaySpreadSpeedFieldNumber = 26;
    private float notFiringDecaySpreadSpeed_;
    /// <summary>
    /// 非开火状态下的散发回复速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NotFiringDecaySpreadSpeed {
      get { return notFiringDecaySpreadSpeed_; }
      set {
        notFiringDecaySpreadSpeed_ = value;
      }
    }

    /// <summary>Field number for the "DisperseBase" field.</summary>
    public const int DisperseBaseFieldNumber = 27;
    private float disperseBase_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DisperseBase {
      get { return disperseBase_; }
      set {
        disperseBase_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyFire" field.</summary>
    public const int InaccuracyFireFieldNumber = 28;
    private float inaccuracyFire_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyFire {
      get { return inaccuracyFire_; }
      set {
        inaccuracyFire_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyFireMax" field.</summary>
    public const int InaccuracyFireMaxFieldNumber = 29;
    private float inaccuracyFireMax_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyFireMax {
      get { return inaccuracyFireMax_; }
      set {
        inaccuracyFireMax_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyFireMin" field.</summary>
    public const int InaccuracyFireMinFieldNumber = 30;
    private float inaccuracyFireMin_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyFireMin {
      get { return inaccuracyFireMin_; }
      set {
        inaccuracyFireMin_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyFireLimitCount" field.</summary>
    public const int InaccuracyFireLimitCountFieldNumber = 31;
    private float inaccuracyFireLimitCount_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyFireLimitCount {
      get { return inaccuracyFireLimitCount_; }
      set {
        inaccuracyFireLimitCount_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyStand" field.</summary>
    public const int InaccuracyStandFieldNumber = 32;
    private float inaccuracyStand_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyStand {
      get { return inaccuracyStand_; }
      set {
        inaccuracyStand_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyCrouch" field.</summary>
    public const int InaccuracyCrouchFieldNumber = 33;
    private float inaccuracyCrouch_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyCrouch {
      get { return inaccuracyCrouch_; }
      set {
        inaccuracyCrouch_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyLadder" field.</summary>
    public const int InaccuracyLadderFieldNumber = 34;
    private float inaccuracyLadder_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyLadder {
      get { return inaccuracyLadder_; }
      set {
        inaccuracyLadder_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyLand" field.</summary>
    public const int InaccuracyLandFieldNumber = 35;
    private float inaccuracyLand_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyLand {
      get { return inaccuracyLand_; }
      set {
        inaccuracyLand_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyMove" field.</summary>
    public const int InaccuracyMoveFieldNumber = 36;
    private float inaccuracyMove_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyMove {
      get { return inaccuracyMove_; }
      set {
        inaccuracyMove_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracySlientStep" field.</summary>
    public const int InaccuracySlientStepFieldNumber = 37;
    private float inaccuracySlientStep_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracySlientStep {
      get { return inaccuracySlientStep_; }
      set {
        inaccuracySlientStep_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyJump" field.</summary>
    public const int InaccuracyJumpFieldNumber = 38;
    private float inaccuracyJump_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyJump {
      get { return inaccuracyJump_; }
      set {
        inaccuracyJump_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyMoveInitValue" field.</summary>
    public const int InaccuracyMoveInitValueFieldNumber = 39;
    private float inaccuracyMoveInitValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyMoveInitValue {
      get { return inaccuracyMoveInitValue_; }
      set {
        inaccuracyMoveInitValue_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyVelocityMove" field.</summary>
    public const int InaccuracyVelocityMoveFieldNumber = 40;
    private float inaccuracyVelocityMove_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyVelocityMove {
      get { return inaccuracyVelocityMove_; }
      set {
        inaccuracyVelocityMove_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyVelocityMoveMax" field.</summary>
    public const int InaccuracyVelocityMoveMaxFieldNumber = 41;
    private float inaccuracyVelocityMoveMax_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyVelocityMoveMax {
      get { return inaccuracyVelocityMoveMax_; }
      set {
        inaccuracyVelocityMoveMax_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyVelocityMoveMin" field.</summary>
    public const int InaccuracyVelocityMoveMinFieldNumber = 42;
    private float inaccuracyVelocityMoveMin_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyVelocityMoveMin {
      get { return inaccuracyVelocityMoveMin_; }
      set {
        inaccuracyVelocityMoveMin_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyJumpInitValue" field.</summary>
    public const int InaccuracyJumpInitValueFieldNumber = 43;
    private float inaccuracyJumpInitValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyJumpInitValue {
      get { return inaccuracyJumpInitValue_; }
      set {
        inaccuracyJumpInitValue_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyVelocityJump" field.</summary>
    public const int InaccuracyVelocityJumpFieldNumber = 44;
    private float inaccuracyVelocityJump_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyVelocityJump {
      get { return inaccuracyVelocityJump_; }
      set {
        inaccuracyVelocityJump_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyVelocityJumpMax" field.</summary>
    public const int InaccuracyVelocityJumpMaxFieldNumber = 45;
    private float inaccuracyVelocityJumpMax_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyVelocityJumpMax {
      get { return inaccuracyVelocityJumpMax_; }
      set {
        inaccuracyVelocityJumpMax_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracySlientStepInitValue" field.</summary>
    public const int InaccuracySlientStepInitValueFieldNumber = 46;
    private float inaccuracySlientStepInitValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracySlientStepInitValue {
      get { return inaccuracySlientStepInitValue_; }
      set {
        inaccuracySlientStepInitValue_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyVelocitySlientStep" field.</summary>
    public const int InaccuracyVelocitySlientStepFieldNumber = 47;
    private float inaccuracyVelocitySlientStep_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyVelocitySlientStep {
      get { return inaccuracyVelocitySlientStep_; }
      set {
        inaccuracyVelocitySlientStep_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyVelocitySlientStepMax" field.</summary>
    public const int InaccuracyVelocitySlientStepMaxFieldNumber = 48;
    private float inaccuracyVelocitySlientStepMax_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyVelocitySlientStepMax {
      get { return inaccuracyVelocitySlientStepMax_; }
      set {
        inaccuracyVelocitySlientStepMax_ = value;
      }
    }

    /// <summary>Field number for the "InaccuracyVelocityBase" field.</summary>
    public const int InaccuracyVelocityBaseFieldNumber = 49;
    private float inaccuracyVelocityBase_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InaccuracyVelocityBase {
      get { return inaccuracyVelocityBase_; }
      set {
        inaccuracyVelocityBase_ = value;
      }
    }

    /// <summary>Field number for the "Spread" field.</summary>
    public const int SpreadFieldNumber = 50;
    private float spread_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Spread {
      get { return spread_; }
      set {
        spread_ = value;
      }
    }

    /// <summary>Field number for the "UseRandomRecoin" field.</summary>
    public const int UseRandomRecoinFieldNumber = 51;
    private bool useRandomRecoin_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseRandomRecoin {
      get { return useRandomRecoin_; }
      set {
        useRandomRecoin_ = value;
      }
    }

    /// <summary>Field number for the "MaxShotSpread" field.</summary>
    public const int MaxShotSpreadFieldNumber = 52;
    private float maxShotSpread_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxShotSpread {
      get { return maxShotSpread_; }
      set {
        maxShotSpread_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleRecoverySpeed" field.</summary>
    public const int PunchAngleRecoverySpeedFieldNumber = 53;
    private float punchAngleRecoverySpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleRecoverySpeed {
      get { return punchAngleRecoverySpeed_; }
      set {
        punchAngleRecoverySpeed_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleDumping" field.</summary>
    public const int PunchAngleDumpingFieldNumber = 54;
    private float punchAngleDumping_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleDumping {
      get { return punchAngleDumping_; }
      set {
        punchAngleDumping_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleRadiusPer" field.</summary>
    public const int PunchAngleRadiusPerFieldNumber = 55;
    private float punchAngleRadiusPer_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleRadiusPer {
      get { return punchAngleRadiusPer_; }
      set {
        punchAngleRadiusPer_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleRadiusMax" field.</summary>
    public const int PunchAngleRadiusMaxFieldNumber = 56;
    private float punchAngleRadiusMax_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleRadiusMax {
      get { return punchAngleRadiusMax_; }
      set {
        punchAngleRadiusMax_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleRadiusMin" field.</summary>
    public const int PunchAngleRadiusMinFieldNumber = 57;
    private float punchAngleRadiusMin_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleRadiusMin {
      get { return punchAngleRadiusMin_; }
      set {
        punchAngleRadiusMin_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleRadiusDecaySpeed" field.</summary>
    public const int PunchAngleRadiusDecaySpeedFieldNumber = 58;
    private float punchAngleRadiusDecaySpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleRadiusDecaySpeed {
      get { return punchAngleRadiusDecaySpeed_; }
      set {
        punchAngleRadiusDecaySpeed_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleFireDecayRatio" field.</summary>
    public const int PunchAngleFireDecayRatioFieldNumber = 59;
    private float punchAngleFireDecayRatio_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleFireDecayRatio {
      get { return punchAngleFireDecayRatio_; }
      set {
        punchAngleFireDecayRatio_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleZoomFactorMove" field.</summary>
    public const int PunchAngleZoomFactorMoveFieldNumber = 60;
    private float punchAngleZoomFactorMove_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleZoomFactorMove {
      get { return punchAngleZoomFactorMove_; }
      set {
        punchAngleZoomFactorMove_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleZoomFactorSlientStep" field.</summary>
    public const int PunchAngleZoomFactorSlientStepFieldNumber = 61;
    private float punchAngleZoomFactorSlientStep_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleZoomFactorSlientStep {
      get { return punchAngleZoomFactorSlientStep_; }
      set {
        punchAngleZoomFactorSlientStep_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleZoomFactorCrouch" field.</summary>
    public const int PunchAngleZoomFactorCrouchFieldNumber = 62;
    private float punchAngleZoomFactorCrouch_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleZoomFactorCrouch {
      get { return punchAngleZoomFactorCrouch_; }
      set {
        punchAngleZoomFactorCrouch_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleZoomFactor" field.</summary>
    public const int PunchAngleZoomFactorFieldNumber = 63;
    private float punchAngleZoomFactor_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleZoomFactor {
      get { return punchAngleZoomFactor_; }
      set {
        punchAngleZoomFactor_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleZoomFactorX" field.</summary>
    public const int PunchAngleZoomFactorXFieldNumber = 64;
    private float punchAngleZoomFactorX_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleZoomFactorX {
      get { return punchAngleZoomFactorX_; }
      set {
        punchAngleZoomFactorX_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleZoomFactorY" field.</summary>
    public const int PunchAngleZoomFactorYFieldNumber = 65;
    private float punchAngleZoomFactorY_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleZoomFactorY {
      get { return punchAngleZoomFactorY_; }
      set {
        punchAngleZoomFactorY_ = value;
      }
    }

    /// <summary>Field number for the "DecaySpradLandValueSpeed" field.</summary>
    public const int DecaySpradLandValueSpeedFieldNumber = 66;
    private float decaySpradLandValueSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DecaySpradLandValueSpeed {
      get { return decaySpradLandValueSpeed_; }
      set {
        decaySpradLandValueSpeed_ = value;
      }
    }

    /// <summary>Field number for the "CrosshairMaxDistance" field.</summary>
    public const int CrosshairMaxDistanceFieldNumber = 67;
    private float crosshairMaxDistance_;
    /// <summary>
    /// 准心单次最大移动距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrosshairMaxDistance {
      get { return crosshairMaxDistance_; }
      set {
        crosshairMaxDistance_ = value;
      }
    }

    /// <summary>Field number for the "RecoilType" field.</summary>
    public const int RecoilTypeFieldNumber = 68;
    private int recoilType_;
    /// <summary>
    /// 后座力类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecoilType {
      get { return recoilType_; }
      set {
        recoilType_ = value;
      }
    }

    /// <summary>Field number for the "SpreadType" field.</summary>
    public const int SpreadTypeFieldNumber = 69;
    private int spreadType_;
    /// <summary>
    /// 散发类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpreadType {
      get { return spreadType_; }
      set {
        spreadType_ = value;
      }
    }

    /// <summary>Field number for the "DecayMirrorOpenSpreadSpeed" field.</summary>
    public const int DecayMirrorOpenSpreadSpeedFieldNumber = 70;
    private float decayMirrorOpenSpreadSpeed_;
    /// <summary>
    /// 开镜散发回复速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DecayMirrorOpenSpreadSpeed {
      get { return decayMirrorOpenSpreadSpeed_; }
      set {
        decayMirrorOpenSpreadSpeed_ = value;
      }
    }

    /// <summary>Field number for the "OneShotBulletCount" field.</summary>
    public const int OneShotBulletCountFieldNumber = 71;
    private int oneShotBulletCount_;
    /// <summary>
    /// 一次射击子弹数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OneShotBulletCount {
      get { return oneShotBulletCount_; }
      set {
        oneShotBulletCount_ = value;
      }
    }

    /// <summary>Field number for the "TripleFireInterval" field.</summary>
    public const int TripleFireIntervalFieldNumber = 72;
    private float tripleFireInterval_;
    /// <summary>
    /// 三连发攻击间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TripleFireInterval {
      get { return tripleFireInterval_; }
      set {
        tripleFireInterval_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngle" field.</summary>
    public const int PunchAngleFieldNumber = 73;
    private static readonly pb::FieldCodec<float> _repeated_punchAngle_codec
        = pb::FieldCodec.ForFloat(586);
    private readonly pbc::RepeatedField<float> punchAngle_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 连发射击点角度数组 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> PunchAngle {
      get { return punchAngle_; }
    }

    /// <summary>Field number for the "CrosshairMoveByPunchAngle" field.</summary>
    public const int CrosshairMoveByPunchAngleFieldNumber = 74;
    private static readonly pb::FieldCodec<float> _repeated_crosshairMoveByPunchAngle_codec
        = pb::FieldCodec.ForFloat(594);
    private readonly pbc::RepeatedField<float> crosshairMoveByPunchAngle_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 连发射击点角度数组 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> CrosshairMoveByPunchAngle {
      get { return crosshairMoveByPunchAngle_; }
    }

    /// <summary>Field number for the "OffSetAngle" field.</summary>
    public const int OffSetAngleFieldNumber = 75;
    private static readonly pb::FieldCodec<float> _repeated_offSetAngle_codec
        = pb::FieldCodec.ForFloat(602);
    private readonly pbc::RepeatedField<float> offSetAngle_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 每次射击的所有子弹偏移角度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> OffSetAngle {
      get { return offSetAngle_; }
    }

    /// <summary>Field number for the "RecycleRecoilIndex" field.</summary>
    public const int RecycleRecoilIndexFieldNumber = 76;
    private int recycleRecoilIndex_;
    /// <summary>
    /// 循环后座力的开始位置 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecycleRecoilIndex {
      get { return recycleRecoilIndex_; }
      set {
        recycleRecoilIndex_ = value;
      }
    }

    /// <summary>Field number for the "SectorRecoilAngle" field.</summary>
    public const int SectorRecoilAngleFieldNumber = 77;
    private float sectorRecoilAngle_;
    /// <summary>
    /// 扇形后座力的角度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SectorRecoilAngle {
      get { return sectorRecoilAngle_; }
      set {
        sectorRecoilAngle_ = value;
      }
    }

    /// <summary>Field number for the "FireContinueInternel" field.</summary>
    public const int FireContinueInternelFieldNumber = 78;
    private float fireContinueInternel_;
    /// <summary>
    /// 连发回复间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireContinueInternel {
      get { return fireContinueInternel_; }
      set {
        fireContinueInternel_ = value;
      }
    }

    /// <summary>Field number for the "IsContinueFireCount" field.</summary>
    public const int IsContinueFireCountFieldNumber = 79;
    private bool isContinueFireCount_;
    /// <summary>
    /// 连发连续变化 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsContinueFireCount {
      get { return isContinueFireCount_; }
      set {
        isContinueFireCount_ = value;
      }
    }

    /// <summary>Field number for the "FireContinueMax" field.</summary>
    public const int FireContinueMaxFieldNumber = 80;
    private int fireContinueMax_;
    /// <summary>
    /// 连续散发最大值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FireContinueMax {
      get { return fireContinueMax_; }
      set {
        fireContinueMax_ = value;
      }
    }

    /// <summary>Field number for the "MiddleAngleEnhancementRatio" field.</summary>
    public const int MiddleAngleEnhancementRatioFieldNumber = 81;
    private float middleAngleEnhancementRatio_;
    /// <summary>
    /// 居中镜头晃动比例 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MiddleAngleEnhancementRatio {
      get { return middleAngleEnhancementRatio_; }
      set {
        middleAngleEnhancementRatio_ = value;
      }
    }

    /// <summary>Field number for the "RightAngleEnhancementRatio" field.</summary>
    public const int RightAngleEnhancementRatioFieldNumber = 82;
    private float rightAngleEnhancementRatio_;
    /// <summary>
    /// 居右镜头晃动比例 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RightAngleEnhancementRatio {
      get { return rightAngleEnhancementRatio_; }
      set {
        rightAngleEnhancementRatio_ = value;
      }
    }

    /// <summary>Field number for the "LeftAngleEnhancementRatio" field.</summary>
    public const int LeftAngleEnhancementRatioFieldNumber = 83;
    private float leftAngleEnhancementRatio_;
    /// <summary>
    /// 居左镜头晃动比例 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LeftAngleEnhancementRatio {
      get { return leftAngleEnhancementRatio_; }
      set {
        leftAngleEnhancementRatio_ = value;
      }
    }

    /// <summary>Field number for the "EnableOpenMirrorAndFire" field.</summary>
    public const int EnableOpenMirrorAndFireFieldNumber = 84;
    private bool enableOpenMirrorAndFire_;
    /// <summary>
    /// 是否可以一键开镜开火 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableOpenMirrorAndFire {
      get { return enableOpenMirrorAndFire_; }
      set {
        enableOpenMirrorAndFire_ = value;
      }
    }

    /// <summary>Field number for the "SniperMirrorCloseDelayTime" field.</summary>
    public const int SniperMirrorCloseDelayTimeFieldNumber = 85;
    private float sniperMirrorCloseDelayTime_;
    /// <summary>
    /// 狙击镜开火关镜延迟时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperMirrorCloseDelayTime {
      get { return sniperMirrorCloseDelayTime_; }
      set {
        sniperMirrorCloseDelayTime_ = value;
      }
    }

    /// <summary>Field number for the "SniperMirrorCloseOff" field.</summary>
    public const int SniperMirrorCloseOffFieldNumber = 86;
    private bool sniperMirrorCloseOff_;
    /// <summary>
    /// 狙击镜开火保持开镜 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SniperMirrorCloseOff {
      get { return sniperMirrorCloseOff_; }
      set {
        sniperMirrorCloseOff_ = value;
      }
    }

    /// <summary>Field number for the "AttenuationDistances" field.</summary>
    public const int AttenuationDistancesFieldNumber = 87;
    private static readonly pb::FieldCodec<float> _repeated_attenuationDistances_codec
        = pb::FieldCodec.ForFloat(698);
    private readonly pbc::RepeatedField<float> attenuationDistances_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 每飞行多少米进行一次衰减 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AttenuationDistances {
      get { return attenuationDistances_; }
    }

    /// <summary>Field number for the "AttenuationPercents" field.</summary>
    public const int AttenuationPercentsFieldNumber = 88;
    private static readonly pb::FieldCodec<float> _repeated_attenuationPercents_codec
        = pb::FieldCodec.ForFloat(706);
    private readonly pbc::RepeatedField<float> attenuationPercents_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 每飞行衰减的百分比 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AttenuationPercents {
      get { return attenuationPercents_; }
    }

    /// <summary>Field number for the "BRAttenuationDistances" field.</summary>
    public const int BRAttenuationDistancesFieldNumber = 89;
    private static readonly pb::FieldCodec<float> _repeated_bRAttenuationDistances_codec
        = pb::FieldCodec.ForFloat(714);
    private readonly pbc::RepeatedField<float> bRAttenuationDistances_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// BR模式每飞行多少米进行一次衰减 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> BRAttenuationDistances {
      get { return bRAttenuationDistances_; }
    }

    /// <summary>Field number for the "BRAttenuationPercents" field.</summary>
    public const int BRAttenuationPercentsFieldNumber = 90;
    private static readonly pb::FieldCodec<float> _repeated_bRAttenuationPercents_codec
        = pb::FieldCodec.ForFloat(722);
    private readonly pbc::RepeatedField<float> bRAttenuationPercents_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// BR模式每飞行衰减的百分比 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> BRAttenuationPercents {
      get { return bRAttenuationPercents_; }
    }

    /// <summary>Field number for the "PenetrationValue" field.</summary>
    public const int PenetrationValueFieldNumber = 91;
    private float penetrationValue_;
    /// <summary>
    /// 穿透伤害衰减 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PenetrationValue {
      get { return penetrationValue_; }
      set {
        penetrationValue_ = value;
      }
    }

    /// <summary>Field number for the "PenetrationMaterialValue" field.</summary>
    public const int PenetrationMaterialValueFieldNumber = 92;
    private float penetrationMaterialValue_;
    /// <summary>
    /// 穿透力，用来和材质抗穿透参数对比 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PenetrationMaterialValue {
      get { return penetrationMaterialValue_; }
      set {
        penetrationMaterialValue_ = value;
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 93;
    private global::D11.Pjson.BaseFireLogicConfigData parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.BaseFireLogicConfigData Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponFireLogicInstantConfigData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponFireLogicInstantConfigData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxShotsFired != other.MaxShotsFired) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinInaccuracy, other.MinInaccuracy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxInaccuracy, other.MaxInaccuracy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisperseModifierStanding, other.DisperseModifierStanding)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisperseModifierJumping, other.DisperseModifierJumping)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisperseModifierWalking, other.DisperseModifierWalking)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleXDecreseSpeed, other.PunchAngleXDecreseSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleYDecreseSpeed, other.PunchAngleYDecreseSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilUpBase, other.RecoilUpBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilUpModifier, other.RecoilUpModifier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilUpMax, other.RecoilUpMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilLateralBase, other.RecoilLateralBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilLateralModifier, other.RecoilLateralModifier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilLateralMax, other.RecoilLateralMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilScaleStanding, other.RecoilScaleStanding)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilScaleWalking, other.RecoilScaleWalking)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilScaleJumping, other.RecoilScaleJumping)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReachMaxDirectionChangePerc, other.ReachMaxDirectionChangePerc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UnreachMaxDirectionChangePerc, other.UnreachMaxDirectionChangePerc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GetHitPunchAngleX, other.GetHitPunchAngleX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GetHitPunchAngleXDecreseSpeed, other.GetHitPunchAngleXDecreseSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PenetrationDamageModifier, other.PenetrationDamageModifier)) return false;
      if (MaxThroughWall != other.MaxThroughWall) return false;
      if (EnableContinuousFire != other.EnableContinuousFire) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DecaySpreadSpeed, other.DecaySpreadSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NotFiringDecaySpreadSpeed, other.NotFiringDecaySpreadSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisperseBase, other.DisperseBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyFire, other.InaccuracyFire)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyFireMax, other.InaccuracyFireMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyFireMin, other.InaccuracyFireMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyFireLimitCount, other.InaccuracyFireLimitCount)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyStand, other.InaccuracyStand)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyCrouch, other.InaccuracyCrouch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyLadder, other.InaccuracyLadder)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyLand, other.InaccuracyLand)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyMove, other.InaccuracyMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracySlientStep, other.InaccuracySlientStep)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyJump, other.InaccuracyJump)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyMoveInitValue, other.InaccuracyMoveInitValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyVelocityMove, other.InaccuracyVelocityMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyVelocityMoveMax, other.InaccuracyVelocityMoveMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyVelocityMoveMin, other.InaccuracyVelocityMoveMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyJumpInitValue, other.InaccuracyJumpInitValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyVelocityJump, other.InaccuracyVelocityJump)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyVelocityJumpMax, other.InaccuracyVelocityJumpMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracySlientStepInitValue, other.InaccuracySlientStepInitValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyVelocitySlientStep, other.InaccuracyVelocitySlientStep)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyVelocitySlientStepMax, other.InaccuracyVelocitySlientStepMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InaccuracyVelocityBase, other.InaccuracyVelocityBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Spread, other.Spread)) return false;
      if (UseRandomRecoin != other.UseRandomRecoin) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxShotSpread, other.MaxShotSpread)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleRecoverySpeed, other.PunchAngleRecoverySpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleDumping, other.PunchAngleDumping)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleRadiusPer, other.PunchAngleRadiusPer)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleRadiusMax, other.PunchAngleRadiusMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleRadiusMin, other.PunchAngleRadiusMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleRadiusDecaySpeed, other.PunchAngleRadiusDecaySpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleFireDecayRatio, other.PunchAngleFireDecayRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleZoomFactorMove, other.PunchAngleZoomFactorMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleZoomFactorSlientStep, other.PunchAngleZoomFactorSlientStep)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleZoomFactorCrouch, other.PunchAngleZoomFactorCrouch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleZoomFactor, other.PunchAngleZoomFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleZoomFactorX, other.PunchAngleZoomFactorX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleZoomFactorY, other.PunchAngleZoomFactorY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DecaySpradLandValueSpeed, other.DecaySpradLandValueSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrosshairMaxDistance, other.CrosshairMaxDistance)) return false;
      if (RecoilType != other.RecoilType) return false;
      if (SpreadType != other.SpreadType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DecayMirrorOpenSpreadSpeed, other.DecayMirrorOpenSpreadSpeed)) return false;
      if (OneShotBulletCount != other.OneShotBulletCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TripleFireInterval, other.TripleFireInterval)) return false;
      if(!punchAngle_.Equals(other.punchAngle_)) return false;
      if(!crosshairMoveByPunchAngle_.Equals(other.crosshairMoveByPunchAngle_)) return false;
      if(!offSetAngle_.Equals(other.offSetAngle_)) return false;
      if (RecycleRecoilIndex != other.RecycleRecoilIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SectorRecoilAngle, other.SectorRecoilAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireContinueInternel, other.FireContinueInternel)) return false;
      if (IsContinueFireCount != other.IsContinueFireCount) return false;
      if (FireContinueMax != other.FireContinueMax) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MiddleAngleEnhancementRatio, other.MiddleAngleEnhancementRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RightAngleEnhancementRatio, other.RightAngleEnhancementRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LeftAngleEnhancementRatio, other.LeftAngleEnhancementRatio)) return false;
      if (EnableOpenMirrorAndFire != other.EnableOpenMirrorAndFire) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperMirrorCloseDelayTime, other.SniperMirrorCloseDelayTime)) return false;
      if (SniperMirrorCloseOff != other.SniperMirrorCloseOff) return false;
      if(!attenuationDistances_.Equals(other.attenuationDistances_)) return false;
      if(!attenuationPercents_.Equals(other.attenuationPercents_)) return false;
      if(!bRAttenuationDistances_.Equals(other.bRAttenuationDistances_)) return false;
      if(!bRAttenuationPercents_.Equals(other.bRAttenuationPercents_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PenetrationValue, other.PenetrationValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PenetrationMaterialValue, other.PenetrationMaterialValue)) return false;
      if (!object.Equals(Parent, other.Parent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxShotsFired != 0) hash ^= MaxShotsFired.GetHashCode();
      if (MinInaccuracy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinInaccuracy);
      if (MaxInaccuracy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxInaccuracy);
      if (DisperseModifierStanding != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisperseModifierStanding);
      if (DisperseModifierJumping != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisperseModifierJumping);
      if (DisperseModifierWalking != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisperseModifierWalking);
      if (PunchAngleXDecreseSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleXDecreseSpeed);
      if (PunchAngleYDecreseSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleYDecreseSpeed);
      if (RecoilUpBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilUpBase);
      if (RecoilUpModifier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilUpModifier);
      if (RecoilUpMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilUpMax);
      if (RecoilLateralBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilLateralBase);
      if (RecoilLateralModifier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilLateralModifier);
      if (RecoilLateralMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilLateralMax);
      if (RecoilScaleStanding != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilScaleStanding);
      if (RecoilScaleWalking != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilScaleWalking);
      if (RecoilScaleJumping != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilScaleJumping);
      if (ReachMaxDirectionChangePerc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReachMaxDirectionChangePerc);
      if (UnreachMaxDirectionChangePerc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UnreachMaxDirectionChangePerc);
      if (GetHitPunchAngleX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GetHitPunchAngleX);
      if (GetHitPunchAngleXDecreseSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GetHitPunchAngleXDecreseSpeed);
      if (PenetrationDamageModifier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PenetrationDamageModifier);
      if (MaxThroughWall != 0) hash ^= MaxThroughWall.GetHashCode();
      if (EnableContinuousFire != false) hash ^= EnableContinuousFire.GetHashCode();
      if (DecaySpreadSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DecaySpreadSpeed);
      if (NotFiringDecaySpreadSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NotFiringDecaySpreadSpeed);
      if (DisperseBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisperseBase);
      if (InaccuracyFire != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyFire);
      if (InaccuracyFireMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyFireMax);
      if (InaccuracyFireMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyFireMin);
      if (InaccuracyFireLimitCount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyFireLimitCount);
      if (InaccuracyStand != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyStand);
      if (InaccuracyCrouch != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyCrouch);
      if (InaccuracyLadder != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyLadder);
      if (InaccuracyLand != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyLand);
      if (InaccuracyMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyMove);
      if (InaccuracySlientStep != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracySlientStep);
      if (InaccuracyJump != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyJump);
      if (InaccuracyMoveInitValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyMoveInitValue);
      if (InaccuracyVelocityMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyVelocityMove);
      if (InaccuracyVelocityMoveMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyVelocityMoveMax);
      if (InaccuracyVelocityMoveMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyVelocityMoveMin);
      if (InaccuracyJumpInitValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyJumpInitValue);
      if (InaccuracyVelocityJump != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyVelocityJump);
      if (InaccuracyVelocityJumpMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyVelocityJumpMax);
      if (InaccuracySlientStepInitValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracySlientStepInitValue);
      if (InaccuracyVelocitySlientStep != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyVelocitySlientStep);
      if (InaccuracyVelocitySlientStepMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyVelocitySlientStepMax);
      if (InaccuracyVelocityBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InaccuracyVelocityBase);
      if (Spread != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Spread);
      if (UseRandomRecoin != false) hash ^= UseRandomRecoin.GetHashCode();
      if (MaxShotSpread != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxShotSpread);
      if (PunchAngleRecoverySpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleRecoverySpeed);
      if (PunchAngleDumping != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleDumping);
      if (PunchAngleRadiusPer != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleRadiusPer);
      if (PunchAngleRadiusMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleRadiusMax);
      if (PunchAngleRadiusMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleRadiusMin);
      if (PunchAngleRadiusDecaySpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleRadiusDecaySpeed);
      if (PunchAngleFireDecayRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleFireDecayRatio);
      if (PunchAngleZoomFactorMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleZoomFactorMove);
      if (PunchAngleZoomFactorSlientStep != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleZoomFactorSlientStep);
      if (PunchAngleZoomFactorCrouch != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleZoomFactorCrouch);
      if (PunchAngleZoomFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleZoomFactor);
      if (PunchAngleZoomFactorX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleZoomFactorX);
      if (PunchAngleZoomFactorY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleZoomFactorY);
      if (DecaySpradLandValueSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DecaySpradLandValueSpeed);
      if (CrosshairMaxDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrosshairMaxDistance);
      if (RecoilType != 0) hash ^= RecoilType.GetHashCode();
      if (SpreadType != 0) hash ^= SpreadType.GetHashCode();
      if (DecayMirrorOpenSpreadSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DecayMirrorOpenSpreadSpeed);
      if (OneShotBulletCount != 0) hash ^= OneShotBulletCount.GetHashCode();
      if (TripleFireInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TripleFireInterval);
      hash ^= punchAngle_.GetHashCode();
      hash ^= crosshairMoveByPunchAngle_.GetHashCode();
      hash ^= offSetAngle_.GetHashCode();
      if (RecycleRecoilIndex != 0) hash ^= RecycleRecoilIndex.GetHashCode();
      if (SectorRecoilAngle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SectorRecoilAngle);
      if (FireContinueInternel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireContinueInternel);
      if (IsContinueFireCount != false) hash ^= IsContinueFireCount.GetHashCode();
      if (FireContinueMax != 0) hash ^= FireContinueMax.GetHashCode();
      if (MiddleAngleEnhancementRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MiddleAngleEnhancementRatio);
      if (RightAngleEnhancementRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RightAngleEnhancementRatio);
      if (LeftAngleEnhancementRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LeftAngleEnhancementRatio);
      if (EnableOpenMirrorAndFire != false) hash ^= EnableOpenMirrorAndFire.GetHashCode();
      if (SniperMirrorCloseDelayTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperMirrorCloseDelayTime);
      if (SniperMirrorCloseOff != false) hash ^= SniperMirrorCloseOff.GetHashCode();
      hash ^= attenuationDistances_.GetHashCode();
      hash ^= attenuationPercents_.GetHashCode();
      hash ^= bRAttenuationDistances_.GetHashCode();
      hash ^= bRAttenuationPercents_.GetHashCode();
      if (PenetrationValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PenetrationValue);
      if (PenetrationMaterialValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PenetrationMaterialValue);
      if (parent_ != null) hash ^= Parent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxShotsFired != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxShotsFired);
      }
      if (MinInaccuracy != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MinInaccuracy);
      }
      if (MaxInaccuracy != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MaxInaccuracy);
      }
      if (DisperseModifierStanding != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(DisperseModifierStanding);
      }
      if (DisperseModifierJumping != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(DisperseModifierJumping);
      }
      if (DisperseModifierWalking != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(DisperseModifierWalking);
      }
      if (PunchAngleXDecreseSpeed != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(PunchAngleXDecreseSpeed);
      }
      if (PunchAngleYDecreseSpeed != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(PunchAngleYDecreseSpeed);
      }
      if (RecoilUpBase != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(RecoilUpBase);
      }
      if (RecoilUpModifier != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(RecoilUpModifier);
      }
      if (RecoilUpMax != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(RecoilUpMax);
      }
      if (RecoilLateralBase != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(RecoilLateralBase);
      }
      if (RecoilLateralModifier != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(RecoilLateralModifier);
      }
      if (RecoilLateralMax != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(RecoilLateralMax);
      }
      if (RecoilScaleStanding != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(RecoilScaleStanding);
      }
      if (RecoilScaleWalking != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(RecoilScaleWalking);
      }
      if (RecoilScaleJumping != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(RecoilScaleJumping);
      }
      if (ReachMaxDirectionChangePerc != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(ReachMaxDirectionChangePerc);
      }
      if (UnreachMaxDirectionChangePerc != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(UnreachMaxDirectionChangePerc);
      }
      if (GetHitPunchAngleX != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(GetHitPunchAngleX);
      }
      if (GetHitPunchAngleXDecreseSpeed != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(GetHitPunchAngleXDecreseSpeed);
      }
      if (PenetrationDamageModifier != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(PenetrationDamageModifier);
      }
      if (MaxThroughWall != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(MaxThroughWall);
      }
      if (EnableContinuousFire != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(EnableContinuousFire);
      }
      if (DecaySpreadSpeed != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(DecaySpreadSpeed);
      }
      if (NotFiringDecaySpreadSpeed != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(NotFiringDecaySpreadSpeed);
      }
      if (DisperseBase != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(DisperseBase);
      }
      if (InaccuracyFire != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(InaccuracyFire);
      }
      if (InaccuracyFireMax != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(InaccuracyFireMax);
      }
      if (InaccuracyFireMin != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(InaccuracyFireMin);
      }
      if (InaccuracyFireLimitCount != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(InaccuracyFireLimitCount);
      }
      if (InaccuracyStand != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(InaccuracyStand);
      }
      if (InaccuracyCrouch != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(InaccuracyCrouch);
      }
      if (InaccuracyLadder != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(InaccuracyLadder);
      }
      if (InaccuracyLand != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(InaccuracyLand);
      }
      if (InaccuracyMove != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(InaccuracyMove);
      }
      if (InaccuracySlientStep != 0F) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(InaccuracySlientStep);
      }
      if (InaccuracyJump != 0F) {
        output.WriteRawTag(181, 2);
        output.WriteFloat(InaccuracyJump);
      }
      if (InaccuracyMoveInitValue != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(InaccuracyMoveInitValue);
      }
      if (InaccuracyVelocityMove != 0F) {
        output.WriteRawTag(197, 2);
        output.WriteFloat(InaccuracyVelocityMove);
      }
      if (InaccuracyVelocityMoveMax != 0F) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(InaccuracyVelocityMoveMax);
      }
      if (InaccuracyVelocityMoveMin != 0F) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(InaccuracyVelocityMoveMin);
      }
      if (InaccuracyJumpInitValue != 0F) {
        output.WriteRawTag(221, 2);
        output.WriteFloat(InaccuracyJumpInitValue);
      }
      if (InaccuracyVelocityJump != 0F) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(InaccuracyVelocityJump);
      }
      if (InaccuracyVelocityJumpMax != 0F) {
        output.WriteRawTag(237, 2);
        output.WriteFloat(InaccuracyVelocityJumpMax);
      }
      if (InaccuracySlientStepInitValue != 0F) {
        output.WriteRawTag(245, 2);
        output.WriteFloat(InaccuracySlientStepInitValue);
      }
      if (InaccuracyVelocitySlientStep != 0F) {
        output.WriteRawTag(253, 2);
        output.WriteFloat(InaccuracyVelocitySlientStep);
      }
      if (InaccuracyVelocitySlientStepMax != 0F) {
        output.WriteRawTag(133, 3);
        output.WriteFloat(InaccuracyVelocitySlientStepMax);
      }
      if (InaccuracyVelocityBase != 0F) {
        output.WriteRawTag(141, 3);
        output.WriteFloat(InaccuracyVelocityBase);
      }
      if (Spread != 0F) {
        output.WriteRawTag(149, 3);
        output.WriteFloat(Spread);
      }
      if (UseRandomRecoin != false) {
        output.WriteRawTag(152, 3);
        output.WriteBool(UseRandomRecoin);
      }
      if (MaxShotSpread != 0F) {
        output.WriteRawTag(165, 3);
        output.WriteFloat(MaxShotSpread);
      }
      if (PunchAngleRecoverySpeed != 0F) {
        output.WriteRawTag(173, 3);
        output.WriteFloat(PunchAngleRecoverySpeed);
      }
      if (PunchAngleDumping != 0F) {
        output.WriteRawTag(181, 3);
        output.WriteFloat(PunchAngleDumping);
      }
      if (PunchAngleRadiusPer != 0F) {
        output.WriteRawTag(189, 3);
        output.WriteFloat(PunchAngleRadiusPer);
      }
      if (PunchAngleRadiusMax != 0F) {
        output.WriteRawTag(197, 3);
        output.WriteFloat(PunchAngleRadiusMax);
      }
      if (PunchAngleRadiusMin != 0F) {
        output.WriteRawTag(205, 3);
        output.WriteFloat(PunchAngleRadiusMin);
      }
      if (PunchAngleRadiusDecaySpeed != 0F) {
        output.WriteRawTag(213, 3);
        output.WriteFloat(PunchAngleRadiusDecaySpeed);
      }
      if (PunchAngleFireDecayRatio != 0F) {
        output.WriteRawTag(221, 3);
        output.WriteFloat(PunchAngleFireDecayRatio);
      }
      if (PunchAngleZoomFactorMove != 0F) {
        output.WriteRawTag(229, 3);
        output.WriteFloat(PunchAngleZoomFactorMove);
      }
      if (PunchAngleZoomFactorSlientStep != 0F) {
        output.WriteRawTag(237, 3);
        output.WriteFloat(PunchAngleZoomFactorSlientStep);
      }
      if (PunchAngleZoomFactorCrouch != 0F) {
        output.WriteRawTag(245, 3);
        output.WriteFloat(PunchAngleZoomFactorCrouch);
      }
      if (PunchAngleZoomFactor != 0F) {
        output.WriteRawTag(253, 3);
        output.WriteFloat(PunchAngleZoomFactor);
      }
      if (PunchAngleZoomFactorX != 0F) {
        output.WriteRawTag(133, 4);
        output.WriteFloat(PunchAngleZoomFactorX);
      }
      if (PunchAngleZoomFactorY != 0F) {
        output.WriteRawTag(141, 4);
        output.WriteFloat(PunchAngleZoomFactorY);
      }
      if (DecaySpradLandValueSpeed != 0F) {
        output.WriteRawTag(149, 4);
        output.WriteFloat(DecaySpradLandValueSpeed);
      }
      if (CrosshairMaxDistance != 0F) {
        output.WriteRawTag(157, 4);
        output.WriteFloat(CrosshairMaxDistance);
      }
      if (RecoilType != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(RecoilType);
      }
      if (SpreadType != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(SpreadType);
      }
      if (DecayMirrorOpenSpreadSpeed != 0F) {
        output.WriteRawTag(181, 4);
        output.WriteFloat(DecayMirrorOpenSpreadSpeed);
      }
      if (OneShotBulletCount != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(OneShotBulletCount);
      }
      if (TripleFireInterval != 0F) {
        output.WriteRawTag(197, 4);
        output.WriteFloat(TripleFireInterval);
      }
      punchAngle_.WriteTo(output, _repeated_punchAngle_codec);
      crosshairMoveByPunchAngle_.WriteTo(output, _repeated_crosshairMoveByPunchAngle_codec);
      offSetAngle_.WriteTo(output, _repeated_offSetAngle_codec);
      if (RecycleRecoilIndex != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(RecycleRecoilIndex);
      }
      if (SectorRecoilAngle != 0F) {
        output.WriteRawTag(237, 4);
        output.WriteFloat(SectorRecoilAngle);
      }
      if (FireContinueInternel != 0F) {
        output.WriteRawTag(245, 4);
        output.WriteFloat(FireContinueInternel);
      }
      if (IsContinueFireCount != false) {
        output.WriteRawTag(248, 4);
        output.WriteBool(IsContinueFireCount);
      }
      if (FireContinueMax != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(FireContinueMax);
      }
      if (MiddleAngleEnhancementRatio != 0F) {
        output.WriteRawTag(141, 5);
        output.WriteFloat(MiddleAngleEnhancementRatio);
      }
      if (RightAngleEnhancementRatio != 0F) {
        output.WriteRawTag(149, 5);
        output.WriteFloat(RightAngleEnhancementRatio);
      }
      if (LeftAngleEnhancementRatio != 0F) {
        output.WriteRawTag(157, 5);
        output.WriteFloat(LeftAngleEnhancementRatio);
      }
      if (EnableOpenMirrorAndFire != false) {
        output.WriteRawTag(160, 5);
        output.WriteBool(EnableOpenMirrorAndFire);
      }
      if (SniperMirrorCloseDelayTime != 0F) {
        output.WriteRawTag(173, 5);
        output.WriteFloat(SniperMirrorCloseDelayTime);
      }
      if (SniperMirrorCloseOff != false) {
        output.WriteRawTag(176, 5);
        output.WriteBool(SniperMirrorCloseOff);
      }
      attenuationDistances_.WriteTo(output, _repeated_attenuationDistances_codec);
      attenuationPercents_.WriteTo(output, _repeated_attenuationPercents_codec);
      bRAttenuationDistances_.WriteTo(output, _repeated_bRAttenuationDistances_codec);
      bRAttenuationPercents_.WriteTo(output, _repeated_bRAttenuationPercents_codec);
      if (PenetrationValue != 0F) {
        output.WriteRawTag(221, 5);
        output.WriteFloat(PenetrationValue);
      }
      if (PenetrationMaterialValue != 0F) {
        output.WriteRawTag(229, 5);
        output.WriteFloat(PenetrationMaterialValue);
      }
      if (parent_ != null) {
        output.WriteRawTag(234, 5);
        output.WriteMessage(Parent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxShotsFired != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxShotsFired);
      }
      if (MinInaccuracy != 0F) {
        size += 1 + 4;
      }
      if (MaxInaccuracy != 0F) {
        size += 1 + 4;
      }
      if (DisperseModifierStanding != 0F) {
        size += 1 + 4;
      }
      if (DisperseModifierJumping != 0F) {
        size += 1 + 4;
      }
      if (DisperseModifierWalking != 0F) {
        size += 1 + 4;
      }
      if (PunchAngleXDecreseSpeed != 0F) {
        size += 1 + 4;
      }
      if (PunchAngleYDecreseSpeed != 0F) {
        size += 1 + 4;
      }
      if (RecoilUpBase != 0F) {
        size += 1 + 4;
      }
      if (RecoilUpModifier != 0F) {
        size += 1 + 4;
      }
      if (RecoilUpMax != 0F) {
        size += 1 + 4;
      }
      if (RecoilLateralBase != 0F) {
        size += 1 + 4;
      }
      if (RecoilLateralModifier != 0F) {
        size += 1 + 4;
      }
      if (RecoilLateralMax != 0F) {
        size += 1 + 4;
      }
      if (RecoilScaleStanding != 0F) {
        size += 1 + 4;
      }
      if (RecoilScaleWalking != 0F) {
        size += 2 + 4;
      }
      if (RecoilScaleJumping != 0F) {
        size += 2 + 4;
      }
      if (ReachMaxDirectionChangePerc != 0F) {
        size += 2 + 4;
      }
      if (UnreachMaxDirectionChangePerc != 0F) {
        size += 2 + 4;
      }
      if (GetHitPunchAngleX != 0F) {
        size += 2 + 4;
      }
      if (GetHitPunchAngleXDecreseSpeed != 0F) {
        size += 2 + 4;
      }
      if (PenetrationDamageModifier != 0F) {
        size += 2 + 4;
      }
      if (MaxThroughWall != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxThroughWall);
      }
      if (EnableContinuousFire != false) {
        size += 2 + 1;
      }
      if (DecaySpreadSpeed != 0F) {
        size += 2 + 4;
      }
      if (NotFiringDecaySpreadSpeed != 0F) {
        size += 2 + 4;
      }
      if (DisperseBase != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyFire != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyFireMax != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyFireMin != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyFireLimitCount != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyStand != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyCrouch != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyLadder != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyLand != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyMove != 0F) {
        size += 2 + 4;
      }
      if (InaccuracySlientStep != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyJump != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyMoveInitValue != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyVelocityMove != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyVelocityMoveMax != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyVelocityMoveMin != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyJumpInitValue != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyVelocityJump != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyVelocityJumpMax != 0F) {
        size += 2 + 4;
      }
      if (InaccuracySlientStepInitValue != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyVelocitySlientStep != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyVelocitySlientStepMax != 0F) {
        size += 2 + 4;
      }
      if (InaccuracyVelocityBase != 0F) {
        size += 2 + 4;
      }
      if (Spread != 0F) {
        size += 2 + 4;
      }
      if (UseRandomRecoin != false) {
        size += 2 + 1;
      }
      if (MaxShotSpread != 0F) {
        size += 2 + 4;
      }
      if (PunchAngleRecoverySpeed != 0F) {
        size += 2 + 4;
      }
      if (PunchAngleDumping != 0F) {
        size += 2 + 4;
      }
      if (PunchAngleRadiusPer != 0F) {
        size += 2 + 4;
      }
      if (PunchAngleRadiusMax != 0F) {
        size += 2 + 4;
      }
      if (PunchAngleRadiusMin != 0F) {
        size += 2 + 4;
      }
      if (PunchAngleRadiusDecaySpeed != 0F) {
        size += 2 + 4;
      }
      if (PunchAngleFireDecayRatio != 0F) {
        size += 2 + 4;
      }
      if (PunchAngleZoomFactorMove != 0F) {
        size += 2 + 4;
      }
      if (PunchAngleZoomFactorSlientStep != 0F) {
        size += 2 + 4;
      }
      if (PunchAngleZoomFactorCrouch != 0F) {
        size += 2 + 4;
      }
      if (PunchAngleZoomFactor != 0F) {
        size += 2 + 4;
      }
      if (PunchAngleZoomFactorX != 0F) {
        size += 2 + 4;
      }
      if (PunchAngleZoomFactorY != 0F) {
        size += 2 + 4;
      }
      if (DecaySpradLandValueSpeed != 0F) {
        size += 2 + 4;
      }
      if (CrosshairMaxDistance != 0F) {
        size += 2 + 4;
      }
      if (RecoilType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RecoilType);
      }
      if (SpreadType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpreadType);
      }
      if (DecayMirrorOpenSpreadSpeed != 0F) {
        size += 2 + 4;
      }
      if (OneShotBulletCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OneShotBulletCount);
      }
      if (TripleFireInterval != 0F) {
        size += 2 + 4;
      }
      size += punchAngle_.CalculateSize(_repeated_punchAngle_codec);
      size += crosshairMoveByPunchAngle_.CalculateSize(_repeated_crosshairMoveByPunchAngle_codec);
      size += offSetAngle_.CalculateSize(_repeated_offSetAngle_codec);
      if (RecycleRecoilIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RecycleRecoilIndex);
      }
      if (SectorRecoilAngle != 0F) {
        size += 2 + 4;
      }
      if (FireContinueInternel != 0F) {
        size += 2 + 4;
      }
      if (IsContinueFireCount != false) {
        size += 2 + 1;
      }
      if (FireContinueMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FireContinueMax);
      }
      if (MiddleAngleEnhancementRatio != 0F) {
        size += 2 + 4;
      }
      if (RightAngleEnhancementRatio != 0F) {
        size += 2 + 4;
      }
      if (LeftAngleEnhancementRatio != 0F) {
        size += 2 + 4;
      }
      if (EnableOpenMirrorAndFire != false) {
        size += 2 + 1;
      }
      if (SniperMirrorCloseDelayTime != 0F) {
        size += 2 + 4;
      }
      if (SniperMirrorCloseOff != false) {
        size += 2 + 1;
      }
      size += attenuationDistances_.CalculateSize(_repeated_attenuationDistances_codec);
      size += attenuationPercents_.CalculateSize(_repeated_attenuationPercents_codec);
      size += bRAttenuationDistances_.CalculateSize(_repeated_bRAttenuationDistances_codec);
      size += bRAttenuationPercents_.CalculateSize(_repeated_bRAttenuationPercents_codec);
      if (PenetrationValue != 0F) {
        size += 2 + 4;
      }
      if (PenetrationMaterialValue != 0F) {
        size += 2 + 4;
      }
      if (parent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponFireLogicInstantConfigData other) {
      if (other == null) {
        return;
      }
      if (other.MaxShotsFired != 0) {
        MaxShotsFired = other.MaxShotsFired;
      }
      if (other.MinInaccuracy != 0F) {
        MinInaccuracy = other.MinInaccuracy;
      }
      if (other.MaxInaccuracy != 0F) {
        MaxInaccuracy = other.MaxInaccuracy;
      }
      if (other.DisperseModifierStanding != 0F) {
        DisperseModifierStanding = other.DisperseModifierStanding;
      }
      if (other.DisperseModifierJumping != 0F) {
        DisperseModifierJumping = other.DisperseModifierJumping;
      }
      if (other.DisperseModifierWalking != 0F) {
        DisperseModifierWalking = other.DisperseModifierWalking;
      }
      if (other.PunchAngleXDecreseSpeed != 0F) {
        PunchAngleXDecreseSpeed = other.PunchAngleXDecreseSpeed;
      }
      if (other.PunchAngleYDecreseSpeed != 0F) {
        PunchAngleYDecreseSpeed = other.PunchAngleYDecreseSpeed;
      }
      if (other.RecoilUpBase != 0F) {
        RecoilUpBase = other.RecoilUpBase;
      }
      if (other.RecoilUpModifier != 0F) {
        RecoilUpModifier = other.RecoilUpModifier;
      }
      if (other.RecoilUpMax != 0F) {
        RecoilUpMax = other.RecoilUpMax;
      }
      if (other.RecoilLateralBase != 0F) {
        RecoilLateralBase = other.RecoilLateralBase;
      }
      if (other.RecoilLateralModifier != 0F) {
        RecoilLateralModifier = other.RecoilLateralModifier;
      }
      if (other.RecoilLateralMax != 0F) {
        RecoilLateralMax = other.RecoilLateralMax;
      }
      if (other.RecoilScaleStanding != 0F) {
        RecoilScaleStanding = other.RecoilScaleStanding;
      }
      if (other.RecoilScaleWalking != 0F) {
        RecoilScaleWalking = other.RecoilScaleWalking;
      }
      if (other.RecoilScaleJumping != 0F) {
        RecoilScaleJumping = other.RecoilScaleJumping;
      }
      if (other.ReachMaxDirectionChangePerc != 0F) {
        ReachMaxDirectionChangePerc = other.ReachMaxDirectionChangePerc;
      }
      if (other.UnreachMaxDirectionChangePerc != 0F) {
        UnreachMaxDirectionChangePerc = other.UnreachMaxDirectionChangePerc;
      }
      if (other.GetHitPunchAngleX != 0F) {
        GetHitPunchAngleX = other.GetHitPunchAngleX;
      }
      if (other.GetHitPunchAngleXDecreseSpeed != 0F) {
        GetHitPunchAngleXDecreseSpeed = other.GetHitPunchAngleXDecreseSpeed;
      }
      if (other.PenetrationDamageModifier != 0F) {
        PenetrationDamageModifier = other.PenetrationDamageModifier;
      }
      if (other.MaxThroughWall != 0) {
        MaxThroughWall = other.MaxThroughWall;
      }
      if (other.EnableContinuousFire != false) {
        EnableContinuousFire = other.EnableContinuousFire;
      }
      if (other.DecaySpreadSpeed != 0F) {
        DecaySpreadSpeed = other.DecaySpreadSpeed;
      }
      if (other.NotFiringDecaySpreadSpeed != 0F) {
        NotFiringDecaySpreadSpeed = other.NotFiringDecaySpreadSpeed;
      }
      if (other.DisperseBase != 0F) {
        DisperseBase = other.DisperseBase;
      }
      if (other.InaccuracyFire != 0F) {
        InaccuracyFire = other.InaccuracyFire;
      }
      if (other.InaccuracyFireMax != 0F) {
        InaccuracyFireMax = other.InaccuracyFireMax;
      }
      if (other.InaccuracyFireMin != 0F) {
        InaccuracyFireMin = other.InaccuracyFireMin;
      }
      if (other.InaccuracyFireLimitCount != 0F) {
        InaccuracyFireLimitCount = other.InaccuracyFireLimitCount;
      }
      if (other.InaccuracyStand != 0F) {
        InaccuracyStand = other.InaccuracyStand;
      }
      if (other.InaccuracyCrouch != 0F) {
        InaccuracyCrouch = other.InaccuracyCrouch;
      }
      if (other.InaccuracyLadder != 0F) {
        InaccuracyLadder = other.InaccuracyLadder;
      }
      if (other.InaccuracyLand != 0F) {
        InaccuracyLand = other.InaccuracyLand;
      }
      if (other.InaccuracyMove != 0F) {
        InaccuracyMove = other.InaccuracyMove;
      }
      if (other.InaccuracySlientStep != 0F) {
        InaccuracySlientStep = other.InaccuracySlientStep;
      }
      if (other.InaccuracyJump != 0F) {
        InaccuracyJump = other.InaccuracyJump;
      }
      if (other.InaccuracyMoveInitValue != 0F) {
        InaccuracyMoveInitValue = other.InaccuracyMoveInitValue;
      }
      if (other.InaccuracyVelocityMove != 0F) {
        InaccuracyVelocityMove = other.InaccuracyVelocityMove;
      }
      if (other.InaccuracyVelocityMoveMax != 0F) {
        InaccuracyVelocityMoveMax = other.InaccuracyVelocityMoveMax;
      }
      if (other.InaccuracyVelocityMoveMin != 0F) {
        InaccuracyVelocityMoveMin = other.InaccuracyVelocityMoveMin;
      }
      if (other.InaccuracyJumpInitValue != 0F) {
        InaccuracyJumpInitValue = other.InaccuracyJumpInitValue;
      }
      if (other.InaccuracyVelocityJump != 0F) {
        InaccuracyVelocityJump = other.InaccuracyVelocityJump;
      }
      if (other.InaccuracyVelocityJumpMax != 0F) {
        InaccuracyVelocityJumpMax = other.InaccuracyVelocityJumpMax;
      }
      if (other.InaccuracySlientStepInitValue != 0F) {
        InaccuracySlientStepInitValue = other.InaccuracySlientStepInitValue;
      }
      if (other.InaccuracyVelocitySlientStep != 0F) {
        InaccuracyVelocitySlientStep = other.InaccuracyVelocitySlientStep;
      }
      if (other.InaccuracyVelocitySlientStepMax != 0F) {
        InaccuracyVelocitySlientStepMax = other.InaccuracyVelocitySlientStepMax;
      }
      if (other.InaccuracyVelocityBase != 0F) {
        InaccuracyVelocityBase = other.InaccuracyVelocityBase;
      }
      if (other.Spread != 0F) {
        Spread = other.Spread;
      }
      if (other.UseRandomRecoin != false) {
        UseRandomRecoin = other.UseRandomRecoin;
      }
      if (other.MaxShotSpread != 0F) {
        MaxShotSpread = other.MaxShotSpread;
      }
      if (other.PunchAngleRecoverySpeed != 0F) {
        PunchAngleRecoverySpeed = other.PunchAngleRecoverySpeed;
      }
      if (other.PunchAngleDumping != 0F) {
        PunchAngleDumping = other.PunchAngleDumping;
      }
      if (other.PunchAngleRadiusPer != 0F) {
        PunchAngleRadiusPer = other.PunchAngleRadiusPer;
      }
      if (other.PunchAngleRadiusMax != 0F) {
        PunchAngleRadiusMax = other.PunchAngleRadiusMax;
      }
      if (other.PunchAngleRadiusMin != 0F) {
        PunchAngleRadiusMin = other.PunchAngleRadiusMin;
      }
      if (other.PunchAngleRadiusDecaySpeed != 0F) {
        PunchAngleRadiusDecaySpeed = other.PunchAngleRadiusDecaySpeed;
      }
      if (other.PunchAngleFireDecayRatio != 0F) {
        PunchAngleFireDecayRatio = other.PunchAngleFireDecayRatio;
      }
      if (other.PunchAngleZoomFactorMove != 0F) {
        PunchAngleZoomFactorMove = other.PunchAngleZoomFactorMove;
      }
      if (other.PunchAngleZoomFactorSlientStep != 0F) {
        PunchAngleZoomFactorSlientStep = other.PunchAngleZoomFactorSlientStep;
      }
      if (other.PunchAngleZoomFactorCrouch != 0F) {
        PunchAngleZoomFactorCrouch = other.PunchAngleZoomFactorCrouch;
      }
      if (other.PunchAngleZoomFactor != 0F) {
        PunchAngleZoomFactor = other.PunchAngleZoomFactor;
      }
      if (other.PunchAngleZoomFactorX != 0F) {
        PunchAngleZoomFactorX = other.PunchAngleZoomFactorX;
      }
      if (other.PunchAngleZoomFactorY != 0F) {
        PunchAngleZoomFactorY = other.PunchAngleZoomFactorY;
      }
      if (other.DecaySpradLandValueSpeed != 0F) {
        DecaySpradLandValueSpeed = other.DecaySpradLandValueSpeed;
      }
      if (other.CrosshairMaxDistance != 0F) {
        CrosshairMaxDistance = other.CrosshairMaxDistance;
      }
      if (other.RecoilType != 0) {
        RecoilType = other.RecoilType;
      }
      if (other.SpreadType != 0) {
        SpreadType = other.SpreadType;
      }
      if (other.DecayMirrorOpenSpreadSpeed != 0F) {
        DecayMirrorOpenSpreadSpeed = other.DecayMirrorOpenSpreadSpeed;
      }
      if (other.OneShotBulletCount != 0) {
        OneShotBulletCount = other.OneShotBulletCount;
      }
      if (other.TripleFireInterval != 0F) {
        TripleFireInterval = other.TripleFireInterval;
      }
      punchAngle_.Add(other.punchAngle_);
      crosshairMoveByPunchAngle_.Add(other.crosshairMoveByPunchAngle_);
      offSetAngle_.Add(other.offSetAngle_);
      if (other.RecycleRecoilIndex != 0) {
        RecycleRecoilIndex = other.RecycleRecoilIndex;
      }
      if (other.SectorRecoilAngle != 0F) {
        SectorRecoilAngle = other.SectorRecoilAngle;
      }
      if (other.FireContinueInternel != 0F) {
        FireContinueInternel = other.FireContinueInternel;
      }
      if (other.IsContinueFireCount != false) {
        IsContinueFireCount = other.IsContinueFireCount;
      }
      if (other.FireContinueMax != 0) {
        FireContinueMax = other.FireContinueMax;
      }
      if (other.MiddleAngleEnhancementRatio != 0F) {
        MiddleAngleEnhancementRatio = other.MiddleAngleEnhancementRatio;
      }
      if (other.RightAngleEnhancementRatio != 0F) {
        RightAngleEnhancementRatio = other.RightAngleEnhancementRatio;
      }
      if (other.LeftAngleEnhancementRatio != 0F) {
        LeftAngleEnhancementRatio = other.LeftAngleEnhancementRatio;
      }
      if (other.EnableOpenMirrorAndFire != false) {
        EnableOpenMirrorAndFire = other.EnableOpenMirrorAndFire;
      }
      if (other.SniperMirrorCloseDelayTime != 0F) {
        SniperMirrorCloseDelayTime = other.SniperMirrorCloseDelayTime;
      }
      if (other.SniperMirrorCloseOff != false) {
        SniperMirrorCloseOff = other.SniperMirrorCloseOff;
      }
      attenuationDistances_.Add(other.attenuationDistances_);
      attenuationPercents_.Add(other.attenuationPercents_);
      bRAttenuationDistances_.Add(other.bRAttenuationDistances_);
      bRAttenuationPercents_.Add(other.bRAttenuationPercents_);
      if (other.PenetrationValue != 0F) {
        PenetrationValue = other.PenetrationValue;
      }
      if (other.PenetrationMaterialValue != 0F) {
        PenetrationMaterialValue = other.PenetrationMaterialValue;
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::D11.Pjson.BaseFireLogicConfigData();
        }
        Parent.MergeFrom(other.Parent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxShotsFired = input.ReadInt32();
            break;
          }
          case 21: {
            MinInaccuracy = input.ReadFloat();
            break;
          }
          case 29: {
            MaxInaccuracy = input.ReadFloat();
            break;
          }
          case 37: {
            DisperseModifierStanding = input.ReadFloat();
            break;
          }
          case 45: {
            DisperseModifierJumping = input.ReadFloat();
            break;
          }
          case 53: {
            DisperseModifierWalking = input.ReadFloat();
            break;
          }
          case 61: {
            PunchAngleXDecreseSpeed = input.ReadFloat();
            break;
          }
          case 69: {
            PunchAngleYDecreseSpeed = input.ReadFloat();
            break;
          }
          case 77: {
            RecoilUpBase = input.ReadFloat();
            break;
          }
          case 85: {
            RecoilUpModifier = input.ReadFloat();
            break;
          }
          case 93: {
            RecoilUpMax = input.ReadFloat();
            break;
          }
          case 101: {
            RecoilLateralBase = input.ReadFloat();
            break;
          }
          case 109: {
            RecoilLateralModifier = input.ReadFloat();
            break;
          }
          case 117: {
            RecoilLateralMax = input.ReadFloat();
            break;
          }
          case 125: {
            RecoilScaleStanding = input.ReadFloat();
            break;
          }
          case 133: {
            RecoilScaleWalking = input.ReadFloat();
            break;
          }
          case 141: {
            RecoilScaleJumping = input.ReadFloat();
            break;
          }
          case 149: {
            ReachMaxDirectionChangePerc = input.ReadFloat();
            break;
          }
          case 157: {
            UnreachMaxDirectionChangePerc = input.ReadFloat();
            break;
          }
          case 165: {
            GetHitPunchAngleX = input.ReadFloat();
            break;
          }
          case 173: {
            GetHitPunchAngleXDecreseSpeed = input.ReadFloat();
            break;
          }
          case 181: {
            PenetrationDamageModifier = input.ReadFloat();
            break;
          }
          case 184: {
            MaxThroughWall = input.ReadInt32();
            break;
          }
          case 192: {
            EnableContinuousFire = input.ReadBool();
            break;
          }
          case 205: {
            DecaySpreadSpeed = input.ReadFloat();
            break;
          }
          case 213: {
            NotFiringDecaySpreadSpeed = input.ReadFloat();
            break;
          }
          case 221: {
            DisperseBase = input.ReadFloat();
            break;
          }
          case 229: {
            InaccuracyFire = input.ReadFloat();
            break;
          }
          case 237: {
            InaccuracyFireMax = input.ReadFloat();
            break;
          }
          case 245: {
            InaccuracyFireMin = input.ReadFloat();
            break;
          }
          case 253: {
            InaccuracyFireLimitCount = input.ReadFloat();
            break;
          }
          case 261: {
            InaccuracyStand = input.ReadFloat();
            break;
          }
          case 269: {
            InaccuracyCrouch = input.ReadFloat();
            break;
          }
          case 277: {
            InaccuracyLadder = input.ReadFloat();
            break;
          }
          case 285: {
            InaccuracyLand = input.ReadFloat();
            break;
          }
          case 293: {
            InaccuracyMove = input.ReadFloat();
            break;
          }
          case 301: {
            InaccuracySlientStep = input.ReadFloat();
            break;
          }
          case 309: {
            InaccuracyJump = input.ReadFloat();
            break;
          }
          case 317: {
            InaccuracyMoveInitValue = input.ReadFloat();
            break;
          }
          case 325: {
            InaccuracyVelocityMove = input.ReadFloat();
            break;
          }
          case 333: {
            InaccuracyVelocityMoveMax = input.ReadFloat();
            break;
          }
          case 341: {
            InaccuracyVelocityMoveMin = input.ReadFloat();
            break;
          }
          case 349: {
            InaccuracyJumpInitValue = input.ReadFloat();
            break;
          }
          case 357: {
            InaccuracyVelocityJump = input.ReadFloat();
            break;
          }
          case 365: {
            InaccuracyVelocityJumpMax = input.ReadFloat();
            break;
          }
          case 373: {
            InaccuracySlientStepInitValue = input.ReadFloat();
            break;
          }
          case 381: {
            InaccuracyVelocitySlientStep = input.ReadFloat();
            break;
          }
          case 389: {
            InaccuracyVelocitySlientStepMax = input.ReadFloat();
            break;
          }
          case 397: {
            InaccuracyVelocityBase = input.ReadFloat();
            break;
          }
          case 405: {
            Spread = input.ReadFloat();
            break;
          }
          case 408: {
            UseRandomRecoin = input.ReadBool();
            break;
          }
          case 421: {
            MaxShotSpread = input.ReadFloat();
            break;
          }
          case 429: {
            PunchAngleRecoverySpeed = input.ReadFloat();
            break;
          }
          case 437: {
            PunchAngleDumping = input.ReadFloat();
            break;
          }
          case 445: {
            PunchAngleRadiusPer = input.ReadFloat();
            break;
          }
          case 453: {
            PunchAngleRadiusMax = input.ReadFloat();
            break;
          }
          case 461: {
            PunchAngleRadiusMin = input.ReadFloat();
            break;
          }
          case 469: {
            PunchAngleRadiusDecaySpeed = input.ReadFloat();
            break;
          }
          case 477: {
            PunchAngleFireDecayRatio = input.ReadFloat();
            break;
          }
          case 485: {
            PunchAngleZoomFactorMove = input.ReadFloat();
            break;
          }
          case 493: {
            PunchAngleZoomFactorSlientStep = input.ReadFloat();
            break;
          }
          case 501: {
            PunchAngleZoomFactorCrouch = input.ReadFloat();
            break;
          }
          case 509: {
            PunchAngleZoomFactor = input.ReadFloat();
            break;
          }
          case 517: {
            PunchAngleZoomFactorX = input.ReadFloat();
            break;
          }
          case 525: {
            PunchAngleZoomFactorY = input.ReadFloat();
            break;
          }
          case 533: {
            DecaySpradLandValueSpeed = input.ReadFloat();
            break;
          }
          case 541: {
            CrosshairMaxDistance = input.ReadFloat();
            break;
          }
          case 544: {
            RecoilType = input.ReadInt32();
            break;
          }
          case 552: {
            SpreadType = input.ReadInt32();
            break;
          }
          case 565: {
            DecayMirrorOpenSpreadSpeed = input.ReadFloat();
            break;
          }
          case 568: {
            OneShotBulletCount = input.ReadInt32();
            break;
          }
          case 581: {
            TripleFireInterval = input.ReadFloat();
            break;
          }
          case 586:
          case 589: {
            punchAngle_.AddEntriesFrom(input, _repeated_punchAngle_codec);
            break;
          }
          case 594:
          case 597: {
            crosshairMoveByPunchAngle_.AddEntriesFrom(input, _repeated_crosshairMoveByPunchAngle_codec);
            break;
          }
          case 602:
          case 605: {
            offSetAngle_.AddEntriesFrom(input, _repeated_offSetAngle_codec);
            break;
          }
          case 608: {
            RecycleRecoilIndex = input.ReadInt32();
            break;
          }
          case 621: {
            SectorRecoilAngle = input.ReadFloat();
            break;
          }
          case 629: {
            FireContinueInternel = input.ReadFloat();
            break;
          }
          case 632: {
            IsContinueFireCount = input.ReadBool();
            break;
          }
          case 640: {
            FireContinueMax = input.ReadInt32();
            break;
          }
          case 653: {
            MiddleAngleEnhancementRatio = input.ReadFloat();
            break;
          }
          case 661: {
            RightAngleEnhancementRatio = input.ReadFloat();
            break;
          }
          case 669: {
            LeftAngleEnhancementRatio = input.ReadFloat();
            break;
          }
          case 672: {
            EnableOpenMirrorAndFire = input.ReadBool();
            break;
          }
          case 685: {
            SniperMirrorCloseDelayTime = input.ReadFloat();
            break;
          }
          case 688: {
            SniperMirrorCloseOff = input.ReadBool();
            break;
          }
          case 698:
          case 701: {
            attenuationDistances_.AddEntriesFrom(input, _repeated_attenuationDistances_codec);
            break;
          }
          case 706:
          case 709: {
            attenuationPercents_.AddEntriesFrom(input, _repeated_attenuationPercents_codec);
            break;
          }
          case 714:
          case 717: {
            bRAttenuationDistances_.AddEntriesFrom(input, _repeated_bRAttenuationDistances_codec);
            break;
          }
          case 722:
          case 725: {
            bRAttenuationPercents_.AddEntriesFrom(input, _repeated_bRAttenuationPercents_codec);
            break;
          }
          case 733: {
            PenetrationValue = input.ReadFloat();
            break;
          }
          case 741: {
            PenetrationMaterialValue = input.ReadFloat();
            break;
          }
          case 746: {
            if (parent_ == null) {
              Parent = new global::D11.Pjson.BaseFireLogicConfigData();
            }
            input.ReadMessage(Parent);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
