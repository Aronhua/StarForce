// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WeaponFireLogicLaserBeamConfigData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from WeaponFireLogicLaserBeamConfigData.proto</summary>
  public static partial class WeaponFireLogicLaserBeamConfigDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WeaponFireLogicLaserBeamConfigData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeaponFireLogicLaserBeamConfigDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CihXZWFwb25GaXJlTG9naWNMYXNlckJlYW1Db25maWdEYXRhLnByb3RvEglE",
            "MTEuUGpzb24aHUJhc2VGaXJlTG9naWNDb25maWdEYXRhLnByb3RvItsGCiJX",
            "ZWFwb25GaXJlTG9naWNMYXNlckJlYW1Db25maWdEYXRhEhEKCUJhbmRXaWR0",
            "aBgBIAEoAhISCgpCYW5kTGVuZ3RoGAIgASgCEhUKDU1heFNob3RzRmlyZWQY",
            "AyABKAUSFQoNTWluSW5hY2N1cmFjeRgEIAEoAhIVCg1NYXhJbmFjY3VyYWN5",
            "GAUgASgCEhQKDERpc3BlcnNlQmFzZRgGIAEoAhIgChhEaXNwZXJzZU1vZGlm",
            "aWVyU3RhbmRpbmcYByABKAISHwoXRGlzcGVyc2VNb2RpZmllckp1bXBpbmcY",
            "CCABKAISHwoXRGlzcGVyc2VNb2RpZmllcldhbGtpbmcYCSABKAISHwoXUHVu",
            "Y2hBbmdsZVhEZWNyZXNlU3BlZWQYCiABKAISHwoXUHVuY2hBbmdsZVlEZWNy",
            "ZXNlU3BlZWQYCyABKAISFAoMUmVjb2lsVXBCYXNlGAwgASgCEhgKEFJlY29p",
            "bFVwTW9kaWZpZXIYDSABKAISEwoLUmVjb2lsVXBNYXgYDiABKAISGQoRUmVj",
            "b2lsTGF0ZXJhbEJhc2UYDyABKAISHQoVUmVjb2lsTGF0ZXJhbE1vZGlmaWVy",
            "GBAgASgCEhgKEFJlY29pbExhdGVyYWxNYXgYESABKAISGwoTUmVjb2lsU2Nh",
            "bGVTdGFuZGluZxgSIAEoAhIaChJSZWNvaWxTY2FsZVdhbGtpbmcYEyABKAIS",
            "GgoSUmVjb2lsU2NhbGVKdW1waW5nGBQgASgCEiMKG1JlYWNoTWF4RGlyZWN0",
            "aW9uQ2hhbmdlUGVyYxgVIAEoAhIlCh1VbnJlYWNoTWF4RGlyZWN0aW9uQ2hh",
            "bmdlUGVyYxgWIAEoAhIZChFHZXRIaXRQdW5jaEFuZ2xlWBgXIAEoAhIlCh1H",
            "ZXRIaXRQdW5jaEFuZ2xlWERlY3Jlc2VTcGVlZBgYIAEoAhIhChlQZW5ldHJh",
            "dGlvbkRhbWFnZU1vZGlmaWVyGBkgASgCEhYKDk1heFRocm91Z2hXYWxsGBog",
            "ASgFEiIKGkZpcmVDb21wb25lbnRNb3ZlbWVudFNjYWxlGBsgASgCEjIKBnBh",
            "cmVudBgcIAEoCzIiLkQxMS5QanNvbi5CYXNlRmlyZUxvZ2ljQ29uZmlnRGF0",
            "YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D11.Pjson.BaseFireLogicConfigDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.WeaponFireLogicLaserBeamConfigData), global::D11.Pjson.WeaponFireLogicLaserBeamConfigData.Parser, new[]{ "BandWidth", "BandLength", "MaxShotsFired", "MinInaccuracy", "MaxInaccuracy", "DisperseBase", "DisperseModifierStanding", "DisperseModifierJumping", "DisperseModifierWalking", "PunchAngleXDecreseSpeed", "PunchAngleYDecreseSpeed", "RecoilUpBase", "RecoilUpModifier", "RecoilUpMax", "RecoilLateralBase", "RecoilLateralModifier", "RecoilLateralMax", "RecoilScaleStanding", "RecoilScaleWalking", "RecoilScaleJumping", "ReachMaxDirectionChangePerc", "UnreachMaxDirectionChangePerc", "GetHitPunchAngleX", "GetHitPunchAngleXDecreseSpeed", "PenetrationDamageModifier", "MaxThroughWall", "FireComponentMovementScale", "Parent" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponFireLogicLaserBeamConfigData : pb::IMessage<WeaponFireLogicLaserBeamConfigData> {
    private static readonly pb::MessageParser<WeaponFireLogicLaserBeamConfigData> _parser = new pb::MessageParser<WeaponFireLogicLaserBeamConfigData>(() => new WeaponFireLogicLaserBeamConfigData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponFireLogicLaserBeamConfigData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.WeaponFireLogicLaserBeamConfigDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicLaserBeamConfigData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicLaserBeamConfigData(WeaponFireLogicLaserBeamConfigData other) : this() {
      bandWidth_ = other.bandWidth_;
      bandLength_ = other.bandLength_;
      maxShotsFired_ = other.maxShotsFired_;
      minInaccuracy_ = other.minInaccuracy_;
      maxInaccuracy_ = other.maxInaccuracy_;
      disperseBase_ = other.disperseBase_;
      disperseModifierStanding_ = other.disperseModifierStanding_;
      disperseModifierJumping_ = other.disperseModifierJumping_;
      disperseModifierWalking_ = other.disperseModifierWalking_;
      punchAngleXDecreseSpeed_ = other.punchAngleXDecreseSpeed_;
      punchAngleYDecreseSpeed_ = other.punchAngleYDecreseSpeed_;
      recoilUpBase_ = other.recoilUpBase_;
      recoilUpModifier_ = other.recoilUpModifier_;
      recoilUpMax_ = other.recoilUpMax_;
      recoilLateralBase_ = other.recoilLateralBase_;
      recoilLateralModifier_ = other.recoilLateralModifier_;
      recoilLateralMax_ = other.recoilLateralMax_;
      recoilScaleStanding_ = other.recoilScaleStanding_;
      recoilScaleWalking_ = other.recoilScaleWalking_;
      recoilScaleJumping_ = other.recoilScaleJumping_;
      reachMaxDirectionChangePerc_ = other.reachMaxDirectionChangePerc_;
      unreachMaxDirectionChangePerc_ = other.unreachMaxDirectionChangePerc_;
      getHitPunchAngleX_ = other.getHitPunchAngleX_;
      getHitPunchAngleXDecreseSpeed_ = other.getHitPunchAngleXDecreseSpeed_;
      penetrationDamageModifier_ = other.penetrationDamageModifier_;
      maxThroughWall_ = other.maxThroughWall_;
      fireComponentMovementScale_ = other.fireComponentMovementScale_;
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicLaserBeamConfigData Clone() {
      return new WeaponFireLogicLaserBeamConfigData(this);
    }

    /// <summary>Field number for the "BandWidth" field.</summary>
    public const int BandWidthFieldNumber = 1;
    private float bandWidth_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BandWidth {
      get { return bandWidth_; }
      set {
        bandWidth_ = value;
      }
    }

    /// <summary>Field number for the "BandLength" field.</summary>
    public const int BandLengthFieldNumber = 2;
    private float bandLength_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BandLength {
      get { return bandLength_; }
      set {
        bandLength_ = value;
      }
    }

    /// <summary>Field number for the "MaxShotsFired" field.</summary>
    public const int MaxShotsFiredFieldNumber = 3;
    private int maxShotsFired_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxShotsFired {
      get { return maxShotsFired_; }
      set {
        maxShotsFired_ = value;
      }
    }

    /// <summary>Field number for the "MinInaccuracy" field.</summary>
    public const int MinInaccuracyFieldNumber = 4;
    private float minInaccuracy_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinInaccuracy {
      get { return minInaccuracy_; }
      set {
        minInaccuracy_ = value;
      }
    }

    /// <summary>Field number for the "MaxInaccuracy" field.</summary>
    public const int MaxInaccuracyFieldNumber = 5;
    private float maxInaccuracy_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxInaccuracy {
      get { return maxInaccuracy_; }
      set {
        maxInaccuracy_ = value;
      }
    }

    /// <summary>Field number for the "DisperseBase" field.</summary>
    public const int DisperseBaseFieldNumber = 6;
    private float disperseBase_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DisperseBase {
      get { return disperseBase_; }
      set {
        disperseBase_ = value;
      }
    }

    /// <summary>Field number for the "DisperseModifierStanding" field.</summary>
    public const int DisperseModifierStandingFieldNumber = 7;
    private float disperseModifierStanding_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DisperseModifierStanding {
      get { return disperseModifierStanding_; }
      set {
        disperseModifierStanding_ = value;
      }
    }

    /// <summary>Field number for the "DisperseModifierJumping" field.</summary>
    public const int DisperseModifierJumpingFieldNumber = 8;
    private float disperseModifierJumping_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DisperseModifierJumping {
      get { return disperseModifierJumping_; }
      set {
        disperseModifierJumping_ = value;
      }
    }

    /// <summary>Field number for the "DisperseModifierWalking" field.</summary>
    public const int DisperseModifierWalkingFieldNumber = 9;
    private float disperseModifierWalking_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DisperseModifierWalking {
      get { return disperseModifierWalking_; }
      set {
        disperseModifierWalking_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleXDecreseSpeed" field.</summary>
    public const int PunchAngleXDecreseSpeedFieldNumber = 10;
    private float punchAngleXDecreseSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleXDecreseSpeed {
      get { return punchAngleXDecreseSpeed_; }
      set {
        punchAngleXDecreseSpeed_ = value;
      }
    }

    /// <summary>Field number for the "PunchAngleYDecreseSpeed" field.</summary>
    public const int PunchAngleYDecreseSpeedFieldNumber = 11;
    private float punchAngleYDecreseSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PunchAngleYDecreseSpeed {
      get { return punchAngleYDecreseSpeed_; }
      set {
        punchAngleYDecreseSpeed_ = value;
      }
    }

    /// <summary>Field number for the "RecoilUpBase" field.</summary>
    public const int RecoilUpBaseFieldNumber = 12;
    private float recoilUpBase_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilUpBase {
      get { return recoilUpBase_; }
      set {
        recoilUpBase_ = value;
      }
    }

    /// <summary>Field number for the "RecoilUpModifier" field.</summary>
    public const int RecoilUpModifierFieldNumber = 13;
    private float recoilUpModifier_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilUpModifier {
      get { return recoilUpModifier_; }
      set {
        recoilUpModifier_ = value;
      }
    }

    /// <summary>Field number for the "RecoilUpMax" field.</summary>
    public const int RecoilUpMaxFieldNumber = 14;
    private float recoilUpMax_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilUpMax {
      get { return recoilUpMax_; }
      set {
        recoilUpMax_ = value;
      }
    }

    /// <summary>Field number for the "RecoilLateralBase" field.</summary>
    public const int RecoilLateralBaseFieldNumber = 15;
    private float recoilLateralBase_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilLateralBase {
      get { return recoilLateralBase_; }
      set {
        recoilLateralBase_ = value;
      }
    }

    /// <summary>Field number for the "RecoilLateralModifier" field.</summary>
    public const int RecoilLateralModifierFieldNumber = 16;
    private float recoilLateralModifier_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilLateralModifier {
      get { return recoilLateralModifier_; }
      set {
        recoilLateralModifier_ = value;
      }
    }

    /// <summary>Field number for the "RecoilLateralMax" field.</summary>
    public const int RecoilLateralMaxFieldNumber = 17;
    private float recoilLateralMax_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilLateralMax {
      get { return recoilLateralMax_; }
      set {
        recoilLateralMax_ = value;
      }
    }

    /// <summary>Field number for the "RecoilScaleStanding" field.</summary>
    public const int RecoilScaleStandingFieldNumber = 18;
    private float recoilScaleStanding_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilScaleStanding {
      get { return recoilScaleStanding_; }
      set {
        recoilScaleStanding_ = value;
      }
    }

    /// <summary>Field number for the "RecoilScaleWalking" field.</summary>
    public const int RecoilScaleWalkingFieldNumber = 19;
    private float recoilScaleWalking_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilScaleWalking {
      get { return recoilScaleWalking_; }
      set {
        recoilScaleWalking_ = value;
      }
    }

    /// <summary>Field number for the "RecoilScaleJumping" field.</summary>
    public const int RecoilScaleJumpingFieldNumber = 20;
    private float recoilScaleJumping_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RecoilScaleJumping {
      get { return recoilScaleJumping_; }
      set {
        recoilScaleJumping_ = value;
      }
    }

    /// <summary>Field number for the "ReachMaxDirectionChangePerc" field.</summary>
    public const int ReachMaxDirectionChangePercFieldNumber = 21;
    private float reachMaxDirectionChangePerc_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ReachMaxDirectionChangePerc {
      get { return reachMaxDirectionChangePerc_; }
      set {
        reachMaxDirectionChangePerc_ = value;
      }
    }

    /// <summary>Field number for the "UnreachMaxDirectionChangePerc" field.</summary>
    public const int UnreachMaxDirectionChangePercFieldNumber = 22;
    private float unreachMaxDirectionChangePerc_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UnreachMaxDirectionChangePerc {
      get { return unreachMaxDirectionChangePerc_; }
      set {
        unreachMaxDirectionChangePerc_ = value;
      }
    }

    /// <summary>Field number for the "GetHitPunchAngleX" field.</summary>
    public const int GetHitPunchAngleXFieldNumber = 23;
    private float getHitPunchAngleX_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GetHitPunchAngleX {
      get { return getHitPunchAngleX_; }
      set {
        getHitPunchAngleX_ = value;
      }
    }

    /// <summary>Field number for the "GetHitPunchAngleXDecreseSpeed" field.</summary>
    public const int GetHitPunchAngleXDecreseSpeedFieldNumber = 24;
    private float getHitPunchAngleXDecreseSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GetHitPunchAngleXDecreseSpeed {
      get { return getHitPunchAngleXDecreseSpeed_; }
      set {
        getHitPunchAngleXDecreseSpeed_ = value;
      }
    }

    /// <summary>Field number for the "PenetrationDamageModifier" field.</summary>
    public const int PenetrationDamageModifierFieldNumber = 25;
    private float penetrationDamageModifier_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PenetrationDamageModifier {
      get { return penetrationDamageModifier_; }
      set {
        penetrationDamageModifier_ = value;
      }
    }

    /// <summary>Field number for the "MaxThroughWall" field.</summary>
    public const int MaxThroughWallFieldNumber = 26;
    private int maxThroughWall_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxThroughWall {
      get { return maxThroughWall_; }
      set {
        maxThroughWall_ = value;
      }
    }

    /// <summary>Field number for the "FireComponentMovementScale" field.</summary>
    public const int FireComponentMovementScaleFieldNumber = 27;
    private float fireComponentMovementScale_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireComponentMovementScale {
      get { return fireComponentMovementScale_; }
      set {
        fireComponentMovementScale_ = value;
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 28;
    private global::D11.Pjson.BaseFireLogicConfigData parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.BaseFireLogicConfigData Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponFireLogicLaserBeamConfigData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponFireLogicLaserBeamConfigData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BandWidth, other.BandWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BandLength, other.BandLength)) return false;
      if (MaxShotsFired != other.MaxShotsFired) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinInaccuracy, other.MinInaccuracy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxInaccuracy, other.MaxInaccuracy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisperseBase, other.DisperseBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisperseModifierStanding, other.DisperseModifierStanding)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisperseModifierJumping, other.DisperseModifierJumping)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisperseModifierWalking, other.DisperseModifierWalking)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleXDecreseSpeed, other.PunchAngleXDecreseSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PunchAngleYDecreseSpeed, other.PunchAngleYDecreseSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilUpBase, other.RecoilUpBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilUpModifier, other.RecoilUpModifier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilUpMax, other.RecoilUpMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilLateralBase, other.RecoilLateralBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilLateralModifier, other.RecoilLateralModifier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilLateralMax, other.RecoilLateralMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilScaleStanding, other.RecoilScaleStanding)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilScaleWalking, other.RecoilScaleWalking)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecoilScaleJumping, other.RecoilScaleJumping)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReachMaxDirectionChangePerc, other.ReachMaxDirectionChangePerc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UnreachMaxDirectionChangePerc, other.UnreachMaxDirectionChangePerc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GetHitPunchAngleX, other.GetHitPunchAngleX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GetHitPunchAngleXDecreseSpeed, other.GetHitPunchAngleXDecreseSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PenetrationDamageModifier, other.PenetrationDamageModifier)) return false;
      if (MaxThroughWall != other.MaxThroughWall) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireComponentMovementScale, other.FireComponentMovementScale)) return false;
      if (!object.Equals(Parent, other.Parent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BandWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BandWidth);
      if (BandLength != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BandLength);
      if (MaxShotsFired != 0) hash ^= MaxShotsFired.GetHashCode();
      if (MinInaccuracy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinInaccuracy);
      if (MaxInaccuracy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxInaccuracy);
      if (DisperseBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisperseBase);
      if (DisperseModifierStanding != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisperseModifierStanding);
      if (DisperseModifierJumping != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisperseModifierJumping);
      if (DisperseModifierWalking != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisperseModifierWalking);
      if (PunchAngleXDecreseSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleXDecreseSpeed);
      if (PunchAngleYDecreseSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PunchAngleYDecreseSpeed);
      if (RecoilUpBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilUpBase);
      if (RecoilUpModifier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilUpModifier);
      if (RecoilUpMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilUpMax);
      if (RecoilLateralBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilLateralBase);
      if (RecoilLateralModifier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilLateralModifier);
      if (RecoilLateralMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilLateralMax);
      if (RecoilScaleStanding != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilScaleStanding);
      if (RecoilScaleWalking != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilScaleWalking);
      if (RecoilScaleJumping != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecoilScaleJumping);
      if (ReachMaxDirectionChangePerc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReachMaxDirectionChangePerc);
      if (UnreachMaxDirectionChangePerc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UnreachMaxDirectionChangePerc);
      if (GetHitPunchAngleX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GetHitPunchAngleX);
      if (GetHitPunchAngleXDecreseSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GetHitPunchAngleXDecreseSpeed);
      if (PenetrationDamageModifier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PenetrationDamageModifier);
      if (MaxThroughWall != 0) hash ^= MaxThroughWall.GetHashCode();
      if (FireComponentMovementScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireComponentMovementScale);
      if (parent_ != null) hash ^= Parent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BandWidth != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(BandWidth);
      }
      if (BandLength != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BandLength);
      }
      if (MaxShotsFired != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxShotsFired);
      }
      if (MinInaccuracy != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MinInaccuracy);
      }
      if (MaxInaccuracy != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MaxInaccuracy);
      }
      if (DisperseBase != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(DisperseBase);
      }
      if (DisperseModifierStanding != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(DisperseModifierStanding);
      }
      if (DisperseModifierJumping != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(DisperseModifierJumping);
      }
      if (DisperseModifierWalking != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(DisperseModifierWalking);
      }
      if (PunchAngleXDecreseSpeed != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(PunchAngleXDecreseSpeed);
      }
      if (PunchAngleYDecreseSpeed != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(PunchAngleYDecreseSpeed);
      }
      if (RecoilUpBase != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(RecoilUpBase);
      }
      if (RecoilUpModifier != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(RecoilUpModifier);
      }
      if (RecoilUpMax != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(RecoilUpMax);
      }
      if (RecoilLateralBase != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(RecoilLateralBase);
      }
      if (RecoilLateralModifier != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(RecoilLateralModifier);
      }
      if (RecoilLateralMax != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(RecoilLateralMax);
      }
      if (RecoilScaleStanding != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(RecoilScaleStanding);
      }
      if (RecoilScaleWalking != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(RecoilScaleWalking);
      }
      if (RecoilScaleJumping != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(RecoilScaleJumping);
      }
      if (ReachMaxDirectionChangePerc != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(ReachMaxDirectionChangePerc);
      }
      if (UnreachMaxDirectionChangePerc != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(UnreachMaxDirectionChangePerc);
      }
      if (GetHitPunchAngleX != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(GetHitPunchAngleX);
      }
      if (GetHitPunchAngleXDecreseSpeed != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(GetHitPunchAngleXDecreseSpeed);
      }
      if (PenetrationDamageModifier != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(PenetrationDamageModifier);
      }
      if (MaxThroughWall != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(MaxThroughWall);
      }
      if (FireComponentMovementScale != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(FireComponentMovementScale);
      }
      if (parent_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Parent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BandWidth != 0F) {
        size += 1 + 4;
      }
      if (BandLength != 0F) {
        size += 1 + 4;
      }
      if (MaxShotsFired != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxShotsFired);
      }
      if (MinInaccuracy != 0F) {
        size += 1 + 4;
      }
      if (MaxInaccuracy != 0F) {
        size += 1 + 4;
      }
      if (DisperseBase != 0F) {
        size += 1 + 4;
      }
      if (DisperseModifierStanding != 0F) {
        size += 1 + 4;
      }
      if (DisperseModifierJumping != 0F) {
        size += 1 + 4;
      }
      if (DisperseModifierWalking != 0F) {
        size += 1 + 4;
      }
      if (PunchAngleXDecreseSpeed != 0F) {
        size += 1 + 4;
      }
      if (PunchAngleYDecreseSpeed != 0F) {
        size += 1 + 4;
      }
      if (RecoilUpBase != 0F) {
        size += 1 + 4;
      }
      if (RecoilUpModifier != 0F) {
        size += 1 + 4;
      }
      if (RecoilUpMax != 0F) {
        size += 1 + 4;
      }
      if (RecoilLateralBase != 0F) {
        size += 1 + 4;
      }
      if (RecoilLateralModifier != 0F) {
        size += 2 + 4;
      }
      if (RecoilLateralMax != 0F) {
        size += 2 + 4;
      }
      if (RecoilScaleStanding != 0F) {
        size += 2 + 4;
      }
      if (RecoilScaleWalking != 0F) {
        size += 2 + 4;
      }
      if (RecoilScaleJumping != 0F) {
        size += 2 + 4;
      }
      if (ReachMaxDirectionChangePerc != 0F) {
        size += 2 + 4;
      }
      if (UnreachMaxDirectionChangePerc != 0F) {
        size += 2 + 4;
      }
      if (GetHitPunchAngleX != 0F) {
        size += 2 + 4;
      }
      if (GetHitPunchAngleXDecreseSpeed != 0F) {
        size += 2 + 4;
      }
      if (PenetrationDamageModifier != 0F) {
        size += 2 + 4;
      }
      if (MaxThroughWall != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxThroughWall);
      }
      if (FireComponentMovementScale != 0F) {
        size += 2 + 4;
      }
      if (parent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponFireLogicLaserBeamConfigData other) {
      if (other == null) {
        return;
      }
      if (other.BandWidth != 0F) {
        BandWidth = other.BandWidth;
      }
      if (other.BandLength != 0F) {
        BandLength = other.BandLength;
      }
      if (other.MaxShotsFired != 0) {
        MaxShotsFired = other.MaxShotsFired;
      }
      if (other.MinInaccuracy != 0F) {
        MinInaccuracy = other.MinInaccuracy;
      }
      if (other.MaxInaccuracy != 0F) {
        MaxInaccuracy = other.MaxInaccuracy;
      }
      if (other.DisperseBase != 0F) {
        DisperseBase = other.DisperseBase;
      }
      if (other.DisperseModifierStanding != 0F) {
        DisperseModifierStanding = other.DisperseModifierStanding;
      }
      if (other.DisperseModifierJumping != 0F) {
        DisperseModifierJumping = other.DisperseModifierJumping;
      }
      if (other.DisperseModifierWalking != 0F) {
        DisperseModifierWalking = other.DisperseModifierWalking;
      }
      if (other.PunchAngleXDecreseSpeed != 0F) {
        PunchAngleXDecreseSpeed = other.PunchAngleXDecreseSpeed;
      }
      if (other.PunchAngleYDecreseSpeed != 0F) {
        PunchAngleYDecreseSpeed = other.PunchAngleYDecreseSpeed;
      }
      if (other.RecoilUpBase != 0F) {
        RecoilUpBase = other.RecoilUpBase;
      }
      if (other.RecoilUpModifier != 0F) {
        RecoilUpModifier = other.RecoilUpModifier;
      }
      if (other.RecoilUpMax != 0F) {
        RecoilUpMax = other.RecoilUpMax;
      }
      if (other.RecoilLateralBase != 0F) {
        RecoilLateralBase = other.RecoilLateralBase;
      }
      if (other.RecoilLateralModifier != 0F) {
        RecoilLateralModifier = other.RecoilLateralModifier;
      }
      if (other.RecoilLateralMax != 0F) {
        RecoilLateralMax = other.RecoilLateralMax;
      }
      if (other.RecoilScaleStanding != 0F) {
        RecoilScaleStanding = other.RecoilScaleStanding;
      }
      if (other.RecoilScaleWalking != 0F) {
        RecoilScaleWalking = other.RecoilScaleWalking;
      }
      if (other.RecoilScaleJumping != 0F) {
        RecoilScaleJumping = other.RecoilScaleJumping;
      }
      if (other.ReachMaxDirectionChangePerc != 0F) {
        ReachMaxDirectionChangePerc = other.ReachMaxDirectionChangePerc;
      }
      if (other.UnreachMaxDirectionChangePerc != 0F) {
        UnreachMaxDirectionChangePerc = other.UnreachMaxDirectionChangePerc;
      }
      if (other.GetHitPunchAngleX != 0F) {
        GetHitPunchAngleX = other.GetHitPunchAngleX;
      }
      if (other.GetHitPunchAngleXDecreseSpeed != 0F) {
        GetHitPunchAngleXDecreseSpeed = other.GetHitPunchAngleXDecreseSpeed;
      }
      if (other.PenetrationDamageModifier != 0F) {
        PenetrationDamageModifier = other.PenetrationDamageModifier;
      }
      if (other.MaxThroughWall != 0) {
        MaxThroughWall = other.MaxThroughWall;
      }
      if (other.FireComponentMovementScale != 0F) {
        FireComponentMovementScale = other.FireComponentMovementScale;
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::D11.Pjson.BaseFireLogicConfigData();
        }
        Parent.MergeFrom(other.Parent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            BandWidth = input.ReadFloat();
            break;
          }
          case 21: {
            BandLength = input.ReadFloat();
            break;
          }
          case 24: {
            MaxShotsFired = input.ReadInt32();
            break;
          }
          case 37: {
            MinInaccuracy = input.ReadFloat();
            break;
          }
          case 45: {
            MaxInaccuracy = input.ReadFloat();
            break;
          }
          case 53: {
            DisperseBase = input.ReadFloat();
            break;
          }
          case 61: {
            DisperseModifierStanding = input.ReadFloat();
            break;
          }
          case 69: {
            DisperseModifierJumping = input.ReadFloat();
            break;
          }
          case 77: {
            DisperseModifierWalking = input.ReadFloat();
            break;
          }
          case 85: {
            PunchAngleXDecreseSpeed = input.ReadFloat();
            break;
          }
          case 93: {
            PunchAngleYDecreseSpeed = input.ReadFloat();
            break;
          }
          case 101: {
            RecoilUpBase = input.ReadFloat();
            break;
          }
          case 109: {
            RecoilUpModifier = input.ReadFloat();
            break;
          }
          case 117: {
            RecoilUpMax = input.ReadFloat();
            break;
          }
          case 125: {
            RecoilLateralBase = input.ReadFloat();
            break;
          }
          case 133: {
            RecoilLateralModifier = input.ReadFloat();
            break;
          }
          case 141: {
            RecoilLateralMax = input.ReadFloat();
            break;
          }
          case 149: {
            RecoilScaleStanding = input.ReadFloat();
            break;
          }
          case 157: {
            RecoilScaleWalking = input.ReadFloat();
            break;
          }
          case 165: {
            RecoilScaleJumping = input.ReadFloat();
            break;
          }
          case 173: {
            ReachMaxDirectionChangePerc = input.ReadFloat();
            break;
          }
          case 181: {
            UnreachMaxDirectionChangePerc = input.ReadFloat();
            break;
          }
          case 189: {
            GetHitPunchAngleX = input.ReadFloat();
            break;
          }
          case 197: {
            GetHitPunchAngleXDecreseSpeed = input.ReadFloat();
            break;
          }
          case 205: {
            PenetrationDamageModifier = input.ReadFloat();
            break;
          }
          case 208: {
            MaxThroughWall = input.ReadInt32();
            break;
          }
          case 221: {
            FireComponentMovementScale = input.ReadFloat();
            break;
          }
          case 226: {
            if (parent_ == null) {
              Parent = new global::D11.Pjson.BaseFireLogicConfigData();
            }
            input.ReadMessage(Parent);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
