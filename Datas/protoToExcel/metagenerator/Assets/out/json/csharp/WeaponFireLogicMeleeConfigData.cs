// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WeaponFireLogicMeleeConfigData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from WeaponFireLogicMeleeConfigData.proto</summary>
  public static partial class WeaponFireLogicMeleeConfigDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WeaponFireLogicMeleeConfigData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeaponFireLogicMeleeConfigDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRXZWFwb25GaXJlTG9naWNNZWxlZUNvbmZpZ0RhdGEucHJvdG8SCUQxMS5Q",
            "anNvbhodQmFzZUZpcmVMb2dpY0NvbmZpZ0RhdGEucHJvdG8i6wQKHldlYXBv",
            "bkZpcmVMb2dpY01lbGVlQ29uZmlnRGF0YRITCgtIZWF2eURhbWFnZRgBIAEo",
            "AhIWCg5IZWF2eVNlY0RhbWFnZRgCIAEoAhITCgtIZWF2eUNEVGltZRgDIAEo",
            "AhIRCglTZWNEYW1hZ2UYBCABKAISDgoGQ0RUaW1lGAUgASgCEhYKDkZpcmVJ",
            "bnRlcnZlbDAxGAYgASgCEhYKDkZpcmVJbnRlcnZhbDAyGAcgASgCEhkKEUhl",
            "YXZ5RmlyZUludGVydmFsGAggASgCEhQKDERlbGF5SGl0VGltZRgJIAEoAhIW",
            "Cg5EZWxheUhpdFRpbWUwMhgKIAEoAhIZChFEZWxheUhlYXZ5SGl0VGltZRgL",
            "IAEoAhITCgtXZWFwb25BbmdsZRgMIAEoAhITCgtXZWFwb25SYW5nZRgNIAEo",
            "AhIYChBIZWF2eVdlYXBvbkFuZ2xlGA4gASgCEhgKEEhlYXZ5V2VhcG9uUmFu",
            "Z2UYDyABKAISGQoRR2V0SGl0UHVuY2hBbmdsZVgYECABKAISGwoTRGFtYWdl",
            "Q2hlY2tJbnRlcnZlbBgRIAEoAhIgChhIZWF2eURhbWFnZUNoZWNrSW50ZXJ2",
            "ZWwYEiABKAISGQoRRm9yYmlkZGVuQmFja1N0YWIYEyABKAgSEgoKQmFja0Rh",
            "bWFnZRgUIAEoAhIXCg9IZWF2eUJhY2tEYW1hZ2UYFSABKAISHAoUTWVsZWVC",
            "YWNrQXR0YWNrQW5nbGUYFiABKAISMgoGcGFyZW50GBcgASgLMiIuRDExLlBq",
            "c29uLkJhc2VGaXJlTG9naWNDb25maWdEYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D11.Pjson.BaseFireLogicConfigDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.WeaponFireLogicMeleeConfigData), global::D11.Pjson.WeaponFireLogicMeleeConfigData.Parser, new[]{ "HeavyDamage", "HeavySecDamage", "HeavyCDTime", "SecDamage", "CDTime", "FireIntervel01", "FireInterval02", "HeavyFireInterval", "DelayHitTime", "DelayHitTime02", "DelayHeavyHitTime", "WeaponAngle", "WeaponRange", "HeavyWeaponAngle", "HeavyWeaponRange", "GetHitPunchAngleX", "DamageCheckIntervel", "HeavyDamageCheckIntervel", "ForbiddenBackStab", "BackDamage", "HeavyBackDamage", "MeleeBackAttackAngle", "Parent" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponFireLogicMeleeConfigData : pb::IMessage<WeaponFireLogicMeleeConfigData> {
    private static readonly pb::MessageParser<WeaponFireLogicMeleeConfigData> _parser = new pb::MessageParser<WeaponFireLogicMeleeConfigData>(() => new WeaponFireLogicMeleeConfigData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponFireLogicMeleeConfigData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.WeaponFireLogicMeleeConfigDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicMeleeConfigData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicMeleeConfigData(WeaponFireLogicMeleeConfigData other) : this() {
      heavyDamage_ = other.heavyDamage_;
      heavySecDamage_ = other.heavySecDamage_;
      heavyCDTime_ = other.heavyCDTime_;
      secDamage_ = other.secDamage_;
      cDTime_ = other.cDTime_;
      fireIntervel01_ = other.fireIntervel01_;
      fireInterval02_ = other.fireInterval02_;
      heavyFireInterval_ = other.heavyFireInterval_;
      delayHitTime_ = other.delayHitTime_;
      delayHitTime02_ = other.delayHitTime02_;
      delayHeavyHitTime_ = other.delayHeavyHitTime_;
      weaponAngle_ = other.weaponAngle_;
      weaponRange_ = other.weaponRange_;
      heavyWeaponAngle_ = other.heavyWeaponAngle_;
      heavyWeaponRange_ = other.heavyWeaponRange_;
      getHitPunchAngleX_ = other.getHitPunchAngleX_;
      damageCheckIntervel_ = other.damageCheckIntervel_;
      heavyDamageCheckIntervel_ = other.heavyDamageCheckIntervel_;
      forbiddenBackStab_ = other.forbiddenBackStab_;
      backDamage_ = other.backDamage_;
      heavyBackDamage_ = other.heavyBackDamage_;
      meleeBackAttackAngle_ = other.meleeBackAttackAngle_;
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicMeleeConfigData Clone() {
      return new WeaponFireLogicMeleeConfigData(this);
    }

    /// <summary>Field number for the "HeavyDamage" field.</summary>
    public const int HeavyDamageFieldNumber = 1;
    private float heavyDamage_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeavyDamage {
      get { return heavyDamage_; }
      set {
        heavyDamage_ = value;
      }
    }

    /// <summary>Field number for the "HeavySecDamage" field.</summary>
    public const int HeavySecDamageFieldNumber = 2;
    private float heavySecDamage_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeavySecDamage {
      get { return heavySecDamage_; }
      set {
        heavySecDamage_ = value;
      }
    }

    /// <summary>Field number for the "HeavyCDTime" field.</summary>
    public const int HeavyCDTimeFieldNumber = 3;
    private float heavyCDTime_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeavyCDTime {
      get { return heavyCDTime_; }
      set {
        heavyCDTime_ = value;
      }
    }

    /// <summary>Field number for the "SecDamage" field.</summary>
    public const int SecDamageFieldNumber = 4;
    private float secDamage_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SecDamage {
      get { return secDamage_; }
      set {
        secDamage_ = value;
      }
    }

    /// <summary>Field number for the "CDTime" field.</summary>
    public const int CDTimeFieldNumber = 5;
    private float cDTime_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CDTime {
      get { return cDTime_; }
      set {
        cDTime_ = value;
      }
    }

    /// <summary>Field number for the "FireIntervel01" field.</summary>
    public const int FireIntervel01FieldNumber = 6;
    private float fireIntervel01_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireIntervel01 {
      get { return fireIntervel01_; }
      set {
        fireIntervel01_ = value;
      }
    }

    /// <summary>Field number for the "FireInterval02" field.</summary>
    public const int FireInterval02FieldNumber = 7;
    private float fireInterval02_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireInterval02 {
      get { return fireInterval02_; }
      set {
        fireInterval02_ = value;
      }
    }

    /// <summary>Field number for the "HeavyFireInterval" field.</summary>
    public const int HeavyFireIntervalFieldNumber = 8;
    private float heavyFireInterval_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeavyFireInterval {
      get { return heavyFireInterval_; }
      set {
        heavyFireInterval_ = value;
      }
    }

    /// <summary>Field number for the "DelayHitTime" field.</summary>
    public const int DelayHitTimeFieldNumber = 9;
    private float delayHitTime_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DelayHitTime {
      get { return delayHitTime_; }
      set {
        delayHitTime_ = value;
      }
    }

    /// <summary>Field number for the "DelayHitTime02" field.</summary>
    public const int DelayHitTime02FieldNumber = 10;
    private float delayHitTime02_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DelayHitTime02 {
      get { return delayHitTime02_; }
      set {
        delayHitTime02_ = value;
      }
    }

    /// <summary>Field number for the "DelayHeavyHitTime" field.</summary>
    public const int DelayHeavyHitTimeFieldNumber = 11;
    private float delayHeavyHitTime_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DelayHeavyHitTime {
      get { return delayHeavyHitTime_; }
      set {
        delayHeavyHitTime_ = value;
      }
    }

    /// <summary>Field number for the "WeaponAngle" field.</summary>
    public const int WeaponAngleFieldNumber = 12;
    private float weaponAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeaponAngle {
      get { return weaponAngle_; }
      set {
        weaponAngle_ = value;
      }
    }

    /// <summary>Field number for the "WeaponRange" field.</summary>
    public const int WeaponRangeFieldNumber = 13;
    private float weaponRange_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeaponRange {
      get { return weaponRange_; }
      set {
        weaponRange_ = value;
      }
    }

    /// <summary>Field number for the "HeavyWeaponAngle" field.</summary>
    public const int HeavyWeaponAngleFieldNumber = 14;
    private float heavyWeaponAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeavyWeaponAngle {
      get { return heavyWeaponAngle_; }
      set {
        heavyWeaponAngle_ = value;
      }
    }

    /// <summary>Field number for the "HeavyWeaponRange" field.</summary>
    public const int HeavyWeaponRangeFieldNumber = 15;
    private float heavyWeaponRange_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeavyWeaponRange {
      get { return heavyWeaponRange_; }
      set {
        heavyWeaponRange_ = value;
      }
    }

    /// <summary>Field number for the "GetHitPunchAngleX" field.</summary>
    public const int GetHitPunchAngleXFieldNumber = 16;
    private float getHitPunchAngleX_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GetHitPunchAngleX {
      get { return getHitPunchAngleX_; }
      set {
        getHitPunchAngleX_ = value;
      }
    }

    /// <summary>Field number for the "DamageCheckIntervel" field.</summary>
    public const int DamageCheckIntervelFieldNumber = 17;
    private float damageCheckIntervel_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DamageCheckIntervel {
      get { return damageCheckIntervel_; }
      set {
        damageCheckIntervel_ = value;
      }
    }

    /// <summary>Field number for the "HeavyDamageCheckIntervel" field.</summary>
    public const int HeavyDamageCheckIntervelFieldNumber = 18;
    private float heavyDamageCheckIntervel_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeavyDamageCheckIntervel {
      get { return heavyDamageCheckIntervel_; }
      set {
        heavyDamageCheckIntervel_ = value;
      }
    }

    /// <summary>Field number for the "ForbiddenBackStab" field.</summary>
    public const int ForbiddenBackStabFieldNumber = 19;
    private bool forbiddenBackStab_;
    /// <summary>
    /// 是否禁止背刺功能 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForbiddenBackStab {
      get { return forbiddenBackStab_; }
      set {
        forbiddenBackStab_ = value;
      }
    }

    /// <summary>Field number for the "BackDamage" field.</summary>
    public const int BackDamageFieldNumber = 20;
    private float backDamage_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BackDamage {
      get { return backDamage_; }
      set {
        backDamage_ = value;
      }
    }

    /// <summary>Field number for the "HeavyBackDamage" field.</summary>
    public const int HeavyBackDamageFieldNumber = 21;
    private float heavyBackDamage_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeavyBackDamage {
      get { return heavyBackDamage_; }
      set {
        heavyBackDamage_ = value;
      }
    }

    /// <summary>Field number for the "MeleeBackAttackAngle" field.</summary>
    public const int MeleeBackAttackAngleFieldNumber = 22;
    private float meleeBackAttackAngle_;
    /// <summary>
    /// 近战武器背刺攻击范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeleeBackAttackAngle {
      get { return meleeBackAttackAngle_; }
      set {
        meleeBackAttackAngle_ = value;
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 23;
    private global::D11.Pjson.BaseFireLogicConfigData parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.BaseFireLogicConfigData Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponFireLogicMeleeConfigData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponFireLogicMeleeConfigData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeavyDamage, other.HeavyDamage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeavySecDamage, other.HeavySecDamage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeavyCDTime, other.HeavyCDTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SecDamage, other.SecDamage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CDTime, other.CDTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireIntervel01, other.FireIntervel01)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireInterval02, other.FireInterval02)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeavyFireInterval, other.HeavyFireInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DelayHitTime, other.DelayHitTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DelayHitTime02, other.DelayHitTime02)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DelayHeavyHitTime, other.DelayHeavyHitTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WeaponAngle, other.WeaponAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WeaponRange, other.WeaponRange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeavyWeaponAngle, other.HeavyWeaponAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeavyWeaponRange, other.HeavyWeaponRange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GetHitPunchAngleX, other.GetHitPunchAngleX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamageCheckIntervel, other.DamageCheckIntervel)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeavyDamageCheckIntervel, other.HeavyDamageCheckIntervel)) return false;
      if (ForbiddenBackStab != other.ForbiddenBackStab) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BackDamage, other.BackDamage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeavyBackDamage, other.HeavyBackDamage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MeleeBackAttackAngle, other.MeleeBackAttackAngle)) return false;
      if (!object.Equals(Parent, other.Parent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeavyDamage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeavyDamage);
      if (HeavySecDamage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeavySecDamage);
      if (HeavyCDTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeavyCDTime);
      if (SecDamage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SecDamage);
      if (CDTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CDTime);
      if (FireIntervel01 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireIntervel01);
      if (FireInterval02 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireInterval02);
      if (HeavyFireInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeavyFireInterval);
      if (DelayHitTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DelayHitTime);
      if (DelayHitTime02 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DelayHitTime02);
      if (DelayHeavyHitTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DelayHeavyHitTime);
      if (WeaponAngle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WeaponAngle);
      if (WeaponRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WeaponRange);
      if (HeavyWeaponAngle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeavyWeaponAngle);
      if (HeavyWeaponRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeavyWeaponRange);
      if (GetHitPunchAngleX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GetHitPunchAngleX);
      if (DamageCheckIntervel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamageCheckIntervel);
      if (HeavyDamageCheckIntervel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeavyDamageCheckIntervel);
      if (ForbiddenBackStab != false) hash ^= ForbiddenBackStab.GetHashCode();
      if (BackDamage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BackDamage);
      if (HeavyBackDamage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeavyBackDamage);
      if (MeleeBackAttackAngle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MeleeBackAttackAngle);
      if (parent_ != null) hash ^= Parent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeavyDamage != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(HeavyDamage);
      }
      if (HeavySecDamage != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(HeavySecDamage);
      }
      if (HeavyCDTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(HeavyCDTime);
      }
      if (SecDamage != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(SecDamage);
      }
      if (CDTime != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(CDTime);
      }
      if (FireIntervel01 != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(FireIntervel01);
      }
      if (FireInterval02 != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(FireInterval02);
      }
      if (HeavyFireInterval != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(HeavyFireInterval);
      }
      if (DelayHitTime != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(DelayHitTime);
      }
      if (DelayHitTime02 != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(DelayHitTime02);
      }
      if (DelayHeavyHitTime != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(DelayHeavyHitTime);
      }
      if (WeaponAngle != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(WeaponAngle);
      }
      if (WeaponRange != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(WeaponRange);
      }
      if (HeavyWeaponAngle != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(HeavyWeaponAngle);
      }
      if (HeavyWeaponRange != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(HeavyWeaponRange);
      }
      if (GetHitPunchAngleX != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(GetHitPunchAngleX);
      }
      if (DamageCheckIntervel != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(DamageCheckIntervel);
      }
      if (HeavyDamageCheckIntervel != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(HeavyDamageCheckIntervel);
      }
      if (ForbiddenBackStab != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(ForbiddenBackStab);
      }
      if (BackDamage != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(BackDamage);
      }
      if (HeavyBackDamage != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(HeavyBackDamage);
      }
      if (MeleeBackAttackAngle != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(MeleeBackAttackAngle);
      }
      if (parent_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Parent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeavyDamage != 0F) {
        size += 1 + 4;
      }
      if (HeavySecDamage != 0F) {
        size += 1 + 4;
      }
      if (HeavyCDTime != 0F) {
        size += 1 + 4;
      }
      if (SecDamage != 0F) {
        size += 1 + 4;
      }
      if (CDTime != 0F) {
        size += 1 + 4;
      }
      if (FireIntervel01 != 0F) {
        size += 1 + 4;
      }
      if (FireInterval02 != 0F) {
        size += 1 + 4;
      }
      if (HeavyFireInterval != 0F) {
        size += 1 + 4;
      }
      if (DelayHitTime != 0F) {
        size += 1 + 4;
      }
      if (DelayHitTime02 != 0F) {
        size += 1 + 4;
      }
      if (DelayHeavyHitTime != 0F) {
        size += 1 + 4;
      }
      if (WeaponAngle != 0F) {
        size += 1 + 4;
      }
      if (WeaponRange != 0F) {
        size += 1 + 4;
      }
      if (HeavyWeaponAngle != 0F) {
        size += 1 + 4;
      }
      if (HeavyWeaponRange != 0F) {
        size += 1 + 4;
      }
      if (GetHitPunchAngleX != 0F) {
        size += 2 + 4;
      }
      if (DamageCheckIntervel != 0F) {
        size += 2 + 4;
      }
      if (HeavyDamageCheckIntervel != 0F) {
        size += 2 + 4;
      }
      if (ForbiddenBackStab != false) {
        size += 2 + 1;
      }
      if (BackDamage != 0F) {
        size += 2 + 4;
      }
      if (HeavyBackDamage != 0F) {
        size += 2 + 4;
      }
      if (MeleeBackAttackAngle != 0F) {
        size += 2 + 4;
      }
      if (parent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponFireLogicMeleeConfigData other) {
      if (other == null) {
        return;
      }
      if (other.HeavyDamage != 0F) {
        HeavyDamage = other.HeavyDamage;
      }
      if (other.HeavySecDamage != 0F) {
        HeavySecDamage = other.HeavySecDamage;
      }
      if (other.HeavyCDTime != 0F) {
        HeavyCDTime = other.HeavyCDTime;
      }
      if (other.SecDamage != 0F) {
        SecDamage = other.SecDamage;
      }
      if (other.CDTime != 0F) {
        CDTime = other.CDTime;
      }
      if (other.FireIntervel01 != 0F) {
        FireIntervel01 = other.FireIntervel01;
      }
      if (other.FireInterval02 != 0F) {
        FireInterval02 = other.FireInterval02;
      }
      if (other.HeavyFireInterval != 0F) {
        HeavyFireInterval = other.HeavyFireInterval;
      }
      if (other.DelayHitTime != 0F) {
        DelayHitTime = other.DelayHitTime;
      }
      if (other.DelayHitTime02 != 0F) {
        DelayHitTime02 = other.DelayHitTime02;
      }
      if (other.DelayHeavyHitTime != 0F) {
        DelayHeavyHitTime = other.DelayHeavyHitTime;
      }
      if (other.WeaponAngle != 0F) {
        WeaponAngle = other.WeaponAngle;
      }
      if (other.WeaponRange != 0F) {
        WeaponRange = other.WeaponRange;
      }
      if (other.HeavyWeaponAngle != 0F) {
        HeavyWeaponAngle = other.HeavyWeaponAngle;
      }
      if (other.HeavyWeaponRange != 0F) {
        HeavyWeaponRange = other.HeavyWeaponRange;
      }
      if (other.GetHitPunchAngleX != 0F) {
        GetHitPunchAngleX = other.GetHitPunchAngleX;
      }
      if (other.DamageCheckIntervel != 0F) {
        DamageCheckIntervel = other.DamageCheckIntervel;
      }
      if (other.HeavyDamageCheckIntervel != 0F) {
        HeavyDamageCheckIntervel = other.HeavyDamageCheckIntervel;
      }
      if (other.ForbiddenBackStab != false) {
        ForbiddenBackStab = other.ForbiddenBackStab;
      }
      if (other.BackDamage != 0F) {
        BackDamage = other.BackDamage;
      }
      if (other.HeavyBackDamage != 0F) {
        HeavyBackDamage = other.HeavyBackDamage;
      }
      if (other.MeleeBackAttackAngle != 0F) {
        MeleeBackAttackAngle = other.MeleeBackAttackAngle;
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::D11.Pjson.BaseFireLogicConfigData();
        }
        Parent.MergeFrom(other.Parent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            HeavyDamage = input.ReadFloat();
            break;
          }
          case 21: {
            HeavySecDamage = input.ReadFloat();
            break;
          }
          case 29: {
            HeavyCDTime = input.ReadFloat();
            break;
          }
          case 37: {
            SecDamage = input.ReadFloat();
            break;
          }
          case 45: {
            CDTime = input.ReadFloat();
            break;
          }
          case 53: {
            FireIntervel01 = input.ReadFloat();
            break;
          }
          case 61: {
            FireInterval02 = input.ReadFloat();
            break;
          }
          case 69: {
            HeavyFireInterval = input.ReadFloat();
            break;
          }
          case 77: {
            DelayHitTime = input.ReadFloat();
            break;
          }
          case 85: {
            DelayHitTime02 = input.ReadFloat();
            break;
          }
          case 93: {
            DelayHeavyHitTime = input.ReadFloat();
            break;
          }
          case 101: {
            WeaponAngle = input.ReadFloat();
            break;
          }
          case 109: {
            WeaponRange = input.ReadFloat();
            break;
          }
          case 117: {
            HeavyWeaponAngle = input.ReadFloat();
            break;
          }
          case 125: {
            HeavyWeaponRange = input.ReadFloat();
            break;
          }
          case 133: {
            GetHitPunchAngleX = input.ReadFloat();
            break;
          }
          case 141: {
            DamageCheckIntervel = input.ReadFloat();
            break;
          }
          case 149: {
            HeavyDamageCheckIntervel = input.ReadFloat();
            break;
          }
          case 152: {
            ForbiddenBackStab = input.ReadBool();
            break;
          }
          case 165: {
            BackDamage = input.ReadFloat();
            break;
          }
          case 173: {
            HeavyBackDamage = input.ReadFloat();
            break;
          }
          case 181: {
            MeleeBackAttackAngle = input.ReadFloat();
            break;
          }
          case 186: {
            if (parent_ == null) {
              Parent = new global::D11.Pjson.BaseFireLogicConfigData();
            }
            input.ReadMessage(Parent);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
