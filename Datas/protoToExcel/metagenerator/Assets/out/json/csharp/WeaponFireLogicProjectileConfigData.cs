// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WeaponFireLogicProjectileConfigData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from WeaponFireLogicProjectileConfigData.proto</summary>
  public static partial class WeaponFireLogicProjectileConfigDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WeaponFireLogicProjectileConfigData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeaponFireLogicProjectileConfigDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CilXZWFwb25GaXJlTG9naWNQcm9qZWN0aWxlQ29uZmlnRGF0YS5wcm90bxIJ",
            "RDExLlBqc29uGg5QYlZlY3Rvci5wcm90bxodQmFzZUZpcmVMb2dpY0NvbmZp",
            "Z0RhdGEucHJvdG8ing4KI1dlYXBvbkZpcmVMb2dpY1Byb2plY3RpbGVDb25m",
            "aWdEYXRhEhEKCUluaXRTcGVlZBgBIAEoAhISCgpBY2NlbFNwZWVkGAIgASgC",
            "EhAKCE1heFNwZWVkGAMgASgCEisKDVRQU0ZpcmVPZmZzZXQYBCABKAsyFC5E",
            "MTEuUGpzb24uUGJWZWN0b3IzEjEKE1RQU0ZpcmVEaXJlY3RPZmZzZXQYBSAB",
            "KAsyFC5EMTEuUGpzb24uUGJWZWN0b3IzEhQKDEluaXRTcGVlZExvdxgGIAEo",
            "AhIVCg1BY2NlbFNwZWVkTG93GAcgASgCEhMKC01heFNwZWVkTG93GAggASgC",
            "Ei4KEFRQU0ZpcmVPZmZzZXRMb3cYCSABKAsyFC5EMTEuUGpzb24uUGJWZWN0",
            "b3IzEjQKFlRQU0ZpcmVEaXJlY3RPZmZzZXRMb3cYCiABKAsyFC5EMTEuUGpz",
            "b24uUGJWZWN0b3IzEh8KF1Byb2plY3RpbGVGaXJlSGl0RGFtYWdlGAsgASgC",
            "Ei0KD1ZlbG9jaXR5RmFjdG9ycxgMIAEoCzIULkQxMS5QanNvbi5QYlZlY3Rv",
            "cjMSIAoYRG93blRocm93VmVsb2NpdHlGYWN0b3JZGA0gASgCEhkKEU1pc3Np",
            "bGVMYXVuY2hIaWdoGA4gASgCEhQKDEdyYXZpdHlTY2FsZRgPIAEoAhIUCgxE",
            "YW1hZ2VSYWRpdXMYECABKAISFgoOTWluRGFtYWdlVmFsdWUYESABKAUSEAoI",
            "TGlmZVNwYW4YEiABKAISGQoRRXhwbG9zaW9uTGlmZVNwYW4YEyABKAISEwoL",
            "V29ya2luZ1RpbWUYFCABKAISGwoTUHJvakZsaWdodEFzc2V0TmFtZRgVIAEo",
            "CRIWCg5JbnN0YW50RXhwbG9kZRgWIAEoCBIcChRTaG91bGRFeHBsb2RlT25G",
            "bG9vchgXIAEoCBIZChFHZXRIaXRQdW5jaEFuZ2xlWBgYIAEoAhIlCh1HZXRI",
            "aXRQdW5jaEFuZ2xlWERlY3Jlc2VTcGVlZBgZIAEoAhIYChBHcm91bmRCb3Vu",
            "Y2VSYXRlGBogASgCEhYKDldhbGxCb3VuY2VSYXRlGBsgASgCEhYKDlBhd25C",
            "b3VuY2VSYXRlGBwgASgCEhYKDk1heEJvdW5jZUNvdW50GB0gASgFEhkKEUZp",
            "cmVEZWxheUludGVydmFsGB4gASgCEhwKFFByZXBhcmVEZWxheUludGVydmFs",
            "GB8gASgCEhgKEENhdXNlRmxhc2hFZmZlY3QYICABKAgSIQoZUHJvamVjdGls",
            "ZUV4cGxvZGVWRlhJbmRleBghIAEoBRIaChJQcm9qZWN0aWxlVHJhaWxWRlgY",
            "IiABKAkSEQoJTWVzaFNjYWxlGCMgASgCEhoKEkV4cGxvZGVWRlhMaWZlU3Bh",
            "bhgkIAEoAhIZChFSYWRhckJsaXBMaWZlVGltZRglIAEoAhIfChdFeHBsb2Rl",
            "VkZYTG9naWNMaWZlU3BhbhgmIAEoAhIYChBTZWxmRGFtYWdlRmFjdG9yGCcg",
            "ASgCEhkKEUNlbnRlckRhbWFnZVJhZGl1GCggASgCEiMKG0NsZWFuUHJvamVj",
            "dGlsZVRpbWVPblRocm93bhgpIAEoAhIfChdTZWNvbmRGaXJlRGVsYXlJbnRl",
            "cnZhbBgqIAEoAhIaChJNYWluQnJlYWtUaHJvd1RpbWUYKyABKAISHAoUU2Vj",
            "b25kQnJlYWtUaHJvd1RpbWUYLCABKAISGgoSRGV0b25hdGlvblZlbG9jaXR5",
            "GC0gASgCEhcKD0ZpcnN0Qm91bmNlUmF0ZRguIAEoAhIYChBLZWVwRlBMaW5l",
            "UG9pbnRzGC8gASgFEhgKEGxlc3NGUExpbmVQb2ludHMYMCABKAUSMgoUSW5p",
            "dFJvdGF0aW9uVmVsb2NpdHkYMSABKAsyFC5EMTEuUGpzb24uUGJWZWN0b3Iz",
            "EhcKD1NwZWNpYWxGaXJlTW9kZRgyIAEoDRIkChxBZGRpdGlvblJlY29pbENv",
            "bmZpZ0ZpbGVOYW1lGDMgASgJEigKIEFkZGl0aW9uUHJvamVjdGlsZUNvbmZp",
            "Z0ZpbGVOYW1lGDQgASgJEg8KB0hwVmFsdWUYNSABKAUSGAoQT3BlblJvdGF0",
            "ZUVuYWJsZRg2IAEoCBIYChBPcGVuVmVydGljYWxGYWxsGDcgASgIEhUKDVB1",
            "bGxCYWNrVmFsdWUYOCABKAISHQoVUm9ja2V0U2Vjb25kRmlyZUFuZ2xlGDkg",
            "ASgCEhQKDE1heFdoaXRlVGltZRg6IAEoAhITCgtNYXhGYWRlVGltZRg7IAEo",
            "AhIaChJGbGFzaERpc3RhbmNlU2NhbGUYPCABKAISMgoGcGFyZW50GD0gASgL",
            "MiIuRDExLlBqc29uLkJhc2VGaXJlTG9naWNDb25maWdEYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D11.Pjson.PbVectorReflection.Descriptor, global::D11.Pjson.BaseFireLogicConfigDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.WeaponFireLogicProjectileConfigData), global::D11.Pjson.WeaponFireLogicProjectileConfigData.Parser, new[]{ "InitSpeed", "AccelSpeed", "MaxSpeed", "TPSFireOffset", "TPSFireDirectOffset", "InitSpeedLow", "AccelSpeedLow", "MaxSpeedLow", "TPSFireOffsetLow", "TPSFireDirectOffsetLow", "ProjectileFireHitDamage", "VelocityFactors", "DownThrowVelocityFactorY", "MissileLaunchHigh", "GravityScale", "DamageRadius", "MinDamageValue", "LifeSpan", "ExplosionLifeSpan", "WorkingTime", "ProjFlightAssetName", "InstantExplode", "ShouldExplodeOnFloor", "GetHitPunchAngleX", "GetHitPunchAngleXDecreseSpeed", "GroundBounceRate", "WallBounceRate", "PawnBounceRate", "MaxBounceCount", "FireDelayInterval", "PrepareDelayInterval", "CauseFlashEffect", "ProjectileExplodeVFXIndex", "ProjectileTrailVFX", "MeshScale", "ExplodeVFXLifeSpan", "RadarBlipLifeTime", "ExplodeVFXLogicLifeSpan", "SelfDamageFactor", "CenterDamageRadiu", "CleanProjectileTimeOnThrown", "SecondFireDelayInterval", "MainBreakThrowTime", "SecondBreakThrowTime", "DetonationVelocity", "FirstBounceRate", "KeepFPLinePoints", "LessFPLinePoints", "InitRotationVelocity", "SpecialFireMode", "AdditionRecoilConfigFileName", "AdditionProjectileConfigFileName", "HpValue", "OpenRotateEnable", "OpenVerticalFall", "PullBackValue", "RocketSecondFireAngle", "MaxWhiteTime", "MaxFadeTime", "FlashDistanceScale", "Parent" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponFireLogicProjectileConfigData : pb::IMessage<WeaponFireLogicProjectileConfigData> {
    private static readonly pb::MessageParser<WeaponFireLogicProjectileConfigData> _parser = new pb::MessageParser<WeaponFireLogicProjectileConfigData>(() => new WeaponFireLogicProjectileConfigData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponFireLogicProjectileConfigData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.WeaponFireLogicProjectileConfigDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicProjectileConfigData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicProjectileConfigData(WeaponFireLogicProjectileConfigData other) : this() {
      initSpeed_ = other.initSpeed_;
      accelSpeed_ = other.accelSpeed_;
      maxSpeed_ = other.maxSpeed_;
      tPSFireOffset_ = other.tPSFireOffset_ != null ? other.tPSFireOffset_.Clone() : null;
      tPSFireDirectOffset_ = other.tPSFireDirectOffset_ != null ? other.tPSFireDirectOffset_.Clone() : null;
      initSpeedLow_ = other.initSpeedLow_;
      accelSpeedLow_ = other.accelSpeedLow_;
      maxSpeedLow_ = other.maxSpeedLow_;
      tPSFireOffsetLow_ = other.tPSFireOffsetLow_ != null ? other.tPSFireOffsetLow_.Clone() : null;
      tPSFireDirectOffsetLow_ = other.tPSFireDirectOffsetLow_ != null ? other.tPSFireDirectOffsetLow_.Clone() : null;
      projectileFireHitDamage_ = other.projectileFireHitDamage_;
      velocityFactors_ = other.velocityFactors_ != null ? other.velocityFactors_.Clone() : null;
      downThrowVelocityFactorY_ = other.downThrowVelocityFactorY_;
      missileLaunchHigh_ = other.missileLaunchHigh_;
      gravityScale_ = other.gravityScale_;
      damageRadius_ = other.damageRadius_;
      minDamageValue_ = other.minDamageValue_;
      lifeSpan_ = other.lifeSpan_;
      explosionLifeSpan_ = other.explosionLifeSpan_;
      workingTime_ = other.workingTime_;
      projFlightAssetName_ = other.projFlightAssetName_;
      instantExplode_ = other.instantExplode_;
      shouldExplodeOnFloor_ = other.shouldExplodeOnFloor_;
      getHitPunchAngleX_ = other.getHitPunchAngleX_;
      getHitPunchAngleXDecreseSpeed_ = other.getHitPunchAngleXDecreseSpeed_;
      groundBounceRate_ = other.groundBounceRate_;
      wallBounceRate_ = other.wallBounceRate_;
      pawnBounceRate_ = other.pawnBounceRate_;
      maxBounceCount_ = other.maxBounceCount_;
      fireDelayInterval_ = other.fireDelayInterval_;
      prepareDelayInterval_ = other.prepareDelayInterval_;
      causeFlashEffect_ = other.causeFlashEffect_;
      projectileExplodeVFXIndex_ = other.projectileExplodeVFXIndex_;
      projectileTrailVFX_ = other.projectileTrailVFX_;
      meshScale_ = other.meshScale_;
      explodeVFXLifeSpan_ = other.explodeVFXLifeSpan_;
      radarBlipLifeTime_ = other.radarBlipLifeTime_;
      explodeVFXLogicLifeSpan_ = other.explodeVFXLogicLifeSpan_;
      selfDamageFactor_ = other.selfDamageFactor_;
      centerDamageRadiu_ = other.centerDamageRadiu_;
      cleanProjectileTimeOnThrown_ = other.cleanProjectileTimeOnThrown_;
      secondFireDelayInterval_ = other.secondFireDelayInterval_;
      mainBreakThrowTime_ = other.mainBreakThrowTime_;
      secondBreakThrowTime_ = other.secondBreakThrowTime_;
      detonationVelocity_ = other.detonationVelocity_;
      firstBounceRate_ = other.firstBounceRate_;
      keepFPLinePoints_ = other.keepFPLinePoints_;
      lessFPLinePoints_ = other.lessFPLinePoints_;
      initRotationVelocity_ = other.initRotationVelocity_ != null ? other.initRotationVelocity_.Clone() : null;
      specialFireMode_ = other.specialFireMode_;
      additionRecoilConfigFileName_ = other.additionRecoilConfigFileName_;
      additionProjectileConfigFileName_ = other.additionProjectileConfigFileName_;
      hpValue_ = other.hpValue_;
      openRotateEnable_ = other.openRotateEnable_;
      openVerticalFall_ = other.openVerticalFall_;
      pullBackValue_ = other.pullBackValue_;
      rocketSecondFireAngle_ = other.rocketSecondFireAngle_;
      maxWhiteTime_ = other.maxWhiteTime_;
      maxFadeTime_ = other.maxFadeTime_;
      flashDistanceScale_ = other.flashDistanceScale_;
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicProjectileConfigData Clone() {
      return new WeaponFireLogicProjectileConfigData(this);
    }

    /// <summary>Field number for the "InitSpeed" field.</summary>
    public const int InitSpeedFieldNumber = 1;
    private float initSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitSpeed {
      get { return initSpeed_; }
      set {
        initSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AccelSpeed" field.</summary>
    public const int AccelSpeedFieldNumber = 2;
    private float accelSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AccelSpeed {
      get { return accelSpeed_; }
      set {
        accelSpeed_ = value;
      }
    }

    /// <summary>Field number for the "MaxSpeed" field.</summary>
    public const int MaxSpeedFieldNumber = 3;
    private float maxSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxSpeed {
      get { return maxSpeed_; }
      set {
        maxSpeed_ = value;
      }
    }

    /// <summary>Field number for the "TPSFireOffset" field.</summary>
    public const int TPSFireOffsetFieldNumber = 4;
    private global::D11.Pjson.PbVector3 tPSFireOffset_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.PbVector3 TPSFireOffset {
      get { return tPSFireOffset_; }
      set {
        tPSFireOffset_ = value;
      }
    }

    /// <summary>Field number for the "TPSFireDirectOffset" field.</summary>
    public const int TPSFireDirectOffsetFieldNumber = 5;
    private global::D11.Pjson.PbVector3 tPSFireDirectOffset_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.PbVector3 TPSFireDirectOffset {
      get { return tPSFireDirectOffset_; }
      set {
        tPSFireDirectOffset_ = value;
      }
    }

    /// <summary>Field number for the "InitSpeedLow" field.</summary>
    public const int InitSpeedLowFieldNumber = 6;
    private float initSpeedLow_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitSpeedLow {
      get { return initSpeedLow_; }
      set {
        initSpeedLow_ = value;
      }
    }

    /// <summary>Field number for the "AccelSpeedLow" field.</summary>
    public const int AccelSpeedLowFieldNumber = 7;
    private float accelSpeedLow_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AccelSpeedLow {
      get { return accelSpeedLow_; }
      set {
        accelSpeedLow_ = value;
      }
    }

    /// <summary>Field number for the "MaxSpeedLow" field.</summary>
    public const int MaxSpeedLowFieldNumber = 8;
    private float maxSpeedLow_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxSpeedLow {
      get { return maxSpeedLow_; }
      set {
        maxSpeedLow_ = value;
      }
    }

    /// <summary>Field number for the "TPSFireOffsetLow" field.</summary>
    public const int TPSFireOffsetLowFieldNumber = 9;
    private global::D11.Pjson.PbVector3 tPSFireOffsetLow_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.PbVector3 TPSFireOffsetLow {
      get { return tPSFireOffsetLow_; }
      set {
        tPSFireOffsetLow_ = value;
      }
    }

    /// <summary>Field number for the "TPSFireDirectOffsetLow" field.</summary>
    public const int TPSFireDirectOffsetLowFieldNumber = 10;
    private global::D11.Pjson.PbVector3 tPSFireDirectOffsetLow_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.PbVector3 TPSFireDirectOffsetLow {
      get { return tPSFireDirectOffsetLow_; }
      set {
        tPSFireDirectOffsetLow_ = value;
      }
    }

    /// <summary>Field number for the "ProjectileFireHitDamage" field.</summary>
    public const int ProjectileFireHitDamageFieldNumber = 11;
    private float projectileFireHitDamage_;
    /// <summary>
    /// 砸中人的伤害值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ProjectileFireHitDamage {
      get { return projectileFireHitDamage_; }
      set {
        projectileFireHitDamage_ = value;
      }
    }

    /// <summary>Field number for the "VelocityFactors" field.</summary>
    public const int VelocityFactorsFieldNumber = 12;
    private global::D11.Pjson.PbVector3 velocityFactors_;
    /// <summary>
    /// 投掷者的速度系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.PbVector3 VelocityFactors {
      get { return velocityFactors_; }
      set {
        velocityFactors_ = value;
      }
    }

    /// <summary>Field number for the "DownThrowVelocityFactorY" field.</summary>
    public const int DownThrowVelocityFactorYFieldNumber = 13;
    private float downThrowVelocityFactorY_;
    /// <summary>
    /// 投掷者的落下速度系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DownThrowVelocityFactorY {
      get { return downThrowVelocityFactorY_; }
      set {
        downThrowVelocityFactorY_ = value;
      }
    }

    /// <summary>Field number for the "MissileLaunchHigh" field.</summary>
    public const int MissileLaunchHighFieldNumber = 14;
    private float missileLaunchHigh_;
    /// <summary>
    /// 导弹下落高度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MissileLaunchHigh {
      get { return missileLaunchHigh_; }
      set {
        missileLaunchHigh_ = value;
      }
    }

    /// <summary>Field number for the "GravityScale" field.</summary>
    public const int GravityScaleFieldNumber = 15;
    private float gravityScale_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GravityScale {
      get { return gravityScale_; }
      set {
        gravityScale_ = value;
      }
    }

    /// <summary>Field number for the "DamageRadius" field.</summary>
    public const int DamageRadiusFieldNumber = 16;
    private float damageRadius_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DamageRadius {
      get { return damageRadius_; }
      set {
        damageRadius_ = value;
      }
    }

    /// <summary>Field number for the "MinDamageValue" field.</summary>
    public const int MinDamageValueFieldNumber = 17;
    private int minDamageValue_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinDamageValue {
      get { return minDamageValue_; }
      set {
        minDamageValue_ = value;
      }
    }

    /// <summary>Field number for the "LifeSpan" field.</summary>
    public const int LifeSpanFieldNumber = 18;
    private float lifeSpan_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LifeSpan {
      get { return lifeSpan_; }
      set {
        lifeSpan_ = value;
      }
    }

    /// <summary>Field number for the "ExplosionLifeSpan" field.</summary>
    public const int ExplosionLifeSpanFieldNumber = 19;
    private float explosionLifeSpan_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExplosionLifeSpan {
      get { return explosionLifeSpan_; }
      set {
        explosionLifeSpan_ = value;
      }
    }

    /// <summary>Field number for the "WorkingTime" field.</summary>
    public const int WorkingTimeFieldNumber = 20;
    private float workingTime_;
    /// <summary>
    /// 待机功能时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WorkingTime {
      get { return workingTime_; }
      set {
        workingTime_ = value;
      }
    }

    /// <summary>Field number for the "ProjFlightAssetName" field.</summary>
    public const int ProjFlightAssetNameFieldNumber = 21;
    private string projFlightAssetName_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjFlightAssetName {
      get { return projFlightAssetName_; }
      set {
        projFlightAssetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InstantExplode" field.</summary>
    public const int InstantExplodeFieldNumber = 22;
    private bool instantExplode_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InstantExplode {
      get { return instantExplode_; }
      set {
        instantExplode_ = value;
      }
    }

    /// <summary>Field number for the "ShouldExplodeOnFloor" field.</summary>
    public const int ShouldExplodeOnFloorFieldNumber = 23;
    private bool shouldExplodeOnFloor_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShouldExplodeOnFloor {
      get { return shouldExplodeOnFloor_; }
      set {
        shouldExplodeOnFloor_ = value;
      }
    }

    /// <summary>Field number for the "GetHitPunchAngleX" field.</summary>
    public const int GetHitPunchAngleXFieldNumber = 24;
    private float getHitPunchAngleX_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GetHitPunchAngleX {
      get { return getHitPunchAngleX_; }
      set {
        getHitPunchAngleX_ = value;
      }
    }

    /// <summary>Field number for the "GetHitPunchAngleXDecreseSpeed" field.</summary>
    public const int GetHitPunchAngleXDecreseSpeedFieldNumber = 25;
    private float getHitPunchAngleXDecreseSpeed_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GetHitPunchAngleXDecreseSpeed {
      get { return getHitPunchAngleXDecreseSpeed_; }
      set {
        getHitPunchAngleXDecreseSpeed_ = value;
      }
    }

    /// <summary>Field number for the "GroundBounceRate" field.</summary>
    public const int GroundBounceRateFieldNumber = 26;
    private float groundBounceRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GroundBounceRate {
      get { return groundBounceRate_; }
      set {
        groundBounceRate_ = value;
      }
    }

    /// <summary>Field number for the "WallBounceRate" field.</summary>
    public const int WallBounceRateFieldNumber = 27;
    private float wallBounceRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WallBounceRate {
      get { return wallBounceRate_; }
      set {
        wallBounceRate_ = value;
      }
    }

    /// <summary>Field number for the "PawnBounceRate" field.</summary>
    public const int PawnBounceRateFieldNumber = 28;
    private float pawnBounceRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PawnBounceRate {
      get { return pawnBounceRate_; }
      set {
        pawnBounceRate_ = value;
      }
    }

    /// <summary>Field number for the "MaxBounceCount" field.</summary>
    public const int MaxBounceCountFieldNumber = 29;
    private int maxBounceCount_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxBounceCount {
      get { return maxBounceCount_; }
      set {
        maxBounceCount_ = value;
      }
    }

    /// <summary>Field number for the "FireDelayInterval" field.</summary>
    public const int FireDelayIntervalFieldNumber = 30;
    private float fireDelayInterval_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireDelayInterval {
      get { return fireDelayInterval_; }
      set {
        fireDelayInterval_ = value;
      }
    }

    /// <summary>Field number for the "PrepareDelayInterval" field.</summary>
    public const int PrepareDelayIntervalFieldNumber = 31;
    private float prepareDelayInterval_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PrepareDelayInterval {
      get { return prepareDelayInterval_; }
      set {
        prepareDelayInterval_ = value;
      }
    }

    /// <summary>Field number for the "CauseFlashEffect" field.</summary>
    public const int CauseFlashEffectFieldNumber = 32;
    private bool causeFlashEffect_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CauseFlashEffect {
      get { return causeFlashEffect_; }
      set {
        causeFlashEffect_ = value;
      }
    }

    /// <summary>Field number for the "ProjectileExplodeVFXIndex" field.</summary>
    public const int ProjectileExplodeVFXIndexFieldNumber = 33;
    private int projectileExplodeVFXIndex_;
    /// <summary>
    /// 爆炸后特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProjectileExplodeVFXIndex {
      get { return projectileExplodeVFXIndex_; }
      set {
        projectileExplodeVFXIndex_ = value;
      }
    }

    /// <summary>Field number for the "ProjectileTrailVFX" field.</summary>
    public const int ProjectileTrailVFXFieldNumber = 34;
    private string projectileTrailVFX_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectileTrailVFX {
      get { return projectileTrailVFX_; }
      set {
        projectileTrailVFX_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MeshScale" field.</summary>
    public const int MeshScaleFieldNumber = 35;
    private float meshScale_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeshScale {
      get { return meshScale_; }
      set {
        meshScale_ = value;
      }
    }

    /// <summary>Field number for the "ExplodeVFXLifeSpan" field.</summary>
    public const int ExplodeVFXLifeSpanFieldNumber = 36;
    private float explodeVFXLifeSpan_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExplodeVFXLifeSpan {
      get { return explodeVFXLifeSpan_; }
      set {
        explodeVFXLifeSpan_ = value;
      }
    }

    /// <summary>Field number for the "RadarBlipLifeTime" field.</summary>
    public const int RadarBlipLifeTimeFieldNumber = 37;
    private float radarBlipLifeTime_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RadarBlipLifeTime {
      get { return radarBlipLifeTime_; }
      set {
        radarBlipLifeTime_ = value;
      }
    }

    /// <summary>Field number for the "ExplodeVFXLogicLifeSpan" field.</summary>
    public const int ExplodeVFXLogicLifeSpanFieldNumber = 38;
    private float explodeVFXLogicLifeSpan_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExplodeVFXLogicLifeSpan {
      get { return explodeVFXLogicLifeSpan_; }
      set {
        explodeVFXLogicLifeSpan_ = value;
      }
    }

    /// <summary>Field number for the "SelfDamageFactor" field.</summary>
    public const int SelfDamageFactorFieldNumber = 39;
    private float selfDamageFactor_;
    /// <summary>
    /// 自伤系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SelfDamageFactor {
      get { return selfDamageFactor_; }
      set {
        selfDamageFactor_ = value;
      }
    }

    /// <summary>Field number for the "CenterDamageRadiu" field.</summary>
    public const int CenterDamageRadiuFieldNumber = 40;
    private float centerDamageRadiu_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CenterDamageRadiu {
      get { return centerDamageRadiu_; }
      set {
        centerDamageRadiu_ = value;
      }
    }

    /// <summary>Field number for the "CleanProjectileTimeOnThrown" field.</summary>
    public const int CleanProjectileTimeOnThrownFieldNumber = 41;
    private float cleanProjectileTimeOnThrown_;
    /// <summary>
    /// 投掷后 手上的手雷消失时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CleanProjectileTimeOnThrown {
      get { return cleanProjectileTimeOnThrown_; }
      set {
        cleanProjectileTimeOnThrown_ = value;
      }
    }

    /// <summary>Field number for the "SecondFireDelayInterval" field.</summary>
    public const int SecondFireDelayIntervalFieldNumber = 42;
    private float secondFireDelayInterval_;
    /// <summary>
    /// 开火间隔（次要 低抛） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SecondFireDelayInterval {
      get { return secondFireDelayInterval_; }
      set {
        secondFireDelayInterval_ = value;
      }
    }

    /// <summary>Field number for the "MainBreakThrowTime" field.</summary>
    public const int MainBreakThrowTimeFieldNumber = 43;
    private float mainBreakThrowTime_;
    /// <summary>
    /// 不能打断投掷时间戳（主要 高抛） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MainBreakThrowTime {
      get { return mainBreakThrowTime_; }
      set {
        mainBreakThrowTime_ = value;
      }
    }

    /// <summary>Field number for the "SecondBreakThrowTime" field.</summary>
    public const int SecondBreakThrowTimeFieldNumber = 44;
    private float secondBreakThrowTime_;
    /// <summary>
    /// 不能打断投掷时间戳（次要 低抛） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SecondBreakThrowTime {
      get { return secondBreakThrowTime_; }
      set {
        secondBreakThrowTime_ = value;
      }
    }

    /// <summary>Field number for the "DetonationVelocity" field.</summary>
    public const int DetonationVelocityFieldNumber = 45;
    private float detonationVelocity_;
    /// <summary>
    /// 引爆速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DetonationVelocity {
      get { return detonationVelocity_; }
      set {
        detonationVelocity_ = value;
      }
    }

    /// <summary>Field number for the "FirstBounceRate" field.</summary>
    public const int FirstBounceRateFieldNumber = 46;
    private float firstBounceRate_;
    /// <summary>
    /// 投掷的第一次落点高于出手点的第一次衰减 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FirstBounceRate {
      get { return firstBounceRate_; }
      set {
        firstBounceRate_ = value;
      }
    }

    /// <summary>Field number for the "KeepFPLinePoints" field.</summary>
    public const int KeepFPLinePointsFieldNumber = 47;
    private int keepFPLinePoints_;
    /// <summary>
    /// 投掷物1p保留几个轨迹线显示点（不包括最后一个点） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeepFPLinePoints {
      get { return keepFPLinePoints_; }
      set {
        keepFPLinePoints_ = value;
      }
    }

    /// <summary>Field number for the "lessFPLinePoints" field.</summary>
    public const int LessFPLinePointsFieldNumber = 48;
    private int lessFPLinePoints_;
    /// <summary>
    /// 投掷物少于几个点则只显示球 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LessFPLinePoints {
      get { return lessFPLinePoints_; }
      set {
        lessFPLinePoints_ = value;
      }
    }

    /// <summary>Field number for the "InitRotationVelocity" field.</summary>
    public const int InitRotationVelocityFieldNumber = 49;
    private global::D11.Pjson.PbVector3 initRotationVelocity_;
    /// <summary>
    /// 手雷投掷物的初始旋转速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.PbVector3 InitRotationVelocity {
      get { return initRotationVelocity_; }
      set {
        initRotationVelocity_ = value;
      }
    }

    /// <summary>Field number for the "SpecialFireMode" field.</summary>
    public const int SpecialFireModeFieldNumber = 50;
    private uint specialFireMode_;
    /// <summary>
    /// 特殊开火逻辑，默认1,如果>1则为第几种特殊开火 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpecialFireMode {
      get { return specialFireMode_; }
      set {
        specialFireMode_ = value;
      }
    }

    /// <summary>Field number for the "AdditionRecoilConfigFileName" field.</summary>
    public const int AdditionRecoilConfigFileNameFieldNumber = 51;
    private string additionRecoilConfigFileName_ = "";
    /// <summary>
    /// 后坐力附加后坐力文件名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdditionRecoilConfigFileName {
      get { return additionRecoilConfigFileName_; }
      set {
        additionRecoilConfigFileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AdditionProjectileConfigFileName" field.</summary>
    public const int AdditionProjectileConfigFileNameFieldNumber = 52;
    private string additionProjectileConfigFileName_ = "";
    /// <summary>
    /// 投掷物后坐力文件名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdditionProjectileConfigFileName {
      get { return additionProjectileConfigFileName_; }
      set {
        additionProjectileConfigFileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HpValue" field.</summary>
    public const int HpValueFieldNumber = 53;
    private int hpValue_;
    /// <summary>
    /// 投掷物的血量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HpValue {
      get { return hpValue_; }
      set {
        hpValue_ = value;
      }
    }

    /// <summary>Field number for the "OpenRotateEnable" field.</summary>
    public const int OpenRotateEnableFieldNumber = 54;
    private bool openRotateEnable_;
    /// <summary>
    /// 投掷物开启旋转 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpenRotateEnable {
      get { return openRotateEnable_; }
      set {
        openRotateEnable_ = value;
      }
    }

    /// <summary>Field number for the "OpenVerticalFall" field.</summary>
    public const int OpenVerticalFallFieldNumber = 55;
    private bool openVerticalFall_;
    /// <summary>
    /// 投掷物开启垂直落地 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpenVerticalFall {
      get { return openVerticalFall_; }
      set {
        openVerticalFall_ = value;
      }
    }

    /// <summary>Field number for the "PullBackValue" field.</summary>
    public const int PullBackValueFieldNumber = 56;
    private float pullBackValue_;
    /// <summary>
    /// 投掷物碰撞拉回深度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PullBackValue {
      get { return pullBackValue_; }
      set {
        pullBackValue_ = value;
      }
    }

    /// <summary>Field number for the "RocketSecondFireAngle" field.</summary>
    public const int RocketSecondFireAngleFieldNumber = 57;
    private float rocketSecondFireAngle_;
    /// <summary>
    /// 四连发散射角度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RocketSecondFireAngle {
      get { return rocketSecondFireAngle_; }
      set {
        rocketSecondFireAngle_ = value;
      }
    }

    /// <summary>Field number for the "MaxWhiteTime" field.</summary>
    public const int MaxWhiteTimeFieldNumber = 58;
    private float maxWhiteTime_;
    /// <summary>
    /// 闪光弹最大闪白时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxWhiteTime {
      get { return maxWhiteTime_; }
      set {
        maxWhiteTime_ = value;
      }
    }

    /// <summary>Field number for the "MaxFadeTime" field.</summary>
    public const int MaxFadeTimeFieldNumber = 59;
    private float maxFadeTime_;
    /// <summary>
    /// 闪光弹最大重影时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxFadeTime {
      get { return maxFadeTime_; }
      set {
        maxFadeTime_ = value;
      }
    }

    /// <summary>Field number for the "FlashDistanceScale" field.</summary>
    public const int FlashDistanceScaleFieldNumber = 60;
    private float flashDistanceScale_;
    /// <summary>
    /// 闪光弹影响距离系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FlashDistanceScale {
      get { return flashDistanceScale_; }
      set {
        flashDistanceScale_ = value;
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 61;
    private global::D11.Pjson.BaseFireLogicConfigData parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.BaseFireLogicConfigData Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponFireLogicProjectileConfigData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponFireLogicProjectileConfigData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitSpeed, other.InitSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccelSpeed, other.AccelSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSpeed, other.MaxSpeed)) return false;
      if (!object.Equals(TPSFireOffset, other.TPSFireOffset)) return false;
      if (!object.Equals(TPSFireDirectOffset, other.TPSFireDirectOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitSpeedLow, other.InitSpeedLow)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccelSpeedLow, other.AccelSpeedLow)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSpeedLow, other.MaxSpeedLow)) return false;
      if (!object.Equals(TPSFireOffsetLow, other.TPSFireOffsetLow)) return false;
      if (!object.Equals(TPSFireDirectOffsetLow, other.TPSFireDirectOffsetLow)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ProjectileFireHitDamage, other.ProjectileFireHitDamage)) return false;
      if (!object.Equals(VelocityFactors, other.VelocityFactors)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DownThrowVelocityFactorY, other.DownThrowVelocityFactorY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MissileLaunchHigh, other.MissileLaunchHigh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GravityScale, other.GravityScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamageRadius, other.DamageRadius)) return false;
      if (MinDamageValue != other.MinDamageValue) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LifeSpan, other.LifeSpan)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExplosionLifeSpan, other.ExplosionLifeSpan)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WorkingTime, other.WorkingTime)) return false;
      if (ProjFlightAssetName != other.ProjFlightAssetName) return false;
      if (InstantExplode != other.InstantExplode) return false;
      if (ShouldExplodeOnFloor != other.ShouldExplodeOnFloor) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GetHitPunchAngleX, other.GetHitPunchAngleX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GetHitPunchAngleXDecreseSpeed, other.GetHitPunchAngleXDecreseSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GroundBounceRate, other.GroundBounceRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WallBounceRate, other.WallBounceRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PawnBounceRate, other.PawnBounceRate)) return false;
      if (MaxBounceCount != other.MaxBounceCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireDelayInterval, other.FireDelayInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrepareDelayInterval, other.PrepareDelayInterval)) return false;
      if (CauseFlashEffect != other.CauseFlashEffect) return false;
      if (ProjectileExplodeVFXIndex != other.ProjectileExplodeVFXIndex) return false;
      if (ProjectileTrailVFX != other.ProjectileTrailVFX) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MeshScale, other.MeshScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExplodeVFXLifeSpan, other.ExplodeVFXLifeSpan)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RadarBlipLifeTime, other.RadarBlipLifeTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExplodeVFXLogicLifeSpan, other.ExplodeVFXLogicLifeSpan)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SelfDamageFactor, other.SelfDamageFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CenterDamageRadiu, other.CenterDamageRadiu)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CleanProjectileTimeOnThrown, other.CleanProjectileTimeOnThrown)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SecondFireDelayInterval, other.SecondFireDelayInterval)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MainBreakThrowTime, other.MainBreakThrowTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SecondBreakThrowTime, other.SecondBreakThrowTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DetonationVelocity, other.DetonationVelocity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FirstBounceRate, other.FirstBounceRate)) return false;
      if (KeepFPLinePoints != other.KeepFPLinePoints) return false;
      if (LessFPLinePoints != other.LessFPLinePoints) return false;
      if (!object.Equals(InitRotationVelocity, other.InitRotationVelocity)) return false;
      if (SpecialFireMode != other.SpecialFireMode) return false;
      if (AdditionRecoilConfigFileName != other.AdditionRecoilConfigFileName) return false;
      if (AdditionProjectileConfigFileName != other.AdditionProjectileConfigFileName) return false;
      if (HpValue != other.HpValue) return false;
      if (OpenRotateEnable != other.OpenRotateEnable) return false;
      if (OpenVerticalFall != other.OpenVerticalFall) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PullBackValue, other.PullBackValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RocketSecondFireAngle, other.RocketSecondFireAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxWhiteTime, other.MaxWhiteTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxFadeTime, other.MaxFadeTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FlashDistanceScale, other.FlashDistanceScale)) return false;
      if (!object.Equals(Parent, other.Parent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InitSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitSpeed);
      if (AccelSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccelSpeed);
      if (MaxSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSpeed);
      if (tPSFireOffset_ != null) hash ^= TPSFireOffset.GetHashCode();
      if (tPSFireDirectOffset_ != null) hash ^= TPSFireDirectOffset.GetHashCode();
      if (InitSpeedLow != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitSpeedLow);
      if (AccelSpeedLow != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccelSpeedLow);
      if (MaxSpeedLow != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSpeedLow);
      if (tPSFireOffsetLow_ != null) hash ^= TPSFireOffsetLow.GetHashCode();
      if (tPSFireDirectOffsetLow_ != null) hash ^= TPSFireDirectOffsetLow.GetHashCode();
      if (ProjectileFireHitDamage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ProjectileFireHitDamage);
      if (velocityFactors_ != null) hash ^= VelocityFactors.GetHashCode();
      if (DownThrowVelocityFactorY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DownThrowVelocityFactorY);
      if (MissileLaunchHigh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MissileLaunchHigh);
      if (GravityScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GravityScale);
      if (DamageRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamageRadius);
      if (MinDamageValue != 0) hash ^= MinDamageValue.GetHashCode();
      if (LifeSpan != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LifeSpan);
      if (ExplosionLifeSpan != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExplosionLifeSpan);
      if (WorkingTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WorkingTime);
      if (ProjFlightAssetName.Length != 0) hash ^= ProjFlightAssetName.GetHashCode();
      if (InstantExplode != false) hash ^= InstantExplode.GetHashCode();
      if (ShouldExplodeOnFloor != false) hash ^= ShouldExplodeOnFloor.GetHashCode();
      if (GetHitPunchAngleX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GetHitPunchAngleX);
      if (GetHitPunchAngleXDecreseSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GetHitPunchAngleXDecreseSpeed);
      if (GroundBounceRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GroundBounceRate);
      if (WallBounceRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WallBounceRate);
      if (PawnBounceRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PawnBounceRate);
      if (MaxBounceCount != 0) hash ^= MaxBounceCount.GetHashCode();
      if (FireDelayInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireDelayInterval);
      if (PrepareDelayInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrepareDelayInterval);
      if (CauseFlashEffect != false) hash ^= CauseFlashEffect.GetHashCode();
      if (ProjectileExplodeVFXIndex != 0) hash ^= ProjectileExplodeVFXIndex.GetHashCode();
      if (ProjectileTrailVFX.Length != 0) hash ^= ProjectileTrailVFX.GetHashCode();
      if (MeshScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MeshScale);
      if (ExplodeVFXLifeSpan != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExplodeVFXLifeSpan);
      if (RadarBlipLifeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RadarBlipLifeTime);
      if (ExplodeVFXLogicLifeSpan != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExplodeVFXLogicLifeSpan);
      if (SelfDamageFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SelfDamageFactor);
      if (CenterDamageRadiu != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CenterDamageRadiu);
      if (CleanProjectileTimeOnThrown != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CleanProjectileTimeOnThrown);
      if (SecondFireDelayInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SecondFireDelayInterval);
      if (MainBreakThrowTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MainBreakThrowTime);
      if (SecondBreakThrowTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SecondBreakThrowTime);
      if (DetonationVelocity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DetonationVelocity);
      if (FirstBounceRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FirstBounceRate);
      if (KeepFPLinePoints != 0) hash ^= KeepFPLinePoints.GetHashCode();
      if (LessFPLinePoints != 0) hash ^= LessFPLinePoints.GetHashCode();
      if (initRotationVelocity_ != null) hash ^= InitRotationVelocity.GetHashCode();
      if (SpecialFireMode != 0) hash ^= SpecialFireMode.GetHashCode();
      if (AdditionRecoilConfigFileName.Length != 0) hash ^= AdditionRecoilConfigFileName.GetHashCode();
      if (AdditionProjectileConfigFileName.Length != 0) hash ^= AdditionProjectileConfigFileName.GetHashCode();
      if (HpValue != 0) hash ^= HpValue.GetHashCode();
      if (OpenRotateEnable != false) hash ^= OpenRotateEnable.GetHashCode();
      if (OpenVerticalFall != false) hash ^= OpenVerticalFall.GetHashCode();
      if (PullBackValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PullBackValue);
      if (RocketSecondFireAngle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RocketSecondFireAngle);
      if (MaxWhiteTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxWhiteTime);
      if (MaxFadeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxFadeTime);
      if (FlashDistanceScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FlashDistanceScale);
      if (parent_ != null) hash ^= Parent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InitSpeed != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(InitSpeed);
      }
      if (AccelSpeed != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(AccelSpeed);
      }
      if (MaxSpeed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MaxSpeed);
      }
      if (tPSFireOffset_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TPSFireOffset);
      }
      if (tPSFireDirectOffset_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TPSFireDirectOffset);
      }
      if (InitSpeedLow != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(InitSpeedLow);
      }
      if (AccelSpeedLow != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(AccelSpeedLow);
      }
      if (MaxSpeedLow != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(MaxSpeedLow);
      }
      if (tPSFireOffsetLow_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(TPSFireOffsetLow);
      }
      if (tPSFireDirectOffsetLow_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(TPSFireDirectOffsetLow);
      }
      if (ProjectileFireHitDamage != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(ProjectileFireHitDamage);
      }
      if (velocityFactors_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(VelocityFactors);
      }
      if (DownThrowVelocityFactorY != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(DownThrowVelocityFactorY);
      }
      if (MissileLaunchHigh != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(MissileLaunchHigh);
      }
      if (GravityScale != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(GravityScale);
      }
      if (DamageRadius != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(DamageRadius);
      }
      if (MinDamageValue != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(MinDamageValue);
      }
      if (LifeSpan != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(LifeSpan);
      }
      if (ExplosionLifeSpan != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(ExplosionLifeSpan);
      }
      if (WorkingTime != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(WorkingTime);
      }
      if (ProjFlightAssetName.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(ProjFlightAssetName);
      }
      if (InstantExplode != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(InstantExplode);
      }
      if (ShouldExplodeOnFloor != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(ShouldExplodeOnFloor);
      }
      if (GetHitPunchAngleX != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(GetHitPunchAngleX);
      }
      if (GetHitPunchAngleXDecreseSpeed != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(GetHitPunchAngleXDecreseSpeed);
      }
      if (GroundBounceRate != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(GroundBounceRate);
      }
      if (WallBounceRate != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(WallBounceRate);
      }
      if (PawnBounceRate != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(PawnBounceRate);
      }
      if (MaxBounceCount != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(MaxBounceCount);
      }
      if (FireDelayInterval != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(FireDelayInterval);
      }
      if (PrepareDelayInterval != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(PrepareDelayInterval);
      }
      if (CauseFlashEffect != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(CauseFlashEffect);
      }
      if (ProjectileExplodeVFXIndex != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(ProjectileExplodeVFXIndex);
      }
      if (ProjectileTrailVFX.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(ProjectileTrailVFX);
      }
      if (MeshScale != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(MeshScale);
      }
      if (ExplodeVFXLifeSpan != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(ExplodeVFXLifeSpan);
      }
      if (RadarBlipLifeTime != 0F) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(RadarBlipLifeTime);
      }
      if (ExplodeVFXLogicLifeSpan != 0F) {
        output.WriteRawTag(181, 2);
        output.WriteFloat(ExplodeVFXLogicLifeSpan);
      }
      if (SelfDamageFactor != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(SelfDamageFactor);
      }
      if (CenterDamageRadiu != 0F) {
        output.WriteRawTag(197, 2);
        output.WriteFloat(CenterDamageRadiu);
      }
      if (CleanProjectileTimeOnThrown != 0F) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(CleanProjectileTimeOnThrown);
      }
      if (SecondFireDelayInterval != 0F) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(SecondFireDelayInterval);
      }
      if (MainBreakThrowTime != 0F) {
        output.WriteRawTag(221, 2);
        output.WriteFloat(MainBreakThrowTime);
      }
      if (SecondBreakThrowTime != 0F) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(SecondBreakThrowTime);
      }
      if (DetonationVelocity != 0F) {
        output.WriteRawTag(237, 2);
        output.WriteFloat(DetonationVelocity);
      }
      if (FirstBounceRate != 0F) {
        output.WriteRawTag(245, 2);
        output.WriteFloat(FirstBounceRate);
      }
      if (KeepFPLinePoints != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(KeepFPLinePoints);
      }
      if (LessFPLinePoints != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(LessFPLinePoints);
      }
      if (initRotationVelocity_ != null) {
        output.WriteRawTag(138, 3);
        output.WriteMessage(InitRotationVelocity);
      }
      if (SpecialFireMode != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(SpecialFireMode);
      }
      if (AdditionRecoilConfigFileName.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(AdditionRecoilConfigFileName);
      }
      if (AdditionProjectileConfigFileName.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(AdditionProjectileConfigFileName);
      }
      if (HpValue != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(HpValue);
      }
      if (OpenRotateEnable != false) {
        output.WriteRawTag(176, 3);
        output.WriteBool(OpenRotateEnable);
      }
      if (OpenVerticalFall != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(OpenVerticalFall);
      }
      if (PullBackValue != 0F) {
        output.WriteRawTag(197, 3);
        output.WriteFloat(PullBackValue);
      }
      if (RocketSecondFireAngle != 0F) {
        output.WriteRawTag(205, 3);
        output.WriteFloat(RocketSecondFireAngle);
      }
      if (MaxWhiteTime != 0F) {
        output.WriteRawTag(213, 3);
        output.WriteFloat(MaxWhiteTime);
      }
      if (MaxFadeTime != 0F) {
        output.WriteRawTag(221, 3);
        output.WriteFloat(MaxFadeTime);
      }
      if (FlashDistanceScale != 0F) {
        output.WriteRawTag(229, 3);
        output.WriteFloat(FlashDistanceScale);
      }
      if (parent_ != null) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(Parent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InitSpeed != 0F) {
        size += 1 + 4;
      }
      if (AccelSpeed != 0F) {
        size += 1 + 4;
      }
      if (MaxSpeed != 0F) {
        size += 1 + 4;
      }
      if (tPSFireOffset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TPSFireOffset);
      }
      if (tPSFireDirectOffset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TPSFireDirectOffset);
      }
      if (InitSpeedLow != 0F) {
        size += 1 + 4;
      }
      if (AccelSpeedLow != 0F) {
        size += 1 + 4;
      }
      if (MaxSpeedLow != 0F) {
        size += 1 + 4;
      }
      if (tPSFireOffsetLow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TPSFireOffsetLow);
      }
      if (tPSFireDirectOffsetLow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TPSFireDirectOffsetLow);
      }
      if (ProjectileFireHitDamage != 0F) {
        size += 1 + 4;
      }
      if (velocityFactors_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VelocityFactors);
      }
      if (DownThrowVelocityFactorY != 0F) {
        size += 1 + 4;
      }
      if (MissileLaunchHigh != 0F) {
        size += 1 + 4;
      }
      if (GravityScale != 0F) {
        size += 1 + 4;
      }
      if (DamageRadius != 0F) {
        size += 2 + 4;
      }
      if (MinDamageValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinDamageValue);
      }
      if (LifeSpan != 0F) {
        size += 2 + 4;
      }
      if (ExplosionLifeSpan != 0F) {
        size += 2 + 4;
      }
      if (WorkingTime != 0F) {
        size += 2 + 4;
      }
      if (ProjFlightAssetName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ProjFlightAssetName);
      }
      if (InstantExplode != false) {
        size += 2 + 1;
      }
      if (ShouldExplodeOnFloor != false) {
        size += 2 + 1;
      }
      if (GetHitPunchAngleX != 0F) {
        size += 2 + 4;
      }
      if (GetHitPunchAngleXDecreseSpeed != 0F) {
        size += 2 + 4;
      }
      if (GroundBounceRate != 0F) {
        size += 2 + 4;
      }
      if (WallBounceRate != 0F) {
        size += 2 + 4;
      }
      if (PawnBounceRate != 0F) {
        size += 2 + 4;
      }
      if (MaxBounceCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxBounceCount);
      }
      if (FireDelayInterval != 0F) {
        size += 2 + 4;
      }
      if (PrepareDelayInterval != 0F) {
        size += 2 + 4;
      }
      if (CauseFlashEffect != false) {
        size += 2 + 1;
      }
      if (ProjectileExplodeVFXIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProjectileExplodeVFXIndex);
      }
      if (ProjectileTrailVFX.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ProjectileTrailVFX);
      }
      if (MeshScale != 0F) {
        size += 2 + 4;
      }
      if (ExplodeVFXLifeSpan != 0F) {
        size += 2 + 4;
      }
      if (RadarBlipLifeTime != 0F) {
        size += 2 + 4;
      }
      if (ExplodeVFXLogicLifeSpan != 0F) {
        size += 2 + 4;
      }
      if (SelfDamageFactor != 0F) {
        size += 2 + 4;
      }
      if (CenterDamageRadiu != 0F) {
        size += 2 + 4;
      }
      if (CleanProjectileTimeOnThrown != 0F) {
        size += 2 + 4;
      }
      if (SecondFireDelayInterval != 0F) {
        size += 2 + 4;
      }
      if (MainBreakThrowTime != 0F) {
        size += 2 + 4;
      }
      if (SecondBreakThrowTime != 0F) {
        size += 2 + 4;
      }
      if (DetonationVelocity != 0F) {
        size += 2 + 4;
      }
      if (FirstBounceRate != 0F) {
        size += 2 + 4;
      }
      if (KeepFPLinePoints != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(KeepFPLinePoints);
      }
      if (LessFPLinePoints != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LessFPLinePoints);
      }
      if (initRotationVelocity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InitRotationVelocity);
      }
      if (SpecialFireMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpecialFireMode);
      }
      if (AdditionRecoilConfigFileName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AdditionRecoilConfigFileName);
      }
      if (AdditionProjectileConfigFileName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AdditionProjectileConfigFileName);
      }
      if (HpValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HpValue);
      }
      if (OpenRotateEnable != false) {
        size += 2 + 1;
      }
      if (OpenVerticalFall != false) {
        size += 2 + 1;
      }
      if (PullBackValue != 0F) {
        size += 2 + 4;
      }
      if (RocketSecondFireAngle != 0F) {
        size += 2 + 4;
      }
      if (MaxWhiteTime != 0F) {
        size += 2 + 4;
      }
      if (MaxFadeTime != 0F) {
        size += 2 + 4;
      }
      if (FlashDistanceScale != 0F) {
        size += 2 + 4;
      }
      if (parent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponFireLogicProjectileConfigData other) {
      if (other == null) {
        return;
      }
      if (other.InitSpeed != 0F) {
        InitSpeed = other.InitSpeed;
      }
      if (other.AccelSpeed != 0F) {
        AccelSpeed = other.AccelSpeed;
      }
      if (other.MaxSpeed != 0F) {
        MaxSpeed = other.MaxSpeed;
      }
      if (other.tPSFireOffset_ != null) {
        if (tPSFireOffset_ == null) {
          TPSFireOffset = new global::D11.Pjson.PbVector3();
        }
        TPSFireOffset.MergeFrom(other.TPSFireOffset);
      }
      if (other.tPSFireDirectOffset_ != null) {
        if (tPSFireDirectOffset_ == null) {
          TPSFireDirectOffset = new global::D11.Pjson.PbVector3();
        }
        TPSFireDirectOffset.MergeFrom(other.TPSFireDirectOffset);
      }
      if (other.InitSpeedLow != 0F) {
        InitSpeedLow = other.InitSpeedLow;
      }
      if (other.AccelSpeedLow != 0F) {
        AccelSpeedLow = other.AccelSpeedLow;
      }
      if (other.MaxSpeedLow != 0F) {
        MaxSpeedLow = other.MaxSpeedLow;
      }
      if (other.tPSFireOffsetLow_ != null) {
        if (tPSFireOffsetLow_ == null) {
          TPSFireOffsetLow = new global::D11.Pjson.PbVector3();
        }
        TPSFireOffsetLow.MergeFrom(other.TPSFireOffsetLow);
      }
      if (other.tPSFireDirectOffsetLow_ != null) {
        if (tPSFireDirectOffsetLow_ == null) {
          TPSFireDirectOffsetLow = new global::D11.Pjson.PbVector3();
        }
        TPSFireDirectOffsetLow.MergeFrom(other.TPSFireDirectOffsetLow);
      }
      if (other.ProjectileFireHitDamage != 0F) {
        ProjectileFireHitDamage = other.ProjectileFireHitDamage;
      }
      if (other.velocityFactors_ != null) {
        if (velocityFactors_ == null) {
          VelocityFactors = new global::D11.Pjson.PbVector3();
        }
        VelocityFactors.MergeFrom(other.VelocityFactors);
      }
      if (other.DownThrowVelocityFactorY != 0F) {
        DownThrowVelocityFactorY = other.DownThrowVelocityFactorY;
      }
      if (other.MissileLaunchHigh != 0F) {
        MissileLaunchHigh = other.MissileLaunchHigh;
      }
      if (other.GravityScale != 0F) {
        GravityScale = other.GravityScale;
      }
      if (other.DamageRadius != 0F) {
        DamageRadius = other.DamageRadius;
      }
      if (other.MinDamageValue != 0) {
        MinDamageValue = other.MinDamageValue;
      }
      if (other.LifeSpan != 0F) {
        LifeSpan = other.LifeSpan;
      }
      if (other.ExplosionLifeSpan != 0F) {
        ExplosionLifeSpan = other.ExplosionLifeSpan;
      }
      if (other.WorkingTime != 0F) {
        WorkingTime = other.WorkingTime;
      }
      if (other.ProjFlightAssetName.Length != 0) {
        ProjFlightAssetName = other.ProjFlightAssetName;
      }
      if (other.InstantExplode != false) {
        InstantExplode = other.InstantExplode;
      }
      if (other.ShouldExplodeOnFloor != false) {
        ShouldExplodeOnFloor = other.ShouldExplodeOnFloor;
      }
      if (other.GetHitPunchAngleX != 0F) {
        GetHitPunchAngleX = other.GetHitPunchAngleX;
      }
      if (other.GetHitPunchAngleXDecreseSpeed != 0F) {
        GetHitPunchAngleXDecreseSpeed = other.GetHitPunchAngleXDecreseSpeed;
      }
      if (other.GroundBounceRate != 0F) {
        GroundBounceRate = other.GroundBounceRate;
      }
      if (other.WallBounceRate != 0F) {
        WallBounceRate = other.WallBounceRate;
      }
      if (other.PawnBounceRate != 0F) {
        PawnBounceRate = other.PawnBounceRate;
      }
      if (other.MaxBounceCount != 0) {
        MaxBounceCount = other.MaxBounceCount;
      }
      if (other.FireDelayInterval != 0F) {
        FireDelayInterval = other.FireDelayInterval;
      }
      if (other.PrepareDelayInterval != 0F) {
        PrepareDelayInterval = other.PrepareDelayInterval;
      }
      if (other.CauseFlashEffect != false) {
        CauseFlashEffect = other.CauseFlashEffect;
      }
      if (other.ProjectileExplodeVFXIndex != 0) {
        ProjectileExplodeVFXIndex = other.ProjectileExplodeVFXIndex;
      }
      if (other.ProjectileTrailVFX.Length != 0) {
        ProjectileTrailVFX = other.ProjectileTrailVFX;
      }
      if (other.MeshScale != 0F) {
        MeshScale = other.MeshScale;
      }
      if (other.ExplodeVFXLifeSpan != 0F) {
        ExplodeVFXLifeSpan = other.ExplodeVFXLifeSpan;
      }
      if (other.RadarBlipLifeTime != 0F) {
        RadarBlipLifeTime = other.RadarBlipLifeTime;
      }
      if (other.ExplodeVFXLogicLifeSpan != 0F) {
        ExplodeVFXLogicLifeSpan = other.ExplodeVFXLogicLifeSpan;
      }
      if (other.SelfDamageFactor != 0F) {
        SelfDamageFactor = other.SelfDamageFactor;
      }
      if (other.CenterDamageRadiu != 0F) {
        CenterDamageRadiu = other.CenterDamageRadiu;
      }
      if (other.CleanProjectileTimeOnThrown != 0F) {
        CleanProjectileTimeOnThrown = other.CleanProjectileTimeOnThrown;
      }
      if (other.SecondFireDelayInterval != 0F) {
        SecondFireDelayInterval = other.SecondFireDelayInterval;
      }
      if (other.MainBreakThrowTime != 0F) {
        MainBreakThrowTime = other.MainBreakThrowTime;
      }
      if (other.SecondBreakThrowTime != 0F) {
        SecondBreakThrowTime = other.SecondBreakThrowTime;
      }
      if (other.DetonationVelocity != 0F) {
        DetonationVelocity = other.DetonationVelocity;
      }
      if (other.FirstBounceRate != 0F) {
        FirstBounceRate = other.FirstBounceRate;
      }
      if (other.KeepFPLinePoints != 0) {
        KeepFPLinePoints = other.KeepFPLinePoints;
      }
      if (other.LessFPLinePoints != 0) {
        LessFPLinePoints = other.LessFPLinePoints;
      }
      if (other.initRotationVelocity_ != null) {
        if (initRotationVelocity_ == null) {
          InitRotationVelocity = new global::D11.Pjson.PbVector3();
        }
        InitRotationVelocity.MergeFrom(other.InitRotationVelocity);
      }
      if (other.SpecialFireMode != 0) {
        SpecialFireMode = other.SpecialFireMode;
      }
      if (other.AdditionRecoilConfigFileName.Length != 0) {
        AdditionRecoilConfigFileName = other.AdditionRecoilConfigFileName;
      }
      if (other.AdditionProjectileConfigFileName.Length != 0) {
        AdditionProjectileConfigFileName = other.AdditionProjectileConfigFileName;
      }
      if (other.HpValue != 0) {
        HpValue = other.HpValue;
      }
      if (other.OpenRotateEnable != false) {
        OpenRotateEnable = other.OpenRotateEnable;
      }
      if (other.OpenVerticalFall != false) {
        OpenVerticalFall = other.OpenVerticalFall;
      }
      if (other.PullBackValue != 0F) {
        PullBackValue = other.PullBackValue;
      }
      if (other.RocketSecondFireAngle != 0F) {
        RocketSecondFireAngle = other.RocketSecondFireAngle;
      }
      if (other.MaxWhiteTime != 0F) {
        MaxWhiteTime = other.MaxWhiteTime;
      }
      if (other.MaxFadeTime != 0F) {
        MaxFadeTime = other.MaxFadeTime;
      }
      if (other.FlashDistanceScale != 0F) {
        FlashDistanceScale = other.FlashDistanceScale;
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::D11.Pjson.BaseFireLogicConfigData();
        }
        Parent.MergeFrom(other.Parent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            InitSpeed = input.ReadFloat();
            break;
          }
          case 21: {
            AccelSpeed = input.ReadFloat();
            break;
          }
          case 29: {
            MaxSpeed = input.ReadFloat();
            break;
          }
          case 34: {
            if (tPSFireOffset_ == null) {
              TPSFireOffset = new global::D11.Pjson.PbVector3();
            }
            input.ReadMessage(TPSFireOffset);
            break;
          }
          case 42: {
            if (tPSFireDirectOffset_ == null) {
              TPSFireDirectOffset = new global::D11.Pjson.PbVector3();
            }
            input.ReadMessage(TPSFireDirectOffset);
            break;
          }
          case 53: {
            InitSpeedLow = input.ReadFloat();
            break;
          }
          case 61: {
            AccelSpeedLow = input.ReadFloat();
            break;
          }
          case 69: {
            MaxSpeedLow = input.ReadFloat();
            break;
          }
          case 74: {
            if (tPSFireOffsetLow_ == null) {
              TPSFireOffsetLow = new global::D11.Pjson.PbVector3();
            }
            input.ReadMessage(TPSFireOffsetLow);
            break;
          }
          case 82: {
            if (tPSFireDirectOffsetLow_ == null) {
              TPSFireDirectOffsetLow = new global::D11.Pjson.PbVector3();
            }
            input.ReadMessage(TPSFireDirectOffsetLow);
            break;
          }
          case 93: {
            ProjectileFireHitDamage = input.ReadFloat();
            break;
          }
          case 98: {
            if (velocityFactors_ == null) {
              VelocityFactors = new global::D11.Pjson.PbVector3();
            }
            input.ReadMessage(VelocityFactors);
            break;
          }
          case 109: {
            DownThrowVelocityFactorY = input.ReadFloat();
            break;
          }
          case 117: {
            MissileLaunchHigh = input.ReadFloat();
            break;
          }
          case 125: {
            GravityScale = input.ReadFloat();
            break;
          }
          case 133: {
            DamageRadius = input.ReadFloat();
            break;
          }
          case 136: {
            MinDamageValue = input.ReadInt32();
            break;
          }
          case 149: {
            LifeSpan = input.ReadFloat();
            break;
          }
          case 157: {
            ExplosionLifeSpan = input.ReadFloat();
            break;
          }
          case 165: {
            WorkingTime = input.ReadFloat();
            break;
          }
          case 170: {
            ProjFlightAssetName = input.ReadString();
            break;
          }
          case 176: {
            InstantExplode = input.ReadBool();
            break;
          }
          case 184: {
            ShouldExplodeOnFloor = input.ReadBool();
            break;
          }
          case 197: {
            GetHitPunchAngleX = input.ReadFloat();
            break;
          }
          case 205: {
            GetHitPunchAngleXDecreseSpeed = input.ReadFloat();
            break;
          }
          case 213: {
            GroundBounceRate = input.ReadFloat();
            break;
          }
          case 221: {
            WallBounceRate = input.ReadFloat();
            break;
          }
          case 229: {
            PawnBounceRate = input.ReadFloat();
            break;
          }
          case 232: {
            MaxBounceCount = input.ReadInt32();
            break;
          }
          case 245: {
            FireDelayInterval = input.ReadFloat();
            break;
          }
          case 253: {
            PrepareDelayInterval = input.ReadFloat();
            break;
          }
          case 256: {
            CauseFlashEffect = input.ReadBool();
            break;
          }
          case 264: {
            ProjectileExplodeVFXIndex = input.ReadInt32();
            break;
          }
          case 274: {
            ProjectileTrailVFX = input.ReadString();
            break;
          }
          case 285: {
            MeshScale = input.ReadFloat();
            break;
          }
          case 293: {
            ExplodeVFXLifeSpan = input.ReadFloat();
            break;
          }
          case 301: {
            RadarBlipLifeTime = input.ReadFloat();
            break;
          }
          case 309: {
            ExplodeVFXLogicLifeSpan = input.ReadFloat();
            break;
          }
          case 317: {
            SelfDamageFactor = input.ReadFloat();
            break;
          }
          case 325: {
            CenterDamageRadiu = input.ReadFloat();
            break;
          }
          case 333: {
            CleanProjectileTimeOnThrown = input.ReadFloat();
            break;
          }
          case 341: {
            SecondFireDelayInterval = input.ReadFloat();
            break;
          }
          case 349: {
            MainBreakThrowTime = input.ReadFloat();
            break;
          }
          case 357: {
            SecondBreakThrowTime = input.ReadFloat();
            break;
          }
          case 365: {
            DetonationVelocity = input.ReadFloat();
            break;
          }
          case 373: {
            FirstBounceRate = input.ReadFloat();
            break;
          }
          case 376: {
            KeepFPLinePoints = input.ReadInt32();
            break;
          }
          case 384: {
            LessFPLinePoints = input.ReadInt32();
            break;
          }
          case 394: {
            if (initRotationVelocity_ == null) {
              InitRotationVelocity = new global::D11.Pjson.PbVector3();
            }
            input.ReadMessage(InitRotationVelocity);
            break;
          }
          case 400: {
            SpecialFireMode = input.ReadUInt32();
            break;
          }
          case 410: {
            AdditionRecoilConfigFileName = input.ReadString();
            break;
          }
          case 418: {
            AdditionProjectileConfigFileName = input.ReadString();
            break;
          }
          case 424: {
            HpValue = input.ReadInt32();
            break;
          }
          case 432: {
            OpenRotateEnable = input.ReadBool();
            break;
          }
          case 440: {
            OpenVerticalFall = input.ReadBool();
            break;
          }
          case 453: {
            PullBackValue = input.ReadFloat();
            break;
          }
          case 461: {
            RocketSecondFireAngle = input.ReadFloat();
            break;
          }
          case 469: {
            MaxWhiteTime = input.ReadFloat();
            break;
          }
          case 477: {
            MaxFadeTime = input.ReadFloat();
            break;
          }
          case 485: {
            FlashDistanceScale = input.ReadFloat();
            break;
          }
          case 490: {
            if (parent_ == null) {
              Parent = new global::D11.Pjson.BaseFireLogicConfigData();
            }
            input.ReadMessage(Parent);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
