// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WeaponFireLogicSniperInstantConfigData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from WeaponFireLogicSniperInstantConfigData.proto</summary>
  public static partial class WeaponFireLogicSniperInstantConfigDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WeaponFireLogicSniperInstantConfigData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeaponFireLogicSniperInstantConfigDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixXZWFwb25GaXJlTG9naWNTbmlwZXJJbnN0YW50Q29uZmlnRGF0YS5wcm90",
            "bxIJRDExLlBqc29uGiZXZWFwb25GaXJlTG9naWNJbnN0YW50Q29uZmlnRGF0",
            "YS5wcm90byLVBQomV2VhcG9uRmlyZUxvZ2ljU25pcGVySW5zdGFudENvbmZp",
            "Z0RhdGESFAoMU25pcGVyU3ByZWFkGAEgASgCEh4KFlNuaXBlckluYWNjdXJh",
            "Y3lDcm91Y2gYAiABKAISHQoVU25pcGVySW5hY2N1cmFjeVN0YW5kGAMgASgC",
            "EhwKFFNuaXBlckluYWNjdXJhY3lKdW1wGAQgASgCEhwKFFNuaXBlckluYWNj",
            "dXJhY3lMYW5kGAUgASgCEh4KFlNuaXBlckluYWNjdXJhY3lMYWRkZXIYBiAB",
            "KAISHAoUU25pcGVySW5hY2N1cmFjeUZpcmUYByABKAISHAoUU25pcGVySW5h",
            "Y2N1cmFjeU1vdmUYCCABKAISFwoPU25pcGVyU3ByZWFkQWx0GAkgASgCEiEK",
            "GVNuaXBlckluYWNjdXJhY3lDcm91Y2hBbHQYCiABKAISIAoYU25pcGVySW5h",
            "Y2N1cmFjeVN0YW5kQWx0GAsgASgCEh8KF1NuaXBlckluYWNjdXJhY3lKdW1w",
            "QWx0GAwgASgCEh8KF1NuaXBlckluYWNjdXJhY3lMYW5kQWx0GA0gASgCEiEK",
            "GVNuaXBlckluYWNjdXJhY3lMYWRkZXJBbHQYDiABKAISHwoXU25pcGVySW5h",
            "Y2N1cmFjeUZpcmVBbHQYDyABKAISHwoXU25pcGVySW5hY2N1cmFjeU1vdmVB",
            "bHQYECABKAISHAoURW5hYmxlQ29udGludW91c0ZpcmUYESABKAgSFQoNWm9v",
            "bUluRk9WUmF0ZRgSIAEoAhIWCg5ab29tT3V0Rk9WUmF0ZRgTIAEoAhINCgVY",
            "MUZPVhgUIAEoAhINCgVYMkZPVhgVIAEoAhIRCglab29tVGltZXMYFiABKAIS",
            "OwoGcGFyZW50GBcgASgLMisuRDExLlBqc29uLldlYXBvbkZpcmVMb2dpY0lu",
            "c3RhbnRDb25maWdEYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D11.Pjson.WeaponFireLogicInstantConfigDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.WeaponFireLogicSniperInstantConfigData), global::D11.Pjson.WeaponFireLogicSniperInstantConfigData.Parser, new[]{ "SniperSpread", "SniperInaccuracyCrouch", "SniperInaccuracyStand", "SniperInaccuracyJump", "SniperInaccuracyLand", "SniperInaccuracyLadder", "SniperInaccuracyFire", "SniperInaccuracyMove", "SniperSpreadAlt", "SniperInaccuracyCrouchAlt", "SniperInaccuracyStandAlt", "SniperInaccuracyJumpAlt", "SniperInaccuracyLandAlt", "SniperInaccuracyLadderAlt", "SniperInaccuracyFireAlt", "SniperInaccuracyMoveAlt", "EnableContinuousFire", "ZoomInFOVRate", "ZoomOutFOVRate", "X1FOV", "X2FOV", "ZoomTimes", "Parent" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponFireLogicSniperInstantConfigData : pb::IMessage<WeaponFireLogicSniperInstantConfigData> {
    private static readonly pb::MessageParser<WeaponFireLogicSniperInstantConfigData> _parser = new pb::MessageParser<WeaponFireLogicSniperInstantConfigData>(() => new WeaponFireLogicSniperInstantConfigData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponFireLogicSniperInstantConfigData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.WeaponFireLogicSniperInstantConfigDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicSniperInstantConfigData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicSniperInstantConfigData(WeaponFireLogicSniperInstantConfigData other) : this() {
      sniperSpread_ = other.sniperSpread_;
      sniperInaccuracyCrouch_ = other.sniperInaccuracyCrouch_;
      sniperInaccuracyStand_ = other.sniperInaccuracyStand_;
      sniperInaccuracyJump_ = other.sniperInaccuracyJump_;
      sniperInaccuracyLand_ = other.sniperInaccuracyLand_;
      sniperInaccuracyLadder_ = other.sniperInaccuracyLadder_;
      sniperInaccuracyFire_ = other.sniperInaccuracyFire_;
      sniperInaccuracyMove_ = other.sniperInaccuracyMove_;
      sniperSpreadAlt_ = other.sniperSpreadAlt_;
      sniperInaccuracyCrouchAlt_ = other.sniperInaccuracyCrouchAlt_;
      sniperInaccuracyStandAlt_ = other.sniperInaccuracyStandAlt_;
      sniperInaccuracyJumpAlt_ = other.sniperInaccuracyJumpAlt_;
      sniperInaccuracyLandAlt_ = other.sniperInaccuracyLandAlt_;
      sniperInaccuracyLadderAlt_ = other.sniperInaccuracyLadderAlt_;
      sniperInaccuracyFireAlt_ = other.sniperInaccuracyFireAlt_;
      sniperInaccuracyMoveAlt_ = other.sniperInaccuracyMoveAlt_;
      enableContinuousFire_ = other.enableContinuousFire_;
      zoomInFOVRate_ = other.zoomInFOVRate_;
      zoomOutFOVRate_ = other.zoomOutFOVRate_;
      x1FOV_ = other.x1FOV_;
      x2FOV_ = other.x2FOV_;
      zoomTimes_ = other.zoomTimes_;
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicSniperInstantConfigData Clone() {
      return new WeaponFireLogicSniperInstantConfigData(this);
    }

    /// <summary>Field number for the "SniperSpread" field.</summary>
    public const int SniperSpreadFieldNumber = 1;
    private float sniperSpread_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperSpread {
      get { return sniperSpread_; }
      set {
        sniperSpread_ = value;
      }
    }

    /// <summary>Field number for the "SniperInaccuracyCrouch" field.</summary>
    public const int SniperInaccuracyCrouchFieldNumber = 2;
    private float sniperInaccuracyCrouch_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperInaccuracyCrouch {
      get { return sniperInaccuracyCrouch_; }
      set {
        sniperInaccuracyCrouch_ = value;
      }
    }

    /// <summary>Field number for the "SniperInaccuracyStand" field.</summary>
    public const int SniperInaccuracyStandFieldNumber = 3;
    private float sniperInaccuracyStand_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperInaccuracyStand {
      get { return sniperInaccuracyStand_; }
      set {
        sniperInaccuracyStand_ = value;
      }
    }

    /// <summary>Field number for the "SniperInaccuracyJump" field.</summary>
    public const int SniperInaccuracyJumpFieldNumber = 4;
    private float sniperInaccuracyJump_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperInaccuracyJump {
      get { return sniperInaccuracyJump_; }
      set {
        sniperInaccuracyJump_ = value;
      }
    }

    /// <summary>Field number for the "SniperInaccuracyLand" field.</summary>
    public const int SniperInaccuracyLandFieldNumber = 5;
    private float sniperInaccuracyLand_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperInaccuracyLand {
      get { return sniperInaccuracyLand_; }
      set {
        sniperInaccuracyLand_ = value;
      }
    }

    /// <summary>Field number for the "SniperInaccuracyLadder" field.</summary>
    public const int SniperInaccuracyLadderFieldNumber = 6;
    private float sniperInaccuracyLadder_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperInaccuracyLadder {
      get { return sniperInaccuracyLadder_; }
      set {
        sniperInaccuracyLadder_ = value;
      }
    }

    /// <summary>Field number for the "SniperInaccuracyFire" field.</summary>
    public const int SniperInaccuracyFireFieldNumber = 7;
    private float sniperInaccuracyFire_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperInaccuracyFire {
      get { return sniperInaccuracyFire_; }
      set {
        sniperInaccuracyFire_ = value;
      }
    }

    /// <summary>Field number for the "SniperInaccuracyMove" field.</summary>
    public const int SniperInaccuracyMoveFieldNumber = 8;
    private float sniperInaccuracyMove_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperInaccuracyMove {
      get { return sniperInaccuracyMove_; }
      set {
        sniperInaccuracyMove_ = value;
      }
    }

    /// <summary>Field number for the "SniperSpreadAlt" field.</summary>
    public const int SniperSpreadAltFieldNumber = 9;
    private float sniperSpreadAlt_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperSpreadAlt {
      get { return sniperSpreadAlt_; }
      set {
        sniperSpreadAlt_ = value;
      }
    }

    /// <summary>Field number for the "SniperInaccuracyCrouchAlt" field.</summary>
    public const int SniperInaccuracyCrouchAltFieldNumber = 10;
    private float sniperInaccuracyCrouchAlt_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperInaccuracyCrouchAlt {
      get { return sniperInaccuracyCrouchAlt_; }
      set {
        sniperInaccuracyCrouchAlt_ = value;
      }
    }

    /// <summary>Field number for the "SniperInaccuracyStandAlt" field.</summary>
    public const int SniperInaccuracyStandAltFieldNumber = 11;
    private float sniperInaccuracyStandAlt_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperInaccuracyStandAlt {
      get { return sniperInaccuracyStandAlt_; }
      set {
        sniperInaccuracyStandAlt_ = value;
      }
    }

    /// <summary>Field number for the "SniperInaccuracyJumpAlt" field.</summary>
    public const int SniperInaccuracyJumpAltFieldNumber = 12;
    private float sniperInaccuracyJumpAlt_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperInaccuracyJumpAlt {
      get { return sniperInaccuracyJumpAlt_; }
      set {
        sniperInaccuracyJumpAlt_ = value;
      }
    }

    /// <summary>Field number for the "SniperInaccuracyLandAlt" field.</summary>
    public const int SniperInaccuracyLandAltFieldNumber = 13;
    private float sniperInaccuracyLandAlt_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperInaccuracyLandAlt {
      get { return sniperInaccuracyLandAlt_; }
      set {
        sniperInaccuracyLandAlt_ = value;
      }
    }

    /// <summary>Field number for the "SniperInaccuracyLadderAlt" field.</summary>
    public const int SniperInaccuracyLadderAltFieldNumber = 14;
    private float sniperInaccuracyLadderAlt_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperInaccuracyLadderAlt {
      get { return sniperInaccuracyLadderAlt_; }
      set {
        sniperInaccuracyLadderAlt_ = value;
      }
    }

    /// <summary>Field number for the "SniperInaccuracyFireAlt" field.</summary>
    public const int SniperInaccuracyFireAltFieldNumber = 15;
    private float sniperInaccuracyFireAlt_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperInaccuracyFireAlt {
      get { return sniperInaccuracyFireAlt_; }
      set {
        sniperInaccuracyFireAlt_ = value;
      }
    }

    /// <summary>Field number for the "SniperInaccuracyMoveAlt" field.</summary>
    public const int SniperInaccuracyMoveAltFieldNumber = 16;
    private float sniperInaccuracyMoveAlt_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperInaccuracyMoveAlt {
      get { return sniperInaccuracyMoveAlt_; }
      set {
        sniperInaccuracyMoveAlt_ = value;
      }
    }

    /// <summary>Field number for the "EnableContinuousFire" field.</summary>
    public const int EnableContinuousFireFieldNumber = 17;
    private bool enableContinuousFire_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableContinuousFire {
      get { return enableContinuousFire_; }
      set {
        enableContinuousFire_ = value;
      }
    }

    /// <summary>Field number for the "ZoomInFOVRate" field.</summary>
    public const int ZoomInFOVRateFieldNumber = 18;
    private float zoomInFOVRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZoomInFOVRate {
      get { return zoomInFOVRate_; }
      set {
        zoomInFOVRate_ = value;
      }
    }

    /// <summary>Field number for the "ZoomOutFOVRate" field.</summary>
    public const int ZoomOutFOVRateFieldNumber = 19;
    private float zoomOutFOVRate_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZoomOutFOVRate {
      get { return zoomOutFOVRate_; }
      set {
        zoomOutFOVRate_ = value;
      }
    }

    /// <summary>Field number for the "X1FOV" field.</summary>
    public const int X1FOVFieldNumber = 20;
    private float x1FOV_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X1FOV {
      get { return x1FOV_; }
      set {
        x1FOV_ = value;
      }
    }

    /// <summary>Field number for the "X2FOV" field.</summary>
    public const int X2FOVFieldNumber = 21;
    private float x2FOV_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X2FOV {
      get { return x2FOV_; }
      set {
        x2FOV_ = value;
      }
    }

    /// <summary>Field number for the "ZoomTimes" field.</summary>
    public const int ZoomTimesFieldNumber = 22;
    private float zoomTimes_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZoomTimes {
      get { return zoomTimes_; }
      set {
        zoomTimes_ = value;
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 23;
    private global::D11.Pjson.WeaponFireLogicInstantConfigData parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.WeaponFireLogicInstantConfigData Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponFireLogicSniperInstantConfigData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponFireLogicSniperInstantConfigData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperSpread, other.SniperSpread)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperInaccuracyCrouch, other.SniperInaccuracyCrouch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperInaccuracyStand, other.SniperInaccuracyStand)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperInaccuracyJump, other.SniperInaccuracyJump)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperInaccuracyLand, other.SniperInaccuracyLand)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperInaccuracyLadder, other.SniperInaccuracyLadder)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperInaccuracyFire, other.SniperInaccuracyFire)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperInaccuracyMove, other.SniperInaccuracyMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperSpreadAlt, other.SniperSpreadAlt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperInaccuracyCrouchAlt, other.SniperInaccuracyCrouchAlt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperInaccuracyStandAlt, other.SniperInaccuracyStandAlt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperInaccuracyJumpAlt, other.SniperInaccuracyJumpAlt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperInaccuracyLandAlt, other.SniperInaccuracyLandAlt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperInaccuracyLadderAlt, other.SniperInaccuracyLadderAlt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperInaccuracyFireAlt, other.SniperInaccuracyFireAlt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperInaccuracyMoveAlt, other.SniperInaccuracyMoveAlt)) return false;
      if (EnableContinuousFire != other.EnableContinuousFire) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ZoomInFOVRate, other.ZoomInFOVRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ZoomOutFOVRate, other.ZoomOutFOVRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X1FOV, other.X1FOV)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X2FOV, other.X2FOV)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ZoomTimes, other.ZoomTimes)) return false;
      if (!object.Equals(Parent, other.Parent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SniperSpread != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperSpread);
      if (SniperInaccuracyCrouch != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperInaccuracyCrouch);
      if (SniperInaccuracyStand != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperInaccuracyStand);
      if (SniperInaccuracyJump != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperInaccuracyJump);
      if (SniperInaccuracyLand != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperInaccuracyLand);
      if (SniperInaccuracyLadder != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperInaccuracyLadder);
      if (SniperInaccuracyFire != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperInaccuracyFire);
      if (SniperInaccuracyMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperInaccuracyMove);
      if (SniperSpreadAlt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperSpreadAlt);
      if (SniperInaccuracyCrouchAlt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperInaccuracyCrouchAlt);
      if (SniperInaccuracyStandAlt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperInaccuracyStandAlt);
      if (SniperInaccuracyJumpAlt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperInaccuracyJumpAlt);
      if (SniperInaccuracyLandAlt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperInaccuracyLandAlt);
      if (SniperInaccuracyLadderAlt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperInaccuracyLadderAlt);
      if (SniperInaccuracyFireAlt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperInaccuracyFireAlt);
      if (SniperInaccuracyMoveAlt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperInaccuracyMoveAlt);
      if (EnableContinuousFire != false) hash ^= EnableContinuousFire.GetHashCode();
      if (ZoomInFOVRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ZoomInFOVRate);
      if (ZoomOutFOVRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ZoomOutFOVRate);
      if (X1FOV != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X1FOV);
      if (X2FOV != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X2FOV);
      if (ZoomTimes != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ZoomTimes);
      if (parent_ != null) hash ^= Parent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SniperSpread != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(SniperSpread);
      }
      if (SniperInaccuracyCrouch != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SniperInaccuracyCrouch);
      }
      if (SniperInaccuracyStand != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SniperInaccuracyStand);
      }
      if (SniperInaccuracyJump != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(SniperInaccuracyJump);
      }
      if (SniperInaccuracyLand != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SniperInaccuracyLand);
      }
      if (SniperInaccuracyLadder != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(SniperInaccuracyLadder);
      }
      if (SniperInaccuracyFire != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(SniperInaccuracyFire);
      }
      if (SniperInaccuracyMove != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(SniperInaccuracyMove);
      }
      if (SniperSpreadAlt != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(SniperSpreadAlt);
      }
      if (SniperInaccuracyCrouchAlt != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(SniperInaccuracyCrouchAlt);
      }
      if (SniperInaccuracyStandAlt != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(SniperInaccuracyStandAlt);
      }
      if (SniperInaccuracyJumpAlt != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(SniperInaccuracyJumpAlt);
      }
      if (SniperInaccuracyLandAlt != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(SniperInaccuracyLandAlt);
      }
      if (SniperInaccuracyLadderAlt != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(SniperInaccuracyLadderAlt);
      }
      if (SniperInaccuracyFireAlt != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(SniperInaccuracyFireAlt);
      }
      if (SniperInaccuracyMoveAlt != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(SniperInaccuracyMoveAlt);
      }
      if (EnableContinuousFire != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(EnableContinuousFire);
      }
      if (ZoomInFOVRate != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(ZoomInFOVRate);
      }
      if (ZoomOutFOVRate != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(ZoomOutFOVRate);
      }
      if (X1FOV != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(X1FOV);
      }
      if (X2FOV != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(X2FOV);
      }
      if (ZoomTimes != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(ZoomTimes);
      }
      if (parent_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Parent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SniperSpread != 0F) {
        size += 1 + 4;
      }
      if (SniperInaccuracyCrouch != 0F) {
        size += 1 + 4;
      }
      if (SniperInaccuracyStand != 0F) {
        size += 1 + 4;
      }
      if (SniperInaccuracyJump != 0F) {
        size += 1 + 4;
      }
      if (SniperInaccuracyLand != 0F) {
        size += 1 + 4;
      }
      if (SniperInaccuracyLadder != 0F) {
        size += 1 + 4;
      }
      if (SniperInaccuracyFire != 0F) {
        size += 1 + 4;
      }
      if (SniperInaccuracyMove != 0F) {
        size += 1 + 4;
      }
      if (SniperSpreadAlt != 0F) {
        size += 1 + 4;
      }
      if (SniperInaccuracyCrouchAlt != 0F) {
        size += 1 + 4;
      }
      if (SniperInaccuracyStandAlt != 0F) {
        size += 1 + 4;
      }
      if (SniperInaccuracyJumpAlt != 0F) {
        size += 1 + 4;
      }
      if (SniperInaccuracyLandAlt != 0F) {
        size += 1 + 4;
      }
      if (SniperInaccuracyLadderAlt != 0F) {
        size += 1 + 4;
      }
      if (SniperInaccuracyFireAlt != 0F) {
        size += 1 + 4;
      }
      if (SniperInaccuracyMoveAlt != 0F) {
        size += 2 + 4;
      }
      if (EnableContinuousFire != false) {
        size += 2 + 1;
      }
      if (ZoomInFOVRate != 0F) {
        size += 2 + 4;
      }
      if (ZoomOutFOVRate != 0F) {
        size += 2 + 4;
      }
      if (X1FOV != 0F) {
        size += 2 + 4;
      }
      if (X2FOV != 0F) {
        size += 2 + 4;
      }
      if (ZoomTimes != 0F) {
        size += 2 + 4;
      }
      if (parent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponFireLogicSniperInstantConfigData other) {
      if (other == null) {
        return;
      }
      if (other.SniperSpread != 0F) {
        SniperSpread = other.SniperSpread;
      }
      if (other.SniperInaccuracyCrouch != 0F) {
        SniperInaccuracyCrouch = other.SniperInaccuracyCrouch;
      }
      if (other.SniperInaccuracyStand != 0F) {
        SniperInaccuracyStand = other.SniperInaccuracyStand;
      }
      if (other.SniperInaccuracyJump != 0F) {
        SniperInaccuracyJump = other.SniperInaccuracyJump;
      }
      if (other.SniperInaccuracyLand != 0F) {
        SniperInaccuracyLand = other.SniperInaccuracyLand;
      }
      if (other.SniperInaccuracyLadder != 0F) {
        SniperInaccuracyLadder = other.SniperInaccuracyLadder;
      }
      if (other.SniperInaccuracyFire != 0F) {
        SniperInaccuracyFire = other.SniperInaccuracyFire;
      }
      if (other.SniperInaccuracyMove != 0F) {
        SniperInaccuracyMove = other.SniperInaccuracyMove;
      }
      if (other.SniperSpreadAlt != 0F) {
        SniperSpreadAlt = other.SniperSpreadAlt;
      }
      if (other.SniperInaccuracyCrouchAlt != 0F) {
        SniperInaccuracyCrouchAlt = other.SniperInaccuracyCrouchAlt;
      }
      if (other.SniperInaccuracyStandAlt != 0F) {
        SniperInaccuracyStandAlt = other.SniperInaccuracyStandAlt;
      }
      if (other.SniperInaccuracyJumpAlt != 0F) {
        SniperInaccuracyJumpAlt = other.SniperInaccuracyJumpAlt;
      }
      if (other.SniperInaccuracyLandAlt != 0F) {
        SniperInaccuracyLandAlt = other.SniperInaccuracyLandAlt;
      }
      if (other.SniperInaccuracyLadderAlt != 0F) {
        SniperInaccuracyLadderAlt = other.SniperInaccuracyLadderAlt;
      }
      if (other.SniperInaccuracyFireAlt != 0F) {
        SniperInaccuracyFireAlt = other.SniperInaccuracyFireAlt;
      }
      if (other.SniperInaccuracyMoveAlt != 0F) {
        SniperInaccuracyMoveAlt = other.SniperInaccuracyMoveAlt;
      }
      if (other.EnableContinuousFire != false) {
        EnableContinuousFire = other.EnableContinuousFire;
      }
      if (other.ZoomInFOVRate != 0F) {
        ZoomInFOVRate = other.ZoomInFOVRate;
      }
      if (other.ZoomOutFOVRate != 0F) {
        ZoomOutFOVRate = other.ZoomOutFOVRate;
      }
      if (other.X1FOV != 0F) {
        X1FOV = other.X1FOV;
      }
      if (other.X2FOV != 0F) {
        X2FOV = other.X2FOV;
      }
      if (other.ZoomTimes != 0F) {
        ZoomTimes = other.ZoomTimes;
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::D11.Pjson.WeaponFireLogicInstantConfigData();
        }
        Parent.MergeFrom(other.Parent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            SniperSpread = input.ReadFloat();
            break;
          }
          case 21: {
            SniperInaccuracyCrouch = input.ReadFloat();
            break;
          }
          case 29: {
            SniperInaccuracyStand = input.ReadFloat();
            break;
          }
          case 37: {
            SniperInaccuracyJump = input.ReadFloat();
            break;
          }
          case 45: {
            SniperInaccuracyLand = input.ReadFloat();
            break;
          }
          case 53: {
            SniperInaccuracyLadder = input.ReadFloat();
            break;
          }
          case 61: {
            SniperInaccuracyFire = input.ReadFloat();
            break;
          }
          case 69: {
            SniperInaccuracyMove = input.ReadFloat();
            break;
          }
          case 77: {
            SniperSpreadAlt = input.ReadFloat();
            break;
          }
          case 85: {
            SniperInaccuracyCrouchAlt = input.ReadFloat();
            break;
          }
          case 93: {
            SniperInaccuracyStandAlt = input.ReadFloat();
            break;
          }
          case 101: {
            SniperInaccuracyJumpAlt = input.ReadFloat();
            break;
          }
          case 109: {
            SniperInaccuracyLandAlt = input.ReadFloat();
            break;
          }
          case 117: {
            SniperInaccuracyLadderAlt = input.ReadFloat();
            break;
          }
          case 125: {
            SniperInaccuracyFireAlt = input.ReadFloat();
            break;
          }
          case 133: {
            SniperInaccuracyMoveAlt = input.ReadFloat();
            break;
          }
          case 136: {
            EnableContinuousFire = input.ReadBool();
            break;
          }
          case 149: {
            ZoomInFOVRate = input.ReadFloat();
            break;
          }
          case 157: {
            ZoomOutFOVRate = input.ReadFloat();
            break;
          }
          case 165: {
            X1FOV = input.ReadFloat();
            break;
          }
          case 173: {
            X2FOV = input.ReadFloat();
            break;
          }
          case 181: {
            ZoomTimes = input.ReadFloat();
            break;
          }
          case 186: {
            if (parent_ == null) {
              Parent = new global::D11.Pjson.WeaponFireLogicInstantConfigData();
            }
            input.ReadMessage(Parent);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
