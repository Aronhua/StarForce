// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WeaponFireLogicTaserConfigData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from WeaponFireLogicTaserConfigData.proto</summary>
  public static partial class WeaponFireLogicTaserConfigDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WeaponFireLogicTaserConfigData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeaponFireLogicTaserConfigDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRXZWFwb25GaXJlTG9naWNUYXNlckNvbmZpZ0RhdGEucHJvdG8SCUQxMS5Q",
            "anNvbhodQmFzZUZpcmVMb2dpY0NvbmZpZ0RhdGEucHJvdG8i6gEKHldlYXBv",
            "bkZpcmVMb2dpY1Rhc2VyQ29uZmlnRGF0YRITCgtBdHRhY2tBbmdlchgBIAEo",
            "AhIUCgxBdHRhY2tMZW5ndGgYAiABKAISGAoQQXR0YWNrRW5lbXlDb3VudBgD",
            "IAEoBRIUCgxDaGFyZ2luZ1RpbWUYBCABKAISFQoNU2hvd0FtbW9Db3VudBgF",
            "IAEoCBIiChpTaG93QW1tb0NvdW50SW5XYXRjaEJhdHRsZRgGIAEoCBIyCgZw",
            "YXJlbnQYByABKAsyIi5EMTEuUGpzb24uQmFzZUZpcmVMb2dpY0NvbmZpZ0Rh",
            "dGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D11.Pjson.BaseFireLogicConfigDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.WeaponFireLogicTaserConfigData), global::D11.Pjson.WeaponFireLogicTaserConfigData.Parser, new[]{ "AttackAnger", "AttackLength", "AttackEnemyCount", "ChargingTime", "ShowAmmoCount", "ShowAmmoCountInWatchBattle", "Parent" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponFireLogicTaserConfigData : pb::IMessage<WeaponFireLogicTaserConfigData> {
    private static readonly pb::MessageParser<WeaponFireLogicTaserConfigData> _parser = new pb::MessageParser<WeaponFireLogicTaserConfigData>(() => new WeaponFireLogicTaserConfigData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponFireLogicTaserConfigData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.WeaponFireLogicTaserConfigDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicTaserConfigData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicTaserConfigData(WeaponFireLogicTaserConfigData other) : this() {
      attackAnger_ = other.attackAnger_;
      attackLength_ = other.attackLength_;
      attackEnemyCount_ = other.attackEnemyCount_;
      chargingTime_ = other.chargingTime_;
      showAmmoCount_ = other.showAmmoCount_;
      showAmmoCountInWatchBattle_ = other.showAmmoCountInWatchBattle_;
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponFireLogicTaserConfigData Clone() {
      return new WeaponFireLogicTaserConfigData(this);
    }

    /// <summary>Field number for the "AttackAnger" field.</summary>
    public const int AttackAngerFieldNumber = 1;
    private float attackAnger_;
    /// <summary>
    /// 攻击弧形角度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackAnger {
      get { return attackAnger_; }
      set {
        attackAnger_ = value;
      }
    }

    /// <summary>Field number for the "AttackLength" field.</summary>
    public const int AttackLengthFieldNumber = 2;
    private float attackLength_;
    /// <summary>
    /// 攻击弧形半径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackLength {
      get { return attackLength_; }
      set {
        attackLength_ = value;
      }
    }

    /// <summary>Field number for the "AttackEnemyCount" field.</summary>
    public const int AttackEnemyCountFieldNumber = 3;
    private int attackEnemyCount_;
    /// <summary>
    /// 攻击敌人数量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackEnemyCount {
      get { return attackEnemyCount_; }
      set {
        attackEnemyCount_ = value;
      }
    }

    /// <summary>Field number for the "ChargingTime" field.</summary>
    public const int ChargingTimeFieldNumber = 4;
    private float chargingTime_;
    /// <summary>
    /// 充能时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChargingTime {
      get { return chargingTime_; }
      set {
        chargingTime_ = value;
      }
    }

    /// <summary>Field number for the "ShowAmmoCount" field.</summary>
    public const int ShowAmmoCountFieldNumber = 5;
    private bool showAmmoCount_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowAmmoCount {
      get { return showAmmoCount_; }
      set {
        showAmmoCount_ = value;
      }
    }

    /// <summary>Field number for the "ShowAmmoCountInWatchBattle" field.</summary>
    public const int ShowAmmoCountInWatchBattleFieldNumber = 6;
    private bool showAmmoCountInWatchBattle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowAmmoCountInWatchBattle {
      get { return showAmmoCountInWatchBattle_; }
      set {
        showAmmoCountInWatchBattle_ = value;
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 7;
    private global::D11.Pjson.BaseFireLogicConfigData parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.BaseFireLogicConfigData Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponFireLogicTaserConfigData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponFireLogicTaserConfigData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackAnger, other.AttackAnger)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackLength, other.AttackLength)) return false;
      if (AttackEnemyCount != other.AttackEnemyCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChargingTime, other.ChargingTime)) return false;
      if (ShowAmmoCount != other.ShowAmmoCount) return false;
      if (ShowAmmoCountInWatchBattle != other.ShowAmmoCountInWatchBattle) return false;
      if (!object.Equals(Parent, other.Parent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttackAnger != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackAnger);
      if (AttackLength != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackLength);
      if (AttackEnemyCount != 0) hash ^= AttackEnemyCount.GetHashCode();
      if (ChargingTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChargingTime);
      if (ShowAmmoCount != false) hash ^= ShowAmmoCount.GetHashCode();
      if (ShowAmmoCountInWatchBattle != false) hash ^= ShowAmmoCountInWatchBattle.GetHashCode();
      if (parent_ != null) hash ^= Parent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttackAnger != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(AttackAnger);
      }
      if (AttackLength != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(AttackLength);
      }
      if (AttackEnemyCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AttackEnemyCount);
      }
      if (ChargingTime != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ChargingTime);
      }
      if (ShowAmmoCount != false) {
        output.WriteRawTag(40);
        output.WriteBool(ShowAmmoCount);
      }
      if (ShowAmmoCountInWatchBattle != false) {
        output.WriteRawTag(48);
        output.WriteBool(ShowAmmoCountInWatchBattle);
      }
      if (parent_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Parent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttackAnger != 0F) {
        size += 1 + 4;
      }
      if (AttackLength != 0F) {
        size += 1 + 4;
      }
      if (AttackEnemyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackEnemyCount);
      }
      if (ChargingTime != 0F) {
        size += 1 + 4;
      }
      if (ShowAmmoCount != false) {
        size += 1 + 1;
      }
      if (ShowAmmoCountInWatchBattle != false) {
        size += 1 + 1;
      }
      if (parent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponFireLogicTaserConfigData other) {
      if (other == null) {
        return;
      }
      if (other.AttackAnger != 0F) {
        AttackAnger = other.AttackAnger;
      }
      if (other.AttackLength != 0F) {
        AttackLength = other.AttackLength;
      }
      if (other.AttackEnemyCount != 0) {
        AttackEnemyCount = other.AttackEnemyCount;
      }
      if (other.ChargingTime != 0F) {
        ChargingTime = other.ChargingTime;
      }
      if (other.ShowAmmoCount != false) {
        ShowAmmoCount = other.ShowAmmoCount;
      }
      if (other.ShowAmmoCountInWatchBattle != false) {
        ShowAmmoCountInWatchBattle = other.ShowAmmoCountInWatchBattle;
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::D11.Pjson.BaseFireLogicConfigData();
        }
        Parent.MergeFrom(other.Parent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            AttackAnger = input.ReadFloat();
            break;
          }
          case 21: {
            AttackLength = input.ReadFloat();
            break;
          }
          case 24: {
            AttackEnemyCount = input.ReadInt32();
            break;
          }
          case 37: {
            ChargingTime = input.ReadFloat();
            break;
          }
          case 40: {
            ShowAmmoCount = input.ReadBool();
            break;
          }
          case 48: {
            ShowAmmoCountInWatchBattle = input.ReadBool();
            break;
          }
          case 58: {
            if (parent_ == null) {
              Parent = new global::D11.Pjson.BaseFireLogicConfigData();
            }
            input.ReadMessage(Parent);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
