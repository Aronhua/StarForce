// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WeaponPersistenceConfigC4BombData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from WeaponPersistenceConfigC4BombData.proto</summary>
  public static partial class WeaponPersistenceConfigC4BombDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WeaponPersistenceConfigC4BombData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeaponPersistenceConfigC4BombDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CidXZWFwb25QZXJzaXN0ZW5jZUNvbmZpZ0M0Qm9tYkRhdGEucHJvdG8SCUQx",
            "MS5QanNvbhoOUGJWZWN0b3IucHJvdG8aKldlYXBvblBlcnNpc3RlbmNlQ29u",
            "ZmlnQ29tcG9uZW50RGF0YS5wcm90byKRDAohV2VhcG9uUGVyc2lzdGVuY2VD",
            "b25maWdDNEJvbWJEYXRhEh0KFUM0Qm9tYkluaXRpYXRlU291bmRGcBgBIAEo",
            "CRIdChVDNEJvbWJJbml0aWF0ZVNvdW5kVHAYAiABKAkSIgoaQ2xvc2VDNEJv",
            "bWJJbml0aWF0ZVNvdW5kRnAYAyABKAkSIgoaQ2xvc2VDNEJvbWJJbml0aWF0",
            "ZVNvdW5kVHAYBCABKAkSGAoQQzRCb21iS2V5UHJlc3NGcBgFIAEoCRIcChRT",
            "dG9wQzRCb21iS2V5UHJlc3NGcBgGIAEoCRIgChhDNEJvbWJEaXNhcm1TdGFy",
            "dFNvdW5kRnAYByABKAkSIAoYQzRCb21iRGlzYXJtU3RhcnRTb3VuZFRwGAgg",
            "ASgJEiEKGUM0Qm9tYkRpc2FybUZpbmlzaFNvdW5kRnAYCSABKAkSIQoZQzRC",
            "b21iRGlzYXJtRmluaXNoU291bmRUcBgKIAEoCRIkChxTdG9wQzRCb21iRGlz",
            "YXJtU3RhcnRTb3VuZEZwGAsgASgJEiQKHFN0b3BDNEJvbWJEaXNhcm1TdGFy",
            "dFNvdW5kVHAYDCABKAkSJQodU3RvcEM0Qm9tYkRpc2FybUZpbmlzaFNvdW5k",
            "RnAYDSABKAkSJQodU3RvcEM0Qm9tYkRpc2FybUZpbmlzaFNvdW5kVHAYDiAB",
            "KAkSGgoSQzRCb21iRXhwbG9kZVNvdW5kGA8gASgJEiUKHUM0Qm9tYkV4cGxv",
            "ZGVUcmlnZ2VyVHJpcFNvdW5kGBAgASgJEiEKGUM0Qm9tYkV4cGxvZGVXYXJu",
            "aW5nU291bmQYESABKAkSIQoZQzRCb21iUGxhbnRCZWVwQ2xvc2VTb3VuZBgS",
            "IAEoCRIfChdDNEJvbWJQbGFudEJlZXBNaWRTb3VuZBgTIAEoCRIfChdDNEJv",
            "bWJQbGFudEJlZXBGYXJTb3VuZBgUIAEoCRIbChNDNEJvbWJQbGFudEJlZXBS",
            "VFBDGBUgASgJEiMKG0M0Qm9tYlBsYW50QmVlcEludGVydmFsVGltZRgWIAEo",
            "AhIcChRDNEJvbWJQbGFudEFuaUxlbmd0aBgXIAEoAhIiChpDNEJvbWJJbml0",
            "aWF0ZUZpbmlzaGVkVGltZRgYIAEoAhIjChtDNEJvbWJEaXNhcm1GaW5pc2hT",
            "b3VuZFRpbWUYGSABKAISJAocQzRCb21iRXhwbG9kZVRyaWdnZXJUcmlwVGlt",
            "ZRgaIAEoAhIgChhDNEJvbWJFeHBsb2RlV2FybmluZ1RpbWUYGyABKAISGwoT",
            "QzRCb21iUGlja1VwU291bmRGcBgcIAEoCRIbChNDNEJvbWJQaWNrVXBTb3Vu",
            "ZFRwGB0gASgJEhYKDk11bHRpbWV0ZXJOYW1lGB4gASgJEh0KFU11bHRpbWV0",
            "ZXJBdHRhY2htZW50QRgfIAEoCRIdChVNdWx0aW1ldGVyQXR0YWNobWVudEIY",
            "ICABKAkSKwoNTXVsdGltZXRlclBvcxghIAEoCzIULkQxMS5QanNvbi5QYlZl",
            "Y3RvcjMSMAoSTXVsdGltZXRlclJvdGF0aW9uGCIgASgLMhQuRDExLlBqc29u",
            "LlBiVmVjdG9yMxIZChFDNEJvbWJBdHRhY2htZW50QRgjIAEoCRIZChFDNEJv",
            "bWJBdHRhY2htZW50QhgkIAEoCRIcChRDYW1lcmFTaGFrZUFzc2V0TmFtZRgl",
            "IAEoCRIWCg5BbXBsaXR1ZGVSYW5nZRgmIAEoAhIdChVFeHBsb2RlUmluZ0F1",
            "ZGlvUm5hZ2UYJyABKAISGAoQTWF4UmluZ0F1ZGlvVGltZRgoIAEoAhIYChBN",
            "aW5SaW5nQXVkaW9UaW1lGCkgASgCEiAKGFBsYXlFeHBsb2RlUmluZ0F1ZGlv",
            "TmFtZRgqIAEoCRIgChhTdG9wRXhwbG9kZVJpbmdBdWRpb05hbWUYKyABKAkS",
            "GwoTRXhwbG9kZVJpbmdSVFBDTmFtZRgsIAEoCRI/CgZwYXJlbnQYLSABKAsy",
            "Ly5EMTEuUGpzb24uV2VhcG9uUGVyc2lzdGVuY2VDb25maWdDb21wb25lbnRE",
            "YXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D11.Pjson.PbVectorReflection.Descriptor, global::D11.Pjson.WeaponPersistenceConfigComponentDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.WeaponPersistenceConfigC4BombData), global::D11.Pjson.WeaponPersistenceConfigC4BombData.Parser, new[]{ "C4BombInitiateSoundFp", "C4BombInitiateSoundTp", "CloseC4BombInitiateSoundFp", "CloseC4BombInitiateSoundTp", "C4BombKeyPressFp", "StopC4BombKeyPressFp", "C4BombDisarmStartSoundFp", "C4BombDisarmStartSoundTp", "C4BombDisarmFinishSoundFp", "C4BombDisarmFinishSoundTp", "StopC4BombDisarmStartSoundFp", "StopC4BombDisarmStartSoundTp", "StopC4BombDisarmFinishSoundFp", "StopC4BombDisarmFinishSoundTp", "C4BombExplodeSound", "C4BombExplodeTriggerTripSound", "C4BombExplodeWarningSound", "C4BombPlantBeepCloseSound", "C4BombPlantBeepMidSound", "C4BombPlantBeepFarSound", "C4BombPlantBeepRTPC", "C4BombPlantBeepIntervalTime", "C4BombPlantAniLength", "C4BombInitiateFinishedTime", "C4BombDisarmFinishSoundTime", "C4BombExplodeTriggerTripTime", "C4BombExplodeWarningTime", "C4BombPickUpSoundFp", "C4BombPickUpSoundTp", "MultimeterName", "MultimeterAttachmentA", "MultimeterAttachmentB", "MultimeterPos", "MultimeterRotation", "C4BombAttachmentA", "C4BombAttachmentB", "CameraShakeAssetName", "AmplitudeRange", "ExplodeRingAudioRnage", "MaxRingAudioTime", "MinRingAudioTime", "PlayExplodeRingAudioName", "StopExplodeRingAudioName", "ExplodeRingRTPCName", "Parent" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponPersistenceConfigC4BombData : pb::IMessage<WeaponPersistenceConfigC4BombData> {
    private static readonly pb::MessageParser<WeaponPersistenceConfigC4BombData> _parser = new pb::MessageParser<WeaponPersistenceConfigC4BombData>(() => new WeaponPersistenceConfigC4BombData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponPersistenceConfigC4BombData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.WeaponPersistenceConfigC4BombDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPersistenceConfigC4BombData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPersistenceConfigC4BombData(WeaponPersistenceConfigC4BombData other) : this() {
      c4BombInitiateSoundFp_ = other.c4BombInitiateSoundFp_;
      c4BombInitiateSoundTp_ = other.c4BombInitiateSoundTp_;
      closeC4BombInitiateSoundFp_ = other.closeC4BombInitiateSoundFp_;
      closeC4BombInitiateSoundTp_ = other.closeC4BombInitiateSoundTp_;
      c4BombKeyPressFp_ = other.c4BombKeyPressFp_;
      stopC4BombKeyPressFp_ = other.stopC4BombKeyPressFp_;
      c4BombDisarmStartSoundFp_ = other.c4BombDisarmStartSoundFp_;
      c4BombDisarmStartSoundTp_ = other.c4BombDisarmStartSoundTp_;
      c4BombDisarmFinishSoundFp_ = other.c4BombDisarmFinishSoundFp_;
      c4BombDisarmFinishSoundTp_ = other.c4BombDisarmFinishSoundTp_;
      stopC4BombDisarmStartSoundFp_ = other.stopC4BombDisarmStartSoundFp_;
      stopC4BombDisarmStartSoundTp_ = other.stopC4BombDisarmStartSoundTp_;
      stopC4BombDisarmFinishSoundFp_ = other.stopC4BombDisarmFinishSoundFp_;
      stopC4BombDisarmFinishSoundTp_ = other.stopC4BombDisarmFinishSoundTp_;
      c4BombExplodeSound_ = other.c4BombExplodeSound_;
      c4BombExplodeTriggerTripSound_ = other.c4BombExplodeTriggerTripSound_;
      c4BombExplodeWarningSound_ = other.c4BombExplodeWarningSound_;
      c4BombPlantBeepCloseSound_ = other.c4BombPlantBeepCloseSound_;
      c4BombPlantBeepMidSound_ = other.c4BombPlantBeepMidSound_;
      c4BombPlantBeepFarSound_ = other.c4BombPlantBeepFarSound_;
      c4BombPlantBeepRTPC_ = other.c4BombPlantBeepRTPC_;
      c4BombPlantBeepIntervalTime_ = other.c4BombPlantBeepIntervalTime_;
      c4BombPlantAniLength_ = other.c4BombPlantAniLength_;
      c4BombInitiateFinishedTime_ = other.c4BombInitiateFinishedTime_;
      c4BombDisarmFinishSoundTime_ = other.c4BombDisarmFinishSoundTime_;
      c4BombExplodeTriggerTripTime_ = other.c4BombExplodeTriggerTripTime_;
      c4BombExplodeWarningTime_ = other.c4BombExplodeWarningTime_;
      c4BombPickUpSoundFp_ = other.c4BombPickUpSoundFp_;
      c4BombPickUpSoundTp_ = other.c4BombPickUpSoundTp_;
      multimeterName_ = other.multimeterName_;
      multimeterAttachmentA_ = other.multimeterAttachmentA_;
      multimeterAttachmentB_ = other.multimeterAttachmentB_;
      multimeterPos_ = other.multimeterPos_ != null ? other.multimeterPos_.Clone() : null;
      multimeterRotation_ = other.multimeterRotation_ != null ? other.multimeterRotation_.Clone() : null;
      c4BombAttachmentA_ = other.c4BombAttachmentA_;
      c4BombAttachmentB_ = other.c4BombAttachmentB_;
      cameraShakeAssetName_ = other.cameraShakeAssetName_;
      amplitudeRange_ = other.amplitudeRange_;
      explodeRingAudioRnage_ = other.explodeRingAudioRnage_;
      maxRingAudioTime_ = other.maxRingAudioTime_;
      minRingAudioTime_ = other.minRingAudioTime_;
      playExplodeRingAudioName_ = other.playExplodeRingAudioName_;
      stopExplodeRingAudioName_ = other.stopExplodeRingAudioName_;
      explodeRingRTPCName_ = other.explodeRingRTPCName_;
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPersistenceConfigC4BombData Clone() {
      return new WeaponPersistenceConfigC4BombData(this);
    }

    /// <summary>Field number for the "C4BombInitiateSoundFp" field.</summary>
    public const int C4BombInitiateSoundFpFieldNumber = 1;
    private string c4BombInitiateSoundFp_ = "";
    /// <summary>
    /// C4 initiate 起手安装炸弹的声音 1p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombInitiateSoundFp {
      get { return c4BombInitiateSoundFp_; }
      set {
        c4BombInitiateSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "C4BombInitiateSoundTp" field.</summary>
    public const int C4BombInitiateSoundTpFieldNumber = 2;
    private string c4BombInitiateSoundTp_ = "";
    /// <summary>
    /// C4 initiate 起手安装炸弹的声音 3p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombInitiateSoundTp {
      get { return c4BombInitiateSoundTp_; }
      set {
        c4BombInitiateSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CloseC4BombInitiateSoundFp" field.</summary>
    public const int CloseC4BombInitiateSoundFpFieldNumber = 3;
    private string closeC4BombInitiateSoundFp_ = "";
    /// <summary>
    /// C4 initiate 关闭起手安装炸弹的声音 1p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloseC4BombInitiateSoundFp {
      get { return closeC4BombInitiateSoundFp_; }
      set {
        closeC4BombInitiateSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CloseC4BombInitiateSoundTp" field.</summary>
    public const int CloseC4BombInitiateSoundTpFieldNumber = 4;
    private string closeC4BombInitiateSoundTp_ = "";
    /// <summary>
    /// C4 initiate 关闭起手安装炸弹的声音 3p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloseC4BombInitiateSoundTp {
      get { return closeC4BombInitiateSoundTp_; }
      set {
        closeC4BombInitiateSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "C4BombKeyPressFp" field.</summary>
    public const int C4BombKeyPressFpFieldNumber = 5;
    private string c4BombKeyPressFp_ = "";
    /// <summary>
    /// C4 输入密码  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombKeyPressFp {
      get { return c4BombKeyPressFp_; }
      set {
        c4BombKeyPressFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopC4BombKeyPressFp" field.</summary>
    public const int StopC4BombKeyPressFpFieldNumber = 6;
    private string stopC4BombKeyPressFp_ = "";
    /// <summary>
    /// C4 停止输入密码  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopC4BombKeyPressFp {
      get { return stopC4BombKeyPressFp_; }
      set {
        stopC4BombKeyPressFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "C4BombDisarmStartSoundFp" field.</summary>
    public const int C4BombDisarmStartSoundFpFieldNumber = 7;
    private string c4BombDisarmStartSoundFp_ = "";
    /// <summary>
    /// C4 拆包开始 1p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombDisarmStartSoundFp {
      get { return c4BombDisarmStartSoundFp_; }
      set {
        c4BombDisarmStartSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "C4BombDisarmStartSoundTp" field.</summary>
    public const int C4BombDisarmStartSoundTpFieldNumber = 8;
    private string c4BombDisarmStartSoundTp_ = "";
    /// <summary>
    /// C4 拆包开始 3p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombDisarmStartSoundTp {
      get { return c4BombDisarmStartSoundTp_; }
      set {
        c4BombDisarmStartSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "C4BombDisarmFinishSoundFp" field.</summary>
    public const int C4BombDisarmFinishSoundFpFieldNumber = 9;
    private string c4BombDisarmFinishSoundFp_ = "";
    /// <summary>
    /// C4 拆包最后 1p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombDisarmFinishSoundFp {
      get { return c4BombDisarmFinishSoundFp_; }
      set {
        c4BombDisarmFinishSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "C4BombDisarmFinishSoundTp" field.</summary>
    public const int C4BombDisarmFinishSoundTpFieldNumber = 10;
    private string c4BombDisarmFinishSoundTp_ = "";
    /// <summary>
    /// C4 拆包最后 3p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombDisarmFinishSoundTp {
      get { return c4BombDisarmFinishSoundTp_; }
      set {
        c4BombDisarmFinishSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopC4BombDisarmStartSoundFp" field.</summary>
    public const int StopC4BombDisarmStartSoundFpFieldNumber = 11;
    private string stopC4BombDisarmStartSoundFp_ = "";
    /// <summary>
    /// C4 stop 拆包开始 1p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopC4BombDisarmStartSoundFp {
      get { return stopC4BombDisarmStartSoundFp_; }
      set {
        stopC4BombDisarmStartSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopC4BombDisarmStartSoundTp" field.</summary>
    public const int StopC4BombDisarmStartSoundTpFieldNumber = 12;
    private string stopC4BombDisarmStartSoundTp_ = "";
    /// <summary>
    /// C4 stop 拆包开始 3p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopC4BombDisarmStartSoundTp {
      get { return stopC4BombDisarmStartSoundTp_; }
      set {
        stopC4BombDisarmStartSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopC4BombDisarmFinishSoundFp" field.</summary>
    public const int StopC4BombDisarmFinishSoundFpFieldNumber = 13;
    private string stopC4BombDisarmFinishSoundFp_ = "";
    /// <summary>
    /// C4 stop 拆包最后 1p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopC4BombDisarmFinishSoundFp {
      get { return stopC4BombDisarmFinishSoundFp_; }
      set {
        stopC4BombDisarmFinishSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopC4BombDisarmFinishSoundTp" field.</summary>
    public const int StopC4BombDisarmFinishSoundTpFieldNumber = 14;
    private string stopC4BombDisarmFinishSoundTp_ = "";
    /// <summary>
    /// C4 stop 拆包最后 3p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopC4BombDisarmFinishSoundTp {
      get { return stopC4BombDisarmFinishSoundTp_; }
      set {
        stopC4BombDisarmFinishSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "C4BombExplodeSound" field.</summary>
    public const int C4BombExplodeSoundFieldNumber = 15;
    private string c4BombExplodeSound_ = "";
    /// <summary>
    /// C4 爆炸 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombExplodeSound {
      get { return c4BombExplodeSound_; }
      set {
        c4BombExplodeSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "C4BombExplodeTriggerTripSound" field.</summary>
    public const int C4BombExplodeTriggerTripSoundFieldNumber = 16;
    private string c4BombExplodeTriggerTripSound_ = "";
    /// <summary>
    /// C4 爆炸触发声 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombExplodeTriggerTripSound {
      get { return c4BombExplodeTriggerTripSound_; }
      set {
        c4BombExplodeTriggerTripSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "C4BombExplodeWarningSound" field.</summary>
    public const int C4BombExplodeWarningSoundFieldNumber = 17;
    private string c4BombExplodeWarningSound_ = "";
    /// <summary>
    /// C4 爆炸警告声 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombExplodeWarningSound {
      get { return c4BombExplodeWarningSound_; }
      set {
        c4BombExplodeWarningSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "C4BombPlantBeepCloseSound" field.</summary>
    public const int C4BombPlantBeepCloseSoundFieldNumber = 18;
    private string c4BombPlantBeepCloseSound_ = "";
    /// <summary>
    /// C4 安装后的beep close 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombPlantBeepCloseSound {
      get { return c4BombPlantBeepCloseSound_; }
      set {
        c4BombPlantBeepCloseSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "C4BombPlantBeepMidSound" field.</summary>
    public const int C4BombPlantBeepMidSoundFieldNumber = 19;
    private string c4BombPlantBeepMidSound_ = "";
    /// <summary>
    /// C4 安装后的beep mid 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombPlantBeepMidSound {
      get { return c4BombPlantBeepMidSound_; }
      set {
        c4BombPlantBeepMidSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "C4BombPlantBeepFarSound" field.</summary>
    public const int C4BombPlantBeepFarSoundFieldNumber = 20;
    private string c4BombPlantBeepFarSound_ = "";
    /// <summary>
    /// C4 安装后的beep close 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombPlantBeepFarSound {
      get { return c4BombPlantBeepFarSound_; }
      set {
        c4BombPlantBeepFarSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "C4BombPlantBeepRTPC" field.</summary>
    public const int C4BombPlantBeepRTPCFieldNumber = 21;
    private string c4BombPlantBeepRTPC_ = "";
    /// <summary>
    /// C4 beep RTPC 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombPlantBeepRTPC {
      get { return c4BombPlantBeepRTPC_; }
      set {
        c4BombPlantBeepRTPC_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "C4BombPlantBeepIntervalTime" field.</summary>
    public const int C4BombPlantBeepIntervalTimeFieldNumber = 22;
    private float c4BombPlantBeepIntervalTime_;
    /// <summary>
    /// C4 beep 间隔 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4BombPlantBeepIntervalTime {
      get { return c4BombPlantBeepIntervalTime_; }
      set {
        c4BombPlantBeepIntervalTime_ = value;
      }
    }

    /// <summary>Field number for the "C4BombPlantAniLength" field.</summary>
    public const int C4BombPlantAniLengthFieldNumber = 23;
    private float c4BombPlantAniLength_;
    /// <summary>
    /// C4 安装 总长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4BombPlantAniLength {
      get { return c4BombPlantAniLength_; }
      set {
        c4BombPlantAniLength_ = value;
      }
    }

    /// <summary>Field number for the "C4BombInitiateFinishedTime" field.</summary>
    public const int C4BombInitiateFinishedTimeFieldNumber = 24;
    private float c4BombInitiateFinishedTime_;
    /// <summary>
    /// C4 initiate 结束时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4BombInitiateFinishedTime {
      get { return c4BombInitiateFinishedTime_; }
      set {
        c4BombInitiateFinishedTime_ = value;
      }
    }

    /// <summary>Field number for the "C4BombDisarmFinishSoundTime" field.</summary>
    public const int C4BombDisarmFinishSoundTimeFieldNumber = 25;
    private float c4BombDisarmFinishSoundTime_;
    /// <summary>
    /// C4 拆包结束音起始 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4BombDisarmFinishSoundTime {
      get { return c4BombDisarmFinishSoundTime_; }
      set {
        c4BombDisarmFinishSoundTime_ = value;
      }
    }

    /// <summary>Field number for the "C4BombExplodeTriggerTripTime" field.</summary>
    public const int C4BombExplodeTriggerTripTimeFieldNumber = 26;
    private float c4BombExplodeTriggerTripTime_;
    /// <summary>
    /// C4 触发爆炸帧 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4BombExplodeTriggerTripTime {
      get { return c4BombExplodeTriggerTripTime_; }
      set {
        c4BombExplodeTriggerTripTime_ = value;
      }
    }

    /// <summary>Field number for the "C4BombExplodeWarningTime" field.</summary>
    public const int C4BombExplodeWarningTimeFieldNumber = 27;
    private float c4BombExplodeWarningTime_;
    /// <summary>
    /// C4 即将爆炸警告 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float C4BombExplodeWarningTime {
      get { return c4BombExplodeWarningTime_; }
      set {
        c4BombExplodeWarningTime_ = value;
      }
    }

    /// <summary>Field number for the "C4BombPickUpSoundFp" field.</summary>
    public const int C4BombPickUpSoundFpFieldNumber = 28;
    private string c4BombPickUpSoundFp_ = "";
    /// <summary>
    /// C4 拾取 1p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombPickUpSoundFp {
      get { return c4BombPickUpSoundFp_; }
      set {
        c4BombPickUpSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "C4BombPickUpSoundTp" field.</summary>
    public const int C4BombPickUpSoundTpFieldNumber = 29;
    private string c4BombPickUpSoundTp_ = "";
    /// <summary>
    /// C4 拾取 3p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombPickUpSoundTp {
      get { return c4BombPickUpSoundTp_; }
      set {
        c4BombPickUpSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MultimeterName" field.</summary>
    public const int MultimeterNameFieldNumber = 30;
    private string multimeterName_ = "";
    /// <summary>
    /// 拆弹器对象 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MultimeterName {
      get { return multimeterName_; }
      set {
        multimeterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MultimeterAttachmentA" field.</summary>
    public const int MultimeterAttachmentAFieldNumber = 31;
    private string multimeterAttachmentA_ = "";
    /// <summary>
    /// 拆弹器挂点1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MultimeterAttachmentA {
      get { return multimeterAttachmentA_; }
      set {
        multimeterAttachmentA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MultimeterAttachmentB" field.</summary>
    public const int MultimeterAttachmentBFieldNumber = 32;
    private string multimeterAttachmentB_ = "";
    /// <summary>
    /// 拆弹器挂点2 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MultimeterAttachmentB {
      get { return multimeterAttachmentB_; }
      set {
        multimeterAttachmentB_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MultimeterPos" field.</summary>
    public const int MultimeterPosFieldNumber = 33;
    private global::D11.Pjson.PbVector3 multimeterPos_;
    /// <summary>
    /// 拆弹器 position 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.PbVector3 MultimeterPos {
      get { return multimeterPos_; }
      set {
        multimeterPos_ = value;
      }
    }

    /// <summary>Field number for the "MultimeterRotation" field.</summary>
    public const int MultimeterRotationFieldNumber = 34;
    private global::D11.Pjson.PbVector3 multimeterRotation_;
    /// <summary>
    /// 拆弹器 rotation 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.PbVector3 MultimeterRotation {
      get { return multimeterRotation_; }
      set {
        multimeterRotation_ = value;
      }
    }

    /// <summary>Field number for the "C4BombAttachmentA" field.</summary>
    public const int C4BombAttachmentAFieldNumber = 35;
    private string c4BombAttachmentA_ = "";
    /// <summary>
    /// C4挂点1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombAttachmentA {
      get { return c4BombAttachmentA_; }
      set {
        c4BombAttachmentA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "C4BombAttachmentB" field.</summary>
    public const int C4BombAttachmentBFieldNumber = 36;
    private string c4BombAttachmentB_ = "";
    /// <summary>
    /// C4挂点2 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string C4BombAttachmentB {
      get { return c4BombAttachmentB_; }
      set {
        c4BombAttachmentB_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CameraShakeAssetName" field.</summary>
    public const int CameraShakeAssetNameFieldNumber = 37;
    private string cameraShakeAssetName_ = "";
    /// <summary>
    /// 爆炸镜头晃动资源名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraShakeAssetName {
      get { return cameraShakeAssetName_; }
      set {
        cameraShakeAssetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AmplitudeRange" field.</summary>
    public const int AmplitudeRangeFieldNumber = 38;
    private float amplitudeRange_;
    /// <summary>
    /// 爆炸镜头振幅范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AmplitudeRange {
      get { return amplitudeRange_; }
      set {
        amplitudeRange_ = value;
      }
    }

    /// <summary>Field number for the "ExplodeRingAudioRnage" field.</summary>
    public const int ExplodeRingAudioRnageFieldNumber = 39;
    private float explodeRingAudioRnage_;
    /// <summary>
    /// 爆炸耳鸣音范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExplodeRingAudioRnage {
      get { return explodeRingAudioRnage_; }
      set {
        explodeRingAudioRnage_ = value;
      }
    }

    /// <summary>Field number for the "MaxRingAudioTime" field.</summary>
    public const int MaxRingAudioTimeFieldNumber = 40;
    private float maxRingAudioTime_;
    /// <summary>
    /// 爆炸耳鸣音最大时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxRingAudioTime {
      get { return maxRingAudioTime_; }
      set {
        maxRingAudioTime_ = value;
      }
    }

    /// <summary>Field number for the "MinRingAudioTime" field.</summary>
    public const int MinRingAudioTimeFieldNumber = 41;
    private float minRingAudioTime_;
    /// <summary>
    /// 爆炸耳鸣音最小时间 对应最大范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinRingAudioTime {
      get { return minRingAudioTime_; }
      set {
        minRingAudioTime_ = value;
      }
    }

    /// <summary>Field number for the "PlayExplodeRingAudioName" field.</summary>
    public const int PlayExplodeRingAudioNameFieldNumber = 42;
    private string playExplodeRingAudioName_ = "";
    /// <summary>
    /// play爆炸耳鸣音频名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayExplodeRingAudioName {
      get { return playExplodeRingAudioName_; }
      set {
        playExplodeRingAudioName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopExplodeRingAudioName" field.</summary>
    public const int StopExplodeRingAudioNameFieldNumber = 43;
    private string stopExplodeRingAudioName_ = "";
    /// <summary>
    /// stop爆炸耳鸣音频名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopExplodeRingAudioName {
      get { return stopExplodeRingAudioName_; }
      set {
        stopExplodeRingAudioName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ExplodeRingRTPCName" field.</summary>
    public const int ExplodeRingRTPCNameFieldNumber = 44;
    private string explodeRingRTPCName_ = "";
    /// <summary>
    /// 耳鸣音频rtpc 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExplodeRingRTPCName {
      get { return explodeRingRTPCName_; }
      set {
        explodeRingRTPCName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 45;
    private global::D11.Pjson.WeaponPersistenceConfigComponentData parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.WeaponPersistenceConfigComponentData Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponPersistenceConfigC4BombData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponPersistenceConfigC4BombData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (C4BombInitiateSoundFp != other.C4BombInitiateSoundFp) return false;
      if (C4BombInitiateSoundTp != other.C4BombInitiateSoundTp) return false;
      if (CloseC4BombInitiateSoundFp != other.CloseC4BombInitiateSoundFp) return false;
      if (CloseC4BombInitiateSoundTp != other.CloseC4BombInitiateSoundTp) return false;
      if (C4BombKeyPressFp != other.C4BombKeyPressFp) return false;
      if (StopC4BombKeyPressFp != other.StopC4BombKeyPressFp) return false;
      if (C4BombDisarmStartSoundFp != other.C4BombDisarmStartSoundFp) return false;
      if (C4BombDisarmStartSoundTp != other.C4BombDisarmStartSoundTp) return false;
      if (C4BombDisarmFinishSoundFp != other.C4BombDisarmFinishSoundFp) return false;
      if (C4BombDisarmFinishSoundTp != other.C4BombDisarmFinishSoundTp) return false;
      if (StopC4BombDisarmStartSoundFp != other.StopC4BombDisarmStartSoundFp) return false;
      if (StopC4BombDisarmStartSoundTp != other.StopC4BombDisarmStartSoundTp) return false;
      if (StopC4BombDisarmFinishSoundFp != other.StopC4BombDisarmFinishSoundFp) return false;
      if (StopC4BombDisarmFinishSoundTp != other.StopC4BombDisarmFinishSoundTp) return false;
      if (C4BombExplodeSound != other.C4BombExplodeSound) return false;
      if (C4BombExplodeTriggerTripSound != other.C4BombExplodeTriggerTripSound) return false;
      if (C4BombExplodeWarningSound != other.C4BombExplodeWarningSound) return false;
      if (C4BombPlantBeepCloseSound != other.C4BombPlantBeepCloseSound) return false;
      if (C4BombPlantBeepMidSound != other.C4BombPlantBeepMidSound) return false;
      if (C4BombPlantBeepFarSound != other.C4BombPlantBeepFarSound) return false;
      if (C4BombPlantBeepRTPC != other.C4BombPlantBeepRTPC) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4BombPlantBeepIntervalTime, other.C4BombPlantBeepIntervalTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4BombPlantAniLength, other.C4BombPlantAniLength)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4BombInitiateFinishedTime, other.C4BombInitiateFinishedTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4BombDisarmFinishSoundTime, other.C4BombDisarmFinishSoundTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4BombExplodeTriggerTripTime, other.C4BombExplodeTriggerTripTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(C4BombExplodeWarningTime, other.C4BombExplodeWarningTime)) return false;
      if (C4BombPickUpSoundFp != other.C4BombPickUpSoundFp) return false;
      if (C4BombPickUpSoundTp != other.C4BombPickUpSoundTp) return false;
      if (MultimeterName != other.MultimeterName) return false;
      if (MultimeterAttachmentA != other.MultimeterAttachmentA) return false;
      if (MultimeterAttachmentB != other.MultimeterAttachmentB) return false;
      if (!object.Equals(MultimeterPos, other.MultimeterPos)) return false;
      if (!object.Equals(MultimeterRotation, other.MultimeterRotation)) return false;
      if (C4BombAttachmentA != other.C4BombAttachmentA) return false;
      if (C4BombAttachmentB != other.C4BombAttachmentB) return false;
      if (CameraShakeAssetName != other.CameraShakeAssetName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AmplitudeRange, other.AmplitudeRange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExplodeRingAudioRnage, other.ExplodeRingAudioRnage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxRingAudioTime, other.MaxRingAudioTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinRingAudioTime, other.MinRingAudioTime)) return false;
      if (PlayExplodeRingAudioName != other.PlayExplodeRingAudioName) return false;
      if (StopExplodeRingAudioName != other.StopExplodeRingAudioName) return false;
      if (ExplodeRingRTPCName != other.ExplodeRingRTPCName) return false;
      if (!object.Equals(Parent, other.Parent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (C4BombInitiateSoundFp.Length != 0) hash ^= C4BombInitiateSoundFp.GetHashCode();
      if (C4BombInitiateSoundTp.Length != 0) hash ^= C4BombInitiateSoundTp.GetHashCode();
      if (CloseC4BombInitiateSoundFp.Length != 0) hash ^= CloseC4BombInitiateSoundFp.GetHashCode();
      if (CloseC4BombInitiateSoundTp.Length != 0) hash ^= CloseC4BombInitiateSoundTp.GetHashCode();
      if (C4BombKeyPressFp.Length != 0) hash ^= C4BombKeyPressFp.GetHashCode();
      if (StopC4BombKeyPressFp.Length != 0) hash ^= StopC4BombKeyPressFp.GetHashCode();
      if (C4BombDisarmStartSoundFp.Length != 0) hash ^= C4BombDisarmStartSoundFp.GetHashCode();
      if (C4BombDisarmStartSoundTp.Length != 0) hash ^= C4BombDisarmStartSoundTp.GetHashCode();
      if (C4BombDisarmFinishSoundFp.Length != 0) hash ^= C4BombDisarmFinishSoundFp.GetHashCode();
      if (C4BombDisarmFinishSoundTp.Length != 0) hash ^= C4BombDisarmFinishSoundTp.GetHashCode();
      if (StopC4BombDisarmStartSoundFp.Length != 0) hash ^= StopC4BombDisarmStartSoundFp.GetHashCode();
      if (StopC4BombDisarmStartSoundTp.Length != 0) hash ^= StopC4BombDisarmStartSoundTp.GetHashCode();
      if (StopC4BombDisarmFinishSoundFp.Length != 0) hash ^= StopC4BombDisarmFinishSoundFp.GetHashCode();
      if (StopC4BombDisarmFinishSoundTp.Length != 0) hash ^= StopC4BombDisarmFinishSoundTp.GetHashCode();
      if (C4BombExplodeSound.Length != 0) hash ^= C4BombExplodeSound.GetHashCode();
      if (C4BombExplodeTriggerTripSound.Length != 0) hash ^= C4BombExplodeTriggerTripSound.GetHashCode();
      if (C4BombExplodeWarningSound.Length != 0) hash ^= C4BombExplodeWarningSound.GetHashCode();
      if (C4BombPlantBeepCloseSound.Length != 0) hash ^= C4BombPlantBeepCloseSound.GetHashCode();
      if (C4BombPlantBeepMidSound.Length != 0) hash ^= C4BombPlantBeepMidSound.GetHashCode();
      if (C4BombPlantBeepFarSound.Length != 0) hash ^= C4BombPlantBeepFarSound.GetHashCode();
      if (C4BombPlantBeepRTPC.Length != 0) hash ^= C4BombPlantBeepRTPC.GetHashCode();
      if (C4BombPlantBeepIntervalTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4BombPlantBeepIntervalTime);
      if (C4BombPlantAniLength != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4BombPlantAniLength);
      if (C4BombInitiateFinishedTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4BombInitiateFinishedTime);
      if (C4BombDisarmFinishSoundTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4BombDisarmFinishSoundTime);
      if (C4BombExplodeTriggerTripTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4BombExplodeTriggerTripTime);
      if (C4BombExplodeWarningTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(C4BombExplodeWarningTime);
      if (C4BombPickUpSoundFp.Length != 0) hash ^= C4BombPickUpSoundFp.GetHashCode();
      if (C4BombPickUpSoundTp.Length != 0) hash ^= C4BombPickUpSoundTp.GetHashCode();
      if (MultimeterName.Length != 0) hash ^= MultimeterName.GetHashCode();
      if (MultimeterAttachmentA.Length != 0) hash ^= MultimeterAttachmentA.GetHashCode();
      if (MultimeterAttachmentB.Length != 0) hash ^= MultimeterAttachmentB.GetHashCode();
      if (multimeterPos_ != null) hash ^= MultimeterPos.GetHashCode();
      if (multimeterRotation_ != null) hash ^= MultimeterRotation.GetHashCode();
      if (C4BombAttachmentA.Length != 0) hash ^= C4BombAttachmentA.GetHashCode();
      if (C4BombAttachmentB.Length != 0) hash ^= C4BombAttachmentB.GetHashCode();
      if (CameraShakeAssetName.Length != 0) hash ^= CameraShakeAssetName.GetHashCode();
      if (AmplitudeRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AmplitudeRange);
      if (ExplodeRingAudioRnage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExplodeRingAudioRnage);
      if (MaxRingAudioTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxRingAudioTime);
      if (MinRingAudioTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinRingAudioTime);
      if (PlayExplodeRingAudioName.Length != 0) hash ^= PlayExplodeRingAudioName.GetHashCode();
      if (StopExplodeRingAudioName.Length != 0) hash ^= StopExplodeRingAudioName.GetHashCode();
      if (ExplodeRingRTPCName.Length != 0) hash ^= ExplodeRingRTPCName.GetHashCode();
      if (parent_ != null) hash ^= Parent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (C4BombInitiateSoundFp.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(C4BombInitiateSoundFp);
      }
      if (C4BombInitiateSoundTp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(C4BombInitiateSoundTp);
      }
      if (CloseC4BombInitiateSoundFp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CloseC4BombInitiateSoundFp);
      }
      if (CloseC4BombInitiateSoundTp.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CloseC4BombInitiateSoundTp);
      }
      if (C4BombKeyPressFp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(C4BombKeyPressFp);
      }
      if (StopC4BombKeyPressFp.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(StopC4BombKeyPressFp);
      }
      if (C4BombDisarmStartSoundFp.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(C4BombDisarmStartSoundFp);
      }
      if (C4BombDisarmStartSoundTp.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(C4BombDisarmStartSoundTp);
      }
      if (C4BombDisarmFinishSoundFp.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(C4BombDisarmFinishSoundFp);
      }
      if (C4BombDisarmFinishSoundTp.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(C4BombDisarmFinishSoundTp);
      }
      if (StopC4BombDisarmStartSoundFp.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(StopC4BombDisarmStartSoundFp);
      }
      if (StopC4BombDisarmStartSoundTp.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(StopC4BombDisarmStartSoundTp);
      }
      if (StopC4BombDisarmFinishSoundFp.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(StopC4BombDisarmFinishSoundFp);
      }
      if (StopC4BombDisarmFinishSoundTp.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(StopC4BombDisarmFinishSoundTp);
      }
      if (C4BombExplodeSound.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(C4BombExplodeSound);
      }
      if (C4BombExplodeTriggerTripSound.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(C4BombExplodeTriggerTripSound);
      }
      if (C4BombExplodeWarningSound.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(C4BombExplodeWarningSound);
      }
      if (C4BombPlantBeepCloseSound.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(C4BombPlantBeepCloseSound);
      }
      if (C4BombPlantBeepMidSound.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(C4BombPlantBeepMidSound);
      }
      if (C4BombPlantBeepFarSound.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(C4BombPlantBeepFarSound);
      }
      if (C4BombPlantBeepRTPC.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(C4BombPlantBeepRTPC);
      }
      if (C4BombPlantBeepIntervalTime != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(C4BombPlantBeepIntervalTime);
      }
      if (C4BombPlantAniLength != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(C4BombPlantAniLength);
      }
      if (C4BombInitiateFinishedTime != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(C4BombInitiateFinishedTime);
      }
      if (C4BombDisarmFinishSoundTime != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(C4BombDisarmFinishSoundTime);
      }
      if (C4BombExplodeTriggerTripTime != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(C4BombExplodeTriggerTripTime);
      }
      if (C4BombExplodeWarningTime != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(C4BombExplodeWarningTime);
      }
      if (C4BombPickUpSoundFp.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(C4BombPickUpSoundFp);
      }
      if (C4BombPickUpSoundTp.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(C4BombPickUpSoundTp);
      }
      if (MultimeterName.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(MultimeterName);
      }
      if (MultimeterAttachmentA.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(MultimeterAttachmentA);
      }
      if (MultimeterAttachmentB.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(MultimeterAttachmentB);
      }
      if (multimeterPos_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(MultimeterPos);
      }
      if (multimeterRotation_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(MultimeterRotation);
      }
      if (C4BombAttachmentA.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(C4BombAttachmentA);
      }
      if (C4BombAttachmentB.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(C4BombAttachmentB);
      }
      if (CameraShakeAssetName.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(CameraShakeAssetName);
      }
      if (AmplitudeRange != 0F) {
        output.WriteRawTag(181, 2);
        output.WriteFloat(AmplitudeRange);
      }
      if (ExplodeRingAudioRnage != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(ExplodeRingAudioRnage);
      }
      if (MaxRingAudioTime != 0F) {
        output.WriteRawTag(197, 2);
        output.WriteFloat(MaxRingAudioTime);
      }
      if (MinRingAudioTime != 0F) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(MinRingAudioTime);
      }
      if (PlayExplodeRingAudioName.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(PlayExplodeRingAudioName);
      }
      if (StopExplodeRingAudioName.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(StopExplodeRingAudioName);
      }
      if (ExplodeRingRTPCName.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(ExplodeRingRTPCName);
      }
      if (parent_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(Parent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (C4BombInitiateSoundFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(C4BombInitiateSoundFp);
      }
      if (C4BombInitiateSoundTp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(C4BombInitiateSoundTp);
      }
      if (CloseC4BombInitiateSoundFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CloseC4BombInitiateSoundFp);
      }
      if (CloseC4BombInitiateSoundTp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CloseC4BombInitiateSoundTp);
      }
      if (C4BombKeyPressFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(C4BombKeyPressFp);
      }
      if (StopC4BombKeyPressFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StopC4BombKeyPressFp);
      }
      if (C4BombDisarmStartSoundFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(C4BombDisarmStartSoundFp);
      }
      if (C4BombDisarmStartSoundTp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(C4BombDisarmStartSoundTp);
      }
      if (C4BombDisarmFinishSoundFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(C4BombDisarmFinishSoundFp);
      }
      if (C4BombDisarmFinishSoundTp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(C4BombDisarmFinishSoundTp);
      }
      if (StopC4BombDisarmStartSoundFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StopC4BombDisarmStartSoundFp);
      }
      if (StopC4BombDisarmStartSoundTp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StopC4BombDisarmStartSoundTp);
      }
      if (StopC4BombDisarmFinishSoundFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StopC4BombDisarmFinishSoundFp);
      }
      if (StopC4BombDisarmFinishSoundTp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StopC4BombDisarmFinishSoundTp);
      }
      if (C4BombExplodeSound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(C4BombExplodeSound);
      }
      if (C4BombExplodeTriggerTripSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(C4BombExplodeTriggerTripSound);
      }
      if (C4BombExplodeWarningSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(C4BombExplodeWarningSound);
      }
      if (C4BombPlantBeepCloseSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(C4BombPlantBeepCloseSound);
      }
      if (C4BombPlantBeepMidSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(C4BombPlantBeepMidSound);
      }
      if (C4BombPlantBeepFarSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(C4BombPlantBeepFarSound);
      }
      if (C4BombPlantBeepRTPC.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(C4BombPlantBeepRTPC);
      }
      if (C4BombPlantBeepIntervalTime != 0F) {
        size += 2 + 4;
      }
      if (C4BombPlantAniLength != 0F) {
        size += 2 + 4;
      }
      if (C4BombInitiateFinishedTime != 0F) {
        size += 2 + 4;
      }
      if (C4BombDisarmFinishSoundTime != 0F) {
        size += 2 + 4;
      }
      if (C4BombExplodeTriggerTripTime != 0F) {
        size += 2 + 4;
      }
      if (C4BombExplodeWarningTime != 0F) {
        size += 2 + 4;
      }
      if (C4BombPickUpSoundFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(C4BombPickUpSoundFp);
      }
      if (C4BombPickUpSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(C4BombPickUpSoundTp);
      }
      if (MultimeterName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MultimeterName);
      }
      if (MultimeterAttachmentA.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MultimeterAttachmentA);
      }
      if (MultimeterAttachmentB.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MultimeterAttachmentB);
      }
      if (multimeterPos_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MultimeterPos);
      }
      if (multimeterRotation_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MultimeterRotation);
      }
      if (C4BombAttachmentA.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(C4BombAttachmentA);
      }
      if (C4BombAttachmentB.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(C4BombAttachmentB);
      }
      if (CameraShakeAssetName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CameraShakeAssetName);
      }
      if (AmplitudeRange != 0F) {
        size += 2 + 4;
      }
      if (ExplodeRingAudioRnage != 0F) {
        size += 2 + 4;
      }
      if (MaxRingAudioTime != 0F) {
        size += 2 + 4;
      }
      if (MinRingAudioTime != 0F) {
        size += 2 + 4;
      }
      if (PlayExplodeRingAudioName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PlayExplodeRingAudioName);
      }
      if (StopExplodeRingAudioName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StopExplodeRingAudioName);
      }
      if (ExplodeRingRTPCName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExplodeRingRTPCName);
      }
      if (parent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponPersistenceConfigC4BombData other) {
      if (other == null) {
        return;
      }
      if (other.C4BombInitiateSoundFp.Length != 0) {
        C4BombInitiateSoundFp = other.C4BombInitiateSoundFp;
      }
      if (other.C4BombInitiateSoundTp.Length != 0) {
        C4BombInitiateSoundTp = other.C4BombInitiateSoundTp;
      }
      if (other.CloseC4BombInitiateSoundFp.Length != 0) {
        CloseC4BombInitiateSoundFp = other.CloseC4BombInitiateSoundFp;
      }
      if (other.CloseC4BombInitiateSoundTp.Length != 0) {
        CloseC4BombInitiateSoundTp = other.CloseC4BombInitiateSoundTp;
      }
      if (other.C4BombKeyPressFp.Length != 0) {
        C4BombKeyPressFp = other.C4BombKeyPressFp;
      }
      if (other.StopC4BombKeyPressFp.Length != 0) {
        StopC4BombKeyPressFp = other.StopC4BombKeyPressFp;
      }
      if (other.C4BombDisarmStartSoundFp.Length != 0) {
        C4BombDisarmStartSoundFp = other.C4BombDisarmStartSoundFp;
      }
      if (other.C4BombDisarmStartSoundTp.Length != 0) {
        C4BombDisarmStartSoundTp = other.C4BombDisarmStartSoundTp;
      }
      if (other.C4BombDisarmFinishSoundFp.Length != 0) {
        C4BombDisarmFinishSoundFp = other.C4BombDisarmFinishSoundFp;
      }
      if (other.C4BombDisarmFinishSoundTp.Length != 0) {
        C4BombDisarmFinishSoundTp = other.C4BombDisarmFinishSoundTp;
      }
      if (other.StopC4BombDisarmStartSoundFp.Length != 0) {
        StopC4BombDisarmStartSoundFp = other.StopC4BombDisarmStartSoundFp;
      }
      if (other.StopC4BombDisarmStartSoundTp.Length != 0) {
        StopC4BombDisarmStartSoundTp = other.StopC4BombDisarmStartSoundTp;
      }
      if (other.StopC4BombDisarmFinishSoundFp.Length != 0) {
        StopC4BombDisarmFinishSoundFp = other.StopC4BombDisarmFinishSoundFp;
      }
      if (other.StopC4BombDisarmFinishSoundTp.Length != 0) {
        StopC4BombDisarmFinishSoundTp = other.StopC4BombDisarmFinishSoundTp;
      }
      if (other.C4BombExplodeSound.Length != 0) {
        C4BombExplodeSound = other.C4BombExplodeSound;
      }
      if (other.C4BombExplodeTriggerTripSound.Length != 0) {
        C4BombExplodeTriggerTripSound = other.C4BombExplodeTriggerTripSound;
      }
      if (other.C4BombExplodeWarningSound.Length != 0) {
        C4BombExplodeWarningSound = other.C4BombExplodeWarningSound;
      }
      if (other.C4BombPlantBeepCloseSound.Length != 0) {
        C4BombPlantBeepCloseSound = other.C4BombPlantBeepCloseSound;
      }
      if (other.C4BombPlantBeepMidSound.Length != 0) {
        C4BombPlantBeepMidSound = other.C4BombPlantBeepMidSound;
      }
      if (other.C4BombPlantBeepFarSound.Length != 0) {
        C4BombPlantBeepFarSound = other.C4BombPlantBeepFarSound;
      }
      if (other.C4BombPlantBeepRTPC.Length != 0) {
        C4BombPlantBeepRTPC = other.C4BombPlantBeepRTPC;
      }
      if (other.C4BombPlantBeepIntervalTime != 0F) {
        C4BombPlantBeepIntervalTime = other.C4BombPlantBeepIntervalTime;
      }
      if (other.C4BombPlantAniLength != 0F) {
        C4BombPlantAniLength = other.C4BombPlantAniLength;
      }
      if (other.C4BombInitiateFinishedTime != 0F) {
        C4BombInitiateFinishedTime = other.C4BombInitiateFinishedTime;
      }
      if (other.C4BombDisarmFinishSoundTime != 0F) {
        C4BombDisarmFinishSoundTime = other.C4BombDisarmFinishSoundTime;
      }
      if (other.C4BombExplodeTriggerTripTime != 0F) {
        C4BombExplodeTriggerTripTime = other.C4BombExplodeTriggerTripTime;
      }
      if (other.C4BombExplodeWarningTime != 0F) {
        C4BombExplodeWarningTime = other.C4BombExplodeWarningTime;
      }
      if (other.C4BombPickUpSoundFp.Length != 0) {
        C4BombPickUpSoundFp = other.C4BombPickUpSoundFp;
      }
      if (other.C4BombPickUpSoundTp.Length != 0) {
        C4BombPickUpSoundTp = other.C4BombPickUpSoundTp;
      }
      if (other.MultimeterName.Length != 0) {
        MultimeterName = other.MultimeterName;
      }
      if (other.MultimeterAttachmentA.Length != 0) {
        MultimeterAttachmentA = other.MultimeterAttachmentA;
      }
      if (other.MultimeterAttachmentB.Length != 0) {
        MultimeterAttachmentB = other.MultimeterAttachmentB;
      }
      if (other.multimeterPos_ != null) {
        if (multimeterPos_ == null) {
          MultimeterPos = new global::D11.Pjson.PbVector3();
        }
        MultimeterPos.MergeFrom(other.MultimeterPos);
      }
      if (other.multimeterRotation_ != null) {
        if (multimeterRotation_ == null) {
          MultimeterRotation = new global::D11.Pjson.PbVector3();
        }
        MultimeterRotation.MergeFrom(other.MultimeterRotation);
      }
      if (other.C4BombAttachmentA.Length != 0) {
        C4BombAttachmentA = other.C4BombAttachmentA;
      }
      if (other.C4BombAttachmentB.Length != 0) {
        C4BombAttachmentB = other.C4BombAttachmentB;
      }
      if (other.CameraShakeAssetName.Length != 0) {
        CameraShakeAssetName = other.CameraShakeAssetName;
      }
      if (other.AmplitudeRange != 0F) {
        AmplitudeRange = other.AmplitudeRange;
      }
      if (other.ExplodeRingAudioRnage != 0F) {
        ExplodeRingAudioRnage = other.ExplodeRingAudioRnage;
      }
      if (other.MaxRingAudioTime != 0F) {
        MaxRingAudioTime = other.MaxRingAudioTime;
      }
      if (other.MinRingAudioTime != 0F) {
        MinRingAudioTime = other.MinRingAudioTime;
      }
      if (other.PlayExplodeRingAudioName.Length != 0) {
        PlayExplodeRingAudioName = other.PlayExplodeRingAudioName;
      }
      if (other.StopExplodeRingAudioName.Length != 0) {
        StopExplodeRingAudioName = other.StopExplodeRingAudioName;
      }
      if (other.ExplodeRingRTPCName.Length != 0) {
        ExplodeRingRTPCName = other.ExplodeRingRTPCName;
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::D11.Pjson.WeaponPersistenceConfigComponentData();
        }
        Parent.MergeFrom(other.Parent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            C4BombInitiateSoundFp = input.ReadString();
            break;
          }
          case 18: {
            C4BombInitiateSoundTp = input.ReadString();
            break;
          }
          case 26: {
            CloseC4BombInitiateSoundFp = input.ReadString();
            break;
          }
          case 34: {
            CloseC4BombInitiateSoundTp = input.ReadString();
            break;
          }
          case 42: {
            C4BombKeyPressFp = input.ReadString();
            break;
          }
          case 50: {
            StopC4BombKeyPressFp = input.ReadString();
            break;
          }
          case 58: {
            C4BombDisarmStartSoundFp = input.ReadString();
            break;
          }
          case 66: {
            C4BombDisarmStartSoundTp = input.ReadString();
            break;
          }
          case 74: {
            C4BombDisarmFinishSoundFp = input.ReadString();
            break;
          }
          case 82: {
            C4BombDisarmFinishSoundTp = input.ReadString();
            break;
          }
          case 90: {
            StopC4BombDisarmStartSoundFp = input.ReadString();
            break;
          }
          case 98: {
            StopC4BombDisarmStartSoundTp = input.ReadString();
            break;
          }
          case 106: {
            StopC4BombDisarmFinishSoundFp = input.ReadString();
            break;
          }
          case 114: {
            StopC4BombDisarmFinishSoundTp = input.ReadString();
            break;
          }
          case 122: {
            C4BombExplodeSound = input.ReadString();
            break;
          }
          case 130: {
            C4BombExplodeTriggerTripSound = input.ReadString();
            break;
          }
          case 138: {
            C4BombExplodeWarningSound = input.ReadString();
            break;
          }
          case 146: {
            C4BombPlantBeepCloseSound = input.ReadString();
            break;
          }
          case 154: {
            C4BombPlantBeepMidSound = input.ReadString();
            break;
          }
          case 162: {
            C4BombPlantBeepFarSound = input.ReadString();
            break;
          }
          case 170: {
            C4BombPlantBeepRTPC = input.ReadString();
            break;
          }
          case 181: {
            C4BombPlantBeepIntervalTime = input.ReadFloat();
            break;
          }
          case 189: {
            C4BombPlantAniLength = input.ReadFloat();
            break;
          }
          case 197: {
            C4BombInitiateFinishedTime = input.ReadFloat();
            break;
          }
          case 205: {
            C4BombDisarmFinishSoundTime = input.ReadFloat();
            break;
          }
          case 213: {
            C4BombExplodeTriggerTripTime = input.ReadFloat();
            break;
          }
          case 221: {
            C4BombExplodeWarningTime = input.ReadFloat();
            break;
          }
          case 226: {
            C4BombPickUpSoundFp = input.ReadString();
            break;
          }
          case 234: {
            C4BombPickUpSoundTp = input.ReadString();
            break;
          }
          case 242: {
            MultimeterName = input.ReadString();
            break;
          }
          case 250: {
            MultimeterAttachmentA = input.ReadString();
            break;
          }
          case 258: {
            MultimeterAttachmentB = input.ReadString();
            break;
          }
          case 266: {
            if (multimeterPos_ == null) {
              MultimeterPos = new global::D11.Pjson.PbVector3();
            }
            input.ReadMessage(MultimeterPos);
            break;
          }
          case 274: {
            if (multimeterRotation_ == null) {
              MultimeterRotation = new global::D11.Pjson.PbVector3();
            }
            input.ReadMessage(MultimeterRotation);
            break;
          }
          case 282: {
            C4BombAttachmentA = input.ReadString();
            break;
          }
          case 290: {
            C4BombAttachmentB = input.ReadString();
            break;
          }
          case 298: {
            CameraShakeAssetName = input.ReadString();
            break;
          }
          case 309: {
            AmplitudeRange = input.ReadFloat();
            break;
          }
          case 317: {
            ExplodeRingAudioRnage = input.ReadFloat();
            break;
          }
          case 325: {
            MaxRingAudioTime = input.ReadFloat();
            break;
          }
          case 333: {
            MinRingAudioTime = input.ReadFloat();
            break;
          }
          case 338: {
            PlayExplodeRingAudioName = input.ReadString();
            break;
          }
          case 346: {
            StopExplodeRingAudioName = input.ReadString();
            break;
          }
          case 354: {
            ExplodeRingRTPCName = input.ReadString();
            break;
          }
          case 362: {
            if (parent_ == null) {
              Parent = new global::D11.Pjson.WeaponPersistenceConfigComponentData();
            }
            input.ReadMessage(Parent);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
