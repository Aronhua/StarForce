// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WeaponPersistenceConfigComponentData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from WeaponPersistenceConfigComponentData.proto</summary>
  public static partial class WeaponPersistenceConfigComponentDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WeaponPersistenceConfigComponentData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeaponPersistenceConfigComponentDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CipXZWFwb25QZXJzaXN0ZW5jZUNvbmZpZ0NvbXBvbmVudERhdGEucHJvdG8S",
            "CUQxMS5QanNvbhoOUGJWZWN0b3IucHJvdG8iiS8KJFdlYXBvblBlcnNpc3Rl",
            "bmNlQ29uZmlnQ29tcG9uZW50RGF0YRIcChRTdGF0ZU1hY2hpbmVUeXBlTmFt",
            "ZRgBIAEoCRIaChJGaXJlTG9naWNDbGFzc05hbWUYAiABKAkSJAocRmlyZUxv",
            "Z2ljQ2xhc3NDb25maWdGaWxlTmFtZRgDIAEoCRIjChtTZWNvbmRhcnlGaXJl",
            "TG9naWNDbGFzc05hbWUYBCABKAkSKAogU2Vjb25kYXJ5RmlyZUxvZ2ljQ29u",
            "ZmlnRmlsZU5hbWUYBSABKAkSFwoPSW1wYWN0Q2xhc3NOYW1lGAYgASgJEhwK",
            "FEltcGFjdENvbmZpZ0ZpbGVOYW1lGAcgASgJEiAKGFNlY29uZGFyeUltcGFj",
            "dENsYXNzTmFtZRgIIAEoCRIlCh1TZWNvbmRhcnlJbXBhY3RDb25maWdGaWxl",
            "TmFtZRgJIAEoCRITCgtXZWFwb25SYW5nZRgKIAEoAhIYChBEYW1hZ2VBcm1v",
            "clNjYWxlGAsgASgCEhQKDFdlYXBvbldlaWdodBgMIAEoAhIQCghCdXlQcmlj",
            "ZRgNIAEoBRISCgpLaWxsQWR3YXJkGA4gASgFEhQKDERlY2VsZXJhdGlvbhgP",
            "IAEoAhIWCg5XZWFwb25OaWNrTmFtZRgQIAEoCRIXCg9NZXNoQXNzZXROYW1l",
            "MVAYESABKAkSFQoNTWVzaEFzc2V0TmFtZRgSIAEoCRIXCg9NZXNoQXNzZXRO",
            "YW1lX0wYEyABKAkSGAoQV2VhcG9uU29ja2V0TmFtZRgUIAEoCRIaChJXZWFw",
            "b25Tb2NrZXROYW1lX0wYFSABKAkSHAoUV2VhcG9uQmFja1NvY2tldE5hbWUY",
            "FiABKAkSHwoXV2VhcG9uQmFja0JSU29ja2V0MU5hbWUYFyABKAkSHwoXV2Vh",
            "cG9uQmFja0JSU29ja2V0Mk5hbWUYGCABKAkSFgoOV29ybGRDYW1lcmFGT1YY",
            "GSABKAISEwoLRlBDYW1lcmFGT1YYGiABKAISEgoKU3dpdGNoVGltZRgbIAEo",
            "AhIUCgxTbW9rZUFzc2V0MVAYHCABKAkSFAoMU21va2VBc3NldDNQGB0gASgJ",
            "EhkKEURyb3BDbGlwQXNzZXRJRDFQGB4gASgFEhoKEldlYXBvbk1heE1vdmVT",
            "cGVlZBgfIAEoAhIZChFXZWFwb25TcHJpbnRTcGVlZBggIAEoAhIYChBXZWFw",
            "b25DYW5EaXNjYXJkGCEgASgIEjIKFERpc2NhcmRXZWFwb25Jbml0RGlyGCIg",
            "ASgLMhQuRDExLlBqc29uLlBiVmVjdG9yMxIXCg9QaWNrVXBBc3NldE5hbWUY",
            "IyABKAkSHgoWU3BlY2lhbFBpY2tVcEFzc2V0TmFtZRgkIAEoCRIYChBNYXhE",
            "ZWNhbERpc3RhbmNlGCUgASgCEhwKFE1heERlY2FsRGlzdGFuY2VfRmFyGCYg",
            "ASgCEiAKGFBsYXlGaXJzdEVxdWlwQW5pbUluVHVybhgnIAEoCBIgChhQbGF5",
            "Rmlyc3RFcXVpcEFuaW1JbkdhbWUYKCABKAgSFAoMRGVhZERyb3BNdXN0GCkg",
            "ASgIEhMKC0RlYWREcm9wQ2FuGCogASgIEhgKEElzU2lsZW5jZXJXZWFwb24Y",
            "KyABKAgSFgoOQkVxdWlwU2lsZW5jZXIYLCABKAgSFwoPTG9hZFNwZWNpYWxU",
            "aW1lGC0gASgCEhkKEVVuTG9hZFNwZWNpYWxUaW1lGC4gASgCEhwKFExvYWRT",
            "cGVjaWFsU3RhdGVUaW1lGC8gASgCEh4KFlVuTG9hZFNwZWNpYWxTdGF0ZVRp",
            "bWUYMCABKAISHgoWS2lsbENvdW50ZXJBc3NldE5hbWUxUBgxIAEoCRIeChZL",
            "aWxsQ291bnRlckFzc2V0TmFtZTNQGDIgASgJEhcKD0lzQ2xpcEh1ZFdlYXBv",
            "bhgzIAEoCBIaChJDbGlwSHVkQXNzZXROYW1lMVAYNCABKAkSGgoSQ2xpcEh1",
            "ZEFzc2V0TmFtZTNQGDUgASgJEhoKEk11enpsZUZsYXNoQXNzZXQxUBg2IAEo",
            "CRIZChFTbmlwZXJEZWxheUVmZmVjdBg3IAEoCRIdChVTbmlwZXJEZWxheUVm",
            "ZmVjdFRpbWUYOCABKAISIwobU25pcGVyRGVsYXlFZmZlY3RTb2NrZXROYW1l",
            "GDkgASgJEiAKGE11enpsZVNlY29uZEZsYXNoQXNzZXQxUBg6IAEoCRImCh5T",
            "a2luV2Vhck5vbmVNdXp6bGVGbGFzaEFzc2V0MVAYOyABKAkSLAokU2tpbldl",
            "YXJOb25lTXV6emxlU2Vjb25kRmxhc2hBc3NldDFQGDwgASgJEhoKEk11enps",
            "ZUZsYXNoQXNzZXQzUBg9IAEoCRImCh5Ta2luV2Vhck5vbmVNdXp6bGVGbGFz",
            "aEFzc2V0M1AYPiABKAkSIAoYTXV6emxlSG90U21va2VTb2NrZXROYW1lGD8g",
            "ASgJEh0KFU11enpsZUZsYXNoU29ja2V0TmFtZRhAIAEoCRIbChNNdXp6bGVI",
            "b3RTbW9rZUFzc2V0GEEgASgJEhoKEkZpcmVUcmFja1Ntb2tlVGltZRhCIAEo",
            "AhIcChRGaXJlVHJhY2tGbGFzaEFzc2V0cxhDIAMoBRIeChZGaXJlVHJhY2tG",
            "bGFzaEFzc2V0M1BzGEQgAygFEhwKFEZpcmVUcmFja1Ntb2tlQXNzZXRzGEUg",
            "AygFEh4KFkZpcmVUcmFja1Ntb2tlQXNzZXQzUHMYRiADKAUSHAoURmlyZVRy",
            "YWNrU21va2VUaW1lM1AYRyABKAISGwoTRmlyZVRyYWNrRmxhc2hTcGVlZBhI",
            "IAEoAhIYChBJbnRlcnZhbE51bVRyYWNrGEkgASgFEhkKEU11enpsZUhvdFNt",
            "b2tlTnVtGEogASgFEhgKEE1pbkRpc3RhbmNlVHJhY2sYSyABKAUSFgoOU2hl",
            "bGxEcm9wQXNzZXQYTCABKAkSGwoTU2hlbGxEcm9wU29ja2V0TmFtZRhNIAEo",
            "CRIYChBTaGVsbERyb3BBc3NldDNQGE4gASgJEh0KFVNoZWxsRHJvcFNvY2tl",
            "dDNQTmFtZRhPIAEoCRIWCg5BbmltUGFydGljYWwxUBhQIAEoCRIaChJBbmlt",
            "UGFydGljYWwxUE5hbWUYUSABKAkSFwoPTGlnaHRQb2ludEFzc2V0GFIgASgJ",
            "EhkKEUxpZ2h0UG9pbnRBc3NldDNQGFMgASgJEhYKDlF1aWNrU3RvcFNwZWVk",
            "GFQgASgCEhUKDVF1aWNrU3RvcFRpbWUYVSABKAISGwoTUXVpY2tTdG9wTW92",
            "ZVNwcmVhZBhWIAEoAhIWCg5Vc2VDb21tb25BbW1vcxhXIAEoCBIWCg5BcHBy",
            "ZWNpYXRlQW5pcxhYIAEoCRIcChRTaWxlbmNlckZsYXNoQXNzZXQxUBhZIAEo",
            "CRIcChRTaWxlbmNlckZsYXNoQXNzZXQzUBhaIAEoCRIcChRTaWxlbmNlclNt",
            "b2tlQXNzZXQxUBhbIAEoCRIcChRTaWxlbmNlclNtb2tlQXNzZXQzUBhcIAEo",
            "CRIcChRUcmFja011enpsZU9uUG9pbnQxUBhdIAEoCBIaChJUcmFja011enps",
            "ZVBvaW50MVAYXiADKAISIwobVkZYVHJpZ2dlckZpcmVLaWxsZWRBc3NldDFQ",
            "GF8gASgJEicKH1ZGWFRyaWdnZXJGaXJlS2lsbGVkRGVhZEFzc2V0MVAYYCAB",
            "KAkSIwobVkZYVHJpZ2dlckZpcmVBcm91bmRBc3NldDFQGGEgASgJEiAKGFZG",
            "WFRyaWdnZXJTaG93T2ZmQXNzZXQxUBhiIAEoCRIjChtWRlhUcmlnZ2VyQ2hh",
            "bmdlQ2xpcEFzc2V0MVAYYyABKAkSJAocVkZYVHJpZ2dlckVxdWlwV2VhcG9u",
            "QXNzZXQxUBhkIAEoCRIcChRWRlhLZWVwTm9ybWFsQXNzZXQxUBhlIAEoCRIf",
            "ChdWRlhUcmlnZ2Vyc1NvY2tldE5hbWUxUBhmIAEoCRIjChtWRlhEeW5hbWlj",
            "RmlyZUtpbGxlZEFzc2V0MVAYZyABKAkSIwobVkZYRHluYW1pY0ZpcmVBcm91",
            "bmRBc3NldDFQGGggASgJEiAKGFZGWER5bmFtaWNTaG93T2ZmQXNzZXQxUBhp",
            "IAEoCRIjChtWRlhEeW5hbWljQ2hhbmdlQ2xpcEFzc2V0MVAYaiABKAkSJAoc",
            "VkZYRHluYW1pY0VxdWlwV2VhcG9uQXNzZXQxUBhrIAEoCRIjChtWRlhEeW5h",
            "bWljS2VlcE5vcm1hbEFzc2V0MVAYbCABKAkSIwobVkZYRHluYW1pY1JlbG9h",
            "ZEFtbW9Bc3NldDFQGG0gASgJEigKIFZGWER5bmFtaWNGaXJlS2lsbGVkU29j",
            "a2V0TmFtZTFQGG4gASgJEigKIFZGWER5bmFtaWNGaXJlQXJvdW5kU29ja2V0",
            "TmFtZTFQGG8gASgJEiUKHVZGWER5bmFtaWNTaG93T2ZmU29ja2V0TmFtZTFQ",
            "GHAgASgJEigKIFZGWER5bmFtaWNDaGFuZ2VDbGlwU29ja2V0TmFtZTFQGHEg",
            "ASgJEikKIVZGWER5bmFtaWNFcXVpcFdlYXBvblNvY2tldE5hbWUxUBhyIAEo",
            "CRIiChpWRlhEeW5hbWljS2VlcFNvY2tldE5hbWUxUBhzIAEoCRIoCiBWRlhE",
            "eW5hbWljUmVsb2FkQW1tb1NvY2tldE5hbWUxUBh0IAEoCRIbChNWRlhJZ25p",
            "dGVGbGFtZUFzc2V0GHUgASgJEhcKD1ZGWExpZ2h0ZXJBc3NldBh2IAEoCRIZ",
            "ChFMaWdodGVyU29ja2V0TmFtZRh3IAEoCRIcChRSb3BlRmlyZVNvY2tldFRw",
            "TmFtZRh4IAEoCRIWCg5WRlhSb3BlVHBBc3NldBh5IAEoCRIYChBJc0d1blNp",
            "Z2h0V2VhcG9uGHogASgIEhgKEEZpcmVDbG9zZVNvdW5kRnAYeyABKAkSFgoO",
            "RmlyZUZhclNvdW5kRnAYfCABKAkSGAoQRmlyZUNsb3NlU291bmRUcBh9IAEo",
            "CRIWCg5GaXJlRmFyU291bmRUcBh+IAEoCRIXCg9GaXJlTG9vcFNvdW5kVHAY",
            "fyABKAkSGAoPRmlyZVRhaWxTb3VuZFRwGIABIAEoCRIeChVTZWNvbmRGaXJl",
            "TG9vcFNvdW5kVHAYgQEgASgJEh4KFVNlY29uZEZpcmVUYWlsU291bmRUcBiC",
            "ASABKAkSGAoPRmlyZUxvb3BTb3VuZEZwGIMBIAEoCRIYCg9GaXJlVGFpbFNv",
            "dW5kRnAYhAEgASgJEh4KFVNlY29uZEZpcmVMb29wU291bmRGcBiFASABKAkS",
            "HgoVU2Vjb25kRmlyZVRhaWxTb3VuZEZwGIYBIAEoCRIWCg1SZWxvYWRTb3Vu",
            "ZEZwGIcBIAEoCRIZChBSZWxvYWRFbmRTb3VuZEZwGIgBIAEoCRIWCg1SZWxv",
            "YWRTb3VuZFRwGIkBIAEoCRIZChBSZWxvYWRFbmRTb3VuZFRwGIoBIAEoCRIa",
            "ChFSZWxvYWRTdG9wU291bmRGcBiLASABKAkSGgoRUmVsb2FkU3RvcFNvdW5k",
            "VHAYjAEgASgJEhwKE1NlY29uZFJlbG9hZFNvdW5kRnAYjQEgASgJEiAKF1Nl",
            "Y29uZFJlbG9hZFN0b3BTb3VuZEZwGI4BIAEoCRIcChNTZWNvbmRSZWxvYWRT",
            "b3VuZFRwGI8BIAEoCRIgChdTZWNvbmRSZWxvYWRTdG9wU291bmRUcBiQASAB",
            "KAkSFgoNUHJlRmlyZVBsYXlGcBiRASABKAkSFgoNUHJlRmlyZVN0b3BGcBiS",
            "ASABKAkSFgoNUHJlRmlyZVBsYXlUcBiTASABKAkSFgoNUHJlRmlyZVN0b3BU",
            "cBiUASABKAkSFAoLRGVwbG95U291bmQYlQEgASgJEhgKD0RlcGxveVN0b3BT",
            "b3VuZBiWASABKAkSGgoRU2Vjb25kRGVwbG95U291bmQYlwEgASgJEh4KFVNl",
            "Y29uZERlcGxveVN0b3BTb3VuZBiYASABKAkSGgoRV2VhcG9uSW1wYWN0U291",
            "bmQYmQEgASgJEhoKEUZpcmVTb3VuZENsb3NlRGlzGJoBIAEoBRIWCg1GaXJl",
            "RGVsYXlUaW1lGJsBIAEoAhIXCg5SZW1haW5pbmdDb3VudBicASABKAISHAoT",
            "U2lsZW5jZXJGaXJlU291bmRGUBidASABKAkSHAoTU2lsZW5jZXJGaXJlU291",
            "bmRUUBieASABKAkSHAoTU2lsZW5jZXJMb2FkU291bmRGUBifASABKAkSIAoX",
            "U3RvcFNpbGVuY2VyTG9hZFNvdW5kRlAYoAEgASgJEh4KFVNpbGVuY2VyVW5M",
            "b2FkU291bmRGUBihASABKAkSIgoZU3RvcFNpbGVuY2VyVW5Mb2FkU291bmRG",
            "UBiiASABKAkSIwoaQ2xlYXJTaG90U2hlbGxzU291bmRPbkRlYWQYowEgASgI",
            "EhoKEVNob3RTaGVsbHNTb3VuZEZQGKQBIAEoCRImCh1Db250aW51b3VzU2hv",
            "dFNoZWxsc0RlbGF5VGltZRilASABKAISJAobQ29udGludW91c1Nob3RTaGVs",
            "bHNTb3VuZEZQGKYBIAEoCRIcChNTaG90U2hlbGxzRGVsYXlUaW1lGKcBIAEo",
            "AhIVCgxFbXB0eVNvdW5kRlAYqAEgASgJEhoKEVJlbG9hZExvb3BTb3VuZEZQ",
            "GKkBIAEoCRIVCgxFbXB0eVNvdW5kVFAYqgEgASgJEhoKEVJlbG9hZExvb3BT",
            "b3VuZFRQGKsBIAEoCRIfChZBcHByZWNpYXRlV2VhcG9uU291bmRzGKwBIAMo",
            "CRIjChpBcHByZWNpYXRlV2VhcG9uU3RvcFNvdW5kcxitASADKAkSJAobQXBw",
            "cmVjaWF0ZVdlYXBvblNvdW5kRGVsYXlzGK4BIAMoAhIWCg1GaXJlQW5pbVNw",
            "ZWVkGK8BIAEoAhIjChpGaXJlVGhyZWVDb250aW51ZUFuaW1TcGVlZBiwASAB",
            "KAISHgoVRmlyZUNvbnRpbnVlQW5pbVNwZWVkGLEBIAEoAhIcChNUcmlwbGVG",
            "aXJlQW5pbVNwZWVkGLIBIAEoAhIcChNDaGFuZ2VDbGlwQW5pbVNwZWVkGLMB",
            "IAEoAhIgChdDaGFuZ2VDbGlwTG9vcEFuaW1TcGVlZBi0ASABKAISIgoZQ3Jv",
            "dWNoQ2hhbmdlQ2xpcEFuaW1TcGVlZBi1ASABKAISFgoNSWRsZUFuaW1TcGVl",
            "ZBi2ASABKAISFwoORXF1aXBBbmltU3BlZWQYtwEgASgCEhwKE1Rha2VEYW1h",
            "Z2VBbmltU3BlZWQYuAEgASgCEiAKF0hlYWRUYWtlRGFtYWdlQW5pbVNwZWVk",
            "GLkBIAEoAhIbChJDaGFuZ2VHdW5BbmltU3BlZWQYugEgASgCEiIKGUFuaW1X",
            "ZWlnaHRMaXN0T2ZDaGFuZ2VHdW4YuwEgAygFEiMKGkFuaW1XZWlnaHRMaXN0",
            "T2ZDbGlwQ2hhbmdlGLwBIAMoBRIlChxBbmltV2VpZ2h0TGlzdE9mQXBwcmVj",
            "aWF0aW9uGL0BIAMoBRIWCg1IYWxmQm9keVNpemVYGL4BIAEoAhIWCg1IYWxm",
            "Qm9keVNpemVZGL8BIAEoAhIZChBQcm9qZWN0aWxlRW5hYmxlGMABIAEoCBIU",
            "CgtCYWxsaXN0aWNJRBjBASABKAUSEwoKR3VuQnVmZklEcxjCASADKAUSGgoR",
            "U2hvd09mZlZveFNvdW5kSUQYwwEgASgNEhoKEUJSRmlyZUxvb3BTb3VuZFRw",
            "GMQBIAEoCRIaChFCUkZpcmVUYWlsU291bmRUcBjFASABKAkSIAoXQlJTZWNv",
            "bmRGaXJlTG9vcFNvdW5kVHAYxgEgASgJEiAKF0JSU2Vjb25kRmlyZVRhaWxT",
            "b3VuZFRwGMcBIAEoCRIWCg1CUkZpcmVTb3VuZFRwGMgBIAEoCRIeChVCUlNp",
            "bGVuY2VyRmlyZVNvdW5kVFAYyQEgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D11.Pjson.PbVectorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.WeaponPersistenceConfigComponentData), global::D11.Pjson.WeaponPersistenceConfigComponentData.Parser, new[]{ "StateMachineTypeName", "FireLogicClassName", "FireLogicClassConfigFileName", "SecondaryFireLogicClassName", "SecondaryFireLogicConfigFileName", "ImpactClassName", "ImpactConfigFileName", "SecondaryImpactClassName", "SecondaryImpactConfigFileName", "WeaponRange", "DamageArmorScale", "WeaponWeight", "BuyPrice", "KillAdward", "Deceleration", "WeaponNickName", "MeshAssetName1P", "MeshAssetName", "MeshAssetNameL", "WeaponSocketName", "WeaponSocketNameL", "WeaponBackSocketName", "WeaponBackBRSocket1Name", "WeaponBackBRSocket2Name", "WorldCameraFOV", "FPCameraFOV", "SwitchTime", "SmokeAsset1P", "SmokeAsset3P", "DropClipAssetID1P", "WeaponMaxMoveSpeed", "WeaponSprintSpeed", "WeaponCanDiscard", "DiscardWeaponInitDir", "PickUpAssetName", "SpecialPickUpAssetName", "MaxDecalDistance", "MaxDecalDistanceFar", "PlayFirstEquipAnimInTurn", "PlayFirstEquipAnimInGame", "DeadDropMust", "DeadDropCan", "IsSilencerWeapon", "BEquipSilencer", "LoadSpecialTime", "UnLoadSpecialTime", "LoadSpecialStateTime", "UnLoadSpecialStateTime", "KillCounterAssetName1P", "KillCounterAssetName3P", "IsClipHudWeapon", "ClipHudAssetName1P", "ClipHudAssetName3P", "MuzzleFlashAsset1P", "SniperDelayEffect", "SniperDelayEffectTime", "SniperDelayEffectSocketName", "MuzzleSecondFlashAsset1P", "SkinWearNoneMuzzleFlashAsset1P", "SkinWearNoneMuzzleSecondFlashAsset1P", "MuzzleFlashAsset3P", "SkinWearNoneMuzzleFlashAsset3P", "MuzzleHotSmokeSocketName", "MuzzleFlashSocketName", "MuzzleHotSmokeAsset", "FireTrackSmokeTime", "FireTrackFlashAssets", "FireTrackFlashAsset3Ps", "FireTrackSmokeAssets", "FireTrackSmokeAsset3Ps", "FireTrackSmokeTime3P", "FireTrackFlashSpeed", "IntervalNumTrack", "MuzzleHotSmokeNum", "MinDistanceTrack", "ShellDropAsset", "ShellDropSocketName", "ShellDropAsset3P", "ShellDropSocket3PName", "AnimPartical1P", "AnimPartical1PName", "LightPointAsset", "LightPointAsset3P", "QuickStopSpeed", "QuickStopTime", "QuickStopMoveSpread", "UseCommonAmmos", "AppreciateAnis", "SilencerFlashAsset1P", "SilencerFlashAsset3P", "SilencerSmokeAsset1P", "SilencerSmokeAsset3P", "TrackMuzzleOnPoint1P", "TrackMuzzlePoint1P", "VFXTriggerFireKilledAsset1P", "VFXTriggerFireKilledDeadAsset1P", "VFXTriggerFireAroundAsset1P", "VFXTriggerShowOffAsset1P", "VFXTriggerChangeClipAsset1P", "VFXTriggerEquipWeaponAsset1P", "VFXKeepNormalAsset1P", "VFXTriggersSocketName1P", "VFXDynamicFireKilledAsset1P", "VFXDynamicFireAroundAsset1P", "VFXDynamicShowOffAsset1P", "VFXDynamicChangeClipAsset1P", "VFXDynamicEquipWeaponAsset1P", "VFXDynamicKeepNormalAsset1P", "VFXDynamicReloadAmmoAsset1P", "VFXDynamicFireKilledSocketName1P", "VFXDynamicFireAroundSocketName1P", "VFXDynamicShowOffSocketName1P", "VFXDynamicChangeClipSocketName1P", "VFXDynamicEquipWeaponSocketName1P", "VFXDynamicKeepSocketName1P", "VFXDynamicReloadAmmoSocketName1P", "VFXIgniteFlameAsset", "VFXLighterAsset", "LighterSocketName", "RopeFireSocketTpName", "VFXRopeTpAsset", "IsGunSightWeapon", "FireCloseSoundFp", "FireFarSoundFp", "FireCloseSoundTp", "FireFarSoundTp", "FireLoopSoundTp", "FireTailSoundTp", "SecondFireLoopSoundTp", "SecondFireTailSoundTp", "FireLoopSoundFp", "FireTailSoundFp", "SecondFireLoopSoundFp", "SecondFireTailSoundFp", "ReloadSoundFp", "ReloadEndSoundFp", "ReloadSoundTp", "ReloadEndSoundTp", "ReloadStopSoundFp", "ReloadStopSoundTp", "SecondReloadSoundFp", "SecondReloadStopSoundFp", "SecondReloadSoundTp", "SecondReloadStopSoundTp", "PreFirePlayFp", "PreFireStopFp", "PreFirePlayTp", "PreFireStopTp", "DeploySound", "DeployStopSound", "SecondDeploySound", "SecondDeployStopSound", "WeaponImpactSound", "FireSoundCloseDis", "FireDelayTime", "RemainingCount", "SilencerFireSoundFP", "SilencerFireSoundTP", "SilencerLoadSoundFP", "StopSilencerLoadSoundFP", "SilencerUnLoadSoundFP", "StopSilencerUnLoadSoundFP", "ClearShotShellsSoundOnDead", "ShotShellsSoundFP", "ContinuousShotShellsDelayTime", "ContinuousShotShellsSoundFP", "ShotShellsDelayTime", "EmptySoundFP", "ReloadLoopSoundFP", "EmptySoundTP", "ReloadLoopSoundTP", "AppreciateWeaponSounds", "AppreciateWeaponStopSounds", "AppreciateWeaponSoundDelays", "FireAnimSpeed", "FireThreeContinueAnimSpeed", "FireContinueAnimSpeed", "TripleFireAnimSpeed", "ChangeClipAnimSpeed", "ChangeClipLoopAnimSpeed", "CrouchChangeClipAnimSpeed", "IdleAnimSpeed", "EquipAnimSpeed", "TakeDamageAnimSpeed", "HeadTakeDamageAnimSpeed", "ChangeGunAnimSpeed", "AnimWeightListOfChangeGun", "AnimWeightListOfClipChange", "AnimWeightListOfAppreciation", "HalfBodySizeX", "HalfBodySizeY", "ProjectileEnable", "BallisticID", "GunBuffIDs", "ShowOffVoxSoundID", "BRFireLoopSoundTp", "BRFireTailSoundTp", "BRSecondFireLoopSoundTp", "BRSecondFireTailSoundTp", "BRFireSoundTp", "BRSilencerFireSoundTP" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponPersistenceConfigComponentData : pb::IMessage<WeaponPersistenceConfigComponentData> {
    private static readonly pb::MessageParser<WeaponPersistenceConfigComponentData> _parser = new pb::MessageParser<WeaponPersistenceConfigComponentData>(() => new WeaponPersistenceConfigComponentData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponPersistenceConfigComponentData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.WeaponPersistenceConfigComponentDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPersistenceConfigComponentData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPersistenceConfigComponentData(WeaponPersistenceConfigComponentData other) : this() {
      stateMachineTypeName_ = other.stateMachineTypeName_;
      fireLogicClassName_ = other.fireLogicClassName_;
      fireLogicClassConfigFileName_ = other.fireLogicClassConfigFileName_;
      secondaryFireLogicClassName_ = other.secondaryFireLogicClassName_;
      secondaryFireLogicConfigFileName_ = other.secondaryFireLogicConfigFileName_;
      impactClassName_ = other.impactClassName_;
      impactConfigFileName_ = other.impactConfigFileName_;
      secondaryImpactClassName_ = other.secondaryImpactClassName_;
      secondaryImpactConfigFileName_ = other.secondaryImpactConfigFileName_;
      weaponRange_ = other.weaponRange_;
      damageArmorScale_ = other.damageArmorScale_;
      weaponWeight_ = other.weaponWeight_;
      buyPrice_ = other.buyPrice_;
      killAdward_ = other.killAdward_;
      deceleration_ = other.deceleration_;
      weaponNickName_ = other.weaponNickName_;
      meshAssetName1P_ = other.meshAssetName1P_;
      meshAssetName_ = other.meshAssetName_;
      meshAssetNameL_ = other.meshAssetNameL_;
      weaponSocketName_ = other.weaponSocketName_;
      weaponSocketNameL_ = other.weaponSocketNameL_;
      weaponBackSocketName_ = other.weaponBackSocketName_;
      weaponBackBRSocket1Name_ = other.weaponBackBRSocket1Name_;
      weaponBackBRSocket2Name_ = other.weaponBackBRSocket2Name_;
      worldCameraFOV_ = other.worldCameraFOV_;
      fPCameraFOV_ = other.fPCameraFOV_;
      switchTime_ = other.switchTime_;
      smokeAsset1P_ = other.smokeAsset1P_;
      smokeAsset3P_ = other.smokeAsset3P_;
      dropClipAssetID1P_ = other.dropClipAssetID1P_;
      weaponMaxMoveSpeed_ = other.weaponMaxMoveSpeed_;
      weaponSprintSpeed_ = other.weaponSprintSpeed_;
      weaponCanDiscard_ = other.weaponCanDiscard_;
      discardWeaponInitDir_ = other.discardWeaponInitDir_ != null ? other.discardWeaponInitDir_.Clone() : null;
      pickUpAssetName_ = other.pickUpAssetName_;
      specialPickUpAssetName_ = other.specialPickUpAssetName_;
      maxDecalDistance_ = other.maxDecalDistance_;
      maxDecalDistanceFar_ = other.maxDecalDistanceFar_;
      playFirstEquipAnimInTurn_ = other.playFirstEquipAnimInTurn_;
      playFirstEquipAnimInGame_ = other.playFirstEquipAnimInGame_;
      deadDropMust_ = other.deadDropMust_;
      deadDropCan_ = other.deadDropCan_;
      isSilencerWeapon_ = other.isSilencerWeapon_;
      bEquipSilencer_ = other.bEquipSilencer_;
      loadSpecialTime_ = other.loadSpecialTime_;
      unLoadSpecialTime_ = other.unLoadSpecialTime_;
      loadSpecialStateTime_ = other.loadSpecialStateTime_;
      unLoadSpecialStateTime_ = other.unLoadSpecialStateTime_;
      killCounterAssetName1P_ = other.killCounterAssetName1P_;
      killCounterAssetName3P_ = other.killCounterAssetName3P_;
      isClipHudWeapon_ = other.isClipHudWeapon_;
      clipHudAssetName1P_ = other.clipHudAssetName1P_;
      clipHudAssetName3P_ = other.clipHudAssetName3P_;
      muzzleFlashAsset1P_ = other.muzzleFlashAsset1P_;
      sniperDelayEffect_ = other.sniperDelayEffect_;
      sniperDelayEffectTime_ = other.sniperDelayEffectTime_;
      sniperDelayEffectSocketName_ = other.sniperDelayEffectSocketName_;
      muzzleSecondFlashAsset1P_ = other.muzzleSecondFlashAsset1P_;
      skinWearNoneMuzzleFlashAsset1P_ = other.skinWearNoneMuzzleFlashAsset1P_;
      skinWearNoneMuzzleSecondFlashAsset1P_ = other.skinWearNoneMuzzleSecondFlashAsset1P_;
      muzzleFlashAsset3P_ = other.muzzleFlashAsset3P_;
      skinWearNoneMuzzleFlashAsset3P_ = other.skinWearNoneMuzzleFlashAsset3P_;
      muzzleHotSmokeSocketName_ = other.muzzleHotSmokeSocketName_;
      muzzleFlashSocketName_ = other.muzzleFlashSocketName_;
      muzzleHotSmokeAsset_ = other.muzzleHotSmokeAsset_;
      fireTrackSmokeTime_ = other.fireTrackSmokeTime_;
      fireTrackFlashAssets_ = other.fireTrackFlashAssets_.Clone();
      fireTrackFlashAsset3Ps_ = other.fireTrackFlashAsset3Ps_.Clone();
      fireTrackSmokeAssets_ = other.fireTrackSmokeAssets_.Clone();
      fireTrackSmokeAsset3Ps_ = other.fireTrackSmokeAsset3Ps_.Clone();
      fireTrackSmokeTime3P_ = other.fireTrackSmokeTime3P_;
      fireTrackFlashSpeed_ = other.fireTrackFlashSpeed_;
      intervalNumTrack_ = other.intervalNumTrack_;
      muzzleHotSmokeNum_ = other.muzzleHotSmokeNum_;
      minDistanceTrack_ = other.minDistanceTrack_;
      shellDropAsset_ = other.shellDropAsset_;
      shellDropSocketName_ = other.shellDropSocketName_;
      shellDropAsset3P_ = other.shellDropAsset3P_;
      shellDropSocket3PName_ = other.shellDropSocket3PName_;
      animPartical1P_ = other.animPartical1P_;
      animPartical1PName_ = other.animPartical1PName_;
      lightPointAsset_ = other.lightPointAsset_;
      lightPointAsset3P_ = other.lightPointAsset3P_;
      quickStopSpeed_ = other.quickStopSpeed_;
      quickStopTime_ = other.quickStopTime_;
      quickStopMoveSpread_ = other.quickStopMoveSpread_;
      useCommonAmmos_ = other.useCommonAmmos_;
      appreciateAnis_ = other.appreciateAnis_;
      silencerFlashAsset1P_ = other.silencerFlashAsset1P_;
      silencerFlashAsset3P_ = other.silencerFlashAsset3P_;
      silencerSmokeAsset1P_ = other.silencerSmokeAsset1P_;
      silencerSmokeAsset3P_ = other.silencerSmokeAsset3P_;
      trackMuzzleOnPoint1P_ = other.trackMuzzleOnPoint1P_;
      trackMuzzlePoint1P_ = other.trackMuzzlePoint1P_.Clone();
      vFXTriggerFireKilledAsset1P_ = other.vFXTriggerFireKilledAsset1P_;
      vFXTriggerFireKilledDeadAsset1P_ = other.vFXTriggerFireKilledDeadAsset1P_;
      vFXTriggerFireAroundAsset1P_ = other.vFXTriggerFireAroundAsset1P_;
      vFXTriggerShowOffAsset1P_ = other.vFXTriggerShowOffAsset1P_;
      vFXTriggerChangeClipAsset1P_ = other.vFXTriggerChangeClipAsset1P_;
      vFXTriggerEquipWeaponAsset1P_ = other.vFXTriggerEquipWeaponAsset1P_;
      vFXKeepNormalAsset1P_ = other.vFXKeepNormalAsset1P_;
      vFXTriggersSocketName1P_ = other.vFXTriggersSocketName1P_;
      vFXDynamicFireKilledAsset1P_ = other.vFXDynamicFireKilledAsset1P_;
      vFXDynamicFireAroundAsset1P_ = other.vFXDynamicFireAroundAsset1P_;
      vFXDynamicShowOffAsset1P_ = other.vFXDynamicShowOffAsset1P_;
      vFXDynamicChangeClipAsset1P_ = other.vFXDynamicChangeClipAsset1P_;
      vFXDynamicEquipWeaponAsset1P_ = other.vFXDynamicEquipWeaponAsset1P_;
      vFXDynamicKeepNormalAsset1P_ = other.vFXDynamicKeepNormalAsset1P_;
      vFXDynamicReloadAmmoAsset1P_ = other.vFXDynamicReloadAmmoAsset1P_;
      vFXDynamicFireKilledSocketName1P_ = other.vFXDynamicFireKilledSocketName1P_;
      vFXDynamicFireAroundSocketName1P_ = other.vFXDynamicFireAroundSocketName1P_;
      vFXDynamicShowOffSocketName1P_ = other.vFXDynamicShowOffSocketName1P_;
      vFXDynamicChangeClipSocketName1P_ = other.vFXDynamicChangeClipSocketName1P_;
      vFXDynamicEquipWeaponSocketName1P_ = other.vFXDynamicEquipWeaponSocketName1P_;
      vFXDynamicKeepSocketName1P_ = other.vFXDynamicKeepSocketName1P_;
      vFXDynamicReloadAmmoSocketName1P_ = other.vFXDynamicReloadAmmoSocketName1P_;
      vFXIgniteFlameAsset_ = other.vFXIgniteFlameAsset_;
      vFXLighterAsset_ = other.vFXLighterAsset_;
      lighterSocketName_ = other.lighterSocketName_;
      ropeFireSocketTpName_ = other.ropeFireSocketTpName_;
      vFXRopeTpAsset_ = other.vFXRopeTpAsset_;
      isGunSightWeapon_ = other.isGunSightWeapon_;
      fireCloseSoundFp_ = other.fireCloseSoundFp_;
      fireFarSoundFp_ = other.fireFarSoundFp_;
      fireCloseSoundTp_ = other.fireCloseSoundTp_;
      fireFarSoundTp_ = other.fireFarSoundTp_;
      fireLoopSoundTp_ = other.fireLoopSoundTp_;
      fireTailSoundTp_ = other.fireTailSoundTp_;
      secondFireLoopSoundTp_ = other.secondFireLoopSoundTp_;
      secondFireTailSoundTp_ = other.secondFireTailSoundTp_;
      fireLoopSoundFp_ = other.fireLoopSoundFp_;
      fireTailSoundFp_ = other.fireTailSoundFp_;
      secondFireLoopSoundFp_ = other.secondFireLoopSoundFp_;
      secondFireTailSoundFp_ = other.secondFireTailSoundFp_;
      reloadSoundFp_ = other.reloadSoundFp_;
      reloadEndSoundFp_ = other.reloadEndSoundFp_;
      reloadSoundTp_ = other.reloadSoundTp_;
      reloadEndSoundTp_ = other.reloadEndSoundTp_;
      reloadStopSoundFp_ = other.reloadStopSoundFp_;
      reloadStopSoundTp_ = other.reloadStopSoundTp_;
      secondReloadSoundFp_ = other.secondReloadSoundFp_;
      secondReloadStopSoundFp_ = other.secondReloadStopSoundFp_;
      secondReloadSoundTp_ = other.secondReloadSoundTp_;
      secondReloadStopSoundTp_ = other.secondReloadStopSoundTp_;
      preFirePlayFp_ = other.preFirePlayFp_;
      preFireStopFp_ = other.preFireStopFp_;
      preFirePlayTp_ = other.preFirePlayTp_;
      preFireStopTp_ = other.preFireStopTp_;
      deploySound_ = other.deploySound_;
      deployStopSound_ = other.deployStopSound_;
      secondDeploySound_ = other.secondDeploySound_;
      secondDeployStopSound_ = other.secondDeployStopSound_;
      weaponImpactSound_ = other.weaponImpactSound_;
      fireSoundCloseDis_ = other.fireSoundCloseDis_;
      fireDelayTime_ = other.fireDelayTime_;
      remainingCount_ = other.remainingCount_;
      silencerFireSoundFP_ = other.silencerFireSoundFP_;
      silencerFireSoundTP_ = other.silencerFireSoundTP_;
      silencerLoadSoundFP_ = other.silencerLoadSoundFP_;
      stopSilencerLoadSoundFP_ = other.stopSilencerLoadSoundFP_;
      silencerUnLoadSoundFP_ = other.silencerUnLoadSoundFP_;
      stopSilencerUnLoadSoundFP_ = other.stopSilencerUnLoadSoundFP_;
      clearShotShellsSoundOnDead_ = other.clearShotShellsSoundOnDead_;
      shotShellsSoundFP_ = other.shotShellsSoundFP_;
      continuousShotShellsDelayTime_ = other.continuousShotShellsDelayTime_;
      continuousShotShellsSoundFP_ = other.continuousShotShellsSoundFP_;
      shotShellsDelayTime_ = other.shotShellsDelayTime_;
      emptySoundFP_ = other.emptySoundFP_;
      reloadLoopSoundFP_ = other.reloadLoopSoundFP_;
      emptySoundTP_ = other.emptySoundTP_;
      reloadLoopSoundTP_ = other.reloadLoopSoundTP_;
      appreciateWeaponSounds_ = other.appreciateWeaponSounds_.Clone();
      appreciateWeaponStopSounds_ = other.appreciateWeaponStopSounds_.Clone();
      appreciateWeaponSoundDelays_ = other.appreciateWeaponSoundDelays_.Clone();
      fireAnimSpeed_ = other.fireAnimSpeed_;
      fireThreeContinueAnimSpeed_ = other.fireThreeContinueAnimSpeed_;
      fireContinueAnimSpeed_ = other.fireContinueAnimSpeed_;
      tripleFireAnimSpeed_ = other.tripleFireAnimSpeed_;
      changeClipAnimSpeed_ = other.changeClipAnimSpeed_;
      changeClipLoopAnimSpeed_ = other.changeClipLoopAnimSpeed_;
      crouchChangeClipAnimSpeed_ = other.crouchChangeClipAnimSpeed_;
      idleAnimSpeed_ = other.idleAnimSpeed_;
      equipAnimSpeed_ = other.equipAnimSpeed_;
      takeDamageAnimSpeed_ = other.takeDamageAnimSpeed_;
      headTakeDamageAnimSpeed_ = other.headTakeDamageAnimSpeed_;
      changeGunAnimSpeed_ = other.changeGunAnimSpeed_;
      animWeightListOfChangeGun_ = other.animWeightListOfChangeGun_.Clone();
      animWeightListOfClipChange_ = other.animWeightListOfClipChange_.Clone();
      animWeightListOfAppreciation_ = other.animWeightListOfAppreciation_.Clone();
      halfBodySizeX_ = other.halfBodySizeX_;
      halfBodySizeY_ = other.halfBodySizeY_;
      projectileEnable_ = other.projectileEnable_;
      ballisticID_ = other.ballisticID_;
      gunBuffIDs_ = other.gunBuffIDs_.Clone();
      showOffVoxSoundID_ = other.showOffVoxSoundID_;
      bRFireLoopSoundTp_ = other.bRFireLoopSoundTp_;
      bRFireTailSoundTp_ = other.bRFireTailSoundTp_;
      bRSecondFireLoopSoundTp_ = other.bRSecondFireLoopSoundTp_;
      bRSecondFireTailSoundTp_ = other.bRSecondFireTailSoundTp_;
      bRFireSoundTp_ = other.bRFireSoundTp_;
      bRSilencerFireSoundTP_ = other.bRSilencerFireSoundTP_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPersistenceConfigComponentData Clone() {
      return new WeaponPersistenceConfigComponentData(this);
    }

    /// <summary>Field number for the "StateMachineTypeName" field.</summary>
    public const int StateMachineTypeNameFieldNumber = 1;
    private string stateMachineTypeName_ = "";
    /// <summary>
    /// 武器状态机名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StateMachineTypeName {
      get { return stateMachineTypeName_; }
      set {
        stateMachineTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireLogicClassName" field.</summary>
    public const int FireLogicClassNameFieldNumber = 2;
    private string fireLogicClassName_ = "";
    /// <summary>
    /// 第一种开火方式：类名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireLogicClassName {
      get { return fireLogicClassName_; }
      set {
        fireLogicClassName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireLogicClassConfigFileName" field.</summary>
    public const int FireLogicClassConfigFileNameFieldNumber = 3;
    private string fireLogicClassConfigFileName_ = "";
    /// <summary>
    /// 第一种开火方式：配置文件名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireLogicClassConfigFileName {
      get { return fireLogicClassConfigFileName_; }
      set {
        fireLogicClassConfigFileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecondaryFireLogicClassName" field.</summary>
    public const int SecondaryFireLogicClassNameFieldNumber = 4;
    private string secondaryFireLogicClassName_ = "";
    /// <summary>
    /// 第二种开火方式：类名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecondaryFireLogicClassName {
      get { return secondaryFireLogicClassName_; }
      set {
        secondaryFireLogicClassName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecondaryFireLogicConfigFileName" field.</summary>
    public const int SecondaryFireLogicConfigFileNameFieldNumber = 5;
    private string secondaryFireLogicConfigFileName_ = "";
    /// <summary>
    /// 第二种开火方式：配置文件名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecondaryFireLogicConfigFileName {
      get { return secondaryFireLogicConfigFileName_; }
      set {
        secondaryFireLogicConfigFileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ImpactClassName" field.</summary>
    public const int ImpactClassNameFieldNumber = 6;
    private string impactClassName_ = "";
    /// <summary>
    /// 第一种贴花：类名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImpactClassName {
      get { return impactClassName_; }
      set {
        impactClassName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ImpactConfigFileName" field.</summary>
    public const int ImpactConfigFileNameFieldNumber = 7;
    private string impactConfigFileName_ = "";
    /// <summary>
    /// 第一种贴花：配置文件名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImpactConfigFileName {
      get { return impactConfigFileName_; }
      set {
        impactConfigFileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecondaryImpactClassName" field.</summary>
    public const int SecondaryImpactClassNameFieldNumber = 8;
    private string secondaryImpactClassName_ = "";
    /// <summary>
    /// 第二种贴花：类名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecondaryImpactClassName {
      get { return secondaryImpactClassName_; }
      set {
        secondaryImpactClassName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecondaryImpactConfigFileName" field.</summary>
    public const int SecondaryImpactConfigFileNameFieldNumber = 9;
    private string secondaryImpactConfigFileName_ = "";
    /// <summary>
    /// 第一种开火贴花：配置文件名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecondaryImpactConfigFileName {
      get { return secondaryImpactConfigFileName_; }
      set {
        secondaryImpactConfigFileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WeaponRange" field.</summary>
    public const int WeaponRangeFieldNumber = 10;
    private float weaponRange_;
    /// <summary>
    /// 攻击距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeaponRange {
      get { return weaponRange_; }
      set {
        weaponRange_ = value;
      }
    }

    /// <summary>Field number for the "DamageArmorScale" field.</summary>
    public const int DamageArmorScaleFieldNumber = 11;
    private float damageArmorScale_;
    /// <summary>
    /// 护甲穿透伤害比例 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DamageArmorScale {
      get { return damageArmorScale_; }
      set {
        damageArmorScale_ = value;
      }
    }

    /// <summary>Field number for the "WeaponWeight" field.</summary>
    public const int WeaponWeightFieldNumber = 12;
    private float weaponWeight_;
    /// <summary>
    /// 武器重量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeaponWeight {
      get { return weaponWeight_; }
      set {
        weaponWeight_ = value;
      }
    }

    /// <summary>Field number for the "BuyPrice" field.</summary>
    public const int BuyPriceFieldNumber = 13;
    private int buyPrice_;
    /// <summary>
    /// 购买价格 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyPrice {
      get { return buyPrice_; }
      set {
        buyPrice_ = value;
      }
    }

    /// <summary>Field number for the "KillAdward" field.</summary>
    public const int KillAdwardFieldNumber = 14;
    private int killAdward_;
    /// <summary>
    /// 击杀奖励 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillAdward {
      get { return killAdward_; }
      set {
        killAdward_ = value;
      }
    }

    /// <summary>Field number for the "Deceleration" field.</summary>
    public const int DecelerationFieldNumber = 15;
    private float deceleration_;
    /// <summary>
    /// 命中减速比例，不减速为0 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Deceleration {
      get { return deceleration_; }
      set {
        deceleration_ = value;
      }
    }

    /// <summary>Field number for the "WeaponNickName" field.</summary>
    public const int WeaponNickNameFieldNumber = 16;
    private string weaponNickName_ = "";
    /// <summary>
    /// 武器名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeaponNickName {
      get { return weaponNickName_; }
      set {
        weaponNickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MeshAssetName1P" field.</summary>
    public const int MeshAssetName1PFieldNumber = 17;
    private string meshAssetName1P_ = "";
    /// <summary>
    /// 1P武器模型的prefab名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeshAssetName1P {
      get { return meshAssetName1P_; }
      set {
        meshAssetName1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MeshAssetName" field.</summary>
    public const int MeshAssetNameFieldNumber = 18;
    private string meshAssetName_ = "";
    /// <summary>
    /// 3p模型的prefab名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeshAssetName {
      get { return meshAssetName_; }
      set {
        meshAssetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MeshAssetName_L" field.</summary>
    public const int MeshAssetNameLFieldNumber = 19;
    private string meshAssetNameL_ = "";
    /// <summary>
    /// 3p左手模型的prefab名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeshAssetNameL {
      get { return meshAssetNameL_; }
      set {
        meshAssetNameL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WeaponSocketName" field.</summary>
    public const int WeaponSocketNameFieldNumber = 20;
    private string weaponSocketName_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeaponSocketName {
      get { return weaponSocketName_; }
      set {
        weaponSocketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WeaponSocketName_L" field.</summary>
    public const int WeaponSocketNameLFieldNumber = 21;
    private string weaponSocketNameL_ = "";
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeaponSocketNameL {
      get { return weaponSocketNameL_; }
      set {
        weaponSocketNameL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WeaponBackSocketName" field.</summary>
    public const int WeaponBackSocketNameFieldNumber = 22;
    private string weaponBackSocketName_ = "";
    /// <summary>
    /// 背部挂点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeaponBackSocketName {
      get { return weaponBackSocketName_; }
      set {
        weaponBackSocketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WeaponBackBRSocket1Name" field.</summary>
    public const int WeaponBackBRSocket1NameFieldNumber = 23;
    private string weaponBackBRSocket1Name_ = "";
    /// <summary>
    /// BR槽位1背部挂点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeaponBackBRSocket1Name {
      get { return weaponBackBRSocket1Name_; }
      set {
        weaponBackBRSocket1Name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WeaponBackBRSocket2Name" field.</summary>
    public const int WeaponBackBRSocket2NameFieldNumber = 24;
    private string weaponBackBRSocket2Name_ = "";
    /// <summary>
    /// BR槽位2背部挂点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeaponBackBRSocket2Name {
      get { return weaponBackBRSocket2Name_; }
      set {
        weaponBackBRSocket2Name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WorldCameraFOV" field.</summary>
    public const int WorldCameraFOVFieldNumber = 25;
    private float worldCameraFOV_;
    /// <summary>
    /// 装备武器时候的FOV 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WorldCameraFOV {
      get { return worldCameraFOV_; }
      set {
        worldCameraFOV_ = value;
      }
    }

    /// <summary>Field number for the "FPCameraFOV" field.</summary>
    public const int FPCameraFOVFieldNumber = 26;
    private float fPCameraFOV_;
    /// <summary>
    /// 装备武器时候的FOV 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FPCameraFOV {
      get { return fPCameraFOV_; }
      set {
        fPCameraFOV_ = value;
      }
    }

    /// <summary>Field number for the "SwitchTime" field.</summary>
    public const int SwitchTimeFieldNumber = 27;
    private float switchTime_;
    /// <summary>
    /// 收起来武器时候需要的时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SwitchTime {
      get { return switchTime_; }
      set {
        switchTime_ = value;
      }
    }

    /// <summary>Field number for the "SmokeAsset1P" field.</summary>
    public const int SmokeAsset1PFieldNumber = 28;
    private string smokeAsset1P_ = "";
    /// <summary>
    /// 武器的烟特效1p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SmokeAsset1P {
      get { return smokeAsset1P_; }
      set {
        smokeAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SmokeAsset3P" field.</summary>
    public const int SmokeAsset3PFieldNumber = 29;
    private string smokeAsset3P_ = "";
    /// <summary>
    /// 武器的烟特效3p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SmokeAsset3P {
      get { return smokeAsset3P_; }
      set {
        smokeAsset3P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DropClipAssetID1P" field.</summary>
    public const int DropClipAssetID1PFieldNumber = 30;
    private int dropClipAssetID1P_;
    /// <summary>
    /// 武器的掉落弹夹特效1p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropClipAssetID1P {
      get { return dropClipAssetID1P_; }
      set {
        dropClipAssetID1P_ = value;
      }
    }

    /// <summary>Field number for the "WeaponMaxMoveSpeed" field.</summary>
    public const int WeaponMaxMoveSpeedFieldNumber = 31;
    private float weaponMaxMoveSpeed_;
    /// <summary>
    /// 装备武器移动速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeaponMaxMoveSpeed {
      get { return weaponMaxMoveSpeed_; }
      set {
        weaponMaxMoveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "WeaponSprintSpeed" field.</summary>
    public const int WeaponSprintSpeedFieldNumber = 32;
    private float weaponSprintSpeed_;
    /// <summary>
    /// 装备武器疾跑移动速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeaponSprintSpeed {
      get { return weaponSprintSpeed_; }
      set {
        weaponSprintSpeed_ = value;
      }
    }

    /// <summary>Field number for the "WeaponCanDiscard" field.</summary>
    public const int WeaponCanDiscardFieldNumber = 33;
    private bool weaponCanDiscard_;
    /// <summary>
    /// 是否可以丢弃 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WeaponCanDiscard {
      get { return weaponCanDiscard_; }
      set {
        weaponCanDiscard_ = value;
      }
    }

    /// <summary>Field number for the "DiscardWeaponInitDir" field.</summary>
    public const int DiscardWeaponInitDirFieldNumber = 34;
    private global::D11.Pjson.PbVector3 discardWeaponInitDir_;
    /// <summary>
    /// 丢武器时的初始力 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.PbVector3 DiscardWeaponInitDir {
      get { return discardWeaponInitDir_; }
      set {
        discardWeaponInitDir_ = value;
      }
    }

    /// <summary>Field number for the "PickUpAssetName" field.</summary>
    public const int PickUpAssetNameFieldNumber = 35;
    private string pickUpAssetName_ = "";
    /// <summary>
    /// 可捡取的武器资源名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PickUpAssetName {
      get { return pickUpAssetName_; }
      set {
        pickUpAssetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SpecialPickUpAssetName" field.</summary>
    public const int SpecialPickUpAssetNameFieldNumber = 36;
    private string specialPickUpAssetName_ = "";
    /// <summary>
    /// 可捡取的特殊状态下武器资源名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpecialPickUpAssetName {
      get { return specialPickUpAssetName_; }
      set {
        specialPickUpAssetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaxDecalDistance" field.</summary>
    public const int MaxDecalDistanceFieldNumber = 37;
    private float maxDecalDistance_;
    /// <summary>
    /// 可以产生贴花的最大距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxDecalDistance {
      get { return maxDecalDistance_; }
      set {
        maxDecalDistance_ = value;
      }
    }

    /// <summary>Field number for the "MaxDecalDistance_Far" field.</summary>
    public const int MaxDecalDistanceFarFieldNumber = 38;
    private float maxDecalDistanceFar_;
    /// <summary>
    /// 可以产生贴花的最大距离B 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxDecalDistanceFar {
      get { return maxDecalDistanceFar_; }
      set {
        maxDecalDistanceFar_ = value;
      }
    }

    /// <summary>Field number for the "PlayFirstEquipAnimInTurn" field.</summary>
    public const int PlayFirstEquipAnimInTurnFieldNumber = 39;
    private bool playFirstEquipAnimInTurn_;
    /// <summary>
    /// 是否单局第一次获取播放动作 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PlayFirstEquipAnimInTurn {
      get { return playFirstEquipAnimInTurn_; }
      set {
        playFirstEquipAnimInTurn_ = value;
      }
    }

    /// <summary>Field number for the "PlayFirstEquipAnimInGame" field.</summary>
    public const int PlayFirstEquipAnimInGameFieldNumber = 40;
    private bool playFirstEquipAnimInGame_;
    /// <summary>
    /// 是否单次游戏第一次获取播放动作 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PlayFirstEquipAnimInGame {
      get { return playFirstEquipAnimInGame_; }
      set {
        playFirstEquipAnimInGame_ = value;
      }
    }

    /// <summary>Field number for the "DeadDropMust" field.</summary>
    public const int DeadDropMustFieldNumber = 41;
    private bool deadDropMust_;
    /// <summary>
    /// 死亡时如果能掉落的话，是否肯定会掉落 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeadDropMust {
      get { return deadDropMust_; }
      set {
        deadDropMust_ = value;
      }
    }

    /// <summary>Field number for the "DeadDropCan" field.</summary>
    public const int DeadDropCanFieldNumber = 42;
    private bool deadDropCan_;
    /// <summary>
    /// 死亡时能不能掉落 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeadDropCan {
      get { return deadDropCan_; }
      set {
        deadDropCan_ = value;
      }
    }

    /// <summary>Field number for the "IsSilencerWeapon" field.</summary>
    public const int IsSilencerWeaponFieldNumber = 43;
    private bool isSilencerWeapon_;
    /// <summary>
    /// 是否是装载消音的武器 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSilencerWeapon {
      get { return isSilencerWeapon_; }
      set {
        isSilencerWeapon_ = value;
      }
    }

    /// <summary>Field number for the "BEquipSilencer" field.</summary>
    public const int BEquipSilencerFieldNumber = 44;
    private bool bEquipSilencer_;
    /// <summary>
    /// 带有消音武器的初始状态：装载和未装载 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BEquipSilencer {
      get { return bEquipSilencer_; }
      set {
        bEquipSilencer_ = value;
      }
    }

    /// <summary>Field number for the "LoadSpecialTime" field.</summary>
    public const int LoadSpecialTimeFieldNumber = 45;
    private float loadSpecialTime_;
    /// <summary>
    /// 装载特殊持续时间，如消音器 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LoadSpecialTime {
      get { return loadSpecialTime_; }
      set {
        loadSpecialTime_ = value;
      }
    }

    /// <summary>Field number for the "UnLoadSpecialTime" field.</summary>
    public const int UnLoadSpecialTimeFieldNumber = 46;
    private float unLoadSpecialTime_;
    /// <summary>
    /// 卸载特殊持续时间，如消音器 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UnLoadSpecialTime {
      get { return unLoadSpecialTime_; }
      set {
        unLoadSpecialTime_ = value;
      }
    }

    /// <summary>Field number for the "LoadSpecialStateTime" field.</summary>
    public const int LoadSpecialStateTimeFieldNumber = 47;
    private float loadSpecialStateTime_;
    /// <summary>
    /// 装载特殊状态结束时间，如消音器 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LoadSpecialStateTime {
      get { return loadSpecialStateTime_; }
      set {
        loadSpecialStateTime_ = value;
      }
    }

    /// <summary>Field number for the "UnLoadSpecialStateTime" field.</summary>
    public const int UnLoadSpecialStateTimeFieldNumber = 48;
    private float unLoadSpecialStateTime_;
    /// <summary>
    /// 卸载特殊状态结束时间，如消音器 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UnLoadSpecialStateTime {
      get { return unLoadSpecialStateTime_; }
      set {
        unLoadSpecialStateTime_ = value;
      }
    }

    /// <summary>Field number for the "KillCounterAssetName1P" field.</summary>
    public const int KillCounterAssetName1PFieldNumber = 49;
    private string killCounterAssetName1P_ = "";
    /// <summary>
    /// 1P武器暗金模型的prefab名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KillCounterAssetName1P {
      get { return killCounterAssetName1P_; }
      set {
        killCounterAssetName1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "KillCounterAssetName3P" field.</summary>
    public const int KillCounterAssetName3PFieldNumber = 50;
    private string killCounterAssetName3P_ = "";
    /// <summary>
    /// 3p武器暗金模型的prefab名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KillCounterAssetName3P {
      get { return killCounterAssetName3P_; }
      set {
        killCounterAssetName3P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsClipHudWeapon" field.</summary>
    public const int IsClipHudWeaponFieldNumber = 51;
    private bool isClipHudWeapon_;
    /// <summary>
    /// 此武器是否显示弹药量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsClipHudWeapon {
      get { return isClipHudWeapon_; }
      set {
        isClipHudWeapon_ = value;
      }
    }

    /// <summary>Field number for the "ClipHudAssetName1P" field.</summary>
    public const int ClipHudAssetName1PFieldNumber = 52;
    private string clipHudAssetName1P_ = "";
    /// <summary>
    /// 1P武器弹药量的prefab名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClipHudAssetName1P {
      get { return clipHudAssetName1P_; }
      set {
        clipHudAssetName1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClipHudAssetName3P" field.</summary>
    public const int ClipHudAssetName3PFieldNumber = 53;
    private string clipHudAssetName3P_ = "";
    /// <summary>
    /// 3p武器弹药量的prefab名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClipHudAssetName3P {
      get { return clipHudAssetName3P_; }
      set {
        clipHudAssetName3P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MuzzleFlashAsset1P" field.</summary>
    public const int MuzzleFlashAsset1PFieldNumber = 54;
    private string muzzleFlashAsset1P_ = "";
    /// <summary>
    /// 1p武器的枪火特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MuzzleFlashAsset1P {
      get { return muzzleFlashAsset1P_; }
      set {
        muzzleFlashAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SniperDelayEffect" field.</summary>
    public const int SniperDelayEffectFieldNumber = 55;
    private string sniperDelayEffect_ = "";
    /// <summary>
    /// 非关镜狙延迟拉栓特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SniperDelayEffect {
      get { return sniperDelayEffect_; }
      set {
        sniperDelayEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SniperDelayEffectTime" field.</summary>
    public const int SniperDelayEffectTimeFieldNumber = 56;
    private float sniperDelayEffectTime_;
    /// <summary>
    /// 非关镜狙延迟特效时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SniperDelayEffectTime {
      get { return sniperDelayEffectTime_; }
      set {
        sniperDelayEffectTime_ = value;
      }
    }

    /// <summary>Field number for the "SniperDelayEffectSocketName" field.</summary>
    public const int SniperDelayEffectSocketNameFieldNumber = 57;
    private string sniperDelayEffectSocketName_ = "";
    /// <summary>
    /// 非关镜狙延迟特效挂点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SniperDelayEffectSocketName {
      get { return sniperDelayEffectSocketName_; }
      set {
        sniperDelayEffectSocketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MuzzleSecondFlashAsset1P" field.</summary>
    public const int MuzzleSecondFlashAsset1PFieldNumber = 58;
    private string muzzleSecondFlashAsset1P_ = "";
    /// <summary>
    /// 1p武器的第二开火模式枪火特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MuzzleSecondFlashAsset1P {
      get { return muzzleSecondFlashAsset1P_; }
      set {
        muzzleSecondFlashAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SkinWearNoneMuzzleFlashAsset1P" field.</summary>
    public const int SkinWearNoneMuzzleFlashAsset1PFieldNumber = 59;
    private string skinWearNoneMuzzleFlashAsset1P_ = "";
    /// <summary>
    /// 1p武器皮肤全新的枪火特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkinWearNoneMuzzleFlashAsset1P {
      get { return skinWearNoneMuzzleFlashAsset1P_; }
      set {
        skinWearNoneMuzzleFlashAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SkinWearNoneMuzzleSecondFlashAsset1P" field.</summary>
    public const int SkinWearNoneMuzzleSecondFlashAsset1PFieldNumber = 60;
    private string skinWearNoneMuzzleSecondFlashAsset1P_ = "";
    /// <summary>
    /// 1p武器皮肤全新的第二开火模式枪火特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkinWearNoneMuzzleSecondFlashAsset1P {
      get { return skinWearNoneMuzzleSecondFlashAsset1P_; }
      set {
        skinWearNoneMuzzleSecondFlashAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MuzzleFlashAsset3P" field.</summary>
    public const int MuzzleFlashAsset3PFieldNumber = 61;
    private string muzzleFlashAsset3P_ = "";
    /// <summary>
    /// 3p武器的枪火特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MuzzleFlashAsset3P {
      get { return muzzleFlashAsset3P_; }
      set {
        muzzleFlashAsset3P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SkinWearNoneMuzzleFlashAsset3P" field.</summary>
    public const int SkinWearNoneMuzzleFlashAsset3PFieldNumber = 62;
    private string skinWearNoneMuzzleFlashAsset3P_ = "";
    /// <summary>
    /// 3p武器皮肤全新的枪火特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkinWearNoneMuzzleFlashAsset3P {
      get { return skinWearNoneMuzzleFlashAsset3P_; }
      set {
        skinWearNoneMuzzleFlashAsset3P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MuzzleHotSmokeSocketName" field.</summary>
    public const int MuzzleHotSmokeSocketNameFieldNumber = 63;
    private string muzzleHotSmokeSocketName_ = "";
    /// <summary>
    /// 武器的枪口冒烟特效挂点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MuzzleHotSmokeSocketName {
      get { return muzzleHotSmokeSocketName_; }
      set {
        muzzleHotSmokeSocketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MuzzleFlashSocketName" field.</summary>
    public const int MuzzleFlashSocketNameFieldNumber = 64;
    private string muzzleFlashSocketName_ = "";
    /// <summary>
    /// 枪火特效socket 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MuzzleFlashSocketName {
      get { return muzzleFlashSocketName_; }
      set {
        muzzleFlashSocketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MuzzleHotSmokeAsset" field.</summary>
    public const int MuzzleHotSmokeAssetFieldNumber = 65;
    private string muzzleHotSmokeAsset_ = "";
    /// <summary>
    /// 武器的枪口冒烟特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MuzzleHotSmokeAsset {
      get { return muzzleHotSmokeAsset_; }
      set {
        muzzleHotSmokeAsset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireTrackSmokeTime" field.</summary>
    public const int FireTrackSmokeTimeFieldNumber = 66;
    private float fireTrackSmokeTime_;
    /// <summary>
    /// 武器的枪火弹道烟雾留存时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireTrackSmokeTime {
      get { return fireTrackSmokeTime_; }
      set {
        fireTrackSmokeTime_ = value;
      }
    }

    /// <summary>Field number for the "FireTrackFlashAssets" field.</summary>
    public const int FireTrackFlashAssetsFieldNumber = 67;
    private static readonly pb::FieldCodec<int> _repeated_fireTrackFlashAssets_codec
        = pb::FieldCodec.ForInt32(538);
    private readonly pbc::RepeatedField<int> fireTrackFlashAssets_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 武器的枪火弹道1p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FireTrackFlashAssets {
      get { return fireTrackFlashAssets_; }
    }

    /// <summary>Field number for the "FireTrackFlashAsset3Ps" field.</summary>
    public const int FireTrackFlashAsset3PsFieldNumber = 68;
    private static readonly pb::FieldCodec<int> _repeated_fireTrackFlashAsset3Ps_codec
        = pb::FieldCodec.ForInt32(546);
    private readonly pbc::RepeatedField<int> fireTrackFlashAsset3Ps_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 武器的枪火弹道3p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FireTrackFlashAsset3Ps {
      get { return fireTrackFlashAsset3Ps_; }
    }

    /// <summary>Field number for the "FireTrackSmokeAssets" field.</summary>
    public const int FireTrackSmokeAssetsFieldNumber = 69;
    private static readonly pb::FieldCodec<int> _repeated_fireTrackSmokeAssets_codec
        = pb::FieldCodec.ForInt32(554);
    private readonly pbc::RepeatedField<int> fireTrackSmokeAssets_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 武器的枪火弹道烟雾 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FireTrackSmokeAssets {
      get { return fireTrackSmokeAssets_; }
    }

    /// <summary>Field number for the "FireTrackSmokeAsset3Ps" field.</summary>
    public const int FireTrackSmokeAsset3PsFieldNumber = 70;
    private static readonly pb::FieldCodec<int> _repeated_fireTrackSmokeAsset3Ps_codec
        = pb::FieldCodec.ForInt32(562);
    private readonly pbc::RepeatedField<int> fireTrackSmokeAsset3Ps_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 武器的枪火弹道烟雾3P 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FireTrackSmokeAsset3Ps {
      get { return fireTrackSmokeAsset3Ps_; }
    }

    /// <summary>Field number for the "FireTrackSmokeTime3P" field.</summary>
    public const int FireTrackSmokeTime3PFieldNumber = 71;
    private float fireTrackSmokeTime3P_;
    /// <summary>
    /// 武器的枪火弹道烟雾留存时长3P 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireTrackSmokeTime3P {
      get { return fireTrackSmokeTime3P_; }
      set {
        fireTrackSmokeTime3P_ = value;
      }
    }

    /// <summary>Field number for the "FireTrackFlashSpeed" field.</summary>
    public const int FireTrackFlashSpeedFieldNumber = 72;
    private float fireTrackFlashSpeed_;
    /// <summary>
    /// 武器的枪火弹道速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireTrackFlashSpeed {
      get { return fireTrackFlashSpeed_; }
      set {
        fireTrackFlashSpeed_ = value;
      }
    }

    /// <summary>Field number for the "IntervalNumTrack" field.</summary>
    public const int IntervalNumTrackFieldNumber = 73;
    private int intervalNumTrack_;
    /// <summary>
    /// 间隔几发子弹产生一个弹道特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntervalNumTrack {
      get { return intervalNumTrack_; }
      set {
        intervalNumTrack_ = value;
      }
    }

    /// <summary>Field number for the "MuzzleHotSmokeNum" field.</summary>
    public const int MuzzleHotSmokeNumFieldNumber = 74;
    private int muzzleHotSmokeNum_;
    /// <summary>
    /// 间隔几发子弹产生一个枪口冒烟特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MuzzleHotSmokeNum {
      get { return muzzleHotSmokeNum_; }
      set {
        muzzleHotSmokeNum_ = value;
      }
    }

    /// <summary>Field number for the "MinDistanceTrack" field.</summary>
    public const int MinDistanceTrackFieldNumber = 75;
    private int minDistanceTrack_;
    /// <summary>
    /// 最小的产生弹道距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinDistanceTrack {
      get { return minDistanceTrack_; }
      set {
        minDistanceTrack_ = value;
      }
    }

    /// <summary>Field number for the "ShellDropAsset" field.</summary>
    public const int ShellDropAssetFieldNumber = 76;
    private string shellDropAsset_ = "";
    /// <summary>
    /// 武器弹壳 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShellDropAsset {
      get { return shellDropAsset_; }
      set {
        shellDropAsset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ShellDropSocketName" field.</summary>
    public const int ShellDropSocketNameFieldNumber = 77;
    private string shellDropSocketName_ = "";
    /// <summary>
    /// 武器抛壳挂点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShellDropSocketName {
      get { return shellDropSocketName_; }
      set {
        shellDropSocketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ShellDropAsset3P" field.</summary>
    public const int ShellDropAsset3PFieldNumber = 78;
    private string shellDropAsset3P_ = "";
    /// <summary>
    /// 武器弹壳3p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShellDropAsset3P {
      get { return shellDropAsset3P_; }
      set {
        shellDropAsset3P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ShellDropSocket3PName" field.</summary>
    public const int ShellDropSocket3PNameFieldNumber = 79;
    private string shellDropSocket3PName_ = "";
    /// <summary>
    /// 武器抛壳挂点3p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShellDropSocket3PName {
      get { return shellDropSocket3PName_; }
      set {
        shellDropSocket3PName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AnimPartical1P" field.</summary>
    public const int AnimPartical1PFieldNumber = 80;
    private string animPartical1P_ = "";
    /// <summary>
    /// 武器特殊动画特效1P 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnimPartical1P {
      get { return animPartical1P_; }
      set {
        animPartical1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AnimPartical1PName" field.</summary>
    public const int AnimPartical1PNameFieldNumber = 81;
    private string animPartical1PName_ = "";
    /// <summary>
    /// 武器特殊动画特效挂点1P 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnimPartical1PName {
      get { return animPartical1PName_; }
      set {
        animPartical1PName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LightPointAsset" field.</summary>
    public const int LightPointAssetFieldNumber = 82;
    private string lightPointAsset_ = "";
    /// <summary>
    /// 枪火光资源1p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LightPointAsset {
      get { return lightPointAsset_; }
      set {
        lightPointAsset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LightPointAsset3P" field.</summary>
    public const int LightPointAsset3PFieldNumber = 83;
    private string lightPointAsset3P_ = "";
    /// <summary>
    /// 枪火光资源3p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LightPointAsset3P {
      get { return lightPointAsset3P_; }
      set {
        lightPointAsset3P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "QuickStopSpeed" field.</summary>
    public const int QuickStopSpeedFieldNumber = 84;
    private float quickStopSpeed_;
    /// <summary>
    /// 急停速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float QuickStopSpeed {
      get { return quickStopSpeed_; }
      set {
        quickStopSpeed_ = value;
      }
    }

    /// <summary>Field number for the "QuickStopTime" field.</summary>
    public const int QuickStopTimeFieldNumber = 85;
    private float quickStopTime_;
    /// <summary>
    /// 急停时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float QuickStopTime {
      get { return quickStopTime_; }
      set {
        quickStopTime_ = value;
      }
    }

    /// <summary>Field number for the "QuickStopMoveSpread" field.</summary>
    public const int QuickStopMoveSpreadFieldNumber = 86;
    private float quickStopMoveSpread_;
    /// <summary>
    /// 急停运动散发数值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float QuickStopMoveSpread {
      get { return quickStopMoveSpread_; }
      set {
        quickStopMoveSpread_ = value;
      }
    }

    /// <summary>Field number for the "UseCommonAmmos" field.</summary>
    public const int UseCommonAmmosFieldNumber = 87;
    private bool useCommonAmmos_;
    /// <summary>
    /// 开火方式之间共用子弹数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseCommonAmmos {
      get { return useCommonAmmos_; }
      set {
        useCommonAmmos_ = value;
      }
    }

    /// <summary>Field number for the "AppreciateAnis" field.</summary>
    public const int AppreciateAnisFieldNumber = 88;
    private string appreciateAnis_ = "";
    /// <summary>
    /// 观枪动作集合 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppreciateAnis {
      get { return appreciateAnis_; }
      set {
        appreciateAnis_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SilencerFlashAsset1P" field.</summary>
    public const int SilencerFlashAsset1PFieldNumber = 89;
    private string silencerFlashAsset1P_ = "";
    /// <summary>
    /// 消音状态下枪火特效1p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SilencerFlashAsset1P {
      get { return silencerFlashAsset1P_; }
      set {
        silencerFlashAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SilencerFlashAsset3P" field.</summary>
    public const int SilencerFlashAsset3PFieldNumber = 90;
    private string silencerFlashAsset3P_ = "";
    /// <summary>
    /// 消音状态下枪火特效3p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SilencerFlashAsset3P {
      get { return silencerFlashAsset3P_; }
      set {
        silencerFlashAsset3P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SilencerSmokeAsset1P" field.</summary>
    public const int SilencerSmokeAsset1PFieldNumber = 91;
    private string silencerSmokeAsset1P_ = "";
    /// <summary>
    /// 消音状态下烟特效1p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SilencerSmokeAsset1P {
      get { return silencerSmokeAsset1P_; }
      set {
        silencerSmokeAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SilencerSmokeAsset3P" field.</summary>
    public const int SilencerSmokeAsset3PFieldNumber = 92;
    private string silencerSmokeAsset3P_ = "";
    /// <summary>
    /// 消音状态下烟特效3p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SilencerSmokeAsset3P {
      get { return silencerSmokeAsset3P_; }
      set {
        silencerSmokeAsset3P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TrackMuzzleOnPoint1P" field.</summary>
    public const int TrackMuzzleOnPoint1PFieldNumber = 93;
    private bool trackMuzzleOnPoint1P_;
    /// <summary>
    /// 1p弹道起点是否采用固定点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TrackMuzzleOnPoint1P {
      get { return trackMuzzleOnPoint1P_; }
      set {
        trackMuzzleOnPoint1P_ = value;
      }
    }

    /// <summary>Field number for the "TrackMuzzlePoint1P" field.</summary>
    public const int TrackMuzzlePoint1PFieldNumber = 94;
    private static readonly pb::FieldCodec<float> _repeated_trackMuzzlePoint1P_codec
        = pb::FieldCodec.ForFloat(754);
    private readonly pbc::RepeatedField<float> trackMuzzlePoint1P_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 1p弹道起点固定点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> TrackMuzzlePoint1P {
      get { return trackMuzzlePoint1P_; }
    }

    /// <summary>Field number for the "VFXTriggerFireKilledAsset1P" field.</summary>
    public const int VFXTriggerFireKilledAsset1PFieldNumber = 95;
    private string vFXTriggerFireKilledAsset1P_ = "";
    /// <summary>
    /// 1P特殊触发特效——开火击中触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXTriggerFireKilledAsset1P {
      get { return vFXTriggerFireKilledAsset1P_; }
      set {
        vFXTriggerFireKilledAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXTriggerFireKilledDeadAsset1P" field.</summary>
    public const int VFXTriggerFireKilledDeadAsset1PFieldNumber = 96;
    private string vFXTriggerFireKilledDeadAsset1P_ = "";
    /// <summary>
    /// 1P特殊触发特效——开火击杀触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXTriggerFireKilledDeadAsset1P {
      get { return vFXTriggerFireKilledDeadAsset1P_; }
      set {
        vFXTriggerFireKilledDeadAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXTriggerFireAroundAsset1P" field.</summary>
    public const int VFXTriggerFireAroundAsset1PFieldNumber = 97;
    private string vFXTriggerFireAroundAsset1P_ = "";
    /// <summary>
    /// 1P特殊触发特效——开火触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXTriggerFireAroundAsset1P {
      get { return vFXTriggerFireAroundAsset1P_; }
      set {
        vFXTriggerFireAroundAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXTriggerShowOffAsset1P" field.</summary>
    public const int VFXTriggerShowOffAsset1PFieldNumber = 98;
    private string vFXTriggerShowOffAsset1P_ = "";
    /// <summary>
    /// 1P特殊触发特效——观枪触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXTriggerShowOffAsset1P {
      get { return vFXTriggerShowOffAsset1P_; }
      set {
        vFXTriggerShowOffAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXTriggerChangeClipAsset1P" field.</summary>
    public const int VFXTriggerChangeClipAsset1PFieldNumber = 99;
    private string vFXTriggerChangeClipAsset1P_ = "";
    /// <summary>
    /// 1P特殊触发特效——换弹触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXTriggerChangeClipAsset1P {
      get { return vFXTriggerChangeClipAsset1P_; }
      set {
        vFXTriggerChangeClipAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXTriggerEquipWeaponAsset1P" field.</summary>
    public const int VFXTriggerEquipWeaponAsset1PFieldNumber = 100;
    private string vFXTriggerEquipWeaponAsset1P_ = "";
    /// <summary>
    /// 1P特殊触发特效——装备触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXTriggerEquipWeaponAsset1P {
      get { return vFXTriggerEquipWeaponAsset1P_; }
      set {
        vFXTriggerEquipWeaponAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXKeepNormalAsset1P" field.</summary>
    public const int VFXKeepNormalAsset1PFieldNumber = 101;
    private string vFXKeepNormalAsset1P_ = "";
    /// <summary>
    /// 1P特殊触发特效——常规保持 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXKeepNormalAsset1P {
      get { return vFXKeepNormalAsset1P_; }
      set {
        vFXKeepNormalAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXTriggersSocketName1P" field.</summary>
    public const int VFXTriggersSocketName1PFieldNumber = 102;
    private string vFXTriggersSocketName1P_ = "";
    /// <summary>
    /// 1P特殊触发特效通用挂载节点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXTriggersSocketName1P {
      get { return vFXTriggersSocketName1P_; }
      set {
        vFXTriggersSocketName1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXDynamicFireKilledAsset1P" field.</summary>
    public const int VFXDynamicFireKilledAsset1PFieldNumber = 103;
    private string vFXDynamicFireKilledAsset1P_ = "";
    /// <summary>
    /// 1P特殊触发特效——开火击中触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXDynamicFireKilledAsset1P {
      get { return vFXDynamicFireKilledAsset1P_; }
      set {
        vFXDynamicFireKilledAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXDynamicFireAroundAsset1P" field.</summary>
    public const int VFXDynamicFireAroundAsset1PFieldNumber = 104;
    private string vFXDynamicFireAroundAsset1P_ = "";
    /// <summary>
    /// 1P特殊触发特效——开火触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXDynamicFireAroundAsset1P {
      get { return vFXDynamicFireAroundAsset1P_; }
      set {
        vFXDynamicFireAroundAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXDynamicShowOffAsset1P" field.</summary>
    public const int VFXDynamicShowOffAsset1PFieldNumber = 105;
    private string vFXDynamicShowOffAsset1P_ = "";
    /// <summary>
    /// 1P特殊触发特效——观枪触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXDynamicShowOffAsset1P {
      get { return vFXDynamicShowOffAsset1P_; }
      set {
        vFXDynamicShowOffAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXDynamicChangeClipAsset1P" field.</summary>
    public const int VFXDynamicChangeClipAsset1PFieldNumber = 106;
    private string vFXDynamicChangeClipAsset1P_ = "";
    /// <summary>
    /// 1P特殊触发特效——换弹触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXDynamicChangeClipAsset1P {
      get { return vFXDynamicChangeClipAsset1P_; }
      set {
        vFXDynamicChangeClipAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXDynamicEquipWeaponAsset1P" field.</summary>
    public const int VFXDynamicEquipWeaponAsset1PFieldNumber = 107;
    private string vFXDynamicEquipWeaponAsset1P_ = "";
    /// <summary>
    /// 1P特殊触发特效——装备触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXDynamicEquipWeaponAsset1P {
      get { return vFXDynamicEquipWeaponAsset1P_; }
      set {
        vFXDynamicEquipWeaponAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXDynamicKeepNormalAsset1P" field.</summary>
    public const int VFXDynamicKeepNormalAsset1PFieldNumber = 108;
    private string vFXDynamicKeepNormalAsset1P_ = "";
    /// <summary>
    /// 1P特殊触发特效——常规保持 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXDynamicKeepNormalAsset1P {
      get { return vFXDynamicKeepNormalAsset1P_; }
      set {
        vFXDynamicKeepNormalAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXDynamicReloadAmmoAsset1P" field.</summary>
    public const int VFXDynamicReloadAmmoAsset1PFieldNumber = 109;
    private string vFXDynamicReloadAmmoAsset1P_ = "";
    /// <summary>
    /// 1P特殊触发特效——弹药填充瞬间触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXDynamicReloadAmmoAsset1P {
      get { return vFXDynamicReloadAmmoAsset1P_; }
      set {
        vFXDynamicReloadAmmoAsset1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXDynamicFireKilledSocketName1P" field.</summary>
    public const int VFXDynamicFireKilledSocketName1PFieldNumber = 110;
    private string vFXDynamicFireKilledSocketName1P_ = "";
    /// <summary>
    /// 挂点:1P特殊触发特效——开火击中触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXDynamicFireKilledSocketName1P {
      get { return vFXDynamicFireKilledSocketName1P_; }
      set {
        vFXDynamicFireKilledSocketName1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXDynamicFireAroundSocketName1P" field.</summary>
    public const int VFXDynamicFireAroundSocketName1PFieldNumber = 111;
    private string vFXDynamicFireAroundSocketName1P_ = "";
    /// <summary>
    /// 挂点:1P特殊触发特效——开火触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXDynamicFireAroundSocketName1P {
      get { return vFXDynamicFireAroundSocketName1P_; }
      set {
        vFXDynamicFireAroundSocketName1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXDynamicShowOffSocketName1P" field.</summary>
    public const int VFXDynamicShowOffSocketName1PFieldNumber = 112;
    private string vFXDynamicShowOffSocketName1P_ = "";
    /// <summary>
    /// 挂点:1P特殊触发特效——观枪触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXDynamicShowOffSocketName1P {
      get { return vFXDynamicShowOffSocketName1P_; }
      set {
        vFXDynamicShowOffSocketName1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXDynamicChangeClipSocketName1P" field.</summary>
    public const int VFXDynamicChangeClipSocketName1PFieldNumber = 113;
    private string vFXDynamicChangeClipSocketName1P_ = "";
    /// <summary>
    /// 挂点:1P特殊触发特效——换弹触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXDynamicChangeClipSocketName1P {
      get { return vFXDynamicChangeClipSocketName1P_; }
      set {
        vFXDynamicChangeClipSocketName1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXDynamicEquipWeaponSocketName1P" field.</summary>
    public const int VFXDynamicEquipWeaponSocketName1PFieldNumber = 114;
    private string vFXDynamicEquipWeaponSocketName1P_ = "";
    /// <summary>
    /// 挂点:1P特殊触发特效——装备触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXDynamicEquipWeaponSocketName1P {
      get { return vFXDynamicEquipWeaponSocketName1P_; }
      set {
        vFXDynamicEquipWeaponSocketName1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXDynamicKeepSocketName1P" field.</summary>
    public const int VFXDynamicKeepSocketName1PFieldNumber = 115;
    private string vFXDynamicKeepSocketName1P_ = "";
    /// <summary>
    /// 挂点:1P特殊触发特效——常规保持 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXDynamicKeepSocketName1P {
      get { return vFXDynamicKeepSocketName1P_; }
      set {
        vFXDynamicKeepSocketName1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXDynamicReloadAmmoSocketName1P" field.</summary>
    public const int VFXDynamicReloadAmmoSocketName1PFieldNumber = 116;
    private string vFXDynamicReloadAmmoSocketName1P_ = "";
    /// <summary>
    /// 挂点:1P特殊触发特效——弹药填充瞬间触发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXDynamicReloadAmmoSocketName1P {
      get { return vFXDynamicReloadAmmoSocketName1P_; }
      set {
        vFXDynamicReloadAmmoSocketName1P_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXIgniteFlameAsset" field.</summary>
    public const int VFXIgniteFlameAssetFieldNumber = 117;
    private string vFXIgniteFlameAsset_ = "";
    /// <summary>
    /// 手雷点火特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXIgniteFlameAsset {
      get { return vFXIgniteFlameAsset_; }
      set {
        vFXIgniteFlameAsset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXLighterAsset" field.</summary>
    public const int VFXLighterAssetFieldNumber = 118;
    private string vFXLighterAsset_ = "";
    /// <summary>
    /// 燃烧弹打火机特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXLighterAsset {
      get { return vFXLighterAsset_; }
      set {
        vFXLighterAsset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LighterSocketName" field.</summary>
    public const int LighterSocketNameFieldNumber = 119;
    private string lighterSocketName_ = "";
    /// <summary>
    /// 燃烧弹打火机挂点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LighterSocketName {
      get { return lighterSocketName_; }
      set {
        lighterSocketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RopeFireSocketTpName" field.</summary>
    public const int RopeFireSocketTpNameFieldNumber = 120;
    private string ropeFireSocketTpName_ = "";
    /// <summary>
    /// 燃烧弹绳子TP挂点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RopeFireSocketTpName {
      get { return ropeFireSocketTpName_; }
      set {
        ropeFireSocketTpName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VFXRopeTpAsset" field.</summary>
    public const int VFXRopeTpAssetFieldNumber = 121;
    private string vFXRopeTpAsset_ = "";
    /// <summary>
    /// 燃烧弹绳子TP特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VFXRopeTpAsset {
      get { return vFXRopeTpAsset_; }
      set {
        vFXRopeTpAsset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsGunSightWeapon" field.</summary>
    public const int IsGunSightWeaponFieldNumber = 122;
    private bool isGunSightWeapon_;
    /// <summary>
    /// 是否是装载狙击镜的武器 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGunSightWeapon {
      get { return isGunSightWeapon_; }
      set {
        isGunSightWeapon_ = value;
      }
    }

    /// <summary>Field number for the "FireCloseSoundFp" field.</summary>
    public const int FireCloseSoundFpFieldNumber = 123;
    private string fireCloseSoundFp_ = "";
    /// <summary>
    /// 1p近开火音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireCloseSoundFp {
      get { return fireCloseSoundFp_; }
      set {
        fireCloseSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireFarSoundFp" field.</summary>
    public const int FireFarSoundFpFieldNumber = 124;
    private string fireFarSoundFp_ = "";
    /// <summary>
    /// 1p远开火音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireFarSoundFp {
      get { return fireFarSoundFp_; }
      set {
        fireFarSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireCloseSoundTp" field.</summary>
    public const int FireCloseSoundTpFieldNumber = 125;
    private string fireCloseSoundTp_ = "";
    /// <summary>
    /// 3p近开火音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireCloseSoundTp {
      get { return fireCloseSoundTp_; }
      set {
        fireCloseSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireFarSoundTp" field.</summary>
    public const int FireFarSoundTpFieldNumber = 126;
    private string fireFarSoundTp_ = "";
    /// <summary>
    /// 3p远开火音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireFarSoundTp {
      get { return fireFarSoundTp_; }
      set {
        fireFarSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireLoopSoundTp" field.</summary>
    public const int FireLoopSoundTpFieldNumber = 127;
    private string fireLoopSoundTp_ = "";
    /// <summary>
    /// 3p 开火loop音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireLoopSoundTp {
      get { return fireLoopSoundTp_; }
      set {
        fireLoopSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireTailSoundTp" field.</summary>
    public const int FireTailSoundTpFieldNumber = 128;
    private string fireTailSoundTp_ = "";
    /// <summary>
    /// 3p 停止loop音效，并添加尾音 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireTailSoundTp {
      get { return fireTailSoundTp_; }
      set {
        fireTailSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecondFireLoopSoundTp" field.</summary>
    public const int SecondFireLoopSoundTpFieldNumber = 129;
    private string secondFireLoopSoundTp_ = "";
    /// <summary>
    /// 3p 第二套开火loop音效（消音器 或者其它） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecondFireLoopSoundTp {
      get { return secondFireLoopSoundTp_; }
      set {
        secondFireLoopSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecondFireTailSoundTp" field.</summary>
    public const int SecondFireTailSoundTpFieldNumber = 130;
    private string secondFireTailSoundTp_ = "";
    /// <summary>
    /// 3p 第二套停止loop音效，并添加尾音 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecondFireTailSoundTp {
      get { return secondFireTailSoundTp_; }
      set {
        secondFireTailSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireLoopSoundFp" field.</summary>
    public const int FireLoopSoundFpFieldNumber = 131;
    private string fireLoopSoundFp_ = "";
    /// <summary>
    /// 1p 开火loop音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireLoopSoundFp {
      get { return fireLoopSoundFp_; }
      set {
        fireLoopSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireTailSoundFp" field.</summary>
    public const int FireTailSoundFpFieldNumber = 132;
    private string fireTailSoundFp_ = "";
    /// <summary>
    /// 1p 停止loop音效，并添加尾音 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireTailSoundFp {
      get { return fireTailSoundFp_; }
      set {
        fireTailSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecondFireLoopSoundFp" field.</summary>
    public const int SecondFireLoopSoundFpFieldNumber = 133;
    private string secondFireLoopSoundFp_ = "";
    /// <summary>
    /// 1p 第二套开火loop音效（消音器 或者其它） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecondFireLoopSoundFp {
      get { return secondFireLoopSoundFp_; }
      set {
        secondFireLoopSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecondFireTailSoundFp" field.</summary>
    public const int SecondFireTailSoundFpFieldNumber = 134;
    private string secondFireTailSoundFp_ = "";
    /// <summary>
    /// 1p 第二套停止loop音效，并添加尾音 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecondFireTailSoundFp {
      get { return secondFireTailSoundFp_; }
      set {
        secondFireTailSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReloadSoundFp" field.</summary>
    public const int ReloadSoundFpFieldNumber = 135;
    private string reloadSoundFp_ = "";
    /// <summary>
    /// 1p填充子弹音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReloadSoundFp {
      get { return reloadSoundFp_; }
      set {
        reloadSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReloadEndSoundFp" field.</summary>
    public const int ReloadEndSoundFpFieldNumber = 136;
    private string reloadEndSoundFp_ = "";
    /// <summary>
    /// 1p填充子弹结束音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReloadEndSoundFp {
      get { return reloadEndSoundFp_; }
      set {
        reloadEndSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReloadSoundTp" field.</summary>
    public const int ReloadSoundTpFieldNumber = 137;
    private string reloadSoundTp_ = "";
    /// <summary>
    /// 3p填充子弹音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReloadSoundTp {
      get { return reloadSoundTp_; }
      set {
        reloadSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReloadEndSoundTp" field.</summary>
    public const int ReloadEndSoundTpFieldNumber = 138;
    private string reloadEndSoundTp_ = "";
    /// <summary>
    /// 3p填充子弹结束音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReloadEndSoundTp {
      get { return reloadEndSoundTp_; }
      set {
        reloadEndSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReloadStopSoundFp" field.</summary>
    public const int ReloadStopSoundFpFieldNumber = 139;
    private string reloadStopSoundFp_ = "";
    /// <summary>
    /// Stop reload音效 1p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReloadStopSoundFp {
      get { return reloadStopSoundFp_; }
      set {
        reloadStopSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReloadStopSoundTp" field.</summary>
    public const int ReloadStopSoundTpFieldNumber = 140;
    private string reloadStopSoundTp_ = "";
    /// <summary>
    /// Stop reload音效 3p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReloadStopSoundTp {
      get { return reloadStopSoundTp_; }
      set {
        reloadStopSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecondReloadSoundFp" field.</summary>
    public const int SecondReloadSoundFpFieldNumber = 141;
    private string secondReloadSoundFp_ = "";
    /// <summary>
    /// 第二套填充子弹音效fP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecondReloadSoundFp {
      get { return secondReloadSoundFp_; }
      set {
        secondReloadSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecondReloadStopSoundFp" field.</summary>
    public const int SecondReloadStopSoundFpFieldNumber = 142;
    private string secondReloadStopSoundFp_ = "";
    /// <summary>
    /// Stop 第二套填充子弹音效fP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecondReloadStopSoundFp {
      get { return secondReloadStopSoundFp_; }
      set {
        secondReloadStopSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecondReloadSoundTp" field.</summary>
    public const int SecondReloadSoundTpFieldNumber = 143;
    private string secondReloadSoundTp_ = "";
    /// <summary>
    /// 第二套填充子弹音效TP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecondReloadSoundTp {
      get { return secondReloadSoundTp_; }
      set {
        secondReloadSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecondReloadStopSoundTp" field.</summary>
    public const int SecondReloadStopSoundTpFieldNumber = 144;
    private string secondReloadStopSoundTp_ = "";
    /// <summary>
    /// Stop 第二套填充子弹音效TP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecondReloadStopSoundTp {
      get { return secondReloadStopSoundTp_; }
      set {
        secondReloadStopSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PreFirePlayFp" field.</summary>
    public const int PreFirePlayFpFieldNumber = 145;
    private string preFirePlayFp_ = "";
    /// <summary>
    /// 蓄力开火Fp音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreFirePlayFp {
      get { return preFirePlayFp_; }
      set {
        preFirePlayFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PreFireStopFp" field.</summary>
    public const int PreFireStopFpFieldNumber = 146;
    private string preFireStopFp_ = "";
    /// <summary>
    /// 停止蓄力开火Fp音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreFireStopFp {
      get { return preFireStopFp_; }
      set {
        preFireStopFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PreFirePlayTp" field.</summary>
    public const int PreFirePlayTpFieldNumber = 147;
    private string preFirePlayTp_ = "";
    /// <summary>
    /// 蓄力开火Tp音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreFirePlayTp {
      get { return preFirePlayTp_; }
      set {
        preFirePlayTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PreFireStopTp" field.</summary>
    public const int PreFireStopTpFieldNumber = 148;
    private string preFireStopTp_ = "";
    /// <summary>
    /// 停止蓄力开火Fp音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreFireStopTp {
      get { return preFireStopTp_; }
      set {
        preFireStopTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeploySound" field.</summary>
    public const int DeploySoundFieldNumber = 149;
    private string deploySound_ = "";
    /// <summary>
    /// 装枪 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeploySound {
      get { return deploySound_; }
      set {
        deploySound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeployStopSound" field.</summary>
    public const int DeployStopSoundFieldNumber = 150;
    private string deployStopSound_ = "";
    /// <summary>
    /// Stop Deploy音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeployStopSound {
      get { return deployStopSound_; }
      set {
        deployStopSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecondDeploySound" field.</summary>
    public const int SecondDeploySoundFieldNumber = 151;
    private string secondDeploySound_ = "";
    /// <summary>
    /// 第二套装枪 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecondDeploySound {
      get { return secondDeploySound_; }
      set {
        secondDeploySound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecondDeployStopSound" field.</summary>
    public const int SecondDeployStopSoundFieldNumber = 152;
    private string secondDeployStopSound_ = "";
    /// <summary>
    /// Stop 第二套Deploy音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecondDeployStopSound {
      get { return secondDeployStopSound_; }
      set {
        secondDeployStopSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WeaponImpactSound" field.</summary>
    public const int WeaponImpactSoundFieldNumber = 153;
    private string weaponImpactSound_ = "";
    /// <summary>
    /// 丢枪音效(枪械与地面受击音效 根据地面材质显示不同声音) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeaponImpactSound {
      get { return weaponImpactSound_; }
      set {
        weaponImpactSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FireSoundCloseDis" field.</summary>
    public const int FireSoundCloseDisFieldNumber = 154;
    private int fireSoundCloseDis_;
    /// <summary>
    /// 开枪距离近（声音不同） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FireSoundCloseDis {
      get { return fireSoundCloseDis_; }
      set {
        fireSoundCloseDis_ = value;
      }
    }

    /// <summary>Field number for the "FireDelayTime" field.</summary>
    public const int FireDelayTimeFieldNumber = 155;
    private float fireDelayTime_;
    /// <summary>
    /// 开火后接着拉枪的间隔时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireDelayTime {
      get { return fireDelayTime_; }
      set {
        fireDelayTime_ = value;
      }
    }

    /// <summary>Field number for the "RemainingCount" field.</summary>
    public const int RemainingCountFieldNumber = 156;
    private float remainingCount_;
    /// <summary>
    /// 剩余几发子弹的音效的播放子弹数量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RemainingCount {
      get { return remainingCount_; }
      set {
        remainingCount_ = value;
      }
    }

    /// <summary>Field number for the "SilencerFireSoundFP" field.</summary>
    public const int SilencerFireSoundFPFieldNumber = 157;
    private string silencerFireSoundFP_ = "";
    /// <summary>
    /// 消音开火 1P 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SilencerFireSoundFP {
      get { return silencerFireSoundFP_; }
      set {
        silencerFireSoundFP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SilencerFireSoundTP" field.</summary>
    public const int SilencerFireSoundTPFieldNumber = 158;
    private string silencerFireSoundTP_ = "";
    /// <summary>
    /// 消音开火 3P 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SilencerFireSoundTP {
      get { return silencerFireSoundTP_; }
      set {
        silencerFireSoundTP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SilencerLoadSoundFP" field.</summary>
    public const int SilencerLoadSoundFPFieldNumber = 159;
    private string silencerLoadSoundFP_ = "";
    /// <summary>
    /// 装消音器 1P 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SilencerLoadSoundFP {
      get { return silencerLoadSoundFP_; }
      set {
        silencerLoadSoundFP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopSilencerLoadSoundFP" field.</summary>
    public const int StopSilencerLoadSoundFPFieldNumber = 160;
    private string stopSilencerLoadSoundFP_ = "";
    /// <summary>
    /// 关闭装消音器 1P 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopSilencerLoadSoundFP {
      get { return stopSilencerLoadSoundFP_; }
      set {
        stopSilencerLoadSoundFP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SilencerUnLoadSoundFP" field.</summary>
    public const int SilencerUnLoadSoundFPFieldNumber = 161;
    private string silencerUnLoadSoundFP_ = "";
    /// <summary>
    /// 卸下消音器 1P 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SilencerUnLoadSoundFP {
      get { return silencerUnLoadSoundFP_; }
      set {
        silencerUnLoadSoundFP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopSilencerUnLoadSoundFP" field.</summary>
    public const int StopSilencerUnLoadSoundFPFieldNumber = 162;
    private string stopSilencerUnLoadSoundFP_ = "";
    /// <summary>
    /// 关闭卸下装消音器 1P 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopSilencerUnLoadSoundFP {
      get { return stopSilencerUnLoadSoundFP_; }
      set {
        stopSilencerUnLoadSoundFP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClearShotShellsSoundOnDead" field.</summary>
    public const int ClearShotShellsSoundOnDeadFieldNumber = 163;
    private bool clearShotShellsSoundOnDead_;
    /// <summary>
    /// 人物死亡时是否清空弹壳坠地音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearShotShellsSoundOnDead {
      get { return clearShotShellsSoundOnDead_; }
      set {
        clearShotShellsSoundOnDead_ = value;
      }
    }

    /// <summary>Field number for the "ShotShellsSoundFP" field.</summary>
    public const int ShotShellsSoundFPFieldNumber = 164;
    private string shotShellsSoundFP_ = "";
    /// <summary>
    /// 弹壳坠地音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShotShellsSoundFP {
      get { return shotShellsSoundFP_; }
      set {
        shotShellsSoundFP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ContinuousShotShellsDelayTime" field.</summary>
    public const int ContinuousShotShellsDelayTimeFieldNumber = 165;
    private float continuousShotShellsDelayTime_;
    /// <summary>
    /// 弹壳坠地音效延迟 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ContinuousShotShellsDelayTime {
      get { return continuousShotShellsDelayTime_; }
      set {
        continuousShotShellsDelayTime_ = value;
      }
    }

    /// <summary>Field number for the "ContinuousShotShellsSoundFP" field.</summary>
    public const int ContinuousShotShellsSoundFPFieldNumber = 166;
    private string continuousShotShellsSoundFP_ = "";
    /// <summary>
    /// 连发弹壳坠地音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContinuousShotShellsSoundFP {
      get { return continuousShotShellsSoundFP_; }
      set {
        continuousShotShellsSoundFP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ShotShellsDelayTime" field.</summary>
    public const int ShotShellsDelayTimeFieldNumber = 167;
    private float shotShellsDelayTime_;
    /// <summary>
    /// 连发弹壳坠地音效延迟 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShotShellsDelayTime {
      get { return shotShellsDelayTime_; }
      set {
        shotShellsDelayTime_ = value;
      }
    }

    /// <summary>Field number for the "EmptySoundFP" field.</summary>
    public const int EmptySoundFPFieldNumber = 168;
    private string emptySoundFP_ = "";
    /// <summary>
    /// 空枪音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EmptySoundFP {
      get { return emptySoundFP_; }
      set {
        emptySoundFP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReloadLoopSoundFP" field.</summary>
    public const int ReloadLoopSoundFPFieldNumber = 169;
    private string reloadLoopSoundFP_ = "";
    /// <summary>
    /// 循环换弹音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReloadLoopSoundFP {
      get { return reloadLoopSoundFP_; }
      set {
        reloadLoopSoundFP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EmptySoundTP" field.</summary>
    public const int EmptySoundTPFieldNumber = 170;
    private string emptySoundTP_ = "";
    /// <summary>
    /// 空枪音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EmptySoundTP {
      get { return emptySoundTP_; }
      set {
        emptySoundTP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReloadLoopSoundTP" field.</summary>
    public const int ReloadLoopSoundTPFieldNumber = 171;
    private string reloadLoopSoundTP_ = "";
    /// <summary>
    /// 循环换弹音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReloadLoopSoundTP {
      get { return reloadLoopSoundTP_; }
      set {
        reloadLoopSoundTP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AppreciateWeaponSounds" field.</summary>
    public const int AppreciateWeaponSoundsFieldNumber = 172;
    private static readonly pb::FieldCodec<string> _repeated_appreciateWeaponSounds_codec
        = pb::FieldCodec.ForString(1378);
    private readonly pbc::RepeatedField<string> appreciateWeaponSounds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 观枪音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AppreciateWeaponSounds {
      get { return appreciateWeaponSounds_; }
    }

    /// <summary>Field number for the "AppreciateWeaponStopSounds" field.</summary>
    public const int AppreciateWeaponStopSoundsFieldNumber = 173;
    private static readonly pb::FieldCodec<string> _repeated_appreciateWeaponStopSounds_codec
        = pb::FieldCodec.ForString(1386);
    private readonly pbc::RepeatedField<string> appreciateWeaponStopSounds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 观枪音效停止 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AppreciateWeaponStopSounds {
      get { return appreciateWeaponStopSounds_; }
    }

    /// <summary>Field number for the "AppreciateWeaponSoundDelays" field.</summary>
    public const int AppreciateWeaponSoundDelaysFieldNumber = 174;
    private static readonly pb::FieldCodec<float> _repeated_appreciateWeaponSoundDelays_codec
        = pb::FieldCodec.ForFloat(1394);
    private readonly pbc::RepeatedField<float> appreciateWeaponSoundDelays_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 观枪音效延迟 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AppreciateWeaponSoundDelays {
      get { return appreciateWeaponSoundDelays_; }
    }

    /// <summary>Field number for the "FireAnimSpeed" field.</summary>
    public const int FireAnimSpeedFieldNumber = 175;
    private float fireAnimSpeed_;
    /// <summary>
    /// 开火的动画速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireAnimSpeed {
      get { return fireAnimSpeed_; }
      set {
        fireAnimSpeed_ = value;
      }
    }

    /// <summary>Field number for the "FireThreeContinueAnimSpeed" field.</summary>
    public const int FireThreeContinueAnimSpeedFieldNumber = 176;
    private float fireThreeContinueAnimSpeed_;
    /// <summary>
    /// 开火的三连发动画速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireThreeContinueAnimSpeed {
      get { return fireThreeContinueAnimSpeed_; }
      set {
        fireThreeContinueAnimSpeed_ = value;
      }
    }

    /// <summary>Field number for the "FireContinueAnimSpeed" field.</summary>
    public const int FireContinueAnimSpeedFieldNumber = 177;
    private float fireContinueAnimSpeed_;
    /// <summary>
    /// 连续的开火速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireContinueAnimSpeed {
      get { return fireContinueAnimSpeed_; }
      set {
        fireContinueAnimSpeed_ = value;
      }
    }

    /// <summary>Field number for the "TripleFireAnimSpeed" field.</summary>
    public const int TripleFireAnimSpeedFieldNumber = 178;
    private float tripleFireAnimSpeed_;
    /// <summary>
    /// triple开火速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TripleFireAnimSpeed {
      get { return tripleFireAnimSpeed_; }
      set {
        tripleFireAnimSpeed_ = value;
      }
    }

    /// <summary>Field number for the "ChangeClipAnimSpeed" field.</summary>
    public const int ChangeClipAnimSpeedFieldNumber = 179;
    private float changeClipAnimSpeed_;
    /// <summary>
    /// 换弹速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChangeClipAnimSpeed {
      get { return changeClipAnimSpeed_; }
      set {
        changeClipAnimSpeed_ = value;
      }
    }

    /// <summary>Field number for the "ChangeClipLoopAnimSpeed" field.</summary>
    public const int ChangeClipLoopAnimSpeedFieldNumber = 180;
    private float changeClipLoopAnimSpeed_;
    /// <summary>
    /// 循环换弹速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChangeClipLoopAnimSpeed {
      get { return changeClipLoopAnimSpeed_; }
      set {
        changeClipLoopAnimSpeed_ = value;
      }
    }

    /// <summary>Field number for the "CrouchChangeClipAnimSpeed" field.</summary>
    public const int CrouchChangeClipAnimSpeedFieldNumber = 181;
    private float crouchChangeClipAnimSpeed_;
    /// <summary>
    /// 蹲下换弹速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CrouchChangeClipAnimSpeed {
      get { return crouchChangeClipAnimSpeed_; }
      set {
        crouchChangeClipAnimSpeed_ = value;
      }
    }

    /// <summary>Field number for the "IdleAnimSpeed" field.</summary>
    public const int IdleAnimSpeedFieldNumber = 182;
    private float idleAnimSpeed_;
    /// <summary>
    /// 待机速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float IdleAnimSpeed {
      get { return idleAnimSpeed_; }
      set {
        idleAnimSpeed_ = value;
      }
    }

    /// <summary>Field number for the "EquipAnimSpeed" field.</summary>
    public const int EquipAnimSpeedFieldNumber = 183;
    private float equipAnimSpeed_;
    /// <summary>
    /// 装备速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EquipAnimSpeed {
      get { return equipAnimSpeed_; }
      set {
        equipAnimSpeed_ = value;
      }
    }

    /// <summary>Field number for the "TakeDamageAnimSpeed" field.</summary>
    public const int TakeDamageAnimSpeedFieldNumber = 184;
    private float takeDamageAnimSpeed_;
    /// <summary>
    /// 受害速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TakeDamageAnimSpeed {
      get { return takeDamageAnimSpeed_; }
      set {
        takeDamageAnimSpeed_ = value;
      }
    }

    /// <summary>Field number for the "HeadTakeDamageAnimSpeed" field.</summary>
    public const int HeadTakeDamageAnimSpeedFieldNumber = 185;
    private float headTakeDamageAnimSpeed_;
    /// <summary>
    /// 头部受害速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeadTakeDamageAnimSpeed {
      get { return headTakeDamageAnimSpeed_; }
      set {
        headTakeDamageAnimSpeed_ = value;
      }
    }

    /// <summary>Field number for the "ChangeGunAnimSpeed" field.</summary>
    public const int ChangeGunAnimSpeedFieldNumber = 186;
    private float changeGunAnimSpeed_;
    /// <summary>
    /// 换枪速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChangeGunAnimSpeed {
      get { return changeGunAnimSpeed_; }
      set {
        changeGunAnimSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AnimWeightListOfChangeGun" field.</summary>
    public const int AnimWeightListOfChangeGunFieldNumber = 187;
    private static readonly pb::FieldCodec<int> _repeated_animWeightListOfChangeGun_codec
        = pb::FieldCodec.ForInt32(1498);
    private readonly pbc::RepeatedField<int> animWeightListOfChangeGun_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 换枪动画权值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AnimWeightListOfChangeGun {
      get { return animWeightListOfChangeGun_; }
    }

    /// <summary>Field number for the "AnimWeightListOfClipChange" field.</summary>
    public const int AnimWeightListOfClipChangeFieldNumber = 188;
    private static readonly pb::FieldCodec<int> _repeated_animWeightListOfClipChange_codec
        = pb::FieldCodec.ForInt32(1506);
    private readonly pbc::RepeatedField<int> animWeightListOfClipChange_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 换弹动画权值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AnimWeightListOfClipChange {
      get { return animWeightListOfClipChange_; }
    }

    /// <summary>Field number for the "AnimWeightListOfAppreciation" field.</summary>
    public const int AnimWeightListOfAppreciationFieldNumber = 189;
    private static readonly pb::FieldCodec<int> _repeated_animWeightListOfAppreciation_codec
        = pb::FieldCodec.ForInt32(1514);
    private readonly pbc::RepeatedField<int> animWeightListOfAppreciation_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 检视动画权值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AnimWeightListOfAppreciation {
      get { return animWeightListOfAppreciation_; }
    }

    /// <summary>Field number for the "HalfBodySizeX" field.</summary>
    public const int HalfBodySizeXFieldNumber = 190;
    private float halfBodySizeX_;
    /// <summary>
    /// 武器sizeX 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HalfBodySizeX {
      get { return halfBodySizeX_; }
      set {
        halfBodySizeX_ = value;
      }
    }

    /// <summary>Field number for the "HalfBodySizeY" field.</summary>
    public const int HalfBodySizeYFieldNumber = 191;
    private float halfBodySizeY_;
    /// <summary>
    /// 武器sizeY 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HalfBodySizeY {
      get { return halfBodySizeY_; }
      set {
        halfBodySizeY_ = value;
      }
    }

    /// <summary>Field number for the "ProjectileEnable" field.</summary>
    public const int ProjectileEnableFieldNumber = 192;
    private bool projectileEnable_;
    /// <summary>
    /// 投掷物开关 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProjectileEnable {
      get { return projectileEnable_; }
      set {
        projectileEnable_ = value;
      }
    }

    /// <summary>Field number for the "BallisticID" field.</summary>
    public const int BallisticIDFieldNumber = 193;
    private int ballisticID_;
    /// <summary>
    /// 弹道ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BallisticID {
      get { return ballisticID_; }
      set {
        ballisticID_ = value;
      }
    }

    /// <summary>Field number for the "GunBuffIDs" field.</summary>
    public const int GunBuffIDsFieldNumber = 194;
    private static readonly pb::FieldCodec<int> _repeated_gunBuffIDs_codec
        = pb::FieldCodec.ForInt32(1554);
    private readonly pbc::RepeatedField<int> gunBuffIDs_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 枪械词条ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GunBuffIDs {
      get { return gunBuffIDs_; }
    }

    /// <summary>Field number for the "ShowOffVoxSoundID" field.</summary>
    public const int ShowOffVoxSoundIDFieldNumber = 195;
    private uint showOffVoxSoundID_;
    /// <summary>
    /// 检视语音ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShowOffVoxSoundID {
      get { return showOffVoxSoundID_; }
      set {
        showOffVoxSoundID_ = value;
      }
    }

    /// <summary>Field number for the "BRFireLoopSoundTp" field.</summary>
    public const int BRFireLoopSoundTpFieldNumber = 196;
    private string bRFireLoopSoundTp_ = "";
    /// <summary>
    /// BR 3p 开火loop音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BRFireLoopSoundTp {
      get { return bRFireLoopSoundTp_; }
      set {
        bRFireLoopSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BRFireTailSoundTp" field.</summary>
    public const int BRFireTailSoundTpFieldNumber = 197;
    private string bRFireTailSoundTp_ = "";
    /// <summary>
    /// BR 3p 停止loop音效，并添加尾音 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BRFireTailSoundTp {
      get { return bRFireTailSoundTp_; }
      set {
        bRFireTailSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BRSecondFireLoopSoundTp" field.</summary>
    public const int BRSecondFireLoopSoundTpFieldNumber = 198;
    private string bRSecondFireLoopSoundTp_ = "";
    /// <summary>
    /// BR 3p 第二套开火loop音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BRSecondFireLoopSoundTp {
      get { return bRSecondFireLoopSoundTp_; }
      set {
        bRSecondFireLoopSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BRSecondFireTailSoundTp" field.</summary>
    public const int BRSecondFireTailSoundTpFieldNumber = 199;
    private string bRSecondFireTailSoundTp_ = "";
    /// <summary>
    /// BR 3p 第二套停止loop音效，并添加尾音 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BRSecondFireTailSoundTp {
      get { return bRSecondFireTailSoundTp_; }
      set {
        bRSecondFireTailSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BRFireSoundTp" field.</summary>
    public const int BRFireSoundTpFieldNumber = 200;
    private string bRFireSoundTp_ = "";
    /// <summary>
    /// BR 3p 开火音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BRFireSoundTp {
      get { return bRFireSoundTp_; }
      set {
        bRFireSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BRSilencerFireSoundTP" field.</summary>
    public const int BRSilencerFireSoundTPFieldNumber = 201;
    private string bRSilencerFireSoundTP_ = "";
    /// <summary>
    /// BR 3p 第二套开火音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BRSilencerFireSoundTP {
      get { return bRSilencerFireSoundTP_; }
      set {
        bRSilencerFireSoundTP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponPersistenceConfigComponentData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponPersistenceConfigComponentData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StateMachineTypeName != other.StateMachineTypeName) return false;
      if (FireLogicClassName != other.FireLogicClassName) return false;
      if (FireLogicClassConfigFileName != other.FireLogicClassConfigFileName) return false;
      if (SecondaryFireLogicClassName != other.SecondaryFireLogicClassName) return false;
      if (SecondaryFireLogicConfigFileName != other.SecondaryFireLogicConfigFileName) return false;
      if (ImpactClassName != other.ImpactClassName) return false;
      if (ImpactConfigFileName != other.ImpactConfigFileName) return false;
      if (SecondaryImpactClassName != other.SecondaryImpactClassName) return false;
      if (SecondaryImpactConfigFileName != other.SecondaryImpactConfigFileName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WeaponRange, other.WeaponRange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamageArmorScale, other.DamageArmorScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WeaponWeight, other.WeaponWeight)) return false;
      if (BuyPrice != other.BuyPrice) return false;
      if (KillAdward != other.KillAdward) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Deceleration, other.Deceleration)) return false;
      if (WeaponNickName != other.WeaponNickName) return false;
      if (MeshAssetName1P != other.MeshAssetName1P) return false;
      if (MeshAssetName != other.MeshAssetName) return false;
      if (MeshAssetNameL != other.MeshAssetNameL) return false;
      if (WeaponSocketName != other.WeaponSocketName) return false;
      if (WeaponSocketNameL != other.WeaponSocketNameL) return false;
      if (WeaponBackSocketName != other.WeaponBackSocketName) return false;
      if (WeaponBackBRSocket1Name != other.WeaponBackBRSocket1Name) return false;
      if (WeaponBackBRSocket2Name != other.WeaponBackBRSocket2Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WorldCameraFOV, other.WorldCameraFOV)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FPCameraFOV, other.FPCameraFOV)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SwitchTime, other.SwitchTime)) return false;
      if (SmokeAsset1P != other.SmokeAsset1P) return false;
      if (SmokeAsset3P != other.SmokeAsset3P) return false;
      if (DropClipAssetID1P != other.DropClipAssetID1P) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WeaponMaxMoveSpeed, other.WeaponMaxMoveSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WeaponSprintSpeed, other.WeaponSprintSpeed)) return false;
      if (WeaponCanDiscard != other.WeaponCanDiscard) return false;
      if (!object.Equals(DiscardWeaponInitDir, other.DiscardWeaponInitDir)) return false;
      if (PickUpAssetName != other.PickUpAssetName) return false;
      if (SpecialPickUpAssetName != other.SpecialPickUpAssetName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDecalDistance, other.MaxDecalDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDecalDistanceFar, other.MaxDecalDistanceFar)) return false;
      if (PlayFirstEquipAnimInTurn != other.PlayFirstEquipAnimInTurn) return false;
      if (PlayFirstEquipAnimInGame != other.PlayFirstEquipAnimInGame) return false;
      if (DeadDropMust != other.DeadDropMust) return false;
      if (DeadDropCan != other.DeadDropCan) return false;
      if (IsSilencerWeapon != other.IsSilencerWeapon) return false;
      if (BEquipSilencer != other.BEquipSilencer) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LoadSpecialTime, other.LoadSpecialTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UnLoadSpecialTime, other.UnLoadSpecialTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LoadSpecialStateTime, other.LoadSpecialStateTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UnLoadSpecialStateTime, other.UnLoadSpecialStateTime)) return false;
      if (KillCounterAssetName1P != other.KillCounterAssetName1P) return false;
      if (KillCounterAssetName3P != other.KillCounterAssetName3P) return false;
      if (IsClipHudWeapon != other.IsClipHudWeapon) return false;
      if (ClipHudAssetName1P != other.ClipHudAssetName1P) return false;
      if (ClipHudAssetName3P != other.ClipHudAssetName3P) return false;
      if (MuzzleFlashAsset1P != other.MuzzleFlashAsset1P) return false;
      if (SniperDelayEffect != other.SniperDelayEffect) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SniperDelayEffectTime, other.SniperDelayEffectTime)) return false;
      if (SniperDelayEffectSocketName != other.SniperDelayEffectSocketName) return false;
      if (MuzzleSecondFlashAsset1P != other.MuzzleSecondFlashAsset1P) return false;
      if (SkinWearNoneMuzzleFlashAsset1P != other.SkinWearNoneMuzzleFlashAsset1P) return false;
      if (SkinWearNoneMuzzleSecondFlashAsset1P != other.SkinWearNoneMuzzleSecondFlashAsset1P) return false;
      if (MuzzleFlashAsset3P != other.MuzzleFlashAsset3P) return false;
      if (SkinWearNoneMuzzleFlashAsset3P != other.SkinWearNoneMuzzleFlashAsset3P) return false;
      if (MuzzleHotSmokeSocketName != other.MuzzleHotSmokeSocketName) return false;
      if (MuzzleFlashSocketName != other.MuzzleFlashSocketName) return false;
      if (MuzzleHotSmokeAsset != other.MuzzleHotSmokeAsset) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireTrackSmokeTime, other.FireTrackSmokeTime)) return false;
      if(!fireTrackFlashAssets_.Equals(other.fireTrackFlashAssets_)) return false;
      if(!fireTrackFlashAsset3Ps_.Equals(other.fireTrackFlashAsset3Ps_)) return false;
      if(!fireTrackSmokeAssets_.Equals(other.fireTrackSmokeAssets_)) return false;
      if(!fireTrackSmokeAsset3Ps_.Equals(other.fireTrackSmokeAsset3Ps_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireTrackSmokeTime3P, other.FireTrackSmokeTime3P)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireTrackFlashSpeed, other.FireTrackFlashSpeed)) return false;
      if (IntervalNumTrack != other.IntervalNumTrack) return false;
      if (MuzzleHotSmokeNum != other.MuzzleHotSmokeNum) return false;
      if (MinDistanceTrack != other.MinDistanceTrack) return false;
      if (ShellDropAsset != other.ShellDropAsset) return false;
      if (ShellDropSocketName != other.ShellDropSocketName) return false;
      if (ShellDropAsset3P != other.ShellDropAsset3P) return false;
      if (ShellDropSocket3PName != other.ShellDropSocket3PName) return false;
      if (AnimPartical1P != other.AnimPartical1P) return false;
      if (AnimPartical1PName != other.AnimPartical1PName) return false;
      if (LightPointAsset != other.LightPointAsset) return false;
      if (LightPointAsset3P != other.LightPointAsset3P) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(QuickStopSpeed, other.QuickStopSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(QuickStopTime, other.QuickStopTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(QuickStopMoveSpread, other.QuickStopMoveSpread)) return false;
      if (UseCommonAmmos != other.UseCommonAmmos) return false;
      if (AppreciateAnis != other.AppreciateAnis) return false;
      if (SilencerFlashAsset1P != other.SilencerFlashAsset1P) return false;
      if (SilencerFlashAsset3P != other.SilencerFlashAsset3P) return false;
      if (SilencerSmokeAsset1P != other.SilencerSmokeAsset1P) return false;
      if (SilencerSmokeAsset3P != other.SilencerSmokeAsset3P) return false;
      if (TrackMuzzleOnPoint1P != other.TrackMuzzleOnPoint1P) return false;
      if(!trackMuzzlePoint1P_.Equals(other.trackMuzzlePoint1P_)) return false;
      if (VFXTriggerFireKilledAsset1P != other.VFXTriggerFireKilledAsset1P) return false;
      if (VFXTriggerFireKilledDeadAsset1P != other.VFXTriggerFireKilledDeadAsset1P) return false;
      if (VFXTriggerFireAroundAsset1P != other.VFXTriggerFireAroundAsset1P) return false;
      if (VFXTriggerShowOffAsset1P != other.VFXTriggerShowOffAsset1P) return false;
      if (VFXTriggerChangeClipAsset1P != other.VFXTriggerChangeClipAsset1P) return false;
      if (VFXTriggerEquipWeaponAsset1P != other.VFXTriggerEquipWeaponAsset1P) return false;
      if (VFXKeepNormalAsset1P != other.VFXKeepNormalAsset1P) return false;
      if (VFXTriggersSocketName1P != other.VFXTriggersSocketName1P) return false;
      if (VFXDynamicFireKilledAsset1P != other.VFXDynamicFireKilledAsset1P) return false;
      if (VFXDynamicFireAroundAsset1P != other.VFXDynamicFireAroundAsset1P) return false;
      if (VFXDynamicShowOffAsset1P != other.VFXDynamicShowOffAsset1P) return false;
      if (VFXDynamicChangeClipAsset1P != other.VFXDynamicChangeClipAsset1P) return false;
      if (VFXDynamicEquipWeaponAsset1P != other.VFXDynamicEquipWeaponAsset1P) return false;
      if (VFXDynamicKeepNormalAsset1P != other.VFXDynamicKeepNormalAsset1P) return false;
      if (VFXDynamicReloadAmmoAsset1P != other.VFXDynamicReloadAmmoAsset1P) return false;
      if (VFXDynamicFireKilledSocketName1P != other.VFXDynamicFireKilledSocketName1P) return false;
      if (VFXDynamicFireAroundSocketName1P != other.VFXDynamicFireAroundSocketName1P) return false;
      if (VFXDynamicShowOffSocketName1P != other.VFXDynamicShowOffSocketName1P) return false;
      if (VFXDynamicChangeClipSocketName1P != other.VFXDynamicChangeClipSocketName1P) return false;
      if (VFXDynamicEquipWeaponSocketName1P != other.VFXDynamicEquipWeaponSocketName1P) return false;
      if (VFXDynamicKeepSocketName1P != other.VFXDynamicKeepSocketName1P) return false;
      if (VFXDynamicReloadAmmoSocketName1P != other.VFXDynamicReloadAmmoSocketName1P) return false;
      if (VFXIgniteFlameAsset != other.VFXIgniteFlameAsset) return false;
      if (VFXLighterAsset != other.VFXLighterAsset) return false;
      if (LighterSocketName != other.LighterSocketName) return false;
      if (RopeFireSocketTpName != other.RopeFireSocketTpName) return false;
      if (VFXRopeTpAsset != other.VFXRopeTpAsset) return false;
      if (IsGunSightWeapon != other.IsGunSightWeapon) return false;
      if (FireCloseSoundFp != other.FireCloseSoundFp) return false;
      if (FireFarSoundFp != other.FireFarSoundFp) return false;
      if (FireCloseSoundTp != other.FireCloseSoundTp) return false;
      if (FireFarSoundTp != other.FireFarSoundTp) return false;
      if (FireLoopSoundTp != other.FireLoopSoundTp) return false;
      if (FireTailSoundTp != other.FireTailSoundTp) return false;
      if (SecondFireLoopSoundTp != other.SecondFireLoopSoundTp) return false;
      if (SecondFireTailSoundTp != other.SecondFireTailSoundTp) return false;
      if (FireLoopSoundFp != other.FireLoopSoundFp) return false;
      if (FireTailSoundFp != other.FireTailSoundFp) return false;
      if (SecondFireLoopSoundFp != other.SecondFireLoopSoundFp) return false;
      if (SecondFireTailSoundFp != other.SecondFireTailSoundFp) return false;
      if (ReloadSoundFp != other.ReloadSoundFp) return false;
      if (ReloadEndSoundFp != other.ReloadEndSoundFp) return false;
      if (ReloadSoundTp != other.ReloadSoundTp) return false;
      if (ReloadEndSoundTp != other.ReloadEndSoundTp) return false;
      if (ReloadStopSoundFp != other.ReloadStopSoundFp) return false;
      if (ReloadStopSoundTp != other.ReloadStopSoundTp) return false;
      if (SecondReloadSoundFp != other.SecondReloadSoundFp) return false;
      if (SecondReloadStopSoundFp != other.SecondReloadStopSoundFp) return false;
      if (SecondReloadSoundTp != other.SecondReloadSoundTp) return false;
      if (SecondReloadStopSoundTp != other.SecondReloadStopSoundTp) return false;
      if (PreFirePlayFp != other.PreFirePlayFp) return false;
      if (PreFireStopFp != other.PreFireStopFp) return false;
      if (PreFirePlayTp != other.PreFirePlayTp) return false;
      if (PreFireStopTp != other.PreFireStopTp) return false;
      if (DeploySound != other.DeploySound) return false;
      if (DeployStopSound != other.DeployStopSound) return false;
      if (SecondDeploySound != other.SecondDeploySound) return false;
      if (SecondDeployStopSound != other.SecondDeployStopSound) return false;
      if (WeaponImpactSound != other.WeaponImpactSound) return false;
      if (FireSoundCloseDis != other.FireSoundCloseDis) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireDelayTime, other.FireDelayTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RemainingCount, other.RemainingCount)) return false;
      if (SilencerFireSoundFP != other.SilencerFireSoundFP) return false;
      if (SilencerFireSoundTP != other.SilencerFireSoundTP) return false;
      if (SilencerLoadSoundFP != other.SilencerLoadSoundFP) return false;
      if (StopSilencerLoadSoundFP != other.StopSilencerLoadSoundFP) return false;
      if (SilencerUnLoadSoundFP != other.SilencerUnLoadSoundFP) return false;
      if (StopSilencerUnLoadSoundFP != other.StopSilencerUnLoadSoundFP) return false;
      if (ClearShotShellsSoundOnDead != other.ClearShotShellsSoundOnDead) return false;
      if (ShotShellsSoundFP != other.ShotShellsSoundFP) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ContinuousShotShellsDelayTime, other.ContinuousShotShellsDelayTime)) return false;
      if (ContinuousShotShellsSoundFP != other.ContinuousShotShellsSoundFP) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShotShellsDelayTime, other.ShotShellsDelayTime)) return false;
      if (EmptySoundFP != other.EmptySoundFP) return false;
      if (ReloadLoopSoundFP != other.ReloadLoopSoundFP) return false;
      if (EmptySoundTP != other.EmptySoundTP) return false;
      if (ReloadLoopSoundTP != other.ReloadLoopSoundTP) return false;
      if(!appreciateWeaponSounds_.Equals(other.appreciateWeaponSounds_)) return false;
      if(!appreciateWeaponStopSounds_.Equals(other.appreciateWeaponStopSounds_)) return false;
      if(!appreciateWeaponSoundDelays_.Equals(other.appreciateWeaponSoundDelays_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireAnimSpeed, other.FireAnimSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireThreeContinueAnimSpeed, other.FireThreeContinueAnimSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireContinueAnimSpeed, other.FireContinueAnimSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TripleFireAnimSpeed, other.TripleFireAnimSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChangeClipAnimSpeed, other.ChangeClipAnimSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChangeClipLoopAnimSpeed, other.ChangeClipLoopAnimSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CrouchChangeClipAnimSpeed, other.CrouchChangeClipAnimSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IdleAnimSpeed, other.IdleAnimSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EquipAnimSpeed, other.EquipAnimSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeDamageAnimSpeed, other.TakeDamageAnimSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeadTakeDamageAnimSpeed, other.HeadTakeDamageAnimSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChangeGunAnimSpeed, other.ChangeGunAnimSpeed)) return false;
      if(!animWeightListOfChangeGun_.Equals(other.animWeightListOfChangeGun_)) return false;
      if(!animWeightListOfClipChange_.Equals(other.animWeightListOfClipChange_)) return false;
      if(!animWeightListOfAppreciation_.Equals(other.animWeightListOfAppreciation_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HalfBodySizeX, other.HalfBodySizeX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HalfBodySizeY, other.HalfBodySizeY)) return false;
      if (ProjectileEnable != other.ProjectileEnable) return false;
      if (BallisticID != other.BallisticID) return false;
      if(!gunBuffIDs_.Equals(other.gunBuffIDs_)) return false;
      if (ShowOffVoxSoundID != other.ShowOffVoxSoundID) return false;
      if (BRFireLoopSoundTp != other.BRFireLoopSoundTp) return false;
      if (BRFireTailSoundTp != other.BRFireTailSoundTp) return false;
      if (BRSecondFireLoopSoundTp != other.BRSecondFireLoopSoundTp) return false;
      if (BRSecondFireTailSoundTp != other.BRSecondFireTailSoundTp) return false;
      if (BRFireSoundTp != other.BRFireSoundTp) return false;
      if (BRSilencerFireSoundTP != other.BRSilencerFireSoundTP) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StateMachineTypeName.Length != 0) hash ^= StateMachineTypeName.GetHashCode();
      if (FireLogicClassName.Length != 0) hash ^= FireLogicClassName.GetHashCode();
      if (FireLogicClassConfigFileName.Length != 0) hash ^= FireLogicClassConfigFileName.GetHashCode();
      if (SecondaryFireLogicClassName.Length != 0) hash ^= SecondaryFireLogicClassName.GetHashCode();
      if (SecondaryFireLogicConfigFileName.Length != 0) hash ^= SecondaryFireLogicConfigFileName.GetHashCode();
      if (ImpactClassName.Length != 0) hash ^= ImpactClassName.GetHashCode();
      if (ImpactConfigFileName.Length != 0) hash ^= ImpactConfigFileName.GetHashCode();
      if (SecondaryImpactClassName.Length != 0) hash ^= SecondaryImpactClassName.GetHashCode();
      if (SecondaryImpactConfigFileName.Length != 0) hash ^= SecondaryImpactConfigFileName.GetHashCode();
      if (WeaponRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WeaponRange);
      if (DamageArmorScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamageArmorScale);
      if (WeaponWeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WeaponWeight);
      if (BuyPrice != 0) hash ^= BuyPrice.GetHashCode();
      if (KillAdward != 0) hash ^= KillAdward.GetHashCode();
      if (Deceleration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Deceleration);
      if (WeaponNickName.Length != 0) hash ^= WeaponNickName.GetHashCode();
      if (MeshAssetName1P.Length != 0) hash ^= MeshAssetName1P.GetHashCode();
      if (MeshAssetName.Length != 0) hash ^= MeshAssetName.GetHashCode();
      if (MeshAssetNameL.Length != 0) hash ^= MeshAssetNameL.GetHashCode();
      if (WeaponSocketName.Length != 0) hash ^= WeaponSocketName.GetHashCode();
      if (WeaponSocketNameL.Length != 0) hash ^= WeaponSocketNameL.GetHashCode();
      if (WeaponBackSocketName.Length != 0) hash ^= WeaponBackSocketName.GetHashCode();
      if (WeaponBackBRSocket1Name.Length != 0) hash ^= WeaponBackBRSocket1Name.GetHashCode();
      if (WeaponBackBRSocket2Name.Length != 0) hash ^= WeaponBackBRSocket2Name.GetHashCode();
      if (WorldCameraFOV != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WorldCameraFOV);
      if (FPCameraFOV != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FPCameraFOV);
      if (SwitchTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SwitchTime);
      if (SmokeAsset1P.Length != 0) hash ^= SmokeAsset1P.GetHashCode();
      if (SmokeAsset3P.Length != 0) hash ^= SmokeAsset3P.GetHashCode();
      if (DropClipAssetID1P != 0) hash ^= DropClipAssetID1P.GetHashCode();
      if (WeaponMaxMoveSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WeaponMaxMoveSpeed);
      if (WeaponSprintSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WeaponSprintSpeed);
      if (WeaponCanDiscard != false) hash ^= WeaponCanDiscard.GetHashCode();
      if (discardWeaponInitDir_ != null) hash ^= DiscardWeaponInitDir.GetHashCode();
      if (PickUpAssetName.Length != 0) hash ^= PickUpAssetName.GetHashCode();
      if (SpecialPickUpAssetName.Length != 0) hash ^= SpecialPickUpAssetName.GetHashCode();
      if (MaxDecalDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDecalDistance);
      if (MaxDecalDistanceFar != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDecalDistanceFar);
      if (PlayFirstEquipAnimInTurn != false) hash ^= PlayFirstEquipAnimInTurn.GetHashCode();
      if (PlayFirstEquipAnimInGame != false) hash ^= PlayFirstEquipAnimInGame.GetHashCode();
      if (DeadDropMust != false) hash ^= DeadDropMust.GetHashCode();
      if (DeadDropCan != false) hash ^= DeadDropCan.GetHashCode();
      if (IsSilencerWeapon != false) hash ^= IsSilencerWeapon.GetHashCode();
      if (BEquipSilencer != false) hash ^= BEquipSilencer.GetHashCode();
      if (LoadSpecialTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LoadSpecialTime);
      if (UnLoadSpecialTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UnLoadSpecialTime);
      if (LoadSpecialStateTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LoadSpecialStateTime);
      if (UnLoadSpecialStateTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UnLoadSpecialStateTime);
      if (KillCounterAssetName1P.Length != 0) hash ^= KillCounterAssetName1P.GetHashCode();
      if (KillCounterAssetName3P.Length != 0) hash ^= KillCounterAssetName3P.GetHashCode();
      if (IsClipHudWeapon != false) hash ^= IsClipHudWeapon.GetHashCode();
      if (ClipHudAssetName1P.Length != 0) hash ^= ClipHudAssetName1P.GetHashCode();
      if (ClipHudAssetName3P.Length != 0) hash ^= ClipHudAssetName3P.GetHashCode();
      if (MuzzleFlashAsset1P.Length != 0) hash ^= MuzzleFlashAsset1P.GetHashCode();
      if (SniperDelayEffect.Length != 0) hash ^= SniperDelayEffect.GetHashCode();
      if (SniperDelayEffectTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SniperDelayEffectTime);
      if (SniperDelayEffectSocketName.Length != 0) hash ^= SniperDelayEffectSocketName.GetHashCode();
      if (MuzzleSecondFlashAsset1P.Length != 0) hash ^= MuzzleSecondFlashAsset1P.GetHashCode();
      if (SkinWearNoneMuzzleFlashAsset1P.Length != 0) hash ^= SkinWearNoneMuzzleFlashAsset1P.GetHashCode();
      if (SkinWearNoneMuzzleSecondFlashAsset1P.Length != 0) hash ^= SkinWearNoneMuzzleSecondFlashAsset1P.GetHashCode();
      if (MuzzleFlashAsset3P.Length != 0) hash ^= MuzzleFlashAsset3P.GetHashCode();
      if (SkinWearNoneMuzzleFlashAsset3P.Length != 0) hash ^= SkinWearNoneMuzzleFlashAsset3P.GetHashCode();
      if (MuzzleHotSmokeSocketName.Length != 0) hash ^= MuzzleHotSmokeSocketName.GetHashCode();
      if (MuzzleFlashSocketName.Length != 0) hash ^= MuzzleFlashSocketName.GetHashCode();
      if (MuzzleHotSmokeAsset.Length != 0) hash ^= MuzzleHotSmokeAsset.GetHashCode();
      if (FireTrackSmokeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireTrackSmokeTime);
      hash ^= fireTrackFlashAssets_.GetHashCode();
      hash ^= fireTrackFlashAsset3Ps_.GetHashCode();
      hash ^= fireTrackSmokeAssets_.GetHashCode();
      hash ^= fireTrackSmokeAsset3Ps_.GetHashCode();
      if (FireTrackSmokeTime3P != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireTrackSmokeTime3P);
      if (FireTrackFlashSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireTrackFlashSpeed);
      if (IntervalNumTrack != 0) hash ^= IntervalNumTrack.GetHashCode();
      if (MuzzleHotSmokeNum != 0) hash ^= MuzzleHotSmokeNum.GetHashCode();
      if (MinDistanceTrack != 0) hash ^= MinDistanceTrack.GetHashCode();
      if (ShellDropAsset.Length != 0) hash ^= ShellDropAsset.GetHashCode();
      if (ShellDropSocketName.Length != 0) hash ^= ShellDropSocketName.GetHashCode();
      if (ShellDropAsset3P.Length != 0) hash ^= ShellDropAsset3P.GetHashCode();
      if (ShellDropSocket3PName.Length != 0) hash ^= ShellDropSocket3PName.GetHashCode();
      if (AnimPartical1P.Length != 0) hash ^= AnimPartical1P.GetHashCode();
      if (AnimPartical1PName.Length != 0) hash ^= AnimPartical1PName.GetHashCode();
      if (LightPointAsset.Length != 0) hash ^= LightPointAsset.GetHashCode();
      if (LightPointAsset3P.Length != 0) hash ^= LightPointAsset3P.GetHashCode();
      if (QuickStopSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(QuickStopSpeed);
      if (QuickStopTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(QuickStopTime);
      if (QuickStopMoveSpread != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(QuickStopMoveSpread);
      if (UseCommonAmmos != false) hash ^= UseCommonAmmos.GetHashCode();
      if (AppreciateAnis.Length != 0) hash ^= AppreciateAnis.GetHashCode();
      if (SilencerFlashAsset1P.Length != 0) hash ^= SilencerFlashAsset1P.GetHashCode();
      if (SilencerFlashAsset3P.Length != 0) hash ^= SilencerFlashAsset3P.GetHashCode();
      if (SilencerSmokeAsset1P.Length != 0) hash ^= SilencerSmokeAsset1P.GetHashCode();
      if (SilencerSmokeAsset3P.Length != 0) hash ^= SilencerSmokeAsset3P.GetHashCode();
      if (TrackMuzzleOnPoint1P != false) hash ^= TrackMuzzleOnPoint1P.GetHashCode();
      hash ^= trackMuzzlePoint1P_.GetHashCode();
      if (VFXTriggerFireKilledAsset1P.Length != 0) hash ^= VFXTriggerFireKilledAsset1P.GetHashCode();
      if (VFXTriggerFireKilledDeadAsset1P.Length != 0) hash ^= VFXTriggerFireKilledDeadAsset1P.GetHashCode();
      if (VFXTriggerFireAroundAsset1P.Length != 0) hash ^= VFXTriggerFireAroundAsset1P.GetHashCode();
      if (VFXTriggerShowOffAsset1P.Length != 0) hash ^= VFXTriggerShowOffAsset1P.GetHashCode();
      if (VFXTriggerChangeClipAsset1P.Length != 0) hash ^= VFXTriggerChangeClipAsset1P.GetHashCode();
      if (VFXTriggerEquipWeaponAsset1P.Length != 0) hash ^= VFXTriggerEquipWeaponAsset1P.GetHashCode();
      if (VFXKeepNormalAsset1P.Length != 0) hash ^= VFXKeepNormalAsset1P.GetHashCode();
      if (VFXTriggersSocketName1P.Length != 0) hash ^= VFXTriggersSocketName1P.GetHashCode();
      if (VFXDynamicFireKilledAsset1P.Length != 0) hash ^= VFXDynamicFireKilledAsset1P.GetHashCode();
      if (VFXDynamicFireAroundAsset1P.Length != 0) hash ^= VFXDynamicFireAroundAsset1P.GetHashCode();
      if (VFXDynamicShowOffAsset1P.Length != 0) hash ^= VFXDynamicShowOffAsset1P.GetHashCode();
      if (VFXDynamicChangeClipAsset1P.Length != 0) hash ^= VFXDynamicChangeClipAsset1P.GetHashCode();
      if (VFXDynamicEquipWeaponAsset1P.Length != 0) hash ^= VFXDynamicEquipWeaponAsset1P.GetHashCode();
      if (VFXDynamicKeepNormalAsset1P.Length != 0) hash ^= VFXDynamicKeepNormalAsset1P.GetHashCode();
      if (VFXDynamicReloadAmmoAsset1P.Length != 0) hash ^= VFXDynamicReloadAmmoAsset1P.GetHashCode();
      if (VFXDynamicFireKilledSocketName1P.Length != 0) hash ^= VFXDynamicFireKilledSocketName1P.GetHashCode();
      if (VFXDynamicFireAroundSocketName1P.Length != 0) hash ^= VFXDynamicFireAroundSocketName1P.GetHashCode();
      if (VFXDynamicShowOffSocketName1P.Length != 0) hash ^= VFXDynamicShowOffSocketName1P.GetHashCode();
      if (VFXDynamicChangeClipSocketName1P.Length != 0) hash ^= VFXDynamicChangeClipSocketName1P.GetHashCode();
      if (VFXDynamicEquipWeaponSocketName1P.Length != 0) hash ^= VFXDynamicEquipWeaponSocketName1P.GetHashCode();
      if (VFXDynamicKeepSocketName1P.Length != 0) hash ^= VFXDynamicKeepSocketName1P.GetHashCode();
      if (VFXDynamicReloadAmmoSocketName1P.Length != 0) hash ^= VFXDynamicReloadAmmoSocketName1P.GetHashCode();
      if (VFXIgniteFlameAsset.Length != 0) hash ^= VFXIgniteFlameAsset.GetHashCode();
      if (VFXLighterAsset.Length != 0) hash ^= VFXLighterAsset.GetHashCode();
      if (LighterSocketName.Length != 0) hash ^= LighterSocketName.GetHashCode();
      if (RopeFireSocketTpName.Length != 0) hash ^= RopeFireSocketTpName.GetHashCode();
      if (VFXRopeTpAsset.Length != 0) hash ^= VFXRopeTpAsset.GetHashCode();
      if (IsGunSightWeapon != false) hash ^= IsGunSightWeapon.GetHashCode();
      if (FireCloseSoundFp.Length != 0) hash ^= FireCloseSoundFp.GetHashCode();
      if (FireFarSoundFp.Length != 0) hash ^= FireFarSoundFp.GetHashCode();
      if (FireCloseSoundTp.Length != 0) hash ^= FireCloseSoundTp.GetHashCode();
      if (FireFarSoundTp.Length != 0) hash ^= FireFarSoundTp.GetHashCode();
      if (FireLoopSoundTp.Length != 0) hash ^= FireLoopSoundTp.GetHashCode();
      if (FireTailSoundTp.Length != 0) hash ^= FireTailSoundTp.GetHashCode();
      if (SecondFireLoopSoundTp.Length != 0) hash ^= SecondFireLoopSoundTp.GetHashCode();
      if (SecondFireTailSoundTp.Length != 0) hash ^= SecondFireTailSoundTp.GetHashCode();
      if (FireLoopSoundFp.Length != 0) hash ^= FireLoopSoundFp.GetHashCode();
      if (FireTailSoundFp.Length != 0) hash ^= FireTailSoundFp.GetHashCode();
      if (SecondFireLoopSoundFp.Length != 0) hash ^= SecondFireLoopSoundFp.GetHashCode();
      if (SecondFireTailSoundFp.Length != 0) hash ^= SecondFireTailSoundFp.GetHashCode();
      if (ReloadSoundFp.Length != 0) hash ^= ReloadSoundFp.GetHashCode();
      if (ReloadEndSoundFp.Length != 0) hash ^= ReloadEndSoundFp.GetHashCode();
      if (ReloadSoundTp.Length != 0) hash ^= ReloadSoundTp.GetHashCode();
      if (ReloadEndSoundTp.Length != 0) hash ^= ReloadEndSoundTp.GetHashCode();
      if (ReloadStopSoundFp.Length != 0) hash ^= ReloadStopSoundFp.GetHashCode();
      if (ReloadStopSoundTp.Length != 0) hash ^= ReloadStopSoundTp.GetHashCode();
      if (SecondReloadSoundFp.Length != 0) hash ^= SecondReloadSoundFp.GetHashCode();
      if (SecondReloadStopSoundFp.Length != 0) hash ^= SecondReloadStopSoundFp.GetHashCode();
      if (SecondReloadSoundTp.Length != 0) hash ^= SecondReloadSoundTp.GetHashCode();
      if (SecondReloadStopSoundTp.Length != 0) hash ^= SecondReloadStopSoundTp.GetHashCode();
      if (PreFirePlayFp.Length != 0) hash ^= PreFirePlayFp.GetHashCode();
      if (PreFireStopFp.Length != 0) hash ^= PreFireStopFp.GetHashCode();
      if (PreFirePlayTp.Length != 0) hash ^= PreFirePlayTp.GetHashCode();
      if (PreFireStopTp.Length != 0) hash ^= PreFireStopTp.GetHashCode();
      if (DeploySound.Length != 0) hash ^= DeploySound.GetHashCode();
      if (DeployStopSound.Length != 0) hash ^= DeployStopSound.GetHashCode();
      if (SecondDeploySound.Length != 0) hash ^= SecondDeploySound.GetHashCode();
      if (SecondDeployStopSound.Length != 0) hash ^= SecondDeployStopSound.GetHashCode();
      if (WeaponImpactSound.Length != 0) hash ^= WeaponImpactSound.GetHashCode();
      if (FireSoundCloseDis != 0) hash ^= FireSoundCloseDis.GetHashCode();
      if (FireDelayTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireDelayTime);
      if (RemainingCount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RemainingCount);
      if (SilencerFireSoundFP.Length != 0) hash ^= SilencerFireSoundFP.GetHashCode();
      if (SilencerFireSoundTP.Length != 0) hash ^= SilencerFireSoundTP.GetHashCode();
      if (SilencerLoadSoundFP.Length != 0) hash ^= SilencerLoadSoundFP.GetHashCode();
      if (StopSilencerLoadSoundFP.Length != 0) hash ^= StopSilencerLoadSoundFP.GetHashCode();
      if (SilencerUnLoadSoundFP.Length != 0) hash ^= SilencerUnLoadSoundFP.GetHashCode();
      if (StopSilencerUnLoadSoundFP.Length != 0) hash ^= StopSilencerUnLoadSoundFP.GetHashCode();
      if (ClearShotShellsSoundOnDead != false) hash ^= ClearShotShellsSoundOnDead.GetHashCode();
      if (ShotShellsSoundFP.Length != 0) hash ^= ShotShellsSoundFP.GetHashCode();
      if (ContinuousShotShellsDelayTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ContinuousShotShellsDelayTime);
      if (ContinuousShotShellsSoundFP.Length != 0) hash ^= ContinuousShotShellsSoundFP.GetHashCode();
      if (ShotShellsDelayTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShotShellsDelayTime);
      if (EmptySoundFP.Length != 0) hash ^= EmptySoundFP.GetHashCode();
      if (ReloadLoopSoundFP.Length != 0) hash ^= ReloadLoopSoundFP.GetHashCode();
      if (EmptySoundTP.Length != 0) hash ^= EmptySoundTP.GetHashCode();
      if (ReloadLoopSoundTP.Length != 0) hash ^= ReloadLoopSoundTP.GetHashCode();
      hash ^= appreciateWeaponSounds_.GetHashCode();
      hash ^= appreciateWeaponStopSounds_.GetHashCode();
      hash ^= appreciateWeaponSoundDelays_.GetHashCode();
      if (FireAnimSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireAnimSpeed);
      if (FireThreeContinueAnimSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireThreeContinueAnimSpeed);
      if (FireContinueAnimSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireContinueAnimSpeed);
      if (TripleFireAnimSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TripleFireAnimSpeed);
      if (ChangeClipAnimSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChangeClipAnimSpeed);
      if (ChangeClipLoopAnimSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChangeClipLoopAnimSpeed);
      if (CrouchChangeClipAnimSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CrouchChangeClipAnimSpeed);
      if (IdleAnimSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IdleAnimSpeed);
      if (EquipAnimSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EquipAnimSpeed);
      if (TakeDamageAnimSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeDamageAnimSpeed);
      if (HeadTakeDamageAnimSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeadTakeDamageAnimSpeed);
      if (ChangeGunAnimSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChangeGunAnimSpeed);
      hash ^= animWeightListOfChangeGun_.GetHashCode();
      hash ^= animWeightListOfClipChange_.GetHashCode();
      hash ^= animWeightListOfAppreciation_.GetHashCode();
      if (HalfBodySizeX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HalfBodySizeX);
      if (HalfBodySizeY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HalfBodySizeY);
      if (ProjectileEnable != false) hash ^= ProjectileEnable.GetHashCode();
      if (BallisticID != 0) hash ^= BallisticID.GetHashCode();
      hash ^= gunBuffIDs_.GetHashCode();
      if (ShowOffVoxSoundID != 0) hash ^= ShowOffVoxSoundID.GetHashCode();
      if (BRFireLoopSoundTp.Length != 0) hash ^= BRFireLoopSoundTp.GetHashCode();
      if (BRFireTailSoundTp.Length != 0) hash ^= BRFireTailSoundTp.GetHashCode();
      if (BRSecondFireLoopSoundTp.Length != 0) hash ^= BRSecondFireLoopSoundTp.GetHashCode();
      if (BRSecondFireTailSoundTp.Length != 0) hash ^= BRSecondFireTailSoundTp.GetHashCode();
      if (BRFireSoundTp.Length != 0) hash ^= BRFireSoundTp.GetHashCode();
      if (BRSilencerFireSoundTP.Length != 0) hash ^= BRSilencerFireSoundTP.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StateMachineTypeName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StateMachineTypeName);
      }
      if (FireLogicClassName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FireLogicClassName);
      }
      if (FireLogicClassConfigFileName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FireLogicClassConfigFileName);
      }
      if (SecondaryFireLogicClassName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SecondaryFireLogicClassName);
      }
      if (SecondaryFireLogicConfigFileName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SecondaryFireLogicConfigFileName);
      }
      if (ImpactClassName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ImpactClassName);
      }
      if (ImpactConfigFileName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ImpactConfigFileName);
      }
      if (SecondaryImpactClassName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SecondaryImpactClassName);
      }
      if (SecondaryImpactConfigFileName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SecondaryImpactConfigFileName);
      }
      if (WeaponRange != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(WeaponRange);
      }
      if (DamageArmorScale != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(DamageArmorScale);
      }
      if (WeaponWeight != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(WeaponWeight);
      }
      if (BuyPrice != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(BuyPrice);
      }
      if (KillAdward != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(KillAdward);
      }
      if (Deceleration != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(Deceleration);
      }
      if (WeaponNickName.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(WeaponNickName);
      }
      if (MeshAssetName1P.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(MeshAssetName1P);
      }
      if (MeshAssetName.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(MeshAssetName);
      }
      if (MeshAssetNameL.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(MeshAssetNameL);
      }
      if (WeaponSocketName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WeaponSocketName);
      }
      if (WeaponSocketNameL.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(WeaponSocketNameL);
      }
      if (WeaponBackSocketName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(WeaponBackSocketName);
      }
      if (WeaponBackBRSocket1Name.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(WeaponBackBRSocket1Name);
      }
      if (WeaponBackBRSocket2Name.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(WeaponBackBRSocket2Name);
      }
      if (WorldCameraFOV != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(WorldCameraFOV);
      }
      if (FPCameraFOV != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(FPCameraFOV);
      }
      if (SwitchTime != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(SwitchTime);
      }
      if (SmokeAsset1P.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(SmokeAsset1P);
      }
      if (SmokeAsset3P.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(SmokeAsset3P);
      }
      if (DropClipAssetID1P != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(DropClipAssetID1P);
      }
      if (WeaponMaxMoveSpeed != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(WeaponMaxMoveSpeed);
      }
      if (WeaponSprintSpeed != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(WeaponSprintSpeed);
      }
      if (WeaponCanDiscard != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(WeaponCanDiscard);
      }
      if (discardWeaponInitDir_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(DiscardWeaponInitDir);
      }
      if (PickUpAssetName.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(PickUpAssetName);
      }
      if (SpecialPickUpAssetName.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(SpecialPickUpAssetName);
      }
      if (MaxDecalDistance != 0F) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(MaxDecalDistance);
      }
      if (MaxDecalDistanceFar != 0F) {
        output.WriteRawTag(181, 2);
        output.WriteFloat(MaxDecalDistanceFar);
      }
      if (PlayFirstEquipAnimInTurn != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(PlayFirstEquipAnimInTurn);
      }
      if (PlayFirstEquipAnimInGame != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(PlayFirstEquipAnimInGame);
      }
      if (DeadDropMust != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(DeadDropMust);
      }
      if (DeadDropCan != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(DeadDropCan);
      }
      if (IsSilencerWeapon != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(IsSilencerWeapon);
      }
      if (BEquipSilencer != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(BEquipSilencer);
      }
      if (LoadSpecialTime != 0F) {
        output.WriteRawTag(237, 2);
        output.WriteFloat(LoadSpecialTime);
      }
      if (UnLoadSpecialTime != 0F) {
        output.WriteRawTag(245, 2);
        output.WriteFloat(UnLoadSpecialTime);
      }
      if (LoadSpecialStateTime != 0F) {
        output.WriteRawTag(253, 2);
        output.WriteFloat(LoadSpecialStateTime);
      }
      if (UnLoadSpecialStateTime != 0F) {
        output.WriteRawTag(133, 3);
        output.WriteFloat(UnLoadSpecialStateTime);
      }
      if (KillCounterAssetName1P.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(KillCounterAssetName1P);
      }
      if (KillCounterAssetName3P.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(KillCounterAssetName3P);
      }
      if (IsClipHudWeapon != false) {
        output.WriteRawTag(152, 3);
        output.WriteBool(IsClipHudWeapon);
      }
      if (ClipHudAssetName1P.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(ClipHudAssetName1P);
      }
      if (ClipHudAssetName3P.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(ClipHudAssetName3P);
      }
      if (MuzzleFlashAsset1P.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(MuzzleFlashAsset1P);
      }
      if (SniperDelayEffect.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(SniperDelayEffect);
      }
      if (SniperDelayEffectTime != 0F) {
        output.WriteRawTag(197, 3);
        output.WriteFloat(SniperDelayEffectTime);
      }
      if (SniperDelayEffectSocketName.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(SniperDelayEffectSocketName);
      }
      if (MuzzleSecondFlashAsset1P.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(MuzzleSecondFlashAsset1P);
      }
      if (SkinWearNoneMuzzleFlashAsset1P.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(SkinWearNoneMuzzleFlashAsset1P);
      }
      if (SkinWearNoneMuzzleSecondFlashAsset1P.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(SkinWearNoneMuzzleSecondFlashAsset1P);
      }
      if (MuzzleFlashAsset3P.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(MuzzleFlashAsset3P);
      }
      if (SkinWearNoneMuzzleFlashAsset3P.Length != 0) {
        output.WriteRawTag(242, 3);
        output.WriteString(SkinWearNoneMuzzleFlashAsset3P);
      }
      if (MuzzleHotSmokeSocketName.Length != 0) {
        output.WriteRawTag(250, 3);
        output.WriteString(MuzzleHotSmokeSocketName);
      }
      if (MuzzleFlashSocketName.Length != 0) {
        output.WriteRawTag(130, 4);
        output.WriteString(MuzzleFlashSocketName);
      }
      if (MuzzleHotSmokeAsset.Length != 0) {
        output.WriteRawTag(138, 4);
        output.WriteString(MuzzleHotSmokeAsset);
      }
      if (FireTrackSmokeTime != 0F) {
        output.WriteRawTag(149, 4);
        output.WriteFloat(FireTrackSmokeTime);
      }
      fireTrackFlashAssets_.WriteTo(output, _repeated_fireTrackFlashAssets_codec);
      fireTrackFlashAsset3Ps_.WriteTo(output, _repeated_fireTrackFlashAsset3Ps_codec);
      fireTrackSmokeAssets_.WriteTo(output, _repeated_fireTrackSmokeAssets_codec);
      fireTrackSmokeAsset3Ps_.WriteTo(output, _repeated_fireTrackSmokeAsset3Ps_codec);
      if (FireTrackSmokeTime3P != 0F) {
        output.WriteRawTag(189, 4);
        output.WriteFloat(FireTrackSmokeTime3P);
      }
      if (FireTrackFlashSpeed != 0F) {
        output.WriteRawTag(197, 4);
        output.WriteFloat(FireTrackFlashSpeed);
      }
      if (IntervalNumTrack != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(IntervalNumTrack);
      }
      if (MuzzleHotSmokeNum != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(MuzzleHotSmokeNum);
      }
      if (MinDistanceTrack != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(MinDistanceTrack);
      }
      if (ShellDropAsset.Length != 0) {
        output.WriteRawTag(226, 4);
        output.WriteString(ShellDropAsset);
      }
      if (ShellDropSocketName.Length != 0) {
        output.WriteRawTag(234, 4);
        output.WriteString(ShellDropSocketName);
      }
      if (ShellDropAsset3P.Length != 0) {
        output.WriteRawTag(242, 4);
        output.WriteString(ShellDropAsset3P);
      }
      if (ShellDropSocket3PName.Length != 0) {
        output.WriteRawTag(250, 4);
        output.WriteString(ShellDropSocket3PName);
      }
      if (AnimPartical1P.Length != 0) {
        output.WriteRawTag(130, 5);
        output.WriteString(AnimPartical1P);
      }
      if (AnimPartical1PName.Length != 0) {
        output.WriteRawTag(138, 5);
        output.WriteString(AnimPartical1PName);
      }
      if (LightPointAsset.Length != 0) {
        output.WriteRawTag(146, 5);
        output.WriteString(LightPointAsset);
      }
      if (LightPointAsset3P.Length != 0) {
        output.WriteRawTag(154, 5);
        output.WriteString(LightPointAsset3P);
      }
      if (QuickStopSpeed != 0F) {
        output.WriteRawTag(165, 5);
        output.WriteFloat(QuickStopSpeed);
      }
      if (QuickStopTime != 0F) {
        output.WriteRawTag(173, 5);
        output.WriteFloat(QuickStopTime);
      }
      if (QuickStopMoveSpread != 0F) {
        output.WriteRawTag(181, 5);
        output.WriteFloat(QuickStopMoveSpread);
      }
      if (UseCommonAmmos != false) {
        output.WriteRawTag(184, 5);
        output.WriteBool(UseCommonAmmos);
      }
      if (AppreciateAnis.Length != 0) {
        output.WriteRawTag(194, 5);
        output.WriteString(AppreciateAnis);
      }
      if (SilencerFlashAsset1P.Length != 0) {
        output.WriteRawTag(202, 5);
        output.WriteString(SilencerFlashAsset1P);
      }
      if (SilencerFlashAsset3P.Length != 0) {
        output.WriteRawTag(210, 5);
        output.WriteString(SilencerFlashAsset3P);
      }
      if (SilencerSmokeAsset1P.Length != 0) {
        output.WriteRawTag(218, 5);
        output.WriteString(SilencerSmokeAsset1P);
      }
      if (SilencerSmokeAsset3P.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(SilencerSmokeAsset3P);
      }
      if (TrackMuzzleOnPoint1P != false) {
        output.WriteRawTag(232, 5);
        output.WriteBool(TrackMuzzleOnPoint1P);
      }
      trackMuzzlePoint1P_.WriteTo(output, _repeated_trackMuzzlePoint1P_codec);
      if (VFXTriggerFireKilledAsset1P.Length != 0) {
        output.WriteRawTag(250, 5);
        output.WriteString(VFXTriggerFireKilledAsset1P);
      }
      if (VFXTriggerFireKilledDeadAsset1P.Length != 0) {
        output.WriteRawTag(130, 6);
        output.WriteString(VFXTriggerFireKilledDeadAsset1P);
      }
      if (VFXTriggerFireAroundAsset1P.Length != 0) {
        output.WriteRawTag(138, 6);
        output.WriteString(VFXTriggerFireAroundAsset1P);
      }
      if (VFXTriggerShowOffAsset1P.Length != 0) {
        output.WriteRawTag(146, 6);
        output.WriteString(VFXTriggerShowOffAsset1P);
      }
      if (VFXTriggerChangeClipAsset1P.Length != 0) {
        output.WriteRawTag(154, 6);
        output.WriteString(VFXTriggerChangeClipAsset1P);
      }
      if (VFXTriggerEquipWeaponAsset1P.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(VFXTriggerEquipWeaponAsset1P);
      }
      if (VFXKeepNormalAsset1P.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(VFXKeepNormalAsset1P);
      }
      if (VFXTriggersSocketName1P.Length != 0) {
        output.WriteRawTag(178, 6);
        output.WriteString(VFXTriggersSocketName1P);
      }
      if (VFXDynamicFireKilledAsset1P.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(VFXDynamicFireKilledAsset1P);
      }
      if (VFXDynamicFireAroundAsset1P.Length != 0) {
        output.WriteRawTag(194, 6);
        output.WriteString(VFXDynamicFireAroundAsset1P);
      }
      if (VFXDynamicShowOffAsset1P.Length != 0) {
        output.WriteRawTag(202, 6);
        output.WriteString(VFXDynamicShowOffAsset1P);
      }
      if (VFXDynamicChangeClipAsset1P.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(VFXDynamicChangeClipAsset1P);
      }
      if (VFXDynamicEquipWeaponAsset1P.Length != 0) {
        output.WriteRawTag(218, 6);
        output.WriteString(VFXDynamicEquipWeaponAsset1P);
      }
      if (VFXDynamicKeepNormalAsset1P.Length != 0) {
        output.WriteRawTag(226, 6);
        output.WriteString(VFXDynamicKeepNormalAsset1P);
      }
      if (VFXDynamicReloadAmmoAsset1P.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(VFXDynamicReloadAmmoAsset1P);
      }
      if (VFXDynamicFireKilledSocketName1P.Length != 0) {
        output.WriteRawTag(242, 6);
        output.WriteString(VFXDynamicFireKilledSocketName1P);
      }
      if (VFXDynamicFireAroundSocketName1P.Length != 0) {
        output.WriteRawTag(250, 6);
        output.WriteString(VFXDynamicFireAroundSocketName1P);
      }
      if (VFXDynamicShowOffSocketName1P.Length != 0) {
        output.WriteRawTag(130, 7);
        output.WriteString(VFXDynamicShowOffSocketName1P);
      }
      if (VFXDynamicChangeClipSocketName1P.Length != 0) {
        output.WriteRawTag(138, 7);
        output.WriteString(VFXDynamicChangeClipSocketName1P);
      }
      if (VFXDynamicEquipWeaponSocketName1P.Length != 0) {
        output.WriteRawTag(146, 7);
        output.WriteString(VFXDynamicEquipWeaponSocketName1P);
      }
      if (VFXDynamicKeepSocketName1P.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(VFXDynamicKeepSocketName1P);
      }
      if (VFXDynamicReloadAmmoSocketName1P.Length != 0) {
        output.WriteRawTag(162, 7);
        output.WriteString(VFXDynamicReloadAmmoSocketName1P);
      }
      if (VFXIgniteFlameAsset.Length != 0) {
        output.WriteRawTag(170, 7);
        output.WriteString(VFXIgniteFlameAsset);
      }
      if (VFXLighterAsset.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(VFXLighterAsset);
      }
      if (LighterSocketName.Length != 0) {
        output.WriteRawTag(186, 7);
        output.WriteString(LighterSocketName);
      }
      if (RopeFireSocketTpName.Length != 0) {
        output.WriteRawTag(194, 7);
        output.WriteString(RopeFireSocketTpName);
      }
      if (VFXRopeTpAsset.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(VFXRopeTpAsset);
      }
      if (IsGunSightWeapon != false) {
        output.WriteRawTag(208, 7);
        output.WriteBool(IsGunSightWeapon);
      }
      if (FireCloseSoundFp.Length != 0) {
        output.WriteRawTag(218, 7);
        output.WriteString(FireCloseSoundFp);
      }
      if (FireFarSoundFp.Length != 0) {
        output.WriteRawTag(226, 7);
        output.WriteString(FireFarSoundFp);
      }
      if (FireCloseSoundTp.Length != 0) {
        output.WriteRawTag(234, 7);
        output.WriteString(FireCloseSoundTp);
      }
      if (FireFarSoundTp.Length != 0) {
        output.WriteRawTag(242, 7);
        output.WriteString(FireFarSoundTp);
      }
      if (FireLoopSoundTp.Length != 0) {
        output.WriteRawTag(250, 7);
        output.WriteString(FireLoopSoundTp);
      }
      if (FireTailSoundTp.Length != 0) {
        output.WriteRawTag(130, 8);
        output.WriteString(FireTailSoundTp);
      }
      if (SecondFireLoopSoundTp.Length != 0) {
        output.WriteRawTag(138, 8);
        output.WriteString(SecondFireLoopSoundTp);
      }
      if (SecondFireTailSoundTp.Length != 0) {
        output.WriteRawTag(146, 8);
        output.WriteString(SecondFireTailSoundTp);
      }
      if (FireLoopSoundFp.Length != 0) {
        output.WriteRawTag(154, 8);
        output.WriteString(FireLoopSoundFp);
      }
      if (FireTailSoundFp.Length != 0) {
        output.WriteRawTag(162, 8);
        output.WriteString(FireTailSoundFp);
      }
      if (SecondFireLoopSoundFp.Length != 0) {
        output.WriteRawTag(170, 8);
        output.WriteString(SecondFireLoopSoundFp);
      }
      if (SecondFireTailSoundFp.Length != 0) {
        output.WriteRawTag(178, 8);
        output.WriteString(SecondFireTailSoundFp);
      }
      if (ReloadSoundFp.Length != 0) {
        output.WriteRawTag(186, 8);
        output.WriteString(ReloadSoundFp);
      }
      if (ReloadEndSoundFp.Length != 0) {
        output.WriteRawTag(194, 8);
        output.WriteString(ReloadEndSoundFp);
      }
      if (ReloadSoundTp.Length != 0) {
        output.WriteRawTag(202, 8);
        output.WriteString(ReloadSoundTp);
      }
      if (ReloadEndSoundTp.Length != 0) {
        output.WriteRawTag(210, 8);
        output.WriteString(ReloadEndSoundTp);
      }
      if (ReloadStopSoundFp.Length != 0) {
        output.WriteRawTag(218, 8);
        output.WriteString(ReloadStopSoundFp);
      }
      if (ReloadStopSoundTp.Length != 0) {
        output.WriteRawTag(226, 8);
        output.WriteString(ReloadStopSoundTp);
      }
      if (SecondReloadSoundFp.Length != 0) {
        output.WriteRawTag(234, 8);
        output.WriteString(SecondReloadSoundFp);
      }
      if (SecondReloadStopSoundFp.Length != 0) {
        output.WriteRawTag(242, 8);
        output.WriteString(SecondReloadStopSoundFp);
      }
      if (SecondReloadSoundTp.Length != 0) {
        output.WriteRawTag(250, 8);
        output.WriteString(SecondReloadSoundTp);
      }
      if (SecondReloadStopSoundTp.Length != 0) {
        output.WriteRawTag(130, 9);
        output.WriteString(SecondReloadStopSoundTp);
      }
      if (PreFirePlayFp.Length != 0) {
        output.WriteRawTag(138, 9);
        output.WriteString(PreFirePlayFp);
      }
      if (PreFireStopFp.Length != 0) {
        output.WriteRawTag(146, 9);
        output.WriteString(PreFireStopFp);
      }
      if (PreFirePlayTp.Length != 0) {
        output.WriteRawTag(154, 9);
        output.WriteString(PreFirePlayTp);
      }
      if (PreFireStopTp.Length != 0) {
        output.WriteRawTag(162, 9);
        output.WriteString(PreFireStopTp);
      }
      if (DeploySound.Length != 0) {
        output.WriteRawTag(170, 9);
        output.WriteString(DeploySound);
      }
      if (DeployStopSound.Length != 0) {
        output.WriteRawTag(178, 9);
        output.WriteString(DeployStopSound);
      }
      if (SecondDeploySound.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(SecondDeploySound);
      }
      if (SecondDeployStopSound.Length != 0) {
        output.WriteRawTag(194, 9);
        output.WriteString(SecondDeployStopSound);
      }
      if (WeaponImpactSound.Length != 0) {
        output.WriteRawTag(202, 9);
        output.WriteString(WeaponImpactSound);
      }
      if (FireSoundCloseDis != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(FireSoundCloseDis);
      }
      if (FireDelayTime != 0F) {
        output.WriteRawTag(221, 9);
        output.WriteFloat(FireDelayTime);
      }
      if (RemainingCount != 0F) {
        output.WriteRawTag(229, 9);
        output.WriteFloat(RemainingCount);
      }
      if (SilencerFireSoundFP.Length != 0) {
        output.WriteRawTag(234, 9);
        output.WriteString(SilencerFireSoundFP);
      }
      if (SilencerFireSoundTP.Length != 0) {
        output.WriteRawTag(242, 9);
        output.WriteString(SilencerFireSoundTP);
      }
      if (SilencerLoadSoundFP.Length != 0) {
        output.WriteRawTag(250, 9);
        output.WriteString(SilencerLoadSoundFP);
      }
      if (StopSilencerLoadSoundFP.Length != 0) {
        output.WriteRawTag(130, 10);
        output.WriteString(StopSilencerLoadSoundFP);
      }
      if (SilencerUnLoadSoundFP.Length != 0) {
        output.WriteRawTag(138, 10);
        output.WriteString(SilencerUnLoadSoundFP);
      }
      if (StopSilencerUnLoadSoundFP.Length != 0) {
        output.WriteRawTag(146, 10);
        output.WriteString(StopSilencerUnLoadSoundFP);
      }
      if (ClearShotShellsSoundOnDead != false) {
        output.WriteRawTag(152, 10);
        output.WriteBool(ClearShotShellsSoundOnDead);
      }
      if (ShotShellsSoundFP.Length != 0) {
        output.WriteRawTag(162, 10);
        output.WriteString(ShotShellsSoundFP);
      }
      if (ContinuousShotShellsDelayTime != 0F) {
        output.WriteRawTag(173, 10);
        output.WriteFloat(ContinuousShotShellsDelayTime);
      }
      if (ContinuousShotShellsSoundFP.Length != 0) {
        output.WriteRawTag(178, 10);
        output.WriteString(ContinuousShotShellsSoundFP);
      }
      if (ShotShellsDelayTime != 0F) {
        output.WriteRawTag(189, 10);
        output.WriteFloat(ShotShellsDelayTime);
      }
      if (EmptySoundFP.Length != 0) {
        output.WriteRawTag(194, 10);
        output.WriteString(EmptySoundFP);
      }
      if (ReloadLoopSoundFP.Length != 0) {
        output.WriteRawTag(202, 10);
        output.WriteString(ReloadLoopSoundFP);
      }
      if (EmptySoundTP.Length != 0) {
        output.WriteRawTag(210, 10);
        output.WriteString(EmptySoundTP);
      }
      if (ReloadLoopSoundTP.Length != 0) {
        output.WriteRawTag(218, 10);
        output.WriteString(ReloadLoopSoundTP);
      }
      appreciateWeaponSounds_.WriteTo(output, _repeated_appreciateWeaponSounds_codec);
      appreciateWeaponStopSounds_.WriteTo(output, _repeated_appreciateWeaponStopSounds_codec);
      appreciateWeaponSoundDelays_.WriteTo(output, _repeated_appreciateWeaponSoundDelays_codec);
      if (FireAnimSpeed != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(FireAnimSpeed);
      }
      if (FireThreeContinueAnimSpeed != 0F) {
        output.WriteRawTag(133, 11);
        output.WriteFloat(FireThreeContinueAnimSpeed);
      }
      if (FireContinueAnimSpeed != 0F) {
        output.WriteRawTag(141, 11);
        output.WriteFloat(FireContinueAnimSpeed);
      }
      if (TripleFireAnimSpeed != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(TripleFireAnimSpeed);
      }
      if (ChangeClipAnimSpeed != 0F) {
        output.WriteRawTag(157, 11);
        output.WriteFloat(ChangeClipAnimSpeed);
      }
      if (ChangeClipLoopAnimSpeed != 0F) {
        output.WriteRawTag(165, 11);
        output.WriteFloat(ChangeClipLoopAnimSpeed);
      }
      if (CrouchChangeClipAnimSpeed != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(CrouchChangeClipAnimSpeed);
      }
      if (IdleAnimSpeed != 0F) {
        output.WriteRawTag(181, 11);
        output.WriteFloat(IdleAnimSpeed);
      }
      if (EquipAnimSpeed != 0F) {
        output.WriteRawTag(189, 11);
        output.WriteFloat(EquipAnimSpeed);
      }
      if (TakeDamageAnimSpeed != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(TakeDamageAnimSpeed);
      }
      if (HeadTakeDamageAnimSpeed != 0F) {
        output.WriteRawTag(205, 11);
        output.WriteFloat(HeadTakeDamageAnimSpeed);
      }
      if (ChangeGunAnimSpeed != 0F) {
        output.WriteRawTag(213, 11);
        output.WriteFloat(ChangeGunAnimSpeed);
      }
      animWeightListOfChangeGun_.WriteTo(output, _repeated_animWeightListOfChangeGun_codec);
      animWeightListOfClipChange_.WriteTo(output, _repeated_animWeightListOfClipChange_codec);
      animWeightListOfAppreciation_.WriteTo(output, _repeated_animWeightListOfAppreciation_codec);
      if (HalfBodySizeX != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(HalfBodySizeX);
      }
      if (HalfBodySizeY != 0F) {
        output.WriteRawTag(253, 11);
        output.WriteFloat(HalfBodySizeY);
      }
      if (ProjectileEnable != false) {
        output.WriteRawTag(128, 12);
        output.WriteBool(ProjectileEnable);
      }
      if (BallisticID != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(BallisticID);
      }
      gunBuffIDs_.WriteTo(output, _repeated_gunBuffIDs_codec);
      if (ShowOffVoxSoundID != 0) {
        output.WriteRawTag(152, 12);
        output.WriteUInt32(ShowOffVoxSoundID);
      }
      if (BRFireLoopSoundTp.Length != 0) {
        output.WriteRawTag(162, 12);
        output.WriteString(BRFireLoopSoundTp);
      }
      if (BRFireTailSoundTp.Length != 0) {
        output.WriteRawTag(170, 12);
        output.WriteString(BRFireTailSoundTp);
      }
      if (BRSecondFireLoopSoundTp.Length != 0) {
        output.WriteRawTag(178, 12);
        output.WriteString(BRSecondFireLoopSoundTp);
      }
      if (BRSecondFireTailSoundTp.Length != 0) {
        output.WriteRawTag(186, 12);
        output.WriteString(BRSecondFireTailSoundTp);
      }
      if (BRFireSoundTp.Length != 0) {
        output.WriteRawTag(194, 12);
        output.WriteString(BRFireSoundTp);
      }
      if (BRSilencerFireSoundTP.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(BRSilencerFireSoundTP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StateMachineTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StateMachineTypeName);
      }
      if (FireLogicClassName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FireLogicClassName);
      }
      if (FireLogicClassConfigFileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FireLogicClassConfigFileName);
      }
      if (SecondaryFireLogicClassName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecondaryFireLogicClassName);
      }
      if (SecondaryFireLogicConfigFileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecondaryFireLogicConfigFileName);
      }
      if (ImpactClassName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImpactClassName);
      }
      if (ImpactConfigFileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImpactConfigFileName);
      }
      if (SecondaryImpactClassName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecondaryImpactClassName);
      }
      if (SecondaryImpactConfigFileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecondaryImpactConfigFileName);
      }
      if (WeaponRange != 0F) {
        size += 1 + 4;
      }
      if (DamageArmorScale != 0F) {
        size += 1 + 4;
      }
      if (WeaponWeight != 0F) {
        size += 1 + 4;
      }
      if (BuyPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyPrice);
      }
      if (KillAdward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillAdward);
      }
      if (Deceleration != 0F) {
        size += 1 + 4;
      }
      if (WeaponNickName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WeaponNickName);
      }
      if (MeshAssetName1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MeshAssetName1P);
      }
      if (MeshAssetName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MeshAssetName);
      }
      if (MeshAssetNameL.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MeshAssetNameL);
      }
      if (WeaponSocketName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WeaponSocketName);
      }
      if (WeaponSocketNameL.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WeaponSocketNameL);
      }
      if (WeaponBackSocketName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WeaponBackSocketName);
      }
      if (WeaponBackBRSocket1Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WeaponBackBRSocket1Name);
      }
      if (WeaponBackBRSocket2Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WeaponBackBRSocket2Name);
      }
      if (WorldCameraFOV != 0F) {
        size += 2 + 4;
      }
      if (FPCameraFOV != 0F) {
        size += 2 + 4;
      }
      if (SwitchTime != 0F) {
        size += 2 + 4;
      }
      if (SmokeAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SmokeAsset1P);
      }
      if (SmokeAsset3P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SmokeAsset3P);
      }
      if (DropClipAssetID1P != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DropClipAssetID1P);
      }
      if (WeaponMaxMoveSpeed != 0F) {
        size += 2 + 4;
      }
      if (WeaponSprintSpeed != 0F) {
        size += 2 + 4;
      }
      if (WeaponCanDiscard != false) {
        size += 2 + 1;
      }
      if (discardWeaponInitDir_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DiscardWeaponInitDir);
      }
      if (PickUpAssetName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PickUpAssetName);
      }
      if (SpecialPickUpAssetName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpecialPickUpAssetName);
      }
      if (MaxDecalDistance != 0F) {
        size += 2 + 4;
      }
      if (MaxDecalDistanceFar != 0F) {
        size += 2 + 4;
      }
      if (PlayFirstEquipAnimInTurn != false) {
        size += 2 + 1;
      }
      if (PlayFirstEquipAnimInGame != false) {
        size += 2 + 1;
      }
      if (DeadDropMust != false) {
        size += 2 + 1;
      }
      if (DeadDropCan != false) {
        size += 2 + 1;
      }
      if (IsSilencerWeapon != false) {
        size += 2 + 1;
      }
      if (BEquipSilencer != false) {
        size += 2 + 1;
      }
      if (LoadSpecialTime != 0F) {
        size += 2 + 4;
      }
      if (UnLoadSpecialTime != 0F) {
        size += 2 + 4;
      }
      if (LoadSpecialStateTime != 0F) {
        size += 2 + 4;
      }
      if (UnLoadSpecialStateTime != 0F) {
        size += 2 + 4;
      }
      if (KillCounterAssetName1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(KillCounterAssetName1P);
      }
      if (KillCounterAssetName3P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(KillCounterAssetName3P);
      }
      if (IsClipHudWeapon != false) {
        size += 2 + 1;
      }
      if (ClipHudAssetName1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClipHudAssetName1P);
      }
      if (ClipHudAssetName3P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClipHudAssetName3P);
      }
      if (MuzzleFlashAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MuzzleFlashAsset1P);
      }
      if (SniperDelayEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SniperDelayEffect);
      }
      if (SniperDelayEffectTime != 0F) {
        size += 2 + 4;
      }
      if (SniperDelayEffectSocketName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SniperDelayEffectSocketName);
      }
      if (MuzzleSecondFlashAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MuzzleSecondFlashAsset1P);
      }
      if (SkinWearNoneMuzzleFlashAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkinWearNoneMuzzleFlashAsset1P);
      }
      if (SkinWearNoneMuzzleSecondFlashAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkinWearNoneMuzzleSecondFlashAsset1P);
      }
      if (MuzzleFlashAsset3P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MuzzleFlashAsset3P);
      }
      if (SkinWearNoneMuzzleFlashAsset3P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkinWearNoneMuzzleFlashAsset3P);
      }
      if (MuzzleHotSmokeSocketName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MuzzleHotSmokeSocketName);
      }
      if (MuzzleFlashSocketName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MuzzleFlashSocketName);
      }
      if (MuzzleHotSmokeAsset.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MuzzleHotSmokeAsset);
      }
      if (FireTrackSmokeTime != 0F) {
        size += 2 + 4;
      }
      size += fireTrackFlashAssets_.CalculateSize(_repeated_fireTrackFlashAssets_codec);
      size += fireTrackFlashAsset3Ps_.CalculateSize(_repeated_fireTrackFlashAsset3Ps_codec);
      size += fireTrackSmokeAssets_.CalculateSize(_repeated_fireTrackSmokeAssets_codec);
      size += fireTrackSmokeAsset3Ps_.CalculateSize(_repeated_fireTrackSmokeAsset3Ps_codec);
      if (FireTrackSmokeTime3P != 0F) {
        size += 2 + 4;
      }
      if (FireTrackFlashSpeed != 0F) {
        size += 2 + 4;
      }
      if (IntervalNumTrack != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IntervalNumTrack);
      }
      if (MuzzleHotSmokeNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MuzzleHotSmokeNum);
      }
      if (MinDistanceTrack != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinDistanceTrack);
      }
      if (ShellDropAsset.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShellDropAsset);
      }
      if (ShellDropSocketName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShellDropSocketName);
      }
      if (ShellDropAsset3P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShellDropAsset3P);
      }
      if (ShellDropSocket3PName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShellDropSocket3PName);
      }
      if (AnimPartical1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AnimPartical1P);
      }
      if (AnimPartical1PName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AnimPartical1PName);
      }
      if (LightPointAsset.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LightPointAsset);
      }
      if (LightPointAsset3P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LightPointAsset3P);
      }
      if (QuickStopSpeed != 0F) {
        size += 2 + 4;
      }
      if (QuickStopTime != 0F) {
        size += 2 + 4;
      }
      if (QuickStopMoveSpread != 0F) {
        size += 2 + 4;
      }
      if (UseCommonAmmos != false) {
        size += 2 + 1;
      }
      if (AppreciateAnis.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AppreciateAnis);
      }
      if (SilencerFlashAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SilencerFlashAsset1P);
      }
      if (SilencerFlashAsset3P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SilencerFlashAsset3P);
      }
      if (SilencerSmokeAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SilencerSmokeAsset1P);
      }
      if (SilencerSmokeAsset3P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SilencerSmokeAsset3P);
      }
      if (TrackMuzzleOnPoint1P != false) {
        size += 2 + 1;
      }
      size += trackMuzzlePoint1P_.CalculateSize(_repeated_trackMuzzlePoint1P_codec);
      if (VFXTriggerFireKilledAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXTriggerFireKilledAsset1P);
      }
      if (VFXTriggerFireKilledDeadAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXTriggerFireKilledDeadAsset1P);
      }
      if (VFXTriggerFireAroundAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXTriggerFireAroundAsset1P);
      }
      if (VFXTriggerShowOffAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXTriggerShowOffAsset1P);
      }
      if (VFXTriggerChangeClipAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXTriggerChangeClipAsset1P);
      }
      if (VFXTriggerEquipWeaponAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXTriggerEquipWeaponAsset1P);
      }
      if (VFXKeepNormalAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXKeepNormalAsset1P);
      }
      if (VFXTriggersSocketName1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXTriggersSocketName1P);
      }
      if (VFXDynamicFireKilledAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXDynamicFireKilledAsset1P);
      }
      if (VFXDynamicFireAroundAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXDynamicFireAroundAsset1P);
      }
      if (VFXDynamicShowOffAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXDynamicShowOffAsset1P);
      }
      if (VFXDynamicChangeClipAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXDynamicChangeClipAsset1P);
      }
      if (VFXDynamicEquipWeaponAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXDynamicEquipWeaponAsset1P);
      }
      if (VFXDynamicKeepNormalAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXDynamicKeepNormalAsset1P);
      }
      if (VFXDynamicReloadAmmoAsset1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXDynamicReloadAmmoAsset1P);
      }
      if (VFXDynamicFireKilledSocketName1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXDynamicFireKilledSocketName1P);
      }
      if (VFXDynamicFireAroundSocketName1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXDynamicFireAroundSocketName1P);
      }
      if (VFXDynamicShowOffSocketName1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXDynamicShowOffSocketName1P);
      }
      if (VFXDynamicChangeClipSocketName1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXDynamicChangeClipSocketName1P);
      }
      if (VFXDynamicEquipWeaponSocketName1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXDynamicEquipWeaponSocketName1P);
      }
      if (VFXDynamicKeepSocketName1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXDynamicKeepSocketName1P);
      }
      if (VFXDynamicReloadAmmoSocketName1P.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXDynamicReloadAmmoSocketName1P);
      }
      if (VFXIgniteFlameAsset.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXIgniteFlameAsset);
      }
      if (VFXLighterAsset.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXLighterAsset);
      }
      if (LighterSocketName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LighterSocketName);
      }
      if (RopeFireSocketTpName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RopeFireSocketTpName);
      }
      if (VFXRopeTpAsset.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VFXRopeTpAsset);
      }
      if (IsGunSightWeapon != false) {
        size += 2 + 1;
      }
      if (FireCloseSoundFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FireCloseSoundFp);
      }
      if (FireFarSoundFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FireFarSoundFp);
      }
      if (FireCloseSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FireCloseSoundTp);
      }
      if (FireFarSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FireFarSoundTp);
      }
      if (FireLoopSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FireLoopSoundTp);
      }
      if (FireTailSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FireTailSoundTp);
      }
      if (SecondFireLoopSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecondFireLoopSoundTp);
      }
      if (SecondFireTailSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecondFireTailSoundTp);
      }
      if (FireLoopSoundFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FireLoopSoundFp);
      }
      if (FireTailSoundFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FireTailSoundFp);
      }
      if (SecondFireLoopSoundFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecondFireLoopSoundFp);
      }
      if (SecondFireTailSoundFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecondFireTailSoundFp);
      }
      if (ReloadSoundFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReloadSoundFp);
      }
      if (ReloadEndSoundFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReloadEndSoundFp);
      }
      if (ReloadSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReloadSoundTp);
      }
      if (ReloadEndSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReloadEndSoundTp);
      }
      if (ReloadStopSoundFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReloadStopSoundFp);
      }
      if (ReloadStopSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReloadStopSoundTp);
      }
      if (SecondReloadSoundFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecondReloadSoundFp);
      }
      if (SecondReloadStopSoundFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecondReloadStopSoundFp);
      }
      if (SecondReloadSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecondReloadSoundTp);
      }
      if (SecondReloadStopSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecondReloadStopSoundTp);
      }
      if (PreFirePlayFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PreFirePlayFp);
      }
      if (PreFireStopFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PreFireStopFp);
      }
      if (PreFirePlayTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PreFirePlayTp);
      }
      if (PreFireStopTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PreFireStopTp);
      }
      if (DeploySound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeploySound);
      }
      if (DeployStopSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeployStopSound);
      }
      if (SecondDeploySound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecondDeploySound);
      }
      if (SecondDeployStopSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecondDeployStopSound);
      }
      if (WeaponImpactSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WeaponImpactSound);
      }
      if (FireSoundCloseDis != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FireSoundCloseDis);
      }
      if (FireDelayTime != 0F) {
        size += 2 + 4;
      }
      if (RemainingCount != 0F) {
        size += 2 + 4;
      }
      if (SilencerFireSoundFP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SilencerFireSoundFP);
      }
      if (SilencerFireSoundTP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SilencerFireSoundTP);
      }
      if (SilencerLoadSoundFP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SilencerLoadSoundFP);
      }
      if (StopSilencerLoadSoundFP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StopSilencerLoadSoundFP);
      }
      if (SilencerUnLoadSoundFP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SilencerUnLoadSoundFP);
      }
      if (StopSilencerUnLoadSoundFP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StopSilencerUnLoadSoundFP);
      }
      if (ClearShotShellsSoundOnDead != false) {
        size += 2 + 1;
      }
      if (ShotShellsSoundFP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShotShellsSoundFP);
      }
      if (ContinuousShotShellsDelayTime != 0F) {
        size += 2 + 4;
      }
      if (ContinuousShotShellsSoundFP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ContinuousShotShellsSoundFP);
      }
      if (ShotShellsDelayTime != 0F) {
        size += 2 + 4;
      }
      if (EmptySoundFP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EmptySoundFP);
      }
      if (ReloadLoopSoundFP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReloadLoopSoundFP);
      }
      if (EmptySoundTP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EmptySoundTP);
      }
      if (ReloadLoopSoundTP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReloadLoopSoundTP);
      }
      size += appreciateWeaponSounds_.CalculateSize(_repeated_appreciateWeaponSounds_codec);
      size += appreciateWeaponStopSounds_.CalculateSize(_repeated_appreciateWeaponStopSounds_codec);
      size += appreciateWeaponSoundDelays_.CalculateSize(_repeated_appreciateWeaponSoundDelays_codec);
      if (FireAnimSpeed != 0F) {
        size += 2 + 4;
      }
      if (FireThreeContinueAnimSpeed != 0F) {
        size += 2 + 4;
      }
      if (FireContinueAnimSpeed != 0F) {
        size += 2 + 4;
      }
      if (TripleFireAnimSpeed != 0F) {
        size += 2 + 4;
      }
      if (ChangeClipAnimSpeed != 0F) {
        size += 2 + 4;
      }
      if (ChangeClipLoopAnimSpeed != 0F) {
        size += 2 + 4;
      }
      if (CrouchChangeClipAnimSpeed != 0F) {
        size += 2 + 4;
      }
      if (IdleAnimSpeed != 0F) {
        size += 2 + 4;
      }
      if (EquipAnimSpeed != 0F) {
        size += 2 + 4;
      }
      if (TakeDamageAnimSpeed != 0F) {
        size += 2 + 4;
      }
      if (HeadTakeDamageAnimSpeed != 0F) {
        size += 2 + 4;
      }
      if (ChangeGunAnimSpeed != 0F) {
        size += 2 + 4;
      }
      size += animWeightListOfChangeGun_.CalculateSize(_repeated_animWeightListOfChangeGun_codec);
      size += animWeightListOfClipChange_.CalculateSize(_repeated_animWeightListOfClipChange_codec);
      size += animWeightListOfAppreciation_.CalculateSize(_repeated_animWeightListOfAppreciation_codec);
      if (HalfBodySizeX != 0F) {
        size += 2 + 4;
      }
      if (HalfBodySizeY != 0F) {
        size += 2 + 4;
      }
      if (ProjectileEnable != false) {
        size += 2 + 1;
      }
      if (BallisticID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BallisticID);
      }
      size += gunBuffIDs_.CalculateSize(_repeated_gunBuffIDs_codec);
      if (ShowOffVoxSoundID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ShowOffVoxSoundID);
      }
      if (BRFireLoopSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BRFireLoopSoundTp);
      }
      if (BRFireTailSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BRFireTailSoundTp);
      }
      if (BRSecondFireLoopSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BRSecondFireLoopSoundTp);
      }
      if (BRSecondFireTailSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BRSecondFireTailSoundTp);
      }
      if (BRFireSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BRFireSoundTp);
      }
      if (BRSilencerFireSoundTP.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BRSilencerFireSoundTP);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponPersistenceConfigComponentData other) {
      if (other == null) {
        return;
      }
      if (other.StateMachineTypeName.Length != 0) {
        StateMachineTypeName = other.StateMachineTypeName;
      }
      if (other.FireLogicClassName.Length != 0) {
        FireLogicClassName = other.FireLogicClassName;
      }
      if (other.FireLogicClassConfigFileName.Length != 0) {
        FireLogicClassConfigFileName = other.FireLogicClassConfigFileName;
      }
      if (other.SecondaryFireLogicClassName.Length != 0) {
        SecondaryFireLogicClassName = other.SecondaryFireLogicClassName;
      }
      if (other.SecondaryFireLogicConfigFileName.Length != 0) {
        SecondaryFireLogicConfigFileName = other.SecondaryFireLogicConfigFileName;
      }
      if (other.ImpactClassName.Length != 0) {
        ImpactClassName = other.ImpactClassName;
      }
      if (other.ImpactConfigFileName.Length != 0) {
        ImpactConfigFileName = other.ImpactConfigFileName;
      }
      if (other.SecondaryImpactClassName.Length != 0) {
        SecondaryImpactClassName = other.SecondaryImpactClassName;
      }
      if (other.SecondaryImpactConfigFileName.Length != 0) {
        SecondaryImpactConfigFileName = other.SecondaryImpactConfigFileName;
      }
      if (other.WeaponRange != 0F) {
        WeaponRange = other.WeaponRange;
      }
      if (other.DamageArmorScale != 0F) {
        DamageArmorScale = other.DamageArmorScale;
      }
      if (other.WeaponWeight != 0F) {
        WeaponWeight = other.WeaponWeight;
      }
      if (other.BuyPrice != 0) {
        BuyPrice = other.BuyPrice;
      }
      if (other.KillAdward != 0) {
        KillAdward = other.KillAdward;
      }
      if (other.Deceleration != 0F) {
        Deceleration = other.Deceleration;
      }
      if (other.WeaponNickName.Length != 0) {
        WeaponNickName = other.WeaponNickName;
      }
      if (other.MeshAssetName1P.Length != 0) {
        MeshAssetName1P = other.MeshAssetName1P;
      }
      if (other.MeshAssetName.Length != 0) {
        MeshAssetName = other.MeshAssetName;
      }
      if (other.MeshAssetNameL.Length != 0) {
        MeshAssetNameL = other.MeshAssetNameL;
      }
      if (other.WeaponSocketName.Length != 0) {
        WeaponSocketName = other.WeaponSocketName;
      }
      if (other.WeaponSocketNameL.Length != 0) {
        WeaponSocketNameL = other.WeaponSocketNameL;
      }
      if (other.WeaponBackSocketName.Length != 0) {
        WeaponBackSocketName = other.WeaponBackSocketName;
      }
      if (other.WeaponBackBRSocket1Name.Length != 0) {
        WeaponBackBRSocket1Name = other.WeaponBackBRSocket1Name;
      }
      if (other.WeaponBackBRSocket2Name.Length != 0) {
        WeaponBackBRSocket2Name = other.WeaponBackBRSocket2Name;
      }
      if (other.WorldCameraFOV != 0F) {
        WorldCameraFOV = other.WorldCameraFOV;
      }
      if (other.FPCameraFOV != 0F) {
        FPCameraFOV = other.FPCameraFOV;
      }
      if (other.SwitchTime != 0F) {
        SwitchTime = other.SwitchTime;
      }
      if (other.SmokeAsset1P.Length != 0) {
        SmokeAsset1P = other.SmokeAsset1P;
      }
      if (other.SmokeAsset3P.Length != 0) {
        SmokeAsset3P = other.SmokeAsset3P;
      }
      if (other.DropClipAssetID1P != 0) {
        DropClipAssetID1P = other.DropClipAssetID1P;
      }
      if (other.WeaponMaxMoveSpeed != 0F) {
        WeaponMaxMoveSpeed = other.WeaponMaxMoveSpeed;
      }
      if (other.WeaponSprintSpeed != 0F) {
        WeaponSprintSpeed = other.WeaponSprintSpeed;
      }
      if (other.WeaponCanDiscard != false) {
        WeaponCanDiscard = other.WeaponCanDiscard;
      }
      if (other.discardWeaponInitDir_ != null) {
        if (discardWeaponInitDir_ == null) {
          DiscardWeaponInitDir = new global::D11.Pjson.PbVector3();
        }
        DiscardWeaponInitDir.MergeFrom(other.DiscardWeaponInitDir);
      }
      if (other.PickUpAssetName.Length != 0) {
        PickUpAssetName = other.PickUpAssetName;
      }
      if (other.SpecialPickUpAssetName.Length != 0) {
        SpecialPickUpAssetName = other.SpecialPickUpAssetName;
      }
      if (other.MaxDecalDistance != 0F) {
        MaxDecalDistance = other.MaxDecalDistance;
      }
      if (other.MaxDecalDistanceFar != 0F) {
        MaxDecalDistanceFar = other.MaxDecalDistanceFar;
      }
      if (other.PlayFirstEquipAnimInTurn != false) {
        PlayFirstEquipAnimInTurn = other.PlayFirstEquipAnimInTurn;
      }
      if (other.PlayFirstEquipAnimInGame != false) {
        PlayFirstEquipAnimInGame = other.PlayFirstEquipAnimInGame;
      }
      if (other.DeadDropMust != false) {
        DeadDropMust = other.DeadDropMust;
      }
      if (other.DeadDropCan != false) {
        DeadDropCan = other.DeadDropCan;
      }
      if (other.IsSilencerWeapon != false) {
        IsSilencerWeapon = other.IsSilencerWeapon;
      }
      if (other.BEquipSilencer != false) {
        BEquipSilencer = other.BEquipSilencer;
      }
      if (other.LoadSpecialTime != 0F) {
        LoadSpecialTime = other.LoadSpecialTime;
      }
      if (other.UnLoadSpecialTime != 0F) {
        UnLoadSpecialTime = other.UnLoadSpecialTime;
      }
      if (other.LoadSpecialStateTime != 0F) {
        LoadSpecialStateTime = other.LoadSpecialStateTime;
      }
      if (other.UnLoadSpecialStateTime != 0F) {
        UnLoadSpecialStateTime = other.UnLoadSpecialStateTime;
      }
      if (other.KillCounterAssetName1P.Length != 0) {
        KillCounterAssetName1P = other.KillCounterAssetName1P;
      }
      if (other.KillCounterAssetName3P.Length != 0) {
        KillCounterAssetName3P = other.KillCounterAssetName3P;
      }
      if (other.IsClipHudWeapon != false) {
        IsClipHudWeapon = other.IsClipHudWeapon;
      }
      if (other.ClipHudAssetName1P.Length != 0) {
        ClipHudAssetName1P = other.ClipHudAssetName1P;
      }
      if (other.ClipHudAssetName3P.Length != 0) {
        ClipHudAssetName3P = other.ClipHudAssetName3P;
      }
      if (other.MuzzleFlashAsset1P.Length != 0) {
        MuzzleFlashAsset1P = other.MuzzleFlashAsset1P;
      }
      if (other.SniperDelayEffect.Length != 0) {
        SniperDelayEffect = other.SniperDelayEffect;
      }
      if (other.SniperDelayEffectTime != 0F) {
        SniperDelayEffectTime = other.SniperDelayEffectTime;
      }
      if (other.SniperDelayEffectSocketName.Length != 0) {
        SniperDelayEffectSocketName = other.SniperDelayEffectSocketName;
      }
      if (other.MuzzleSecondFlashAsset1P.Length != 0) {
        MuzzleSecondFlashAsset1P = other.MuzzleSecondFlashAsset1P;
      }
      if (other.SkinWearNoneMuzzleFlashAsset1P.Length != 0) {
        SkinWearNoneMuzzleFlashAsset1P = other.SkinWearNoneMuzzleFlashAsset1P;
      }
      if (other.SkinWearNoneMuzzleSecondFlashAsset1P.Length != 0) {
        SkinWearNoneMuzzleSecondFlashAsset1P = other.SkinWearNoneMuzzleSecondFlashAsset1P;
      }
      if (other.MuzzleFlashAsset3P.Length != 0) {
        MuzzleFlashAsset3P = other.MuzzleFlashAsset3P;
      }
      if (other.SkinWearNoneMuzzleFlashAsset3P.Length != 0) {
        SkinWearNoneMuzzleFlashAsset3P = other.SkinWearNoneMuzzleFlashAsset3P;
      }
      if (other.MuzzleHotSmokeSocketName.Length != 0) {
        MuzzleHotSmokeSocketName = other.MuzzleHotSmokeSocketName;
      }
      if (other.MuzzleFlashSocketName.Length != 0) {
        MuzzleFlashSocketName = other.MuzzleFlashSocketName;
      }
      if (other.MuzzleHotSmokeAsset.Length != 0) {
        MuzzleHotSmokeAsset = other.MuzzleHotSmokeAsset;
      }
      if (other.FireTrackSmokeTime != 0F) {
        FireTrackSmokeTime = other.FireTrackSmokeTime;
      }
      fireTrackFlashAssets_.Add(other.fireTrackFlashAssets_);
      fireTrackFlashAsset3Ps_.Add(other.fireTrackFlashAsset3Ps_);
      fireTrackSmokeAssets_.Add(other.fireTrackSmokeAssets_);
      fireTrackSmokeAsset3Ps_.Add(other.fireTrackSmokeAsset3Ps_);
      if (other.FireTrackSmokeTime3P != 0F) {
        FireTrackSmokeTime3P = other.FireTrackSmokeTime3P;
      }
      if (other.FireTrackFlashSpeed != 0F) {
        FireTrackFlashSpeed = other.FireTrackFlashSpeed;
      }
      if (other.IntervalNumTrack != 0) {
        IntervalNumTrack = other.IntervalNumTrack;
      }
      if (other.MuzzleHotSmokeNum != 0) {
        MuzzleHotSmokeNum = other.MuzzleHotSmokeNum;
      }
      if (other.MinDistanceTrack != 0) {
        MinDistanceTrack = other.MinDistanceTrack;
      }
      if (other.ShellDropAsset.Length != 0) {
        ShellDropAsset = other.ShellDropAsset;
      }
      if (other.ShellDropSocketName.Length != 0) {
        ShellDropSocketName = other.ShellDropSocketName;
      }
      if (other.ShellDropAsset3P.Length != 0) {
        ShellDropAsset3P = other.ShellDropAsset3P;
      }
      if (other.ShellDropSocket3PName.Length != 0) {
        ShellDropSocket3PName = other.ShellDropSocket3PName;
      }
      if (other.AnimPartical1P.Length != 0) {
        AnimPartical1P = other.AnimPartical1P;
      }
      if (other.AnimPartical1PName.Length != 0) {
        AnimPartical1PName = other.AnimPartical1PName;
      }
      if (other.LightPointAsset.Length != 0) {
        LightPointAsset = other.LightPointAsset;
      }
      if (other.LightPointAsset3P.Length != 0) {
        LightPointAsset3P = other.LightPointAsset3P;
      }
      if (other.QuickStopSpeed != 0F) {
        QuickStopSpeed = other.QuickStopSpeed;
      }
      if (other.QuickStopTime != 0F) {
        QuickStopTime = other.QuickStopTime;
      }
      if (other.QuickStopMoveSpread != 0F) {
        QuickStopMoveSpread = other.QuickStopMoveSpread;
      }
      if (other.UseCommonAmmos != false) {
        UseCommonAmmos = other.UseCommonAmmos;
      }
      if (other.AppreciateAnis.Length != 0) {
        AppreciateAnis = other.AppreciateAnis;
      }
      if (other.SilencerFlashAsset1P.Length != 0) {
        SilencerFlashAsset1P = other.SilencerFlashAsset1P;
      }
      if (other.SilencerFlashAsset3P.Length != 0) {
        SilencerFlashAsset3P = other.SilencerFlashAsset3P;
      }
      if (other.SilencerSmokeAsset1P.Length != 0) {
        SilencerSmokeAsset1P = other.SilencerSmokeAsset1P;
      }
      if (other.SilencerSmokeAsset3P.Length != 0) {
        SilencerSmokeAsset3P = other.SilencerSmokeAsset3P;
      }
      if (other.TrackMuzzleOnPoint1P != false) {
        TrackMuzzleOnPoint1P = other.TrackMuzzleOnPoint1P;
      }
      trackMuzzlePoint1P_.Add(other.trackMuzzlePoint1P_);
      if (other.VFXTriggerFireKilledAsset1P.Length != 0) {
        VFXTriggerFireKilledAsset1P = other.VFXTriggerFireKilledAsset1P;
      }
      if (other.VFXTriggerFireKilledDeadAsset1P.Length != 0) {
        VFXTriggerFireKilledDeadAsset1P = other.VFXTriggerFireKilledDeadAsset1P;
      }
      if (other.VFXTriggerFireAroundAsset1P.Length != 0) {
        VFXTriggerFireAroundAsset1P = other.VFXTriggerFireAroundAsset1P;
      }
      if (other.VFXTriggerShowOffAsset1P.Length != 0) {
        VFXTriggerShowOffAsset1P = other.VFXTriggerShowOffAsset1P;
      }
      if (other.VFXTriggerChangeClipAsset1P.Length != 0) {
        VFXTriggerChangeClipAsset1P = other.VFXTriggerChangeClipAsset1P;
      }
      if (other.VFXTriggerEquipWeaponAsset1P.Length != 0) {
        VFXTriggerEquipWeaponAsset1P = other.VFXTriggerEquipWeaponAsset1P;
      }
      if (other.VFXKeepNormalAsset1P.Length != 0) {
        VFXKeepNormalAsset1P = other.VFXKeepNormalAsset1P;
      }
      if (other.VFXTriggersSocketName1P.Length != 0) {
        VFXTriggersSocketName1P = other.VFXTriggersSocketName1P;
      }
      if (other.VFXDynamicFireKilledAsset1P.Length != 0) {
        VFXDynamicFireKilledAsset1P = other.VFXDynamicFireKilledAsset1P;
      }
      if (other.VFXDynamicFireAroundAsset1P.Length != 0) {
        VFXDynamicFireAroundAsset1P = other.VFXDynamicFireAroundAsset1P;
      }
      if (other.VFXDynamicShowOffAsset1P.Length != 0) {
        VFXDynamicShowOffAsset1P = other.VFXDynamicShowOffAsset1P;
      }
      if (other.VFXDynamicChangeClipAsset1P.Length != 0) {
        VFXDynamicChangeClipAsset1P = other.VFXDynamicChangeClipAsset1P;
      }
      if (other.VFXDynamicEquipWeaponAsset1P.Length != 0) {
        VFXDynamicEquipWeaponAsset1P = other.VFXDynamicEquipWeaponAsset1P;
      }
      if (other.VFXDynamicKeepNormalAsset1P.Length != 0) {
        VFXDynamicKeepNormalAsset1P = other.VFXDynamicKeepNormalAsset1P;
      }
      if (other.VFXDynamicReloadAmmoAsset1P.Length != 0) {
        VFXDynamicReloadAmmoAsset1P = other.VFXDynamicReloadAmmoAsset1P;
      }
      if (other.VFXDynamicFireKilledSocketName1P.Length != 0) {
        VFXDynamicFireKilledSocketName1P = other.VFXDynamicFireKilledSocketName1P;
      }
      if (other.VFXDynamicFireAroundSocketName1P.Length != 0) {
        VFXDynamicFireAroundSocketName1P = other.VFXDynamicFireAroundSocketName1P;
      }
      if (other.VFXDynamicShowOffSocketName1P.Length != 0) {
        VFXDynamicShowOffSocketName1P = other.VFXDynamicShowOffSocketName1P;
      }
      if (other.VFXDynamicChangeClipSocketName1P.Length != 0) {
        VFXDynamicChangeClipSocketName1P = other.VFXDynamicChangeClipSocketName1P;
      }
      if (other.VFXDynamicEquipWeaponSocketName1P.Length != 0) {
        VFXDynamicEquipWeaponSocketName1P = other.VFXDynamicEquipWeaponSocketName1P;
      }
      if (other.VFXDynamicKeepSocketName1P.Length != 0) {
        VFXDynamicKeepSocketName1P = other.VFXDynamicKeepSocketName1P;
      }
      if (other.VFXDynamicReloadAmmoSocketName1P.Length != 0) {
        VFXDynamicReloadAmmoSocketName1P = other.VFXDynamicReloadAmmoSocketName1P;
      }
      if (other.VFXIgniteFlameAsset.Length != 0) {
        VFXIgniteFlameAsset = other.VFXIgniteFlameAsset;
      }
      if (other.VFXLighterAsset.Length != 0) {
        VFXLighterAsset = other.VFXLighterAsset;
      }
      if (other.LighterSocketName.Length != 0) {
        LighterSocketName = other.LighterSocketName;
      }
      if (other.RopeFireSocketTpName.Length != 0) {
        RopeFireSocketTpName = other.RopeFireSocketTpName;
      }
      if (other.VFXRopeTpAsset.Length != 0) {
        VFXRopeTpAsset = other.VFXRopeTpAsset;
      }
      if (other.IsGunSightWeapon != false) {
        IsGunSightWeapon = other.IsGunSightWeapon;
      }
      if (other.FireCloseSoundFp.Length != 0) {
        FireCloseSoundFp = other.FireCloseSoundFp;
      }
      if (other.FireFarSoundFp.Length != 0) {
        FireFarSoundFp = other.FireFarSoundFp;
      }
      if (other.FireCloseSoundTp.Length != 0) {
        FireCloseSoundTp = other.FireCloseSoundTp;
      }
      if (other.FireFarSoundTp.Length != 0) {
        FireFarSoundTp = other.FireFarSoundTp;
      }
      if (other.FireLoopSoundTp.Length != 0) {
        FireLoopSoundTp = other.FireLoopSoundTp;
      }
      if (other.FireTailSoundTp.Length != 0) {
        FireTailSoundTp = other.FireTailSoundTp;
      }
      if (other.SecondFireLoopSoundTp.Length != 0) {
        SecondFireLoopSoundTp = other.SecondFireLoopSoundTp;
      }
      if (other.SecondFireTailSoundTp.Length != 0) {
        SecondFireTailSoundTp = other.SecondFireTailSoundTp;
      }
      if (other.FireLoopSoundFp.Length != 0) {
        FireLoopSoundFp = other.FireLoopSoundFp;
      }
      if (other.FireTailSoundFp.Length != 0) {
        FireTailSoundFp = other.FireTailSoundFp;
      }
      if (other.SecondFireLoopSoundFp.Length != 0) {
        SecondFireLoopSoundFp = other.SecondFireLoopSoundFp;
      }
      if (other.SecondFireTailSoundFp.Length != 0) {
        SecondFireTailSoundFp = other.SecondFireTailSoundFp;
      }
      if (other.ReloadSoundFp.Length != 0) {
        ReloadSoundFp = other.ReloadSoundFp;
      }
      if (other.ReloadEndSoundFp.Length != 0) {
        ReloadEndSoundFp = other.ReloadEndSoundFp;
      }
      if (other.ReloadSoundTp.Length != 0) {
        ReloadSoundTp = other.ReloadSoundTp;
      }
      if (other.ReloadEndSoundTp.Length != 0) {
        ReloadEndSoundTp = other.ReloadEndSoundTp;
      }
      if (other.ReloadStopSoundFp.Length != 0) {
        ReloadStopSoundFp = other.ReloadStopSoundFp;
      }
      if (other.ReloadStopSoundTp.Length != 0) {
        ReloadStopSoundTp = other.ReloadStopSoundTp;
      }
      if (other.SecondReloadSoundFp.Length != 0) {
        SecondReloadSoundFp = other.SecondReloadSoundFp;
      }
      if (other.SecondReloadStopSoundFp.Length != 0) {
        SecondReloadStopSoundFp = other.SecondReloadStopSoundFp;
      }
      if (other.SecondReloadSoundTp.Length != 0) {
        SecondReloadSoundTp = other.SecondReloadSoundTp;
      }
      if (other.SecondReloadStopSoundTp.Length != 0) {
        SecondReloadStopSoundTp = other.SecondReloadStopSoundTp;
      }
      if (other.PreFirePlayFp.Length != 0) {
        PreFirePlayFp = other.PreFirePlayFp;
      }
      if (other.PreFireStopFp.Length != 0) {
        PreFireStopFp = other.PreFireStopFp;
      }
      if (other.PreFirePlayTp.Length != 0) {
        PreFirePlayTp = other.PreFirePlayTp;
      }
      if (other.PreFireStopTp.Length != 0) {
        PreFireStopTp = other.PreFireStopTp;
      }
      if (other.DeploySound.Length != 0) {
        DeploySound = other.DeploySound;
      }
      if (other.DeployStopSound.Length != 0) {
        DeployStopSound = other.DeployStopSound;
      }
      if (other.SecondDeploySound.Length != 0) {
        SecondDeploySound = other.SecondDeploySound;
      }
      if (other.SecondDeployStopSound.Length != 0) {
        SecondDeployStopSound = other.SecondDeployStopSound;
      }
      if (other.WeaponImpactSound.Length != 0) {
        WeaponImpactSound = other.WeaponImpactSound;
      }
      if (other.FireSoundCloseDis != 0) {
        FireSoundCloseDis = other.FireSoundCloseDis;
      }
      if (other.FireDelayTime != 0F) {
        FireDelayTime = other.FireDelayTime;
      }
      if (other.RemainingCount != 0F) {
        RemainingCount = other.RemainingCount;
      }
      if (other.SilencerFireSoundFP.Length != 0) {
        SilencerFireSoundFP = other.SilencerFireSoundFP;
      }
      if (other.SilencerFireSoundTP.Length != 0) {
        SilencerFireSoundTP = other.SilencerFireSoundTP;
      }
      if (other.SilencerLoadSoundFP.Length != 0) {
        SilencerLoadSoundFP = other.SilencerLoadSoundFP;
      }
      if (other.StopSilencerLoadSoundFP.Length != 0) {
        StopSilencerLoadSoundFP = other.StopSilencerLoadSoundFP;
      }
      if (other.SilencerUnLoadSoundFP.Length != 0) {
        SilencerUnLoadSoundFP = other.SilencerUnLoadSoundFP;
      }
      if (other.StopSilencerUnLoadSoundFP.Length != 0) {
        StopSilencerUnLoadSoundFP = other.StopSilencerUnLoadSoundFP;
      }
      if (other.ClearShotShellsSoundOnDead != false) {
        ClearShotShellsSoundOnDead = other.ClearShotShellsSoundOnDead;
      }
      if (other.ShotShellsSoundFP.Length != 0) {
        ShotShellsSoundFP = other.ShotShellsSoundFP;
      }
      if (other.ContinuousShotShellsDelayTime != 0F) {
        ContinuousShotShellsDelayTime = other.ContinuousShotShellsDelayTime;
      }
      if (other.ContinuousShotShellsSoundFP.Length != 0) {
        ContinuousShotShellsSoundFP = other.ContinuousShotShellsSoundFP;
      }
      if (other.ShotShellsDelayTime != 0F) {
        ShotShellsDelayTime = other.ShotShellsDelayTime;
      }
      if (other.EmptySoundFP.Length != 0) {
        EmptySoundFP = other.EmptySoundFP;
      }
      if (other.ReloadLoopSoundFP.Length != 0) {
        ReloadLoopSoundFP = other.ReloadLoopSoundFP;
      }
      if (other.EmptySoundTP.Length != 0) {
        EmptySoundTP = other.EmptySoundTP;
      }
      if (other.ReloadLoopSoundTP.Length != 0) {
        ReloadLoopSoundTP = other.ReloadLoopSoundTP;
      }
      appreciateWeaponSounds_.Add(other.appreciateWeaponSounds_);
      appreciateWeaponStopSounds_.Add(other.appreciateWeaponStopSounds_);
      appreciateWeaponSoundDelays_.Add(other.appreciateWeaponSoundDelays_);
      if (other.FireAnimSpeed != 0F) {
        FireAnimSpeed = other.FireAnimSpeed;
      }
      if (other.FireThreeContinueAnimSpeed != 0F) {
        FireThreeContinueAnimSpeed = other.FireThreeContinueAnimSpeed;
      }
      if (other.FireContinueAnimSpeed != 0F) {
        FireContinueAnimSpeed = other.FireContinueAnimSpeed;
      }
      if (other.TripleFireAnimSpeed != 0F) {
        TripleFireAnimSpeed = other.TripleFireAnimSpeed;
      }
      if (other.ChangeClipAnimSpeed != 0F) {
        ChangeClipAnimSpeed = other.ChangeClipAnimSpeed;
      }
      if (other.ChangeClipLoopAnimSpeed != 0F) {
        ChangeClipLoopAnimSpeed = other.ChangeClipLoopAnimSpeed;
      }
      if (other.CrouchChangeClipAnimSpeed != 0F) {
        CrouchChangeClipAnimSpeed = other.CrouchChangeClipAnimSpeed;
      }
      if (other.IdleAnimSpeed != 0F) {
        IdleAnimSpeed = other.IdleAnimSpeed;
      }
      if (other.EquipAnimSpeed != 0F) {
        EquipAnimSpeed = other.EquipAnimSpeed;
      }
      if (other.TakeDamageAnimSpeed != 0F) {
        TakeDamageAnimSpeed = other.TakeDamageAnimSpeed;
      }
      if (other.HeadTakeDamageAnimSpeed != 0F) {
        HeadTakeDamageAnimSpeed = other.HeadTakeDamageAnimSpeed;
      }
      if (other.ChangeGunAnimSpeed != 0F) {
        ChangeGunAnimSpeed = other.ChangeGunAnimSpeed;
      }
      animWeightListOfChangeGun_.Add(other.animWeightListOfChangeGun_);
      animWeightListOfClipChange_.Add(other.animWeightListOfClipChange_);
      animWeightListOfAppreciation_.Add(other.animWeightListOfAppreciation_);
      if (other.HalfBodySizeX != 0F) {
        HalfBodySizeX = other.HalfBodySizeX;
      }
      if (other.HalfBodySizeY != 0F) {
        HalfBodySizeY = other.HalfBodySizeY;
      }
      if (other.ProjectileEnable != false) {
        ProjectileEnable = other.ProjectileEnable;
      }
      if (other.BallisticID != 0) {
        BallisticID = other.BallisticID;
      }
      gunBuffIDs_.Add(other.gunBuffIDs_);
      if (other.ShowOffVoxSoundID != 0) {
        ShowOffVoxSoundID = other.ShowOffVoxSoundID;
      }
      if (other.BRFireLoopSoundTp.Length != 0) {
        BRFireLoopSoundTp = other.BRFireLoopSoundTp;
      }
      if (other.BRFireTailSoundTp.Length != 0) {
        BRFireTailSoundTp = other.BRFireTailSoundTp;
      }
      if (other.BRSecondFireLoopSoundTp.Length != 0) {
        BRSecondFireLoopSoundTp = other.BRSecondFireLoopSoundTp;
      }
      if (other.BRSecondFireTailSoundTp.Length != 0) {
        BRSecondFireTailSoundTp = other.BRSecondFireTailSoundTp;
      }
      if (other.BRFireSoundTp.Length != 0) {
        BRFireSoundTp = other.BRFireSoundTp;
      }
      if (other.BRSilencerFireSoundTP.Length != 0) {
        BRSilencerFireSoundTP = other.BRSilencerFireSoundTP;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StateMachineTypeName = input.ReadString();
            break;
          }
          case 18: {
            FireLogicClassName = input.ReadString();
            break;
          }
          case 26: {
            FireLogicClassConfigFileName = input.ReadString();
            break;
          }
          case 34: {
            SecondaryFireLogicClassName = input.ReadString();
            break;
          }
          case 42: {
            SecondaryFireLogicConfigFileName = input.ReadString();
            break;
          }
          case 50: {
            ImpactClassName = input.ReadString();
            break;
          }
          case 58: {
            ImpactConfigFileName = input.ReadString();
            break;
          }
          case 66: {
            SecondaryImpactClassName = input.ReadString();
            break;
          }
          case 74: {
            SecondaryImpactConfigFileName = input.ReadString();
            break;
          }
          case 85: {
            WeaponRange = input.ReadFloat();
            break;
          }
          case 93: {
            DamageArmorScale = input.ReadFloat();
            break;
          }
          case 101: {
            WeaponWeight = input.ReadFloat();
            break;
          }
          case 104: {
            BuyPrice = input.ReadInt32();
            break;
          }
          case 112: {
            KillAdward = input.ReadInt32();
            break;
          }
          case 125: {
            Deceleration = input.ReadFloat();
            break;
          }
          case 130: {
            WeaponNickName = input.ReadString();
            break;
          }
          case 138: {
            MeshAssetName1P = input.ReadString();
            break;
          }
          case 146: {
            MeshAssetName = input.ReadString();
            break;
          }
          case 154: {
            MeshAssetNameL = input.ReadString();
            break;
          }
          case 162: {
            WeaponSocketName = input.ReadString();
            break;
          }
          case 170: {
            WeaponSocketNameL = input.ReadString();
            break;
          }
          case 178: {
            WeaponBackSocketName = input.ReadString();
            break;
          }
          case 186: {
            WeaponBackBRSocket1Name = input.ReadString();
            break;
          }
          case 194: {
            WeaponBackBRSocket2Name = input.ReadString();
            break;
          }
          case 205: {
            WorldCameraFOV = input.ReadFloat();
            break;
          }
          case 213: {
            FPCameraFOV = input.ReadFloat();
            break;
          }
          case 221: {
            SwitchTime = input.ReadFloat();
            break;
          }
          case 226: {
            SmokeAsset1P = input.ReadString();
            break;
          }
          case 234: {
            SmokeAsset3P = input.ReadString();
            break;
          }
          case 240: {
            DropClipAssetID1P = input.ReadInt32();
            break;
          }
          case 253: {
            WeaponMaxMoveSpeed = input.ReadFloat();
            break;
          }
          case 261: {
            WeaponSprintSpeed = input.ReadFloat();
            break;
          }
          case 264: {
            WeaponCanDiscard = input.ReadBool();
            break;
          }
          case 274: {
            if (discardWeaponInitDir_ == null) {
              DiscardWeaponInitDir = new global::D11.Pjson.PbVector3();
            }
            input.ReadMessage(DiscardWeaponInitDir);
            break;
          }
          case 282: {
            PickUpAssetName = input.ReadString();
            break;
          }
          case 290: {
            SpecialPickUpAssetName = input.ReadString();
            break;
          }
          case 301: {
            MaxDecalDistance = input.ReadFloat();
            break;
          }
          case 309: {
            MaxDecalDistanceFar = input.ReadFloat();
            break;
          }
          case 312: {
            PlayFirstEquipAnimInTurn = input.ReadBool();
            break;
          }
          case 320: {
            PlayFirstEquipAnimInGame = input.ReadBool();
            break;
          }
          case 328: {
            DeadDropMust = input.ReadBool();
            break;
          }
          case 336: {
            DeadDropCan = input.ReadBool();
            break;
          }
          case 344: {
            IsSilencerWeapon = input.ReadBool();
            break;
          }
          case 352: {
            BEquipSilencer = input.ReadBool();
            break;
          }
          case 365: {
            LoadSpecialTime = input.ReadFloat();
            break;
          }
          case 373: {
            UnLoadSpecialTime = input.ReadFloat();
            break;
          }
          case 381: {
            LoadSpecialStateTime = input.ReadFloat();
            break;
          }
          case 389: {
            UnLoadSpecialStateTime = input.ReadFloat();
            break;
          }
          case 394: {
            KillCounterAssetName1P = input.ReadString();
            break;
          }
          case 402: {
            KillCounterAssetName3P = input.ReadString();
            break;
          }
          case 408: {
            IsClipHudWeapon = input.ReadBool();
            break;
          }
          case 418: {
            ClipHudAssetName1P = input.ReadString();
            break;
          }
          case 426: {
            ClipHudAssetName3P = input.ReadString();
            break;
          }
          case 434: {
            MuzzleFlashAsset1P = input.ReadString();
            break;
          }
          case 442: {
            SniperDelayEffect = input.ReadString();
            break;
          }
          case 453: {
            SniperDelayEffectTime = input.ReadFloat();
            break;
          }
          case 458: {
            SniperDelayEffectSocketName = input.ReadString();
            break;
          }
          case 466: {
            MuzzleSecondFlashAsset1P = input.ReadString();
            break;
          }
          case 474: {
            SkinWearNoneMuzzleFlashAsset1P = input.ReadString();
            break;
          }
          case 482: {
            SkinWearNoneMuzzleSecondFlashAsset1P = input.ReadString();
            break;
          }
          case 490: {
            MuzzleFlashAsset3P = input.ReadString();
            break;
          }
          case 498: {
            SkinWearNoneMuzzleFlashAsset3P = input.ReadString();
            break;
          }
          case 506: {
            MuzzleHotSmokeSocketName = input.ReadString();
            break;
          }
          case 514: {
            MuzzleFlashSocketName = input.ReadString();
            break;
          }
          case 522: {
            MuzzleHotSmokeAsset = input.ReadString();
            break;
          }
          case 533: {
            FireTrackSmokeTime = input.ReadFloat();
            break;
          }
          case 538:
          case 536: {
            fireTrackFlashAssets_.AddEntriesFrom(input, _repeated_fireTrackFlashAssets_codec);
            break;
          }
          case 546:
          case 544: {
            fireTrackFlashAsset3Ps_.AddEntriesFrom(input, _repeated_fireTrackFlashAsset3Ps_codec);
            break;
          }
          case 554:
          case 552: {
            fireTrackSmokeAssets_.AddEntriesFrom(input, _repeated_fireTrackSmokeAssets_codec);
            break;
          }
          case 562:
          case 560: {
            fireTrackSmokeAsset3Ps_.AddEntriesFrom(input, _repeated_fireTrackSmokeAsset3Ps_codec);
            break;
          }
          case 573: {
            FireTrackSmokeTime3P = input.ReadFloat();
            break;
          }
          case 581: {
            FireTrackFlashSpeed = input.ReadFloat();
            break;
          }
          case 584: {
            IntervalNumTrack = input.ReadInt32();
            break;
          }
          case 592: {
            MuzzleHotSmokeNum = input.ReadInt32();
            break;
          }
          case 600: {
            MinDistanceTrack = input.ReadInt32();
            break;
          }
          case 610: {
            ShellDropAsset = input.ReadString();
            break;
          }
          case 618: {
            ShellDropSocketName = input.ReadString();
            break;
          }
          case 626: {
            ShellDropAsset3P = input.ReadString();
            break;
          }
          case 634: {
            ShellDropSocket3PName = input.ReadString();
            break;
          }
          case 642: {
            AnimPartical1P = input.ReadString();
            break;
          }
          case 650: {
            AnimPartical1PName = input.ReadString();
            break;
          }
          case 658: {
            LightPointAsset = input.ReadString();
            break;
          }
          case 666: {
            LightPointAsset3P = input.ReadString();
            break;
          }
          case 677: {
            QuickStopSpeed = input.ReadFloat();
            break;
          }
          case 685: {
            QuickStopTime = input.ReadFloat();
            break;
          }
          case 693: {
            QuickStopMoveSpread = input.ReadFloat();
            break;
          }
          case 696: {
            UseCommonAmmos = input.ReadBool();
            break;
          }
          case 706: {
            AppreciateAnis = input.ReadString();
            break;
          }
          case 714: {
            SilencerFlashAsset1P = input.ReadString();
            break;
          }
          case 722: {
            SilencerFlashAsset3P = input.ReadString();
            break;
          }
          case 730: {
            SilencerSmokeAsset1P = input.ReadString();
            break;
          }
          case 738: {
            SilencerSmokeAsset3P = input.ReadString();
            break;
          }
          case 744: {
            TrackMuzzleOnPoint1P = input.ReadBool();
            break;
          }
          case 754:
          case 757: {
            trackMuzzlePoint1P_.AddEntriesFrom(input, _repeated_trackMuzzlePoint1P_codec);
            break;
          }
          case 762: {
            VFXTriggerFireKilledAsset1P = input.ReadString();
            break;
          }
          case 770: {
            VFXTriggerFireKilledDeadAsset1P = input.ReadString();
            break;
          }
          case 778: {
            VFXTriggerFireAroundAsset1P = input.ReadString();
            break;
          }
          case 786: {
            VFXTriggerShowOffAsset1P = input.ReadString();
            break;
          }
          case 794: {
            VFXTriggerChangeClipAsset1P = input.ReadString();
            break;
          }
          case 802: {
            VFXTriggerEquipWeaponAsset1P = input.ReadString();
            break;
          }
          case 810: {
            VFXKeepNormalAsset1P = input.ReadString();
            break;
          }
          case 818: {
            VFXTriggersSocketName1P = input.ReadString();
            break;
          }
          case 826: {
            VFXDynamicFireKilledAsset1P = input.ReadString();
            break;
          }
          case 834: {
            VFXDynamicFireAroundAsset1P = input.ReadString();
            break;
          }
          case 842: {
            VFXDynamicShowOffAsset1P = input.ReadString();
            break;
          }
          case 850: {
            VFXDynamicChangeClipAsset1P = input.ReadString();
            break;
          }
          case 858: {
            VFXDynamicEquipWeaponAsset1P = input.ReadString();
            break;
          }
          case 866: {
            VFXDynamicKeepNormalAsset1P = input.ReadString();
            break;
          }
          case 874: {
            VFXDynamicReloadAmmoAsset1P = input.ReadString();
            break;
          }
          case 882: {
            VFXDynamicFireKilledSocketName1P = input.ReadString();
            break;
          }
          case 890: {
            VFXDynamicFireAroundSocketName1P = input.ReadString();
            break;
          }
          case 898: {
            VFXDynamicShowOffSocketName1P = input.ReadString();
            break;
          }
          case 906: {
            VFXDynamicChangeClipSocketName1P = input.ReadString();
            break;
          }
          case 914: {
            VFXDynamicEquipWeaponSocketName1P = input.ReadString();
            break;
          }
          case 922: {
            VFXDynamicKeepSocketName1P = input.ReadString();
            break;
          }
          case 930: {
            VFXDynamicReloadAmmoSocketName1P = input.ReadString();
            break;
          }
          case 938: {
            VFXIgniteFlameAsset = input.ReadString();
            break;
          }
          case 946: {
            VFXLighterAsset = input.ReadString();
            break;
          }
          case 954: {
            LighterSocketName = input.ReadString();
            break;
          }
          case 962: {
            RopeFireSocketTpName = input.ReadString();
            break;
          }
          case 970: {
            VFXRopeTpAsset = input.ReadString();
            break;
          }
          case 976: {
            IsGunSightWeapon = input.ReadBool();
            break;
          }
          case 986: {
            FireCloseSoundFp = input.ReadString();
            break;
          }
          case 994: {
            FireFarSoundFp = input.ReadString();
            break;
          }
          case 1002: {
            FireCloseSoundTp = input.ReadString();
            break;
          }
          case 1010: {
            FireFarSoundTp = input.ReadString();
            break;
          }
          case 1018: {
            FireLoopSoundTp = input.ReadString();
            break;
          }
          case 1026: {
            FireTailSoundTp = input.ReadString();
            break;
          }
          case 1034: {
            SecondFireLoopSoundTp = input.ReadString();
            break;
          }
          case 1042: {
            SecondFireTailSoundTp = input.ReadString();
            break;
          }
          case 1050: {
            FireLoopSoundFp = input.ReadString();
            break;
          }
          case 1058: {
            FireTailSoundFp = input.ReadString();
            break;
          }
          case 1066: {
            SecondFireLoopSoundFp = input.ReadString();
            break;
          }
          case 1074: {
            SecondFireTailSoundFp = input.ReadString();
            break;
          }
          case 1082: {
            ReloadSoundFp = input.ReadString();
            break;
          }
          case 1090: {
            ReloadEndSoundFp = input.ReadString();
            break;
          }
          case 1098: {
            ReloadSoundTp = input.ReadString();
            break;
          }
          case 1106: {
            ReloadEndSoundTp = input.ReadString();
            break;
          }
          case 1114: {
            ReloadStopSoundFp = input.ReadString();
            break;
          }
          case 1122: {
            ReloadStopSoundTp = input.ReadString();
            break;
          }
          case 1130: {
            SecondReloadSoundFp = input.ReadString();
            break;
          }
          case 1138: {
            SecondReloadStopSoundFp = input.ReadString();
            break;
          }
          case 1146: {
            SecondReloadSoundTp = input.ReadString();
            break;
          }
          case 1154: {
            SecondReloadStopSoundTp = input.ReadString();
            break;
          }
          case 1162: {
            PreFirePlayFp = input.ReadString();
            break;
          }
          case 1170: {
            PreFireStopFp = input.ReadString();
            break;
          }
          case 1178: {
            PreFirePlayTp = input.ReadString();
            break;
          }
          case 1186: {
            PreFireStopTp = input.ReadString();
            break;
          }
          case 1194: {
            DeploySound = input.ReadString();
            break;
          }
          case 1202: {
            DeployStopSound = input.ReadString();
            break;
          }
          case 1210: {
            SecondDeploySound = input.ReadString();
            break;
          }
          case 1218: {
            SecondDeployStopSound = input.ReadString();
            break;
          }
          case 1226: {
            WeaponImpactSound = input.ReadString();
            break;
          }
          case 1232: {
            FireSoundCloseDis = input.ReadInt32();
            break;
          }
          case 1245: {
            FireDelayTime = input.ReadFloat();
            break;
          }
          case 1253: {
            RemainingCount = input.ReadFloat();
            break;
          }
          case 1258: {
            SilencerFireSoundFP = input.ReadString();
            break;
          }
          case 1266: {
            SilencerFireSoundTP = input.ReadString();
            break;
          }
          case 1274: {
            SilencerLoadSoundFP = input.ReadString();
            break;
          }
          case 1282: {
            StopSilencerLoadSoundFP = input.ReadString();
            break;
          }
          case 1290: {
            SilencerUnLoadSoundFP = input.ReadString();
            break;
          }
          case 1298: {
            StopSilencerUnLoadSoundFP = input.ReadString();
            break;
          }
          case 1304: {
            ClearShotShellsSoundOnDead = input.ReadBool();
            break;
          }
          case 1314: {
            ShotShellsSoundFP = input.ReadString();
            break;
          }
          case 1325: {
            ContinuousShotShellsDelayTime = input.ReadFloat();
            break;
          }
          case 1330: {
            ContinuousShotShellsSoundFP = input.ReadString();
            break;
          }
          case 1341: {
            ShotShellsDelayTime = input.ReadFloat();
            break;
          }
          case 1346: {
            EmptySoundFP = input.ReadString();
            break;
          }
          case 1354: {
            ReloadLoopSoundFP = input.ReadString();
            break;
          }
          case 1362: {
            EmptySoundTP = input.ReadString();
            break;
          }
          case 1370: {
            ReloadLoopSoundTP = input.ReadString();
            break;
          }
          case 1378: {
            appreciateWeaponSounds_.AddEntriesFrom(input, _repeated_appreciateWeaponSounds_codec);
            break;
          }
          case 1386: {
            appreciateWeaponStopSounds_.AddEntriesFrom(input, _repeated_appreciateWeaponStopSounds_codec);
            break;
          }
          case 1394:
          case 1397: {
            appreciateWeaponSoundDelays_.AddEntriesFrom(input, _repeated_appreciateWeaponSoundDelays_codec);
            break;
          }
          case 1405: {
            FireAnimSpeed = input.ReadFloat();
            break;
          }
          case 1413: {
            FireThreeContinueAnimSpeed = input.ReadFloat();
            break;
          }
          case 1421: {
            FireContinueAnimSpeed = input.ReadFloat();
            break;
          }
          case 1429: {
            TripleFireAnimSpeed = input.ReadFloat();
            break;
          }
          case 1437: {
            ChangeClipAnimSpeed = input.ReadFloat();
            break;
          }
          case 1445: {
            ChangeClipLoopAnimSpeed = input.ReadFloat();
            break;
          }
          case 1453: {
            CrouchChangeClipAnimSpeed = input.ReadFloat();
            break;
          }
          case 1461: {
            IdleAnimSpeed = input.ReadFloat();
            break;
          }
          case 1469: {
            EquipAnimSpeed = input.ReadFloat();
            break;
          }
          case 1477: {
            TakeDamageAnimSpeed = input.ReadFloat();
            break;
          }
          case 1485: {
            HeadTakeDamageAnimSpeed = input.ReadFloat();
            break;
          }
          case 1493: {
            ChangeGunAnimSpeed = input.ReadFloat();
            break;
          }
          case 1498:
          case 1496: {
            animWeightListOfChangeGun_.AddEntriesFrom(input, _repeated_animWeightListOfChangeGun_codec);
            break;
          }
          case 1506:
          case 1504: {
            animWeightListOfClipChange_.AddEntriesFrom(input, _repeated_animWeightListOfClipChange_codec);
            break;
          }
          case 1514:
          case 1512: {
            animWeightListOfAppreciation_.AddEntriesFrom(input, _repeated_animWeightListOfAppreciation_codec);
            break;
          }
          case 1525: {
            HalfBodySizeX = input.ReadFloat();
            break;
          }
          case 1533: {
            HalfBodySizeY = input.ReadFloat();
            break;
          }
          case 1536: {
            ProjectileEnable = input.ReadBool();
            break;
          }
          case 1544: {
            BallisticID = input.ReadInt32();
            break;
          }
          case 1554:
          case 1552: {
            gunBuffIDs_.AddEntriesFrom(input, _repeated_gunBuffIDs_codec);
            break;
          }
          case 1560: {
            ShowOffVoxSoundID = input.ReadUInt32();
            break;
          }
          case 1570: {
            BRFireLoopSoundTp = input.ReadString();
            break;
          }
          case 1578: {
            BRFireTailSoundTp = input.ReadString();
            break;
          }
          case 1586: {
            BRSecondFireLoopSoundTp = input.ReadString();
            break;
          }
          case 1594: {
            BRSecondFireTailSoundTp = input.ReadString();
            break;
          }
          case 1602: {
            BRFireSoundTp = input.ReadString();
            break;
          }
          case 1610: {
            BRSilencerFireSoundTP = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
