// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WeaponPersistenceConfigInstantGunSightData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from WeaponPersistenceConfigInstantGunSightData.proto</summary>
  public static partial class WeaponPersistenceConfigInstantGunSightDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WeaponPersistenceConfigInstantGunSightData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeaponPersistenceConfigInstantGunSightDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBXZWFwb25QZXJzaXN0ZW5jZUNvbmZpZ0luc3RhbnRHdW5TaWdodERhdGEu",
            "cHJvdG8SCUQxMS5QanNvbhoqV2VhcG9uUGVyc2lzdGVuY2VDb25maWdDb21w",
            "b25lbnREYXRhLnByb3RvIrYFCipXZWFwb25QZXJzaXN0ZW5jZUNvbmZpZ0lu",
            "c3RhbnRHdW5TaWdodERhdGESFwoPTWlycm9ySWRsZVN0YXRlGAEgASgIEhsK",
            "E09wZW5NaXJyb3JTdGF0ZVRpbWUYAiABKAISHAoUQ2xvc2VNaXJyb3JTdGF0",
            "ZVRpbWUYAyABKAISIAoYT3Blbk1pcnJvcldvcmxkQ2FtZXJhRk9WGAQgASgC",
            "Eh0KFU9wZW5NaXJyb3JGUENhbWVyYUZPVhgFIAEoAhIeChZPcGVuTWlycm9y",
            "TWF4TW92ZVNwZWVkGAYgASgCEhcKD1pvb21JbkFuaW1TcGVlZBgHIAEoAhIY",
            "ChBab29tT3V0QW5pbVNwZWVkGAggASgCEhUKDVpvb21JblNvdW5kRnAYCSAB",
            "KAkSFQoNWm9vbUluU291bmRUcBgKIAEoCRIWCg5ab29tT3V0U291bmRGcBgL",
            "IAEoCRIWCg5ab29tT3V0U291bmRUcBgMIAEoCRISCgpMb29zZW5lc3NYGA0g",
            "ASgCEhIKCkxvb3NlbmVzc1kYDiABKAISGAoQRmlyZU1pcnJvclNwcmVhZBgP",
            "IAEoAhIaChJBY3Rpb25NaXJyb3JTcHJlYWQYECABKAISHwoXU2tpbm5lZE1l",
            "c2hSZW5kZXJlck5hbWUYESABKAkSGAoQTWlycm9yT2JqZWN0TmFtZRgSIAEo",
            "CRIXCg9HbGFzc1NvY2tldE5hbWUYEyABKAkSFgoOR2xhc3NBc3NldE5hbWUY",
            "FCABKAkSGwoTQ3Jvc3NIYWlyU29ja2V0TmFtZRgVIAEoCRIaChJDcm9zc0hh",
            "aXJBc3NldE5hbWUYFiABKAkSPwoGcGFyZW50GBcgASgLMi8uRDExLlBqc29u",
            "LldlYXBvblBlcnNpc3RlbmNlQ29uZmlnQ29tcG9uZW50RGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D11.Pjson.WeaponPersistenceConfigComponentDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.WeaponPersistenceConfigInstantGunSightData), global::D11.Pjson.WeaponPersistenceConfigInstantGunSightData.Parser, new[]{ "MirrorIdleState", "OpenMirrorStateTime", "CloseMirrorStateTime", "OpenMirrorWorldCameraFOV", "OpenMirrorFPCameraFOV", "OpenMirrorMaxMoveSpeed", "ZoomInAnimSpeed", "ZoomOutAnimSpeed", "ZoomInSoundFp", "ZoomInSoundTp", "ZoomOutSoundFp", "ZoomOutSoundTp", "LoosenessX", "LoosenessY", "FireMirrorSpread", "ActionMirrorSpread", "SkinnedMeshRendererName", "MirrorObjectName", "GlassSocketName", "GlassAssetName", "CrossHairSocketName", "CrossHairAssetName", "Parent" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponPersistenceConfigInstantGunSightData : pb::IMessage<WeaponPersistenceConfigInstantGunSightData> {
    private static readonly pb::MessageParser<WeaponPersistenceConfigInstantGunSightData> _parser = new pb::MessageParser<WeaponPersistenceConfigInstantGunSightData>(() => new WeaponPersistenceConfigInstantGunSightData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponPersistenceConfigInstantGunSightData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.WeaponPersistenceConfigInstantGunSightDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPersistenceConfigInstantGunSightData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPersistenceConfigInstantGunSightData(WeaponPersistenceConfigInstantGunSightData other) : this() {
      mirrorIdleState_ = other.mirrorIdleState_;
      openMirrorStateTime_ = other.openMirrorStateTime_;
      closeMirrorStateTime_ = other.closeMirrorStateTime_;
      openMirrorWorldCameraFOV_ = other.openMirrorWorldCameraFOV_;
      openMirrorFPCameraFOV_ = other.openMirrorFPCameraFOV_;
      openMirrorMaxMoveSpeed_ = other.openMirrorMaxMoveSpeed_;
      zoomInAnimSpeed_ = other.zoomInAnimSpeed_;
      zoomOutAnimSpeed_ = other.zoomOutAnimSpeed_;
      zoomInSoundFp_ = other.zoomInSoundFp_;
      zoomInSoundTp_ = other.zoomInSoundTp_;
      zoomOutSoundFp_ = other.zoomOutSoundFp_;
      zoomOutSoundTp_ = other.zoomOutSoundTp_;
      loosenessX_ = other.loosenessX_;
      loosenessY_ = other.loosenessY_;
      fireMirrorSpread_ = other.fireMirrorSpread_;
      actionMirrorSpread_ = other.actionMirrorSpread_;
      skinnedMeshRendererName_ = other.skinnedMeshRendererName_;
      mirrorObjectName_ = other.mirrorObjectName_;
      glassSocketName_ = other.glassSocketName_;
      glassAssetName_ = other.glassAssetName_;
      crossHairSocketName_ = other.crossHairSocketName_;
      crossHairAssetName_ = other.crossHairAssetName_;
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPersistenceConfigInstantGunSightData Clone() {
      return new WeaponPersistenceConfigInstantGunSightData(this);
    }

    /// <summary>Field number for the "MirrorIdleState" field.</summary>
    public const int MirrorIdleStateFieldNumber = 1;
    private bool mirrorIdleState_;
    /// <summary>
    /// 带有瞄准镜的初始状态：装载和未装载 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MirrorIdleState {
      get { return mirrorIdleState_; }
      set {
        mirrorIdleState_ = value;
      }
    }

    /// <summary>Field number for the "OpenMirrorStateTime" field.</summary>
    public const int OpenMirrorStateTimeFieldNumber = 2;
    private float openMirrorStateTime_;
    /// <summary>
    /// 装载状态结束时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OpenMirrorStateTime {
      get { return openMirrorStateTime_; }
      set {
        openMirrorStateTime_ = value;
      }
    }

    /// <summary>Field number for the "CloseMirrorStateTime" field.</summary>
    public const int CloseMirrorStateTimeFieldNumber = 3;
    private float closeMirrorStateTime_;
    /// <summary>
    /// 卸载消音器状态结束时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CloseMirrorStateTime {
      get { return closeMirrorStateTime_; }
      set {
        closeMirrorStateTime_ = value;
      }
    }

    /// <summary>Field number for the "OpenMirrorWorldCameraFOV" field.</summary>
    public const int OpenMirrorWorldCameraFOVFieldNumber = 4;
    private float openMirrorWorldCameraFOV_;
    /// <summary>
    /// 开镜世界 FOV 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OpenMirrorWorldCameraFOV {
      get { return openMirrorWorldCameraFOV_; }
      set {
        openMirrorWorldCameraFOV_ = value;
      }
    }

    /// <summary>Field number for the "OpenMirrorFPCameraFOV" field.</summary>
    public const int OpenMirrorFPCameraFOVFieldNumber = 5;
    private float openMirrorFPCameraFOV_;
    /// <summary>
    /// 开镜 武器FOV 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OpenMirrorFPCameraFOV {
      get { return openMirrorFPCameraFOV_; }
      set {
        openMirrorFPCameraFOV_ = value;
      }
    }

    /// <summary>Field number for the "OpenMirrorMaxMoveSpeed" field.</summary>
    public const int OpenMirrorMaxMoveSpeedFieldNumber = 6;
    private float openMirrorMaxMoveSpeed_;
    /// <summary>
    /// 开镜武器移动速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OpenMirrorMaxMoveSpeed {
      get { return openMirrorMaxMoveSpeed_; }
      set {
        openMirrorMaxMoveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "ZoomInAnimSpeed" field.</summary>
    public const int ZoomInAnimSpeedFieldNumber = 7;
    private float zoomInAnimSpeed_;
    /// <summary>
    /// 拉镜速度/s 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZoomInAnimSpeed {
      get { return zoomInAnimSpeed_; }
      set {
        zoomInAnimSpeed_ = value;
      }
    }

    /// <summary>Field number for the "ZoomOutAnimSpeed" field.</summary>
    public const int ZoomOutAnimSpeedFieldNumber = 8;
    private float zoomOutAnimSpeed_;
    /// <summary>
    /// 收镜速度/s 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZoomOutAnimSpeed {
      get { return zoomOutAnimSpeed_; }
      set {
        zoomOutAnimSpeed_ = value;
      }
    }

    /// <summary>Field number for the "ZoomInSoundFp" field.</summary>
    public const int ZoomInSoundFpFieldNumber = 9;
    private string zoomInSoundFp_ = "";
    /// <summary>
    /// 开镜音效 FP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoomInSoundFp {
      get { return zoomInSoundFp_; }
      set {
        zoomInSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ZoomInSoundTp" field.</summary>
    public const int ZoomInSoundTpFieldNumber = 10;
    private string zoomInSoundTp_ = "";
    /// <summary>
    /// 开镜音效 TP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoomInSoundTp {
      get { return zoomInSoundTp_; }
      set {
        zoomInSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ZoomOutSoundFp" field.</summary>
    public const int ZoomOutSoundFpFieldNumber = 11;
    private string zoomOutSoundFp_ = "";
    /// <summary>
    /// 关镜音效 Fp 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoomOutSoundFp {
      get { return zoomOutSoundFp_; }
      set {
        zoomOutSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ZoomOutSoundTp" field.</summary>
    public const int ZoomOutSoundTpFieldNumber = 12;
    private string zoomOutSoundTp_ = "";
    /// <summary>
    /// 关镜音效 TP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoomOutSoundTp {
      get { return zoomOutSoundTp_; }
      set {
        zoomOutSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoosenessX" field.</summary>
    public const int LoosenessXFieldNumber = 13;
    private float loosenessX_;
    /// <summary>
    /// 准星抖动系数 x轴 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LoosenessX {
      get { return loosenessX_; }
      set {
        loosenessX_ = value;
      }
    }

    /// <summary>Field number for the "LoosenessY" field.</summary>
    public const int LoosenessYFieldNumber = 14;
    private float loosenessY_;
    /// <summary>
    /// 准星抖动系数 y轴 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LoosenessY {
      get { return loosenessY_; }
      set {
        loosenessY_ = value;
      }
    }

    /// <summary>Field number for the "FireMirrorSpread" field.</summary>
    public const int FireMirrorSpreadFieldNumber = 15;
    private float fireMirrorSpread_;
    /// <summary>
    /// 开镜开火散发系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FireMirrorSpread {
      get { return fireMirrorSpread_; }
      set {
        fireMirrorSpread_ = value;
      }
    }

    /// <summary>Field number for the "ActionMirrorSpread" field.</summary>
    public const int ActionMirrorSpreadFieldNumber = 16;
    private float actionMirrorSpread_;
    /// <summary>
    /// 人物动作散发 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ActionMirrorSpread {
      get { return actionMirrorSpread_; }
      set {
        actionMirrorSpread_ = value;
      }
    }

    /// <summary>Field number for the "SkinnedMeshRendererName" field.</summary>
    public const int SkinnedMeshRendererNameFieldNumber = 17;
    private string skinnedMeshRendererName_ = "";
    /// <summary>
    /// 武器的蒙皮渲染器GameObject名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkinnedMeshRendererName {
      get { return skinnedMeshRendererName_; }
      set {
        skinnedMeshRendererName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MirrorObjectName" field.</summary>
    public const int MirrorObjectNameFieldNumber = 18;
    private string mirrorObjectName_ = "";
    /// <summary>
    /// 机瞄的GameObject 名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MirrorObjectName {
      get { return mirrorObjectName_; }
      set {
        mirrorObjectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GlassSocketName" field.</summary>
    public const int GlassSocketNameFieldNumber = 19;
    private string glassSocketName_ = "";
    /// <summary>
    /// 镜片挂点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GlassSocketName {
      get { return glassSocketName_; }
      set {
        glassSocketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GlassAssetName" field.</summary>
    public const int GlassAssetNameFieldNumber = 20;
    private string glassAssetName_ = "";
    /// <summary>
    /// 镜片asset 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GlassAssetName {
      get { return glassAssetName_; }
      set {
        glassAssetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CrossHairSocketName" field.</summary>
    public const int CrossHairSocketNameFieldNumber = 21;
    private string crossHairSocketName_ = "";
    /// <summary>
    /// 准星挂点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CrossHairSocketName {
      get { return crossHairSocketName_; }
      set {
        crossHairSocketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CrossHairAssetName" field.</summary>
    public const int CrossHairAssetNameFieldNumber = 22;
    private string crossHairAssetName_ = "";
    /// <summary>
    /// 准星asset 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CrossHairAssetName {
      get { return crossHairAssetName_; }
      set {
        crossHairAssetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 23;
    private global::D11.Pjson.WeaponPersistenceConfigComponentData parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.WeaponPersistenceConfigComponentData Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponPersistenceConfigInstantGunSightData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponPersistenceConfigInstantGunSightData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MirrorIdleState != other.MirrorIdleState) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpenMirrorStateTime, other.OpenMirrorStateTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CloseMirrorStateTime, other.CloseMirrorStateTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpenMirrorWorldCameraFOV, other.OpenMirrorWorldCameraFOV)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpenMirrorFPCameraFOV, other.OpenMirrorFPCameraFOV)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpenMirrorMaxMoveSpeed, other.OpenMirrorMaxMoveSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ZoomInAnimSpeed, other.ZoomInAnimSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ZoomOutAnimSpeed, other.ZoomOutAnimSpeed)) return false;
      if (ZoomInSoundFp != other.ZoomInSoundFp) return false;
      if (ZoomInSoundTp != other.ZoomInSoundTp) return false;
      if (ZoomOutSoundFp != other.ZoomOutSoundFp) return false;
      if (ZoomOutSoundTp != other.ZoomOutSoundTp) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LoosenessX, other.LoosenessX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LoosenessY, other.LoosenessY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FireMirrorSpread, other.FireMirrorSpread)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ActionMirrorSpread, other.ActionMirrorSpread)) return false;
      if (SkinnedMeshRendererName != other.SkinnedMeshRendererName) return false;
      if (MirrorObjectName != other.MirrorObjectName) return false;
      if (GlassSocketName != other.GlassSocketName) return false;
      if (GlassAssetName != other.GlassAssetName) return false;
      if (CrossHairSocketName != other.CrossHairSocketName) return false;
      if (CrossHairAssetName != other.CrossHairAssetName) return false;
      if (!object.Equals(Parent, other.Parent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MirrorIdleState != false) hash ^= MirrorIdleState.GetHashCode();
      if (OpenMirrorStateTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpenMirrorStateTime);
      if (CloseMirrorStateTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CloseMirrorStateTime);
      if (OpenMirrorWorldCameraFOV != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpenMirrorWorldCameraFOV);
      if (OpenMirrorFPCameraFOV != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpenMirrorFPCameraFOV);
      if (OpenMirrorMaxMoveSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpenMirrorMaxMoveSpeed);
      if (ZoomInAnimSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ZoomInAnimSpeed);
      if (ZoomOutAnimSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ZoomOutAnimSpeed);
      if (ZoomInSoundFp.Length != 0) hash ^= ZoomInSoundFp.GetHashCode();
      if (ZoomInSoundTp.Length != 0) hash ^= ZoomInSoundTp.GetHashCode();
      if (ZoomOutSoundFp.Length != 0) hash ^= ZoomOutSoundFp.GetHashCode();
      if (ZoomOutSoundTp.Length != 0) hash ^= ZoomOutSoundTp.GetHashCode();
      if (LoosenessX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LoosenessX);
      if (LoosenessY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LoosenessY);
      if (FireMirrorSpread != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FireMirrorSpread);
      if (ActionMirrorSpread != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ActionMirrorSpread);
      if (SkinnedMeshRendererName.Length != 0) hash ^= SkinnedMeshRendererName.GetHashCode();
      if (MirrorObjectName.Length != 0) hash ^= MirrorObjectName.GetHashCode();
      if (GlassSocketName.Length != 0) hash ^= GlassSocketName.GetHashCode();
      if (GlassAssetName.Length != 0) hash ^= GlassAssetName.GetHashCode();
      if (CrossHairSocketName.Length != 0) hash ^= CrossHairSocketName.GetHashCode();
      if (CrossHairAssetName.Length != 0) hash ^= CrossHairAssetName.GetHashCode();
      if (parent_ != null) hash ^= Parent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MirrorIdleState != false) {
        output.WriteRawTag(8);
        output.WriteBool(MirrorIdleState);
      }
      if (OpenMirrorStateTime != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(OpenMirrorStateTime);
      }
      if (CloseMirrorStateTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(CloseMirrorStateTime);
      }
      if (OpenMirrorWorldCameraFOV != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(OpenMirrorWorldCameraFOV);
      }
      if (OpenMirrorFPCameraFOV != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(OpenMirrorFPCameraFOV);
      }
      if (OpenMirrorMaxMoveSpeed != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(OpenMirrorMaxMoveSpeed);
      }
      if (ZoomInAnimSpeed != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(ZoomInAnimSpeed);
      }
      if (ZoomOutAnimSpeed != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ZoomOutAnimSpeed);
      }
      if (ZoomInSoundFp.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ZoomInSoundFp);
      }
      if (ZoomInSoundTp.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ZoomInSoundTp);
      }
      if (ZoomOutSoundFp.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ZoomOutSoundFp);
      }
      if (ZoomOutSoundTp.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ZoomOutSoundTp);
      }
      if (LoosenessX != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(LoosenessX);
      }
      if (LoosenessY != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(LoosenessY);
      }
      if (FireMirrorSpread != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(FireMirrorSpread);
      }
      if (ActionMirrorSpread != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(ActionMirrorSpread);
      }
      if (SkinnedMeshRendererName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(SkinnedMeshRendererName);
      }
      if (MirrorObjectName.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(MirrorObjectName);
      }
      if (GlassSocketName.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(GlassSocketName);
      }
      if (GlassAssetName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(GlassAssetName);
      }
      if (CrossHairSocketName.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CrossHairSocketName);
      }
      if (CrossHairAssetName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CrossHairAssetName);
      }
      if (parent_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Parent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MirrorIdleState != false) {
        size += 1 + 1;
      }
      if (OpenMirrorStateTime != 0F) {
        size += 1 + 4;
      }
      if (CloseMirrorStateTime != 0F) {
        size += 1 + 4;
      }
      if (OpenMirrorWorldCameraFOV != 0F) {
        size += 1 + 4;
      }
      if (OpenMirrorFPCameraFOV != 0F) {
        size += 1 + 4;
      }
      if (OpenMirrorMaxMoveSpeed != 0F) {
        size += 1 + 4;
      }
      if (ZoomInAnimSpeed != 0F) {
        size += 1 + 4;
      }
      if (ZoomOutAnimSpeed != 0F) {
        size += 1 + 4;
      }
      if (ZoomInSoundFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoomInSoundFp);
      }
      if (ZoomInSoundTp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoomInSoundTp);
      }
      if (ZoomOutSoundFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoomOutSoundFp);
      }
      if (ZoomOutSoundTp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoomOutSoundTp);
      }
      if (LoosenessX != 0F) {
        size += 1 + 4;
      }
      if (LoosenessY != 0F) {
        size += 1 + 4;
      }
      if (FireMirrorSpread != 0F) {
        size += 1 + 4;
      }
      if (ActionMirrorSpread != 0F) {
        size += 2 + 4;
      }
      if (SkinnedMeshRendererName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkinnedMeshRendererName);
      }
      if (MirrorObjectName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MirrorObjectName);
      }
      if (GlassSocketName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GlassSocketName);
      }
      if (GlassAssetName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GlassAssetName);
      }
      if (CrossHairSocketName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CrossHairSocketName);
      }
      if (CrossHairAssetName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CrossHairAssetName);
      }
      if (parent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponPersistenceConfigInstantGunSightData other) {
      if (other == null) {
        return;
      }
      if (other.MirrorIdleState != false) {
        MirrorIdleState = other.MirrorIdleState;
      }
      if (other.OpenMirrorStateTime != 0F) {
        OpenMirrorStateTime = other.OpenMirrorStateTime;
      }
      if (other.CloseMirrorStateTime != 0F) {
        CloseMirrorStateTime = other.CloseMirrorStateTime;
      }
      if (other.OpenMirrorWorldCameraFOV != 0F) {
        OpenMirrorWorldCameraFOV = other.OpenMirrorWorldCameraFOV;
      }
      if (other.OpenMirrorFPCameraFOV != 0F) {
        OpenMirrorFPCameraFOV = other.OpenMirrorFPCameraFOV;
      }
      if (other.OpenMirrorMaxMoveSpeed != 0F) {
        OpenMirrorMaxMoveSpeed = other.OpenMirrorMaxMoveSpeed;
      }
      if (other.ZoomInAnimSpeed != 0F) {
        ZoomInAnimSpeed = other.ZoomInAnimSpeed;
      }
      if (other.ZoomOutAnimSpeed != 0F) {
        ZoomOutAnimSpeed = other.ZoomOutAnimSpeed;
      }
      if (other.ZoomInSoundFp.Length != 0) {
        ZoomInSoundFp = other.ZoomInSoundFp;
      }
      if (other.ZoomInSoundTp.Length != 0) {
        ZoomInSoundTp = other.ZoomInSoundTp;
      }
      if (other.ZoomOutSoundFp.Length != 0) {
        ZoomOutSoundFp = other.ZoomOutSoundFp;
      }
      if (other.ZoomOutSoundTp.Length != 0) {
        ZoomOutSoundTp = other.ZoomOutSoundTp;
      }
      if (other.LoosenessX != 0F) {
        LoosenessX = other.LoosenessX;
      }
      if (other.LoosenessY != 0F) {
        LoosenessY = other.LoosenessY;
      }
      if (other.FireMirrorSpread != 0F) {
        FireMirrorSpread = other.FireMirrorSpread;
      }
      if (other.ActionMirrorSpread != 0F) {
        ActionMirrorSpread = other.ActionMirrorSpread;
      }
      if (other.SkinnedMeshRendererName.Length != 0) {
        SkinnedMeshRendererName = other.SkinnedMeshRendererName;
      }
      if (other.MirrorObjectName.Length != 0) {
        MirrorObjectName = other.MirrorObjectName;
      }
      if (other.GlassSocketName.Length != 0) {
        GlassSocketName = other.GlassSocketName;
      }
      if (other.GlassAssetName.Length != 0) {
        GlassAssetName = other.GlassAssetName;
      }
      if (other.CrossHairSocketName.Length != 0) {
        CrossHairSocketName = other.CrossHairSocketName;
      }
      if (other.CrossHairAssetName.Length != 0) {
        CrossHairAssetName = other.CrossHairAssetName;
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::D11.Pjson.WeaponPersistenceConfigComponentData();
        }
        Parent.MergeFrom(other.Parent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MirrorIdleState = input.ReadBool();
            break;
          }
          case 21: {
            OpenMirrorStateTime = input.ReadFloat();
            break;
          }
          case 29: {
            CloseMirrorStateTime = input.ReadFloat();
            break;
          }
          case 37: {
            OpenMirrorWorldCameraFOV = input.ReadFloat();
            break;
          }
          case 45: {
            OpenMirrorFPCameraFOV = input.ReadFloat();
            break;
          }
          case 53: {
            OpenMirrorMaxMoveSpeed = input.ReadFloat();
            break;
          }
          case 61: {
            ZoomInAnimSpeed = input.ReadFloat();
            break;
          }
          case 69: {
            ZoomOutAnimSpeed = input.ReadFloat();
            break;
          }
          case 74: {
            ZoomInSoundFp = input.ReadString();
            break;
          }
          case 82: {
            ZoomInSoundTp = input.ReadString();
            break;
          }
          case 90: {
            ZoomOutSoundFp = input.ReadString();
            break;
          }
          case 98: {
            ZoomOutSoundTp = input.ReadString();
            break;
          }
          case 109: {
            LoosenessX = input.ReadFloat();
            break;
          }
          case 117: {
            LoosenessY = input.ReadFloat();
            break;
          }
          case 125: {
            FireMirrorSpread = input.ReadFloat();
            break;
          }
          case 133: {
            ActionMirrorSpread = input.ReadFloat();
            break;
          }
          case 138: {
            SkinnedMeshRendererName = input.ReadString();
            break;
          }
          case 146: {
            MirrorObjectName = input.ReadString();
            break;
          }
          case 154: {
            GlassSocketName = input.ReadString();
            break;
          }
          case 162: {
            GlassAssetName = input.ReadString();
            break;
          }
          case 170: {
            CrossHairSocketName = input.ReadString();
            break;
          }
          case 178: {
            CrossHairAssetName = input.ReadString();
            break;
          }
          case 186: {
            if (parent_ == null) {
              Parent = new global::D11.Pjson.WeaponPersistenceConfigComponentData();
            }
            input.ReadMessage(Parent);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
