// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WeaponPersistenceConfigMeleeData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from WeaponPersistenceConfigMeleeData.proto</summary>
  public static partial class WeaponPersistenceConfigMeleeDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WeaponPersistenceConfigMeleeData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeaponPersistenceConfigMeleeDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZXZWFwb25QZXJzaXN0ZW5jZUNvbmZpZ01lbGVlRGF0YS5wcm90bxIJRDEx",
            "LlBqc29uGipXZWFwb25QZXJzaXN0ZW5jZUNvbmZpZ0NvbXBvbmVudERhdGEu",
            "cHJvdG8iowoKIFdlYXBvblBlcnNpc3RlbmNlQ29uZmlnTWVsZWVEYXRhEhcK",
            "D0NhbldlYXBvbk9uQmFjaxgBIAEoCBIUCgxTbGFzaFNvdW5kRnAYAiABKAkS",
            "EwoLU3RhYlNvdW5kRnAYAyABKAkSGAoQSGVhdnlIaXRJbXBhY3RGcBgEIAEo",
            "CRISCgpIaXRGbGVzaEZwGAUgASgJEhsKE0hpdEZPVkFiaWxpdHlOb3JtYWwY",
            "BiABKAgSGgoSSGl0Rk9WQWJpbGl0eUhlYXZ5GAcgASgIEhUKDUhpdEZPVkFi",
            "aWxpdHkYCCABKAgSGwoTSGl0Rk9WQWRkaXRpdmVSYXRpbxgJIAEoAhIbChNI",
            "aXRGT1ZMb2NrQW5pbVRpbWVzGAogASgCEh8KF0hpdEZPVkxvY2tLZWVwQW5p",
            "bVRpbWVzGAsgASgCEh4KFkZQTWVsZWVTbGFzaDAxRWZmZWN0SUQYDCABKAkS",
            "HgoWRlBNZWxlZVNsYXNoMDJFZmZlY3RJRBgNIAEoCRIbChNGUE1lbGVlU3Rh",
            "YkVmZmVjdElEGA4gASgJEh8KF0ZQTWVsZWVTdGFiQmFja0VmZmVjdElEGA8g",
            "ASgJEiAKGEZQTWVsZWVTbGFzaEJhY2tFZmZlY3RJRBgQIAEoCRIfChdGUE1l",
            "bGVlRWZmZWN0U29ja2V0TmFtZRgRIAEoCRIdChVGUE1lbGVlRWZmZWN0TGlm",
            "ZVRpbWUYEiABKAISFgoOSGl0SGFyZFNvdW5kVHAYEyABKAkSFwoPSGl0TGln",
            "aHRTb3VuZFRwGBQgASgJEhoKEkhpdEJhY2tzdGFiU291bmRUcBgVIAEoCRIU",
            "CgxTbGFzaFNvdW5kVHAYFiABKAkSEwoLU3RhYlNvdW5kVHAYFyABKAkSEwoL",
            "SGl0SW1wYWN0VHAYGCABKAkSGAoQSGVhdnlIaXRJbXBhY3RUcBgZIAEoCRIS",
            "CgpIaXRGbGVzaFRwGBogASgJEiIKGlRQTWVsZWVTbGFzaDAxQmFja0VmZmVj",
            "dElEGBsgASgJEh8KF1RQTWVsZWVTdGFiQmFja0VmZmVjdElEGBwgASgJEh4K",
            "FlRQTWVsZWVTbGFzaDAxRWZmZWN0SUQYHSABKAkSGwoTVFBNZWxlZVN0YWJF",
            "ZmZlY3RJRBgeIAEoCRIfChdUUE1lbGVlRWZmZWN0U29ja2V0TmFtZRgfIAEo",
            "CRIdChVUUE1lbGVlRWZmZWN0TGlmZVRpbWUYICABKAISFQoNQW5pbUlkbGVE",
            "YXRhcxghIAMoBRIbChNGaXJlU3RhYkltcGFjdEFuZ2xlGCIgASgFEh8KF0Zp",
            "cmVTdGFiQmFja0ltcGFjdEFuZ2xlGCMgASgFEh4KFkZpcmVTbGFzaDAxSW1w",
            "YWN0QW5nbGUYJCABKAUSHgoWRmlyZVNsYXNoMDJJbXBhY3RBbmdsZRglIAEo",
            "BRIeChZGaXJlU2xhc2gwM0ltcGFjdEFuZ2xlGCYgASgFEh4KFkZpcmVTbGFz",
            "aDA0SW1wYWN0QW5nbGUYJyABKAUSIAoYRmlyZVNsYXNoQmFja0ltcGFjdEFu",
            "Z2xlGCggASgFEhYKDlBpblB1bGxTb3VuZEZwGCkgASgJEh4KFlByb2plY3Rp",
            "bGVGaXJlSGl0U291bmQYKiABKAkSFQoNQm91bmNlU291bmRGcBgrIAEoCRI/",
            "CgZwYXJlbnQYLCABKAsyLy5EMTEuUGpzb24uV2VhcG9uUGVyc2lzdGVuY2VD",
            "b25maWdDb21wb25lbnREYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D11.Pjson.WeaponPersistenceConfigComponentDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.WeaponPersistenceConfigMeleeData), global::D11.Pjson.WeaponPersistenceConfigMeleeData.Parser, new[]{ "CanWeaponOnBack", "SlashSoundFp", "StabSoundFp", "HeavyHitImpactFp", "HitFleshFp", "HitFOVAbilityNormal", "HitFOVAbilityHeavy", "HitFOVAbility", "HitFOVAdditiveRatio", "HitFOVLockAnimTimes", "HitFOVLockKeepAnimTimes", "FPMeleeSlash01EffectID", "FPMeleeSlash02EffectID", "FPMeleeStabEffectID", "FPMeleeStabBackEffectID", "FPMeleeSlashBackEffectID", "FPMeleeEffectSocketName", "FPMeleeEffectLifeTime", "HitHardSoundTp", "HitLightSoundTp", "HitBackstabSoundTp", "SlashSoundTp", "StabSoundTp", "HitImpactTp", "HeavyHitImpactTp", "HitFleshTp", "TPMeleeSlash01BackEffectID", "TPMeleeStabBackEffectID", "TPMeleeSlash01EffectID", "TPMeleeStabEffectID", "TPMeleeEffectSocketName", "TPMeleeEffectLifeTime", "AnimIdleDatas", "FireStabImpactAngle", "FireStabBackImpactAngle", "FireSlash01ImpactAngle", "FireSlash02ImpactAngle", "FireSlash03ImpactAngle", "FireSlash04ImpactAngle", "FireSlashBackImpactAngle", "PinPullSoundFp", "ProjectileFireHitSound", "BounceSoundFp", "Parent" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponPersistenceConfigMeleeData : pb::IMessage<WeaponPersistenceConfigMeleeData> {
    private static readonly pb::MessageParser<WeaponPersistenceConfigMeleeData> _parser = new pb::MessageParser<WeaponPersistenceConfigMeleeData>(() => new WeaponPersistenceConfigMeleeData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponPersistenceConfigMeleeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.WeaponPersistenceConfigMeleeDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPersistenceConfigMeleeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPersistenceConfigMeleeData(WeaponPersistenceConfigMeleeData other) : this() {
      canWeaponOnBack_ = other.canWeaponOnBack_;
      slashSoundFp_ = other.slashSoundFp_;
      stabSoundFp_ = other.stabSoundFp_;
      heavyHitImpactFp_ = other.heavyHitImpactFp_;
      hitFleshFp_ = other.hitFleshFp_;
      hitFOVAbilityNormal_ = other.hitFOVAbilityNormal_;
      hitFOVAbilityHeavy_ = other.hitFOVAbilityHeavy_;
      hitFOVAbility_ = other.hitFOVAbility_;
      hitFOVAdditiveRatio_ = other.hitFOVAdditiveRatio_;
      hitFOVLockAnimTimes_ = other.hitFOVLockAnimTimes_;
      hitFOVLockKeepAnimTimes_ = other.hitFOVLockKeepAnimTimes_;
      fPMeleeSlash01EffectID_ = other.fPMeleeSlash01EffectID_;
      fPMeleeSlash02EffectID_ = other.fPMeleeSlash02EffectID_;
      fPMeleeStabEffectID_ = other.fPMeleeStabEffectID_;
      fPMeleeStabBackEffectID_ = other.fPMeleeStabBackEffectID_;
      fPMeleeSlashBackEffectID_ = other.fPMeleeSlashBackEffectID_;
      fPMeleeEffectSocketName_ = other.fPMeleeEffectSocketName_;
      fPMeleeEffectLifeTime_ = other.fPMeleeEffectLifeTime_;
      hitHardSoundTp_ = other.hitHardSoundTp_;
      hitLightSoundTp_ = other.hitLightSoundTp_;
      hitBackstabSoundTp_ = other.hitBackstabSoundTp_;
      slashSoundTp_ = other.slashSoundTp_;
      stabSoundTp_ = other.stabSoundTp_;
      hitImpactTp_ = other.hitImpactTp_;
      heavyHitImpactTp_ = other.heavyHitImpactTp_;
      hitFleshTp_ = other.hitFleshTp_;
      tPMeleeSlash01BackEffectID_ = other.tPMeleeSlash01BackEffectID_;
      tPMeleeStabBackEffectID_ = other.tPMeleeStabBackEffectID_;
      tPMeleeSlash01EffectID_ = other.tPMeleeSlash01EffectID_;
      tPMeleeStabEffectID_ = other.tPMeleeStabEffectID_;
      tPMeleeEffectSocketName_ = other.tPMeleeEffectSocketName_;
      tPMeleeEffectLifeTime_ = other.tPMeleeEffectLifeTime_;
      animIdleDatas_ = other.animIdleDatas_.Clone();
      fireStabImpactAngle_ = other.fireStabImpactAngle_;
      fireStabBackImpactAngle_ = other.fireStabBackImpactAngle_;
      fireSlash01ImpactAngle_ = other.fireSlash01ImpactAngle_;
      fireSlash02ImpactAngle_ = other.fireSlash02ImpactAngle_;
      fireSlash03ImpactAngle_ = other.fireSlash03ImpactAngle_;
      fireSlash04ImpactAngle_ = other.fireSlash04ImpactAngle_;
      fireSlashBackImpactAngle_ = other.fireSlashBackImpactAngle_;
      pinPullSoundFp_ = other.pinPullSoundFp_;
      projectileFireHitSound_ = other.projectileFireHitSound_;
      bounceSoundFp_ = other.bounceSoundFp_;
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPersistenceConfigMeleeData Clone() {
      return new WeaponPersistenceConfigMeleeData(this);
    }

    /// <summary>Field number for the "CanWeaponOnBack" field.</summary>
    public const int CanWeaponOnBackFieldNumber = 1;
    private bool canWeaponOnBack_;
    /// <summary>
    /// 开启背部挂载功能 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanWeaponOnBack {
      get { return canWeaponOnBack_; }
      set {
        canWeaponOnBack_ = value;
      }
    }

    /// <summary>Field number for the "SlashSoundFp" field.</summary>
    public const int SlashSoundFpFieldNumber = 2;
    private string slashSoundFp_ = "";
    /// <summary>
    /// 1p轻刀挥空气 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SlashSoundFp {
      get { return slashSoundFp_; }
      set {
        slashSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StabSoundFp" field.</summary>
    public const int StabSoundFpFieldNumber = 3;
    private string stabSoundFp_ = "";
    /// <summary>
    /// 1p重刀挥空气 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StabSoundFp {
      get { return stabSoundFp_; }
      set {
        stabSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HeavyHitImpactFp" field.</summary>
    public const int HeavyHitImpactFpFieldNumber = 4;
    private string heavyHitImpactFp_ = "";
    /// <summary>
    /// 1p空手打墙 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeavyHitImpactFp {
      get { return heavyHitImpactFp_; }
      set {
        heavyHitImpactFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HitFleshFp" field.</summary>
    public const int HitFleshFpFieldNumber = 5;
    private string hitFleshFp_ = "";
    /// <summary>
    /// 1p body受击 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitFleshFp {
      get { return hitFleshFp_; }
      set {
        hitFleshFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HitFOVAbilityNormal" field.</summary>
    public const int HitFOVAbilityNormalFieldNumber = 6;
    private bool hitFOVAbilityNormal_;
    /// <summary>
    /// 1p 命中fov叠加 轻刀开启 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HitFOVAbilityNormal {
      get { return hitFOVAbilityNormal_; }
      set {
        hitFOVAbilityNormal_ = value;
      }
    }

    /// <summary>Field number for the "HitFOVAbilityHeavy" field.</summary>
    public const int HitFOVAbilityHeavyFieldNumber = 7;
    private bool hitFOVAbilityHeavy_;
    /// <summary>
    /// 1p 命中fov叠加 轻刀开启 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HitFOVAbilityHeavy {
      get { return hitFOVAbilityHeavy_; }
      set {
        hitFOVAbilityHeavy_ = value;
      }
    }

    /// <summary>Field number for the "HitFOVAbility" field.</summary>
    public const int HitFOVAbilityFieldNumber = 8;
    private bool hitFOVAbility_;
    /// <summary>
    /// 1p 命中视野变化功能 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HitFOVAbility {
      get { return hitFOVAbility_; }
      set {
        hitFOVAbility_ = value;
      }
    }

    /// <summary>Field number for the "HitFOVAdditiveRatio" field.</summary>
    public const int HitFOVAdditiveRatioFieldNumber = 9;
    private float hitFOVAdditiveRatio_;
    /// <summary>
    /// 1p 命中fov叠加 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitFOVAdditiveRatio {
      get { return hitFOVAdditiveRatio_; }
      set {
        hitFOVAdditiveRatio_ = value;
      }
    }

    /// <summary>Field number for the "HitFOVLockAnimTimes" field.</summary>
    public const int HitFOVLockAnimTimesFieldNumber = 10;
    private float hitFOVLockAnimTimes_;
    /// <summary>
    /// 1p 命中动作冻结过程帧数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitFOVLockAnimTimes {
      get { return hitFOVLockAnimTimes_; }
      set {
        hitFOVLockAnimTimes_ = value;
      }
    }

    /// <summary>Field number for the "HitFOVLockKeepAnimTimes" field.</summary>
    public const int HitFOVLockKeepAnimTimesFieldNumber = 11;
    private float hitFOVLockKeepAnimTimes_;
    /// <summary>
    /// 1p 命中动作冻结保持帧数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitFOVLockKeepAnimTimes {
      get { return hitFOVLockKeepAnimTimes_; }
      set {
        hitFOVLockKeepAnimTimes_ = value;
      }
    }

    /// <summary>Field number for the "FPMeleeSlash01EffectID" field.</summary>
    public const int FPMeleeSlash01EffectIDFieldNumber = 12;
    private string fPMeleeSlash01EffectID_ = "";
    /// <summary>
    /// 1p 近战Slash01特效资源ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FPMeleeSlash01EffectID {
      get { return fPMeleeSlash01EffectID_; }
      set {
        fPMeleeSlash01EffectID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FPMeleeSlash02EffectID" field.</summary>
    public const int FPMeleeSlash02EffectIDFieldNumber = 13;
    private string fPMeleeSlash02EffectID_ = "";
    /// <summary>
    /// 1p 近战Slash02特效资源ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FPMeleeSlash02EffectID {
      get { return fPMeleeSlash02EffectID_; }
      set {
        fPMeleeSlash02EffectID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FPMeleeStabEffectID" field.</summary>
    public const int FPMeleeStabEffectIDFieldNumber = 14;
    private string fPMeleeStabEffectID_ = "";
    /// <summary>
    /// 1p 近战Stab特效资源ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FPMeleeStabEffectID {
      get { return fPMeleeStabEffectID_; }
      set {
        fPMeleeStabEffectID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FPMeleeStabBackEffectID" field.</summary>
    public const int FPMeleeStabBackEffectIDFieldNumber = 15;
    private string fPMeleeStabBackEffectID_ = "";
    /// <summary>
    /// 1p 近战StabBack特效资源ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FPMeleeStabBackEffectID {
      get { return fPMeleeStabBackEffectID_; }
      set {
        fPMeleeStabBackEffectID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FPMeleeSlashBackEffectID" field.</summary>
    public const int FPMeleeSlashBackEffectIDFieldNumber = 16;
    private string fPMeleeSlashBackEffectID_ = "";
    /// <summary>
    /// 1p 近战SlashBack特效资源ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FPMeleeSlashBackEffectID {
      get { return fPMeleeSlashBackEffectID_; }
      set {
        fPMeleeSlashBackEffectID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FPMeleeEffectSocketName" field.</summary>
    public const int FPMeleeEffectSocketNameFieldNumber = 17;
    private string fPMeleeEffectSocketName_ = "";
    /// <summary>
    /// 1p 近战特效挂点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FPMeleeEffectSocketName {
      get { return fPMeleeEffectSocketName_; }
      set {
        fPMeleeEffectSocketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FPMeleeEffectLifeTime" field.</summary>
    public const int FPMeleeEffectLifeTimeFieldNumber = 18;
    private float fPMeleeEffectLifeTime_;
    /// <summary>
    /// 1p 近战特效出现时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FPMeleeEffectLifeTime {
      get { return fPMeleeEffectLifeTime_; }
      set {
        fPMeleeEffectLifeTime_ = value;
      }
    }

    /// <summary>Field number for the "HitHardSoundTp" field.</summary>
    public const int HitHardSoundTpFieldNumber = 19;
    private string hitHardSoundTp_ = "";
    /// <summary>
    /// 3p重刀 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitHardSoundTp {
      get { return hitHardSoundTp_; }
      set {
        hitHardSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HitLightSoundTp" field.</summary>
    public const int HitLightSoundTpFieldNumber = 20;
    private string hitLightSoundTp_ = "";
    /// <summary>
    /// 3p轻刀 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitLightSoundTp {
      get { return hitLightSoundTp_; }
      set {
        hitLightSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HitBackstabSoundTp" field.</summary>
    public const int HitBackstabSoundTpFieldNumber = 21;
    private string hitBackstabSoundTp_ = "";
    /// <summary>
    /// 3p背刀 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitBackstabSoundTp {
      get { return hitBackstabSoundTp_; }
      set {
        hitBackstabSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SlashSoundTp" field.</summary>
    public const int SlashSoundTpFieldNumber = 22;
    private string slashSoundTp_ = "";
    /// <summary>
    /// 3p轻刀挥空气 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SlashSoundTp {
      get { return slashSoundTp_; }
      set {
        slashSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StabSoundTp" field.</summary>
    public const int StabSoundTpFieldNumber = 23;
    private string stabSoundTp_ = "";
    /// <summary>
    /// 3p重刀挥空气 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StabSoundTp {
      get { return stabSoundTp_; }
      set {
        stabSoundTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HitImpactTp" field.</summary>
    public const int HitImpactTpFieldNumber = 24;
    private string hitImpactTp_ = "";
    /// <summary>
    /// 3p刀打墙 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitImpactTp {
      get { return hitImpactTp_; }
      set {
        hitImpactTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HeavyHitImpactTp" field.</summary>
    public const int HeavyHitImpactTpFieldNumber = 25;
    private string heavyHitImpactTp_ = "";
    /// <summary>
    /// 3p空手打墙 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeavyHitImpactTp {
      get { return heavyHitImpactTp_; }
      set {
        heavyHitImpactTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HitFleshTp" field.</summary>
    public const int HitFleshTpFieldNumber = 26;
    private string hitFleshTp_ = "";
    /// <summary>
    /// 3p body受击 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitFleshTp {
      get { return hitFleshTp_; }
      set {
        hitFleshTp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TPMeleeSlash01BackEffectID" field.</summary>
    public const int TPMeleeSlash01BackEffectIDFieldNumber = 27;
    private string tPMeleeSlash01BackEffectID_ = "";
    /// <summary>
    /// 3p 近战Slash01Back特效资源ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TPMeleeSlash01BackEffectID {
      get { return tPMeleeSlash01BackEffectID_; }
      set {
        tPMeleeSlash01BackEffectID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TPMeleeStabBackEffectID" field.</summary>
    public const int TPMeleeStabBackEffectIDFieldNumber = 28;
    private string tPMeleeStabBackEffectID_ = "";
    /// <summary>
    /// 3p 近战StabBack特效资源ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TPMeleeStabBackEffectID {
      get { return tPMeleeStabBackEffectID_; }
      set {
        tPMeleeStabBackEffectID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TPMeleeSlash01EffectID" field.</summary>
    public const int TPMeleeSlash01EffectIDFieldNumber = 29;
    private string tPMeleeSlash01EffectID_ = "";
    /// <summary>
    /// 3p 近战Slash01特效资源ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TPMeleeSlash01EffectID {
      get { return tPMeleeSlash01EffectID_; }
      set {
        tPMeleeSlash01EffectID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TPMeleeStabEffectID" field.</summary>
    public const int TPMeleeStabEffectIDFieldNumber = 30;
    private string tPMeleeStabEffectID_ = "";
    /// <summary>
    /// 3p 近战Stab特效资源ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TPMeleeStabEffectID {
      get { return tPMeleeStabEffectID_; }
      set {
        tPMeleeStabEffectID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TPMeleeEffectSocketName" field.</summary>
    public const int TPMeleeEffectSocketNameFieldNumber = 31;
    private string tPMeleeEffectSocketName_ = "";
    /// <summary>
    /// 3p 近战特效挂点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TPMeleeEffectSocketName {
      get { return tPMeleeEffectSocketName_; }
      set {
        tPMeleeEffectSocketName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TPMeleeEffectLifeTime" field.</summary>
    public const int TPMeleeEffectLifeTimeFieldNumber = 32;
    private float tPMeleeEffectLifeTime_;
    /// <summary>
    /// 3p 近战特效出现时长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TPMeleeEffectLifeTime {
      get { return tPMeleeEffectLifeTime_; }
      set {
        tPMeleeEffectLifeTime_ = value;
      }
    }

    /// <summary>Field number for the "AnimIdleDatas" field.</summary>
    public const int AnimIdleDatasFieldNumber = 33;
    private static readonly pb::FieldCodec<int> _repeated_animIdleDatas_codec
        = pb::FieldCodec.ForInt32(266);
    private readonly pbc::RepeatedField<int> animIdleDatas_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 待机动画切换数值列表 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AnimIdleDatas {
      get { return animIdleDatas_; }
    }

    /// <summary>Field number for the "FireStabImpactAngle" field.</summary>
    public const int FireStabImpactAngleFieldNumber = 34;
    private int fireStabImpactAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FireStabImpactAngle {
      get { return fireStabImpactAngle_; }
      set {
        fireStabImpactAngle_ = value;
      }
    }

    /// <summary>Field number for the "FireStabBackImpactAngle" field.</summary>
    public const int FireStabBackImpactAngleFieldNumber = 35;
    private int fireStabBackImpactAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FireStabBackImpactAngle {
      get { return fireStabBackImpactAngle_; }
      set {
        fireStabBackImpactAngle_ = value;
      }
    }

    /// <summary>Field number for the "FireSlash01ImpactAngle" field.</summary>
    public const int FireSlash01ImpactAngleFieldNumber = 36;
    private int fireSlash01ImpactAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FireSlash01ImpactAngle {
      get { return fireSlash01ImpactAngle_; }
      set {
        fireSlash01ImpactAngle_ = value;
      }
    }

    /// <summary>Field number for the "FireSlash02ImpactAngle" field.</summary>
    public const int FireSlash02ImpactAngleFieldNumber = 37;
    private int fireSlash02ImpactAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FireSlash02ImpactAngle {
      get { return fireSlash02ImpactAngle_; }
      set {
        fireSlash02ImpactAngle_ = value;
      }
    }

    /// <summary>Field number for the "FireSlash03ImpactAngle" field.</summary>
    public const int FireSlash03ImpactAngleFieldNumber = 38;
    private int fireSlash03ImpactAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FireSlash03ImpactAngle {
      get { return fireSlash03ImpactAngle_; }
      set {
        fireSlash03ImpactAngle_ = value;
      }
    }

    /// <summary>Field number for the "FireSlash04ImpactAngle" field.</summary>
    public const int FireSlash04ImpactAngleFieldNumber = 39;
    private int fireSlash04ImpactAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FireSlash04ImpactAngle {
      get { return fireSlash04ImpactAngle_; }
      set {
        fireSlash04ImpactAngle_ = value;
      }
    }

    /// <summary>Field number for the "FireSlashBackImpactAngle" field.</summary>
    public const int FireSlashBackImpactAngleFieldNumber = 40;
    private int fireSlashBackImpactAngle_;
    /// <summary>
    ///  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FireSlashBackImpactAngle {
      get { return fireSlashBackImpactAngle_; }
      set {
        fireSlashBackImpactAngle_ = value;
      }
    }

    /// <summary>Field number for the "PinPullSoundFp" field.</summary>
    public const int PinPullSoundFpFieldNumber = 41;
    private string pinPullSoundFp_ = "";
    /// <summary>
    /// 1p拔刀音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PinPullSoundFp {
      get { return pinPullSoundFp_; }
      set {
        pinPullSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ProjectileFireHitSound" field.</summary>
    public const int ProjectileFireHitSoundFieldNumber = 42;
    private string projectileFireHitSound_ = "";
    /// <summary>
    /// 飞刀砸中人命中通用音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectileFireHitSound {
      get { return projectileFireHitSound_; }
      set {
        projectileFireHitSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BounceSoundFp" field.</summary>
    public const int BounceSoundFpFieldNumber = 43;
    private string bounceSoundFp_ = "";
    /// <summary>
    /// 物理音效（反弹） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BounceSoundFp {
      get { return bounceSoundFp_; }
      set {
        bounceSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 44;
    private global::D11.Pjson.WeaponPersistenceConfigComponentData parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.WeaponPersistenceConfigComponentData Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponPersistenceConfigMeleeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponPersistenceConfigMeleeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanWeaponOnBack != other.CanWeaponOnBack) return false;
      if (SlashSoundFp != other.SlashSoundFp) return false;
      if (StabSoundFp != other.StabSoundFp) return false;
      if (HeavyHitImpactFp != other.HeavyHitImpactFp) return false;
      if (HitFleshFp != other.HitFleshFp) return false;
      if (HitFOVAbilityNormal != other.HitFOVAbilityNormal) return false;
      if (HitFOVAbilityHeavy != other.HitFOVAbilityHeavy) return false;
      if (HitFOVAbility != other.HitFOVAbility) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitFOVAdditiveRatio, other.HitFOVAdditiveRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitFOVLockAnimTimes, other.HitFOVLockAnimTimes)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitFOVLockKeepAnimTimes, other.HitFOVLockKeepAnimTimes)) return false;
      if (FPMeleeSlash01EffectID != other.FPMeleeSlash01EffectID) return false;
      if (FPMeleeSlash02EffectID != other.FPMeleeSlash02EffectID) return false;
      if (FPMeleeStabEffectID != other.FPMeleeStabEffectID) return false;
      if (FPMeleeStabBackEffectID != other.FPMeleeStabBackEffectID) return false;
      if (FPMeleeSlashBackEffectID != other.FPMeleeSlashBackEffectID) return false;
      if (FPMeleeEffectSocketName != other.FPMeleeEffectSocketName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FPMeleeEffectLifeTime, other.FPMeleeEffectLifeTime)) return false;
      if (HitHardSoundTp != other.HitHardSoundTp) return false;
      if (HitLightSoundTp != other.HitLightSoundTp) return false;
      if (HitBackstabSoundTp != other.HitBackstabSoundTp) return false;
      if (SlashSoundTp != other.SlashSoundTp) return false;
      if (StabSoundTp != other.StabSoundTp) return false;
      if (HitImpactTp != other.HitImpactTp) return false;
      if (HeavyHitImpactTp != other.HeavyHitImpactTp) return false;
      if (HitFleshTp != other.HitFleshTp) return false;
      if (TPMeleeSlash01BackEffectID != other.TPMeleeSlash01BackEffectID) return false;
      if (TPMeleeStabBackEffectID != other.TPMeleeStabBackEffectID) return false;
      if (TPMeleeSlash01EffectID != other.TPMeleeSlash01EffectID) return false;
      if (TPMeleeStabEffectID != other.TPMeleeStabEffectID) return false;
      if (TPMeleeEffectSocketName != other.TPMeleeEffectSocketName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TPMeleeEffectLifeTime, other.TPMeleeEffectLifeTime)) return false;
      if(!animIdleDatas_.Equals(other.animIdleDatas_)) return false;
      if (FireStabImpactAngle != other.FireStabImpactAngle) return false;
      if (FireStabBackImpactAngle != other.FireStabBackImpactAngle) return false;
      if (FireSlash01ImpactAngle != other.FireSlash01ImpactAngle) return false;
      if (FireSlash02ImpactAngle != other.FireSlash02ImpactAngle) return false;
      if (FireSlash03ImpactAngle != other.FireSlash03ImpactAngle) return false;
      if (FireSlash04ImpactAngle != other.FireSlash04ImpactAngle) return false;
      if (FireSlashBackImpactAngle != other.FireSlashBackImpactAngle) return false;
      if (PinPullSoundFp != other.PinPullSoundFp) return false;
      if (ProjectileFireHitSound != other.ProjectileFireHitSound) return false;
      if (BounceSoundFp != other.BounceSoundFp) return false;
      if (!object.Equals(Parent, other.Parent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanWeaponOnBack != false) hash ^= CanWeaponOnBack.GetHashCode();
      if (SlashSoundFp.Length != 0) hash ^= SlashSoundFp.GetHashCode();
      if (StabSoundFp.Length != 0) hash ^= StabSoundFp.GetHashCode();
      if (HeavyHitImpactFp.Length != 0) hash ^= HeavyHitImpactFp.GetHashCode();
      if (HitFleshFp.Length != 0) hash ^= HitFleshFp.GetHashCode();
      if (HitFOVAbilityNormal != false) hash ^= HitFOVAbilityNormal.GetHashCode();
      if (HitFOVAbilityHeavy != false) hash ^= HitFOVAbilityHeavy.GetHashCode();
      if (HitFOVAbility != false) hash ^= HitFOVAbility.GetHashCode();
      if (HitFOVAdditiveRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitFOVAdditiveRatio);
      if (HitFOVLockAnimTimes != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitFOVLockAnimTimes);
      if (HitFOVLockKeepAnimTimes != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitFOVLockKeepAnimTimes);
      if (FPMeleeSlash01EffectID.Length != 0) hash ^= FPMeleeSlash01EffectID.GetHashCode();
      if (FPMeleeSlash02EffectID.Length != 0) hash ^= FPMeleeSlash02EffectID.GetHashCode();
      if (FPMeleeStabEffectID.Length != 0) hash ^= FPMeleeStabEffectID.GetHashCode();
      if (FPMeleeStabBackEffectID.Length != 0) hash ^= FPMeleeStabBackEffectID.GetHashCode();
      if (FPMeleeSlashBackEffectID.Length != 0) hash ^= FPMeleeSlashBackEffectID.GetHashCode();
      if (FPMeleeEffectSocketName.Length != 0) hash ^= FPMeleeEffectSocketName.GetHashCode();
      if (FPMeleeEffectLifeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FPMeleeEffectLifeTime);
      if (HitHardSoundTp.Length != 0) hash ^= HitHardSoundTp.GetHashCode();
      if (HitLightSoundTp.Length != 0) hash ^= HitLightSoundTp.GetHashCode();
      if (HitBackstabSoundTp.Length != 0) hash ^= HitBackstabSoundTp.GetHashCode();
      if (SlashSoundTp.Length != 0) hash ^= SlashSoundTp.GetHashCode();
      if (StabSoundTp.Length != 0) hash ^= StabSoundTp.GetHashCode();
      if (HitImpactTp.Length != 0) hash ^= HitImpactTp.GetHashCode();
      if (HeavyHitImpactTp.Length != 0) hash ^= HeavyHitImpactTp.GetHashCode();
      if (HitFleshTp.Length != 0) hash ^= HitFleshTp.GetHashCode();
      if (TPMeleeSlash01BackEffectID.Length != 0) hash ^= TPMeleeSlash01BackEffectID.GetHashCode();
      if (TPMeleeStabBackEffectID.Length != 0) hash ^= TPMeleeStabBackEffectID.GetHashCode();
      if (TPMeleeSlash01EffectID.Length != 0) hash ^= TPMeleeSlash01EffectID.GetHashCode();
      if (TPMeleeStabEffectID.Length != 0) hash ^= TPMeleeStabEffectID.GetHashCode();
      if (TPMeleeEffectSocketName.Length != 0) hash ^= TPMeleeEffectSocketName.GetHashCode();
      if (TPMeleeEffectLifeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TPMeleeEffectLifeTime);
      hash ^= animIdleDatas_.GetHashCode();
      if (FireStabImpactAngle != 0) hash ^= FireStabImpactAngle.GetHashCode();
      if (FireStabBackImpactAngle != 0) hash ^= FireStabBackImpactAngle.GetHashCode();
      if (FireSlash01ImpactAngle != 0) hash ^= FireSlash01ImpactAngle.GetHashCode();
      if (FireSlash02ImpactAngle != 0) hash ^= FireSlash02ImpactAngle.GetHashCode();
      if (FireSlash03ImpactAngle != 0) hash ^= FireSlash03ImpactAngle.GetHashCode();
      if (FireSlash04ImpactAngle != 0) hash ^= FireSlash04ImpactAngle.GetHashCode();
      if (FireSlashBackImpactAngle != 0) hash ^= FireSlashBackImpactAngle.GetHashCode();
      if (PinPullSoundFp.Length != 0) hash ^= PinPullSoundFp.GetHashCode();
      if (ProjectileFireHitSound.Length != 0) hash ^= ProjectileFireHitSound.GetHashCode();
      if (BounceSoundFp.Length != 0) hash ^= BounceSoundFp.GetHashCode();
      if (parent_ != null) hash ^= Parent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CanWeaponOnBack != false) {
        output.WriteRawTag(8);
        output.WriteBool(CanWeaponOnBack);
      }
      if (SlashSoundFp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SlashSoundFp);
      }
      if (StabSoundFp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StabSoundFp);
      }
      if (HeavyHitImpactFp.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HeavyHitImpactFp);
      }
      if (HitFleshFp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HitFleshFp);
      }
      if (HitFOVAbilityNormal != false) {
        output.WriteRawTag(48);
        output.WriteBool(HitFOVAbilityNormal);
      }
      if (HitFOVAbilityHeavy != false) {
        output.WriteRawTag(56);
        output.WriteBool(HitFOVAbilityHeavy);
      }
      if (HitFOVAbility != false) {
        output.WriteRawTag(64);
        output.WriteBool(HitFOVAbility);
      }
      if (HitFOVAdditiveRatio != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(HitFOVAdditiveRatio);
      }
      if (HitFOVLockAnimTimes != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(HitFOVLockAnimTimes);
      }
      if (HitFOVLockKeepAnimTimes != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(HitFOVLockKeepAnimTimes);
      }
      if (FPMeleeSlash01EffectID.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(FPMeleeSlash01EffectID);
      }
      if (FPMeleeSlash02EffectID.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(FPMeleeSlash02EffectID);
      }
      if (FPMeleeStabEffectID.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(FPMeleeStabEffectID);
      }
      if (FPMeleeStabBackEffectID.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(FPMeleeStabBackEffectID);
      }
      if (FPMeleeSlashBackEffectID.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(FPMeleeSlashBackEffectID);
      }
      if (FPMeleeEffectSocketName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(FPMeleeEffectSocketName);
      }
      if (FPMeleeEffectLifeTime != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(FPMeleeEffectLifeTime);
      }
      if (HitHardSoundTp.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(HitHardSoundTp);
      }
      if (HitLightSoundTp.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(HitLightSoundTp);
      }
      if (HitBackstabSoundTp.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(HitBackstabSoundTp);
      }
      if (SlashSoundTp.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(SlashSoundTp);
      }
      if (StabSoundTp.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(StabSoundTp);
      }
      if (HitImpactTp.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(HitImpactTp);
      }
      if (HeavyHitImpactTp.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(HeavyHitImpactTp);
      }
      if (HitFleshTp.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(HitFleshTp);
      }
      if (TPMeleeSlash01BackEffectID.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(TPMeleeSlash01BackEffectID);
      }
      if (TPMeleeStabBackEffectID.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(TPMeleeStabBackEffectID);
      }
      if (TPMeleeSlash01EffectID.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(TPMeleeSlash01EffectID);
      }
      if (TPMeleeStabEffectID.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(TPMeleeStabEffectID);
      }
      if (TPMeleeEffectSocketName.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(TPMeleeEffectSocketName);
      }
      if (TPMeleeEffectLifeTime != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(TPMeleeEffectLifeTime);
      }
      animIdleDatas_.WriteTo(output, _repeated_animIdleDatas_codec);
      if (FireStabImpactAngle != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(FireStabImpactAngle);
      }
      if (FireStabBackImpactAngle != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(FireStabBackImpactAngle);
      }
      if (FireSlash01ImpactAngle != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(FireSlash01ImpactAngle);
      }
      if (FireSlash02ImpactAngle != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(FireSlash02ImpactAngle);
      }
      if (FireSlash03ImpactAngle != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(FireSlash03ImpactAngle);
      }
      if (FireSlash04ImpactAngle != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(FireSlash04ImpactAngle);
      }
      if (FireSlashBackImpactAngle != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(FireSlashBackImpactAngle);
      }
      if (PinPullSoundFp.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(PinPullSoundFp);
      }
      if (ProjectileFireHitSound.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(ProjectileFireHitSound);
      }
      if (BounceSoundFp.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(BounceSoundFp);
      }
      if (parent_ != null) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(Parent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanWeaponOnBack != false) {
        size += 1 + 1;
      }
      if (SlashSoundFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SlashSoundFp);
      }
      if (StabSoundFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StabSoundFp);
      }
      if (HeavyHitImpactFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeavyHitImpactFp);
      }
      if (HitFleshFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HitFleshFp);
      }
      if (HitFOVAbilityNormal != false) {
        size += 1 + 1;
      }
      if (HitFOVAbilityHeavy != false) {
        size += 1 + 1;
      }
      if (HitFOVAbility != false) {
        size += 1 + 1;
      }
      if (HitFOVAdditiveRatio != 0F) {
        size += 1 + 4;
      }
      if (HitFOVLockAnimTimes != 0F) {
        size += 1 + 4;
      }
      if (HitFOVLockKeepAnimTimes != 0F) {
        size += 1 + 4;
      }
      if (FPMeleeSlash01EffectID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FPMeleeSlash01EffectID);
      }
      if (FPMeleeSlash02EffectID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FPMeleeSlash02EffectID);
      }
      if (FPMeleeStabEffectID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FPMeleeStabEffectID);
      }
      if (FPMeleeStabBackEffectID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FPMeleeStabBackEffectID);
      }
      if (FPMeleeSlashBackEffectID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FPMeleeSlashBackEffectID);
      }
      if (FPMeleeEffectSocketName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FPMeleeEffectSocketName);
      }
      if (FPMeleeEffectLifeTime != 0F) {
        size += 2 + 4;
      }
      if (HitHardSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HitHardSoundTp);
      }
      if (HitLightSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HitLightSoundTp);
      }
      if (HitBackstabSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HitBackstabSoundTp);
      }
      if (SlashSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SlashSoundTp);
      }
      if (StabSoundTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StabSoundTp);
      }
      if (HitImpactTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HitImpactTp);
      }
      if (HeavyHitImpactTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HeavyHitImpactTp);
      }
      if (HitFleshTp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HitFleshTp);
      }
      if (TPMeleeSlash01BackEffectID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TPMeleeSlash01BackEffectID);
      }
      if (TPMeleeStabBackEffectID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TPMeleeStabBackEffectID);
      }
      if (TPMeleeSlash01EffectID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TPMeleeSlash01EffectID);
      }
      if (TPMeleeStabEffectID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TPMeleeStabEffectID);
      }
      if (TPMeleeEffectSocketName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TPMeleeEffectSocketName);
      }
      if (TPMeleeEffectLifeTime != 0F) {
        size += 2 + 4;
      }
      size += animIdleDatas_.CalculateSize(_repeated_animIdleDatas_codec);
      if (FireStabImpactAngle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FireStabImpactAngle);
      }
      if (FireStabBackImpactAngle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FireStabBackImpactAngle);
      }
      if (FireSlash01ImpactAngle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FireSlash01ImpactAngle);
      }
      if (FireSlash02ImpactAngle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FireSlash02ImpactAngle);
      }
      if (FireSlash03ImpactAngle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FireSlash03ImpactAngle);
      }
      if (FireSlash04ImpactAngle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FireSlash04ImpactAngle);
      }
      if (FireSlashBackImpactAngle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FireSlashBackImpactAngle);
      }
      if (PinPullSoundFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PinPullSoundFp);
      }
      if (ProjectileFireHitSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ProjectileFireHitSound);
      }
      if (BounceSoundFp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BounceSoundFp);
      }
      if (parent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponPersistenceConfigMeleeData other) {
      if (other == null) {
        return;
      }
      if (other.CanWeaponOnBack != false) {
        CanWeaponOnBack = other.CanWeaponOnBack;
      }
      if (other.SlashSoundFp.Length != 0) {
        SlashSoundFp = other.SlashSoundFp;
      }
      if (other.StabSoundFp.Length != 0) {
        StabSoundFp = other.StabSoundFp;
      }
      if (other.HeavyHitImpactFp.Length != 0) {
        HeavyHitImpactFp = other.HeavyHitImpactFp;
      }
      if (other.HitFleshFp.Length != 0) {
        HitFleshFp = other.HitFleshFp;
      }
      if (other.HitFOVAbilityNormal != false) {
        HitFOVAbilityNormal = other.HitFOVAbilityNormal;
      }
      if (other.HitFOVAbilityHeavy != false) {
        HitFOVAbilityHeavy = other.HitFOVAbilityHeavy;
      }
      if (other.HitFOVAbility != false) {
        HitFOVAbility = other.HitFOVAbility;
      }
      if (other.HitFOVAdditiveRatio != 0F) {
        HitFOVAdditiveRatio = other.HitFOVAdditiveRatio;
      }
      if (other.HitFOVLockAnimTimes != 0F) {
        HitFOVLockAnimTimes = other.HitFOVLockAnimTimes;
      }
      if (other.HitFOVLockKeepAnimTimes != 0F) {
        HitFOVLockKeepAnimTimes = other.HitFOVLockKeepAnimTimes;
      }
      if (other.FPMeleeSlash01EffectID.Length != 0) {
        FPMeleeSlash01EffectID = other.FPMeleeSlash01EffectID;
      }
      if (other.FPMeleeSlash02EffectID.Length != 0) {
        FPMeleeSlash02EffectID = other.FPMeleeSlash02EffectID;
      }
      if (other.FPMeleeStabEffectID.Length != 0) {
        FPMeleeStabEffectID = other.FPMeleeStabEffectID;
      }
      if (other.FPMeleeStabBackEffectID.Length != 0) {
        FPMeleeStabBackEffectID = other.FPMeleeStabBackEffectID;
      }
      if (other.FPMeleeSlashBackEffectID.Length != 0) {
        FPMeleeSlashBackEffectID = other.FPMeleeSlashBackEffectID;
      }
      if (other.FPMeleeEffectSocketName.Length != 0) {
        FPMeleeEffectSocketName = other.FPMeleeEffectSocketName;
      }
      if (other.FPMeleeEffectLifeTime != 0F) {
        FPMeleeEffectLifeTime = other.FPMeleeEffectLifeTime;
      }
      if (other.HitHardSoundTp.Length != 0) {
        HitHardSoundTp = other.HitHardSoundTp;
      }
      if (other.HitLightSoundTp.Length != 0) {
        HitLightSoundTp = other.HitLightSoundTp;
      }
      if (other.HitBackstabSoundTp.Length != 0) {
        HitBackstabSoundTp = other.HitBackstabSoundTp;
      }
      if (other.SlashSoundTp.Length != 0) {
        SlashSoundTp = other.SlashSoundTp;
      }
      if (other.StabSoundTp.Length != 0) {
        StabSoundTp = other.StabSoundTp;
      }
      if (other.HitImpactTp.Length != 0) {
        HitImpactTp = other.HitImpactTp;
      }
      if (other.HeavyHitImpactTp.Length != 0) {
        HeavyHitImpactTp = other.HeavyHitImpactTp;
      }
      if (other.HitFleshTp.Length != 0) {
        HitFleshTp = other.HitFleshTp;
      }
      if (other.TPMeleeSlash01BackEffectID.Length != 0) {
        TPMeleeSlash01BackEffectID = other.TPMeleeSlash01BackEffectID;
      }
      if (other.TPMeleeStabBackEffectID.Length != 0) {
        TPMeleeStabBackEffectID = other.TPMeleeStabBackEffectID;
      }
      if (other.TPMeleeSlash01EffectID.Length != 0) {
        TPMeleeSlash01EffectID = other.TPMeleeSlash01EffectID;
      }
      if (other.TPMeleeStabEffectID.Length != 0) {
        TPMeleeStabEffectID = other.TPMeleeStabEffectID;
      }
      if (other.TPMeleeEffectSocketName.Length != 0) {
        TPMeleeEffectSocketName = other.TPMeleeEffectSocketName;
      }
      if (other.TPMeleeEffectLifeTime != 0F) {
        TPMeleeEffectLifeTime = other.TPMeleeEffectLifeTime;
      }
      animIdleDatas_.Add(other.animIdleDatas_);
      if (other.FireStabImpactAngle != 0) {
        FireStabImpactAngle = other.FireStabImpactAngle;
      }
      if (other.FireStabBackImpactAngle != 0) {
        FireStabBackImpactAngle = other.FireStabBackImpactAngle;
      }
      if (other.FireSlash01ImpactAngle != 0) {
        FireSlash01ImpactAngle = other.FireSlash01ImpactAngle;
      }
      if (other.FireSlash02ImpactAngle != 0) {
        FireSlash02ImpactAngle = other.FireSlash02ImpactAngle;
      }
      if (other.FireSlash03ImpactAngle != 0) {
        FireSlash03ImpactAngle = other.FireSlash03ImpactAngle;
      }
      if (other.FireSlash04ImpactAngle != 0) {
        FireSlash04ImpactAngle = other.FireSlash04ImpactAngle;
      }
      if (other.FireSlashBackImpactAngle != 0) {
        FireSlashBackImpactAngle = other.FireSlashBackImpactAngle;
      }
      if (other.PinPullSoundFp.Length != 0) {
        PinPullSoundFp = other.PinPullSoundFp;
      }
      if (other.ProjectileFireHitSound.Length != 0) {
        ProjectileFireHitSound = other.ProjectileFireHitSound;
      }
      if (other.BounceSoundFp.Length != 0) {
        BounceSoundFp = other.BounceSoundFp;
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::D11.Pjson.WeaponPersistenceConfigComponentData();
        }
        Parent.MergeFrom(other.Parent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CanWeaponOnBack = input.ReadBool();
            break;
          }
          case 18: {
            SlashSoundFp = input.ReadString();
            break;
          }
          case 26: {
            StabSoundFp = input.ReadString();
            break;
          }
          case 34: {
            HeavyHitImpactFp = input.ReadString();
            break;
          }
          case 42: {
            HitFleshFp = input.ReadString();
            break;
          }
          case 48: {
            HitFOVAbilityNormal = input.ReadBool();
            break;
          }
          case 56: {
            HitFOVAbilityHeavy = input.ReadBool();
            break;
          }
          case 64: {
            HitFOVAbility = input.ReadBool();
            break;
          }
          case 77: {
            HitFOVAdditiveRatio = input.ReadFloat();
            break;
          }
          case 85: {
            HitFOVLockAnimTimes = input.ReadFloat();
            break;
          }
          case 93: {
            HitFOVLockKeepAnimTimes = input.ReadFloat();
            break;
          }
          case 98: {
            FPMeleeSlash01EffectID = input.ReadString();
            break;
          }
          case 106: {
            FPMeleeSlash02EffectID = input.ReadString();
            break;
          }
          case 114: {
            FPMeleeStabEffectID = input.ReadString();
            break;
          }
          case 122: {
            FPMeleeStabBackEffectID = input.ReadString();
            break;
          }
          case 130: {
            FPMeleeSlashBackEffectID = input.ReadString();
            break;
          }
          case 138: {
            FPMeleeEffectSocketName = input.ReadString();
            break;
          }
          case 149: {
            FPMeleeEffectLifeTime = input.ReadFloat();
            break;
          }
          case 154: {
            HitHardSoundTp = input.ReadString();
            break;
          }
          case 162: {
            HitLightSoundTp = input.ReadString();
            break;
          }
          case 170: {
            HitBackstabSoundTp = input.ReadString();
            break;
          }
          case 178: {
            SlashSoundTp = input.ReadString();
            break;
          }
          case 186: {
            StabSoundTp = input.ReadString();
            break;
          }
          case 194: {
            HitImpactTp = input.ReadString();
            break;
          }
          case 202: {
            HeavyHitImpactTp = input.ReadString();
            break;
          }
          case 210: {
            HitFleshTp = input.ReadString();
            break;
          }
          case 218: {
            TPMeleeSlash01BackEffectID = input.ReadString();
            break;
          }
          case 226: {
            TPMeleeStabBackEffectID = input.ReadString();
            break;
          }
          case 234: {
            TPMeleeSlash01EffectID = input.ReadString();
            break;
          }
          case 242: {
            TPMeleeStabEffectID = input.ReadString();
            break;
          }
          case 250: {
            TPMeleeEffectSocketName = input.ReadString();
            break;
          }
          case 261: {
            TPMeleeEffectLifeTime = input.ReadFloat();
            break;
          }
          case 266:
          case 264: {
            animIdleDatas_.AddEntriesFrom(input, _repeated_animIdleDatas_codec);
            break;
          }
          case 272: {
            FireStabImpactAngle = input.ReadInt32();
            break;
          }
          case 280: {
            FireStabBackImpactAngle = input.ReadInt32();
            break;
          }
          case 288: {
            FireSlash01ImpactAngle = input.ReadInt32();
            break;
          }
          case 296: {
            FireSlash02ImpactAngle = input.ReadInt32();
            break;
          }
          case 304: {
            FireSlash03ImpactAngle = input.ReadInt32();
            break;
          }
          case 312: {
            FireSlash04ImpactAngle = input.ReadInt32();
            break;
          }
          case 320: {
            FireSlashBackImpactAngle = input.ReadInt32();
            break;
          }
          case 330: {
            PinPullSoundFp = input.ReadString();
            break;
          }
          case 338: {
            ProjectileFireHitSound = input.ReadString();
            break;
          }
          case 346: {
            BounceSoundFp = input.ReadString();
            break;
          }
          case 354: {
            if (parent_ == null) {
              Parent = new global::D11.Pjson.WeaponPersistenceConfigComponentData();
            }
            input.ReadMessage(Parent);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
