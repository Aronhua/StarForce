// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WeaponPersistenceConfigProjectileData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D11.Pjson {

  /// <summary>Holder for reflection information generated from WeaponPersistenceConfigProjectileData.proto</summary>
  public static partial class WeaponPersistenceConfigProjectileDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WeaponPersistenceConfigProjectileData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeaponPersistenceConfigProjectileDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitXZWFwb25QZXJzaXN0ZW5jZUNvbmZpZ1Byb2plY3RpbGVEYXRhLnByb3Rv",
            "EglEMTEuUGpzb24aKldlYXBvblBlcnNpc3RlbmNlQ29uZmlnQ29tcG9uZW50",
            "RGF0YS5wcm90byL6BgolV2VhcG9uUGVyc2lzdGVuY2VDb25maWdQcm9qZWN0",
            "aWxlRGF0YRIWCg5QaW5QdWxsU291bmRGcBgBIAEoCRIZChFFeHBsb2RlQ2xv",
            "c2VTb3VuZBgCIAEoCRIXCg9FeHBsb2RlRmFyU291bmQYAyABKAkSFQoNQm91",
            "bmNlU291bmRGcBgEIAEoCRIaChJGbGFzaEJhbmdSaW5nU291bmQYBSABKAkS",
            "HgoWU3RvcEZsYXNoQmFuZ1JpbmdTb3VuZBgGIAEoCRIXCg9Jc0dyZW5hZGVC",
            "b3R0bGUYByABKAgSFwoPU3ByZWFkRmlyZVNvdW5kGAggASgJEhsKE1N0b3BT",
            "cHJlYWRGaXJlU291bmQYCSABKAkSEAoIRmx5U291bmQYCiABKAkSFAoMU3Rv",
            "cEZseVNvdW5kGAsgASgJEhwKFE1vbG90b3ZJZ25pdGVTb3VuZEZQGAwgASgJ",
            "EiAKGFN0b3BNb2xvdG92SWduaXRlU291bmRGUBgNIAEoCRIcChRNb2xvdG92",
            "SWduaXRlU291bmRUUBgOIAEoCRIgChhTdG9wTW9sb3Rvdklnbml0ZVNvdW5k",
            "VFAYDyABKAkSGwoTTW9sb3RvdkV4cGxvZGVTb3VuZBgQIAEoCRIfChdTdG9w",
            "TW9sb3RvdkV4cGxvZGVTb3VuZBgRIAEoCRIcChRDYW1lcmFTaGFrZUFzc2V0",
            "TmFtZRgSIAEoCRIWCg5BbXBsaXR1ZGVSYW5nZRgTIAEoAhIdChVFeHBsb2Rl",
            "UmluZ0F1ZGlvUm5hZ2UYFCABKAISGAoQTWF4UmluZ0F1ZGlvVGltZRgVIAEo",
            "AhIYChBNaW5SaW5nQXVkaW9UaW1lGBYgASgCEiAKGFBsYXlFeHBsb2RlUmlu",
            "Z0F1ZGlvTmFtZRgXIAEoCRIgChhTdG9wRXhwbG9kZVJpbmdBdWRpb05hbWUY",
            "GCABKAkSGwoTRXhwbG9kZVJpbmdSVFBDTmFtZRgZIAEoCRIXCg9UaHJvd1Zv",
            "eFNvdW5kSUQYGiABKA0SHgoWUHJvamVjdGlsZUZpcmVIaXRTb3VuZBgbIAEo",
            "CRIZChFGcEhpdFNjcmVlbkVmZmVjdBgcIAEoCRI/CgZwYXJlbnQYHSABKAsy",
            "Ly5EMTEuUGpzb24uV2VhcG9uUGVyc2lzdGVuY2VDb25maWdDb21wb25lbnRE",
            "YXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D11.Pjson.WeaponPersistenceConfigComponentDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D11.Pjson.WeaponPersistenceConfigProjectileData), global::D11.Pjson.WeaponPersistenceConfigProjectileData.Parser, new[]{ "PinPullSoundFp", "ExplodeCloseSound", "ExplodeFarSound", "BounceSoundFp", "FlashBangRingSound", "StopFlashBangRingSound", "IsGrenadeBottle", "SpreadFireSound", "StopSpreadFireSound", "FlySound", "StopFlySound", "MolotovIgniteSoundFP", "StopMolotovIgniteSoundFP", "MolotovIgniteSoundTP", "StopMolotovIgniteSoundTP", "MolotovExplodeSound", "StopMolotovExplodeSound", "CameraShakeAssetName", "AmplitudeRange", "ExplodeRingAudioRnage", "MaxRingAudioTime", "MinRingAudioTime", "PlayExplodeRingAudioName", "StopExplodeRingAudioName", "ExplodeRingRTPCName", "ThrowVoxSoundID", "ProjectileFireHitSound", "FpHitScreenEffect", "Parent" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WeaponPersistenceConfigProjectileData : pb::IMessage<WeaponPersistenceConfigProjectileData> {
    private static readonly pb::MessageParser<WeaponPersistenceConfigProjectileData> _parser = new pb::MessageParser<WeaponPersistenceConfigProjectileData>(() => new WeaponPersistenceConfigProjectileData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponPersistenceConfigProjectileData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D11.Pjson.WeaponPersistenceConfigProjectileDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPersistenceConfigProjectileData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPersistenceConfigProjectileData(WeaponPersistenceConfigProjectileData other) : this() {
      pinPullSoundFp_ = other.pinPullSoundFp_;
      explodeCloseSound_ = other.explodeCloseSound_;
      explodeFarSound_ = other.explodeFarSound_;
      bounceSoundFp_ = other.bounceSoundFp_;
      flashBangRingSound_ = other.flashBangRingSound_;
      stopFlashBangRingSound_ = other.stopFlashBangRingSound_;
      isGrenadeBottle_ = other.isGrenadeBottle_;
      spreadFireSound_ = other.spreadFireSound_;
      stopSpreadFireSound_ = other.stopSpreadFireSound_;
      flySound_ = other.flySound_;
      stopFlySound_ = other.stopFlySound_;
      molotovIgniteSoundFP_ = other.molotovIgniteSoundFP_;
      stopMolotovIgniteSoundFP_ = other.stopMolotovIgniteSoundFP_;
      molotovIgniteSoundTP_ = other.molotovIgniteSoundTP_;
      stopMolotovIgniteSoundTP_ = other.stopMolotovIgniteSoundTP_;
      molotovExplodeSound_ = other.molotovExplodeSound_;
      stopMolotovExplodeSound_ = other.stopMolotovExplodeSound_;
      cameraShakeAssetName_ = other.cameraShakeAssetName_;
      amplitudeRange_ = other.amplitudeRange_;
      explodeRingAudioRnage_ = other.explodeRingAudioRnage_;
      maxRingAudioTime_ = other.maxRingAudioTime_;
      minRingAudioTime_ = other.minRingAudioTime_;
      playExplodeRingAudioName_ = other.playExplodeRingAudioName_;
      stopExplodeRingAudioName_ = other.stopExplodeRingAudioName_;
      explodeRingRTPCName_ = other.explodeRingRTPCName_;
      throwVoxSoundID_ = other.throwVoxSoundID_;
      projectileFireHitSound_ = other.projectileFireHitSound_;
      fpHitScreenEffect_ = other.fpHitScreenEffect_;
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponPersistenceConfigProjectileData Clone() {
      return new WeaponPersistenceConfigProjectileData(this);
    }

    /// <summary>Field number for the "PinPullSoundFp" field.</summary>
    public const int PinPullSoundFpFieldNumber = 1;
    private string pinPullSoundFp_ = "";
    /// <summary>
    /// 1p拉环音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PinPullSoundFp {
      get { return pinPullSoundFp_; }
      set {
        pinPullSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ExplodeCloseSound" field.</summary>
    public const int ExplodeCloseSoundFieldNumber = 2;
    private string explodeCloseSound_ = "";
    /// <summary>
    /// 近爆炸音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExplodeCloseSound {
      get { return explodeCloseSound_; }
      set {
        explodeCloseSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ExplodeFarSound" field.</summary>
    public const int ExplodeFarSoundFieldNumber = 3;
    private string explodeFarSound_ = "";
    /// <summary>
    /// 远爆炸音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExplodeFarSound {
      get { return explodeFarSound_; }
      set {
        explodeFarSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BounceSoundFp" field.</summary>
    public const int BounceSoundFpFieldNumber = 4;
    private string bounceSoundFp_ = "";
    /// <summary>
    /// 物理音效（反弹） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BounceSoundFp {
      get { return bounceSoundFp_; }
      set {
        bounceSoundFp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FlashBangRingSound" field.</summary>
    public const int FlashBangRingSoundFieldNumber = 5;
    private string flashBangRingSound_ = "";
    /// <summary>
    /// 闪光弹遮蔽音频 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FlashBangRingSound {
      get { return flashBangRingSound_; }
      set {
        flashBangRingSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopFlashBangRingSound" field.</summary>
    public const int StopFlashBangRingSoundFieldNumber = 6;
    private string stopFlashBangRingSound_ = "";
    /// <summary>
    /// 停止闪光弹遮蔽音频 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopFlashBangRingSound {
      get { return stopFlashBangRingSound_; }
      set {
        stopFlashBangRingSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsGrenadeBottle" field.</summary>
    public const int IsGrenadeBottleFieldNumber = 7;
    private bool isGrenadeBottle_;
    /// <summary>
    /// 燃烧弹类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGrenadeBottle {
      get { return isGrenadeBottle_; }
      set {
        isGrenadeBottle_ = value;
      }
    }

    /// <summary>Field number for the "SpreadFireSound" field.</summary>
    public const int SpreadFireSoundFieldNumber = 8;
    private string spreadFireSound_ = "";
    /// <summary>
    /// 燃烧弹蔓延音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpreadFireSound {
      get { return spreadFireSound_; }
      set {
        spreadFireSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopSpreadFireSound" field.</summary>
    public const int StopSpreadFireSoundFieldNumber = 9;
    private string stopSpreadFireSound_ = "";
    /// <summary>
    /// Stop燃烧弹蔓延音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopSpreadFireSound {
      get { return stopSpreadFireSound_; }
      set {
        stopSpreadFireSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FlySound" field.</summary>
    public const int FlySoundFieldNumber = 10;
    private string flySound_ = "";
    /// <summary>
    /// 飞行音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FlySound {
      get { return flySound_; }
      set {
        flySound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopFlySound" field.</summary>
    public const int StopFlySoundFieldNumber = 11;
    private string stopFlySound_ = "";
    /// <summary>
    /// 飞行音效Stop 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopFlySound {
      get { return stopFlySound_; }
      set {
        stopFlySound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MolotovIgniteSoundFP" field.</summary>
    public const int MolotovIgniteSoundFPFieldNumber = 12;
    private string molotovIgniteSoundFP_ = "";
    /// <summary>
    /// 燃烧瓶点火待机1P 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MolotovIgniteSoundFP {
      get { return molotovIgniteSoundFP_; }
      set {
        molotovIgniteSoundFP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopMolotovIgniteSoundFP" field.</summary>
    public const int StopMolotovIgniteSoundFPFieldNumber = 13;
    private string stopMolotovIgniteSoundFP_ = "";
    /// <summary>
    /// Stop燃烧瓶点火待机1p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopMolotovIgniteSoundFP {
      get { return stopMolotovIgniteSoundFP_; }
      set {
        stopMolotovIgniteSoundFP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MolotovIgniteSoundTP" field.</summary>
    public const int MolotovIgniteSoundTPFieldNumber = 14;
    private string molotovIgniteSoundTP_ = "";
    /// <summary>
    /// 燃烧瓶点火待机3P 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MolotovIgniteSoundTP {
      get { return molotovIgniteSoundTP_; }
      set {
        molotovIgniteSoundTP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopMolotovIgniteSoundTP" field.</summary>
    public const int StopMolotovIgniteSoundTPFieldNumber = 15;
    private string stopMolotovIgniteSoundTP_ = "";
    /// <summary>
    /// Stop燃烧瓶点火待机3p 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopMolotovIgniteSoundTP {
      get { return stopMolotovIgniteSoundTP_; }
      set {
        stopMolotovIgniteSoundTP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MolotovExplodeSound" field.</summary>
    public const int MolotovExplodeSoundFieldNumber = 16;
    private string molotovExplodeSound_ = "";
    /// <summary>
    /// 爆炸+燃烧 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MolotovExplodeSound {
      get { return molotovExplodeSound_; }
      set {
        molotovExplodeSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopMolotovExplodeSound" field.</summary>
    public const int StopMolotovExplodeSoundFieldNumber = 17;
    private string stopMolotovExplodeSound_ = "";
    /// <summary>
    /// Stop爆炸+燃烧 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopMolotovExplodeSound {
      get { return stopMolotovExplodeSound_; }
      set {
        stopMolotovExplodeSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CameraShakeAssetName" field.</summary>
    public const int CameraShakeAssetNameFieldNumber = 18;
    private string cameraShakeAssetName_ = "";
    /// <summary>
    /// 爆炸镜头晃动资源名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraShakeAssetName {
      get { return cameraShakeAssetName_; }
      set {
        cameraShakeAssetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AmplitudeRange" field.</summary>
    public const int AmplitudeRangeFieldNumber = 19;
    private float amplitudeRange_;
    /// <summary>
    /// 爆炸镜头振幅范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AmplitudeRange {
      get { return amplitudeRange_; }
      set {
        amplitudeRange_ = value;
      }
    }

    /// <summary>Field number for the "ExplodeRingAudioRnage" field.</summary>
    public const int ExplodeRingAudioRnageFieldNumber = 20;
    private float explodeRingAudioRnage_;
    /// <summary>
    /// 爆炸耳鸣音范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExplodeRingAudioRnage {
      get { return explodeRingAudioRnage_; }
      set {
        explodeRingAudioRnage_ = value;
      }
    }

    /// <summary>Field number for the "MaxRingAudioTime" field.</summary>
    public const int MaxRingAudioTimeFieldNumber = 21;
    private float maxRingAudioTime_;
    /// <summary>
    /// 爆炸耳鸣音最大时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxRingAudioTime {
      get { return maxRingAudioTime_; }
      set {
        maxRingAudioTime_ = value;
      }
    }

    /// <summary>Field number for the "MinRingAudioTime" field.</summary>
    public const int MinRingAudioTimeFieldNumber = 22;
    private float minRingAudioTime_;
    /// <summary>
    /// 爆炸耳鸣音最小时间 对应最大范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinRingAudioTime {
      get { return minRingAudioTime_; }
      set {
        minRingAudioTime_ = value;
      }
    }

    /// <summary>Field number for the "PlayExplodeRingAudioName" field.</summary>
    public const int PlayExplodeRingAudioNameFieldNumber = 23;
    private string playExplodeRingAudioName_ = "";
    /// <summary>
    /// play爆炸耳鸣音频名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayExplodeRingAudioName {
      get { return playExplodeRingAudioName_; }
      set {
        playExplodeRingAudioName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopExplodeRingAudioName" field.</summary>
    public const int StopExplodeRingAudioNameFieldNumber = 24;
    private string stopExplodeRingAudioName_ = "";
    /// <summary>
    /// stop爆炸耳鸣音频名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopExplodeRingAudioName {
      get { return stopExplodeRingAudioName_; }
      set {
        stopExplodeRingAudioName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ExplodeRingRTPCName" field.</summary>
    public const int ExplodeRingRTPCNameFieldNumber = 25;
    private string explodeRingRTPCName_ = "";
    /// <summary>
    /// 耳鸣音频rtpc 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExplodeRingRTPCName {
      get { return explodeRingRTPCName_; }
      set {
        explodeRingRTPCName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ThrowVoxSoundID" field.</summary>
    public const int ThrowVoxSoundIDFieldNumber = 26;
    private uint throwVoxSoundID_;
    /// <summary>
    /// 投掷物扔出时播放vox语音ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ThrowVoxSoundID {
      get { return throwVoxSoundID_; }
      set {
        throwVoxSoundID_ = value;
      }
    }

    /// <summary>Field number for the "ProjectileFireHitSound" field.</summary>
    public const int ProjectileFireHitSoundFieldNumber = 27;
    private string projectileFireHitSound_ = "";
    /// <summary>
    /// 砸中人命中通用音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectileFireHitSound {
      get { return projectileFireHitSound_; }
      set {
        projectileFireHitSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FpHitScreenEffect" field.</summary>
    public const int FpHitScreenEffectFieldNumber = 28;
    private string fpHitScreenEffect_ = "";
    /// <summary>
    /// fp受击屏幕特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FpHitScreenEffect {
      get { return fpHitScreenEffect_; }
      set {
        fpHitScreenEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 29;
    private global::D11.Pjson.WeaponPersistenceConfigComponentData parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D11.Pjson.WeaponPersistenceConfigComponentData Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponPersistenceConfigProjectileData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponPersistenceConfigProjectileData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PinPullSoundFp != other.PinPullSoundFp) return false;
      if (ExplodeCloseSound != other.ExplodeCloseSound) return false;
      if (ExplodeFarSound != other.ExplodeFarSound) return false;
      if (BounceSoundFp != other.BounceSoundFp) return false;
      if (FlashBangRingSound != other.FlashBangRingSound) return false;
      if (StopFlashBangRingSound != other.StopFlashBangRingSound) return false;
      if (IsGrenadeBottle != other.IsGrenadeBottle) return false;
      if (SpreadFireSound != other.SpreadFireSound) return false;
      if (StopSpreadFireSound != other.StopSpreadFireSound) return false;
      if (FlySound != other.FlySound) return false;
      if (StopFlySound != other.StopFlySound) return false;
      if (MolotovIgniteSoundFP != other.MolotovIgniteSoundFP) return false;
      if (StopMolotovIgniteSoundFP != other.StopMolotovIgniteSoundFP) return false;
      if (MolotovIgniteSoundTP != other.MolotovIgniteSoundTP) return false;
      if (StopMolotovIgniteSoundTP != other.StopMolotovIgniteSoundTP) return false;
      if (MolotovExplodeSound != other.MolotovExplodeSound) return false;
      if (StopMolotovExplodeSound != other.StopMolotovExplodeSound) return false;
      if (CameraShakeAssetName != other.CameraShakeAssetName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AmplitudeRange, other.AmplitudeRange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExplodeRingAudioRnage, other.ExplodeRingAudioRnage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxRingAudioTime, other.MaxRingAudioTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinRingAudioTime, other.MinRingAudioTime)) return false;
      if (PlayExplodeRingAudioName != other.PlayExplodeRingAudioName) return false;
      if (StopExplodeRingAudioName != other.StopExplodeRingAudioName) return false;
      if (ExplodeRingRTPCName != other.ExplodeRingRTPCName) return false;
      if (ThrowVoxSoundID != other.ThrowVoxSoundID) return false;
      if (ProjectileFireHitSound != other.ProjectileFireHitSound) return false;
      if (FpHitScreenEffect != other.FpHitScreenEffect) return false;
      if (!object.Equals(Parent, other.Parent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PinPullSoundFp.Length != 0) hash ^= PinPullSoundFp.GetHashCode();
      if (ExplodeCloseSound.Length != 0) hash ^= ExplodeCloseSound.GetHashCode();
      if (ExplodeFarSound.Length != 0) hash ^= ExplodeFarSound.GetHashCode();
      if (BounceSoundFp.Length != 0) hash ^= BounceSoundFp.GetHashCode();
      if (FlashBangRingSound.Length != 0) hash ^= FlashBangRingSound.GetHashCode();
      if (StopFlashBangRingSound.Length != 0) hash ^= StopFlashBangRingSound.GetHashCode();
      if (IsGrenadeBottle != false) hash ^= IsGrenadeBottle.GetHashCode();
      if (SpreadFireSound.Length != 0) hash ^= SpreadFireSound.GetHashCode();
      if (StopSpreadFireSound.Length != 0) hash ^= StopSpreadFireSound.GetHashCode();
      if (FlySound.Length != 0) hash ^= FlySound.GetHashCode();
      if (StopFlySound.Length != 0) hash ^= StopFlySound.GetHashCode();
      if (MolotovIgniteSoundFP.Length != 0) hash ^= MolotovIgniteSoundFP.GetHashCode();
      if (StopMolotovIgniteSoundFP.Length != 0) hash ^= StopMolotovIgniteSoundFP.GetHashCode();
      if (MolotovIgniteSoundTP.Length != 0) hash ^= MolotovIgniteSoundTP.GetHashCode();
      if (StopMolotovIgniteSoundTP.Length != 0) hash ^= StopMolotovIgniteSoundTP.GetHashCode();
      if (MolotovExplodeSound.Length != 0) hash ^= MolotovExplodeSound.GetHashCode();
      if (StopMolotovExplodeSound.Length != 0) hash ^= StopMolotovExplodeSound.GetHashCode();
      if (CameraShakeAssetName.Length != 0) hash ^= CameraShakeAssetName.GetHashCode();
      if (AmplitudeRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AmplitudeRange);
      if (ExplodeRingAudioRnage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExplodeRingAudioRnage);
      if (MaxRingAudioTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxRingAudioTime);
      if (MinRingAudioTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinRingAudioTime);
      if (PlayExplodeRingAudioName.Length != 0) hash ^= PlayExplodeRingAudioName.GetHashCode();
      if (StopExplodeRingAudioName.Length != 0) hash ^= StopExplodeRingAudioName.GetHashCode();
      if (ExplodeRingRTPCName.Length != 0) hash ^= ExplodeRingRTPCName.GetHashCode();
      if (ThrowVoxSoundID != 0) hash ^= ThrowVoxSoundID.GetHashCode();
      if (ProjectileFireHitSound.Length != 0) hash ^= ProjectileFireHitSound.GetHashCode();
      if (FpHitScreenEffect.Length != 0) hash ^= FpHitScreenEffect.GetHashCode();
      if (parent_ != null) hash ^= Parent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PinPullSoundFp.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PinPullSoundFp);
      }
      if (ExplodeCloseSound.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExplodeCloseSound);
      }
      if (ExplodeFarSound.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ExplodeFarSound);
      }
      if (BounceSoundFp.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BounceSoundFp);
      }
      if (FlashBangRingSound.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FlashBangRingSound);
      }
      if (StopFlashBangRingSound.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(StopFlashBangRingSound);
      }
      if (IsGrenadeBottle != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsGrenadeBottle);
      }
      if (SpreadFireSound.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SpreadFireSound);
      }
      if (StopSpreadFireSound.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(StopSpreadFireSound);
      }
      if (FlySound.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(FlySound);
      }
      if (StopFlySound.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(StopFlySound);
      }
      if (MolotovIgniteSoundFP.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(MolotovIgniteSoundFP);
      }
      if (StopMolotovIgniteSoundFP.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(StopMolotovIgniteSoundFP);
      }
      if (MolotovIgniteSoundTP.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(MolotovIgniteSoundTP);
      }
      if (StopMolotovIgniteSoundTP.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(StopMolotovIgniteSoundTP);
      }
      if (MolotovExplodeSound.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(MolotovExplodeSound);
      }
      if (StopMolotovExplodeSound.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(StopMolotovExplodeSound);
      }
      if (CameraShakeAssetName.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(CameraShakeAssetName);
      }
      if (AmplitudeRange != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(AmplitudeRange);
      }
      if (ExplodeRingAudioRnage != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(ExplodeRingAudioRnage);
      }
      if (MaxRingAudioTime != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(MaxRingAudioTime);
      }
      if (MinRingAudioTime != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(MinRingAudioTime);
      }
      if (PlayExplodeRingAudioName.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(PlayExplodeRingAudioName);
      }
      if (StopExplodeRingAudioName.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(StopExplodeRingAudioName);
      }
      if (ExplodeRingRTPCName.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(ExplodeRingRTPCName);
      }
      if (ThrowVoxSoundID != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(ThrowVoxSoundID);
      }
      if (ProjectileFireHitSound.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(ProjectileFireHitSound);
      }
      if (FpHitScreenEffect.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(FpHitScreenEffect);
      }
      if (parent_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(Parent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PinPullSoundFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PinPullSoundFp);
      }
      if (ExplodeCloseSound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExplodeCloseSound);
      }
      if (ExplodeFarSound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExplodeFarSound);
      }
      if (BounceSoundFp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BounceSoundFp);
      }
      if (FlashBangRingSound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FlashBangRingSound);
      }
      if (StopFlashBangRingSound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StopFlashBangRingSound);
      }
      if (IsGrenadeBottle != false) {
        size += 1 + 1;
      }
      if (SpreadFireSound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpreadFireSound);
      }
      if (StopSpreadFireSound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StopSpreadFireSound);
      }
      if (FlySound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FlySound);
      }
      if (StopFlySound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StopFlySound);
      }
      if (MolotovIgniteSoundFP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MolotovIgniteSoundFP);
      }
      if (StopMolotovIgniteSoundFP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StopMolotovIgniteSoundFP);
      }
      if (MolotovIgniteSoundTP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MolotovIgniteSoundTP);
      }
      if (StopMolotovIgniteSoundTP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StopMolotovIgniteSoundTP);
      }
      if (MolotovExplodeSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MolotovExplodeSound);
      }
      if (StopMolotovExplodeSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StopMolotovExplodeSound);
      }
      if (CameraShakeAssetName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CameraShakeAssetName);
      }
      if (AmplitudeRange != 0F) {
        size += 2 + 4;
      }
      if (ExplodeRingAudioRnage != 0F) {
        size += 2 + 4;
      }
      if (MaxRingAudioTime != 0F) {
        size += 2 + 4;
      }
      if (MinRingAudioTime != 0F) {
        size += 2 + 4;
      }
      if (PlayExplodeRingAudioName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PlayExplodeRingAudioName);
      }
      if (StopExplodeRingAudioName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StopExplodeRingAudioName);
      }
      if (ExplodeRingRTPCName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExplodeRingRTPCName);
      }
      if (ThrowVoxSoundID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ThrowVoxSoundID);
      }
      if (ProjectileFireHitSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ProjectileFireHitSound);
      }
      if (FpHitScreenEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FpHitScreenEffect);
      }
      if (parent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponPersistenceConfigProjectileData other) {
      if (other == null) {
        return;
      }
      if (other.PinPullSoundFp.Length != 0) {
        PinPullSoundFp = other.PinPullSoundFp;
      }
      if (other.ExplodeCloseSound.Length != 0) {
        ExplodeCloseSound = other.ExplodeCloseSound;
      }
      if (other.ExplodeFarSound.Length != 0) {
        ExplodeFarSound = other.ExplodeFarSound;
      }
      if (other.BounceSoundFp.Length != 0) {
        BounceSoundFp = other.BounceSoundFp;
      }
      if (other.FlashBangRingSound.Length != 0) {
        FlashBangRingSound = other.FlashBangRingSound;
      }
      if (other.StopFlashBangRingSound.Length != 0) {
        StopFlashBangRingSound = other.StopFlashBangRingSound;
      }
      if (other.IsGrenadeBottle != false) {
        IsGrenadeBottle = other.IsGrenadeBottle;
      }
      if (other.SpreadFireSound.Length != 0) {
        SpreadFireSound = other.SpreadFireSound;
      }
      if (other.StopSpreadFireSound.Length != 0) {
        StopSpreadFireSound = other.StopSpreadFireSound;
      }
      if (other.FlySound.Length != 0) {
        FlySound = other.FlySound;
      }
      if (other.StopFlySound.Length != 0) {
        StopFlySound = other.StopFlySound;
      }
      if (other.MolotovIgniteSoundFP.Length != 0) {
        MolotovIgniteSoundFP = other.MolotovIgniteSoundFP;
      }
      if (other.StopMolotovIgniteSoundFP.Length != 0) {
        StopMolotovIgniteSoundFP = other.StopMolotovIgniteSoundFP;
      }
      if (other.MolotovIgniteSoundTP.Length != 0) {
        MolotovIgniteSoundTP = other.MolotovIgniteSoundTP;
      }
      if (other.StopMolotovIgniteSoundTP.Length != 0) {
        StopMolotovIgniteSoundTP = other.StopMolotovIgniteSoundTP;
      }
      if (other.MolotovExplodeSound.Length != 0) {
        MolotovExplodeSound = other.MolotovExplodeSound;
      }
      if (other.StopMolotovExplodeSound.Length != 0) {
        StopMolotovExplodeSound = other.StopMolotovExplodeSound;
      }
      if (other.CameraShakeAssetName.Length != 0) {
        CameraShakeAssetName = other.CameraShakeAssetName;
      }
      if (other.AmplitudeRange != 0F) {
        AmplitudeRange = other.AmplitudeRange;
      }
      if (other.ExplodeRingAudioRnage != 0F) {
        ExplodeRingAudioRnage = other.ExplodeRingAudioRnage;
      }
      if (other.MaxRingAudioTime != 0F) {
        MaxRingAudioTime = other.MaxRingAudioTime;
      }
      if (other.MinRingAudioTime != 0F) {
        MinRingAudioTime = other.MinRingAudioTime;
      }
      if (other.PlayExplodeRingAudioName.Length != 0) {
        PlayExplodeRingAudioName = other.PlayExplodeRingAudioName;
      }
      if (other.StopExplodeRingAudioName.Length != 0) {
        StopExplodeRingAudioName = other.StopExplodeRingAudioName;
      }
      if (other.ExplodeRingRTPCName.Length != 0) {
        ExplodeRingRTPCName = other.ExplodeRingRTPCName;
      }
      if (other.ThrowVoxSoundID != 0) {
        ThrowVoxSoundID = other.ThrowVoxSoundID;
      }
      if (other.ProjectileFireHitSound.Length != 0) {
        ProjectileFireHitSound = other.ProjectileFireHitSound;
      }
      if (other.FpHitScreenEffect.Length != 0) {
        FpHitScreenEffect = other.FpHitScreenEffect;
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::D11.Pjson.WeaponPersistenceConfigComponentData();
        }
        Parent.MergeFrom(other.Parent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PinPullSoundFp = input.ReadString();
            break;
          }
          case 18: {
            ExplodeCloseSound = input.ReadString();
            break;
          }
          case 26: {
            ExplodeFarSound = input.ReadString();
            break;
          }
          case 34: {
            BounceSoundFp = input.ReadString();
            break;
          }
          case 42: {
            FlashBangRingSound = input.ReadString();
            break;
          }
          case 50: {
            StopFlashBangRingSound = input.ReadString();
            break;
          }
          case 56: {
            IsGrenadeBottle = input.ReadBool();
            break;
          }
          case 66: {
            SpreadFireSound = input.ReadString();
            break;
          }
          case 74: {
            StopSpreadFireSound = input.ReadString();
            break;
          }
          case 82: {
            FlySound = input.ReadString();
            break;
          }
          case 90: {
            StopFlySound = input.ReadString();
            break;
          }
          case 98: {
            MolotovIgniteSoundFP = input.ReadString();
            break;
          }
          case 106: {
            StopMolotovIgniteSoundFP = input.ReadString();
            break;
          }
          case 114: {
            MolotovIgniteSoundTP = input.ReadString();
            break;
          }
          case 122: {
            StopMolotovIgniteSoundTP = input.ReadString();
            break;
          }
          case 130: {
            MolotovExplodeSound = input.ReadString();
            break;
          }
          case 138: {
            StopMolotovExplodeSound = input.ReadString();
            break;
          }
          case 146: {
            CameraShakeAssetName = input.ReadString();
            break;
          }
          case 157: {
            AmplitudeRange = input.ReadFloat();
            break;
          }
          case 165: {
            ExplodeRingAudioRnage = input.ReadFloat();
            break;
          }
          case 173: {
            MaxRingAudioTime = input.ReadFloat();
            break;
          }
          case 181: {
            MinRingAudioTime = input.ReadFloat();
            break;
          }
          case 186: {
            PlayExplodeRingAudioName = input.ReadString();
            break;
          }
          case 194: {
            StopExplodeRingAudioName = input.ReadString();
            break;
          }
          case 202: {
            ExplodeRingRTPCName = input.ReadString();
            break;
          }
          case 208: {
            ThrowVoxSoundID = input.ReadUInt32();
            break;
          }
          case 218: {
            ProjectileFireHitSound = input.ReadString();
            break;
          }
          case 226: {
            FpHitScreenEffect = input.ReadString();
            break;
          }
          case 234: {
            if (parent_ == null) {
              Parent = new global::D11.Pjson.WeaponPersistenceConfigComponentData();
            }
            input.ReadMessage(Parent);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
