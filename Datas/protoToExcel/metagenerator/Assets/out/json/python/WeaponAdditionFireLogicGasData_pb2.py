# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: WeaponAdditionFireLogicGasData.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='WeaponAdditionFireLogicGasData.proto',
  package='D11.Pjson',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n$WeaponAdditionFireLogicGasData.proto\x12\tD11.Pjson\"\xa8\x01\n\x1eWeaponAdditionFireLogicGasData\x12\x17\n\x0fGasDeceleration\x18\x01 \x01(\x02\x12\x18\n\x10GasLogicLifeTime\x18\x02 \x01(\x02\x12\x19\n\x11GasDamageTickTime\x18\x03 \x01(\x02\x12\x1e\n\x16GasFixDamagePerSeconds\x18\x04 \x01(\x02\x12\x18\n\x10GasSoundTickTime\x18\x05 \x01(\x02\x62\x06proto3')
)




_WEAPONADDITIONFIRELOGICGASDATA = _descriptor.Descriptor(
  name='WeaponAdditionFireLogicGasData',
  full_name='D11.Pjson.WeaponAdditionFireLogicGasData',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='GasDeceleration', full_name='D11.Pjson.WeaponAdditionFireLogicGasData.GasDeceleration', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='GasLogicLifeTime', full_name='D11.Pjson.WeaponAdditionFireLogicGasData.GasLogicLifeTime', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='GasDamageTickTime', full_name='D11.Pjson.WeaponAdditionFireLogicGasData.GasDamageTickTime', index=2,
      number=3, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='GasFixDamagePerSeconds', full_name='D11.Pjson.WeaponAdditionFireLogicGasData.GasFixDamagePerSeconds', index=3,
      number=4, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='GasSoundTickTime', full_name='D11.Pjson.WeaponAdditionFireLogicGasData.GasSoundTickTime', index=4,
      number=5, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=52,
  serialized_end=220,
)

DESCRIPTOR.message_types_by_name['WeaponAdditionFireLogicGasData'] = _WEAPONADDITIONFIRELOGICGASDATA
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

WeaponAdditionFireLogicGasData = _reflection.GeneratedProtocolMessageType('WeaponAdditionFireLogicGasData', (_message.Message,), {
  'DESCRIPTOR' : _WEAPONADDITIONFIRELOGICGASDATA,
  '__module__' : 'WeaponAdditionFireLogicGasData_pb2'
  # @@protoc_insertion_point(class_scope:D11.Pjson.WeaponAdditionFireLogicGasData)
  })
_sym_db.RegisterMessage(WeaponAdditionFireLogicGasData)


# @@protoc_insertion_point(module_scope)
